import { concat, from, identity, noop, Observable, of, Subject, } from "rxjs";
import { expand, ignoreElements, mergeMap, tap } from "rxjs/operators";
import { OperatorSubscriber } from "../OperatorSubscriber";
import { NotificationQueue } from "./NotificationQueue";
export function traverse({ concurrency = 1, factory, operator = identity, notifier, }) {
    return new Observable((subscriber) => {
        let queue;
        let queueOperator;
        if (notifier) {
            queue = new NotificationQueue(notifier);
            queueOperator = identity;
        }
        else {
            const subject = new Subject();
            queue = new NotificationQueue(subject);
            queueOperator = (markers) => {
                subject.next();
                return markers;
            };
        }
        const destination = new Subject();
        destination.subscribe(subscriber);
        subscriber.add(queue.connect());
        of(undefined)
            .pipe(expand((marker) => queue.pipe(mergeMap((index) => factory(marker, index).pipe(mergeMap(({ markers, values }) => concat(from(values).pipe(operator, tap((value) => destination.next(value)), ignoreElements()), from(markers))))), queueOperator), concurrency))
            .subscribe(new OperatorSubscriber(subscriber, {
            complete: () => destination.complete(),
            error: (error) => destination.error(error),
            next: noop,
        }));
    });
}
//# sourceMappingURL=traverse.js.map