import { concat, merge, Observable, zip } from "rxjs";
import { distinctUntilChanged, map, mapTo, publish, scan, } from "rxjs/operators";
export function zipPadded(sources, padValue) {
    return new Observable((observer) => {
        const publishedSources = sources.map((source) => source.pipe(publish()));
        const indices = merge(...publishedSources.map((source) => source.pipe(map((unused, index) => index)))).pipe(scan((max, index) => Math.max(max, index), 0), distinctUntilChanged(), publish());
        const subscription = zip(...publishedSources.map((source) => concat(source, indices.pipe(mapTo(padValue))))).subscribe(observer);
        subscription.add(indices.connect());
        publishedSources.forEach((source) => subscription.add(source.connect()));
        return subscription;
    });
}
//# sourceMappingURL=zipPadded.js.map