import { from, Observable, Subscription, } from "rxjs";
import { publish, startWith, switchMap, withLatestFrom } from "rxjs/operators";
export function withLatestFromWhen(...args) {
    const flushSelector = args.pop();
    const observables = args;
    return (source) => new Observable((subscriber) => {
        const publishedSource = publish()(source);
        const publishedObservables = observables.map((o) => from(o).pipe(publish()));
        const subscription = new Subscription();
        subscription.add(flushSelector()
            .pipe(startWith(undefined), switchMap(() => publishedSource.pipe(withLatestFrom(...publishedObservables))))
            .subscribe(subscriber));
        publishedObservables.forEach((p) => subscription.add(p.connect()));
        subscription.add(publishedSource.connect());
        return subscription;
    });
}
//# sourceMappingURL=withLatestFromWhen.js.map