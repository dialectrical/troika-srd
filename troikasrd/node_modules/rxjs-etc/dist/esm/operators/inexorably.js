import { Notification, Subscriber, Subscription, } from "rxjs";
export function inexorably(callback) {
    return (source) => source.lift(new InexorablyOperator(callback));
}
export const finalize = inexorably;
class InexorablyOperator {
    constructor(callback) {
        this.callback = callback;
    }
    call(subscriber, source) {
        return source.subscribe(new InexorablySubscriber(subscriber, this.callback));
    }
}
class InexorablySubscriber extends Subscriber {
    constructor(destination, callback) {
        super(destination);
        this.add(new Subscription(() => callback(this.notification)));
    }
    complete() {
        this.notification = new Notification("C");
        super.complete();
    }
    error(error) {
        this.notification = new Notification("E", undefined, error);
        super.error(error);
    }
}
//# sourceMappingURL=inexorably.js.map