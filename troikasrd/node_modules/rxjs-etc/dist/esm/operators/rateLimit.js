import { asapScheduler, of, } from "rxjs";
import { concatMap, delay, map, scan } from "rxjs/operators";
export function rateLimit(period, ...args) {
    let count = 1;
    let scheduler = asapScheduler;
    if (args.length === 1) {
        if (typeof args[0] === "number") {
            count = args[0];
        }
        else {
            scheduler = args[0];
        }
    }
    else if (args.length === 2) {
        count = args[0];
        scheduler = args[1];
    }
    const definedCount = count || 1;
    return (source) => source.pipe(scan((emissions, value) => {
        const now = scheduler.now();
        const since = now - period;
        emissions = emissions.filter((emission) => emission.until > since);
        if (emissions.length >= definedCount) {
            const leastRecentEmission = emissions[0];
            const mostRecentEmission = emissions[emissions.length - 1];
            const until = leastRecentEmission.until +
                period * Math.floor(emissions.length / definedCount);
            emissions.push({
                delay: mostRecentEmission.until < now
                    ? until - now
                    : until - mostRecentEmission.until,
                until,
                value,
            });
        }
        else {
            emissions.push({
                delay: 0,
                until: now,
                value,
            });
        }
        return emissions;
    }, []), map((emissions) => emissions[emissions.length - 1]), concatMap((emission) => {
        const observable = of(emission.value);
        return emission.delay
            ? observable.pipe(delay(emission.delay, scheduler))
            : observable;
    }));
}
//# sourceMappingURL=rateLimit.js.map