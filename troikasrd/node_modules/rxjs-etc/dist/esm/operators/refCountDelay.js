import { asapScheduler, NEVER, Subject, timer, using, } from "rxjs";
import { scan, switchMap, tap } from "rxjs/operators";
export function refCountDelay(duration, scheduler = asapScheduler) {
    return (source) => {
        const connectable = source;
        let connectableSubscription = null;
        let connectorSubscription = null;
        const notifier = new Subject();
        const connector = notifier.pipe(scan((count, step) => count + step, 0), switchMap((count) => {
            if (count === 0) {
                return timer(duration, scheduler).pipe(tap(() => {
                    if (connectableSubscription) {
                        connectableSubscription.unsubscribe();
                        connectableSubscription = null;
                    }
                    if (connectorSubscription) {
                        connectorSubscription.unsubscribe();
                        connectorSubscription = null;
                    }
                }));
            }
            if (!connectableSubscription && count > 0) {
                return timer(0, scheduler).pipe(tap(() => {
                    if (!connectableSubscription) {
                        connectableSubscription = connectable.connect();
                    }
                }));
            }
            return NEVER;
        }));
        return using(() => {
            if (!connectorSubscription) {
                connectorSubscription = connector.subscribe();
            }
            notifier.next(1);
            return { unsubscribe: () => notifier.next(-1) };
        }, () => source);
    };
}
export const refCountAuditTime = refCountDelay;
//# sourceMappingURL=refCountDelay.js.map