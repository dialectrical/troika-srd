import { Observable, ObservableInput, OperatorFunction } from "rxjs";
export declare function withLatestFromWhen<T, R>(flushSelector: () => Observable<any>): OperatorFunction<T, R>;
export declare function withLatestFromWhen<T, T2>(o2: ObservableInput<T2>, flushSelector: () => Observable<any>): OperatorFunction<T, [T, T2]>;
export declare function withLatestFromWhen<T, T2, T3>(o2: ObservableInput<T2>, o3: ObservableInput<T3>, flushSelector: () => Observable<any>): OperatorFunction<T, [T, T2, T3]>;
export declare function withLatestFromWhen<T, T2, T3, T4>(o2: ObservableInput<T2>, o3: ObservableInput<T3>, o4: ObservableInput<T4>, flushSelector: () => Observable<any>): OperatorFunction<T, [T, T2, T3, T4]>;
export declare function withLatestFromWhen<T, T2, T3, T4, T5>(o2: ObservableInput<T2>, o3: ObservableInput<T3>, o4: ObservableInput<T4>, o5: ObservableInput<T5>, flushSelector: () => Observable<any>): OperatorFunction<T, [T, T2, T3, T4, T5]>;
export declare function withLatestFromWhen<T, T2, T3, T4, T5, T6>(o2: ObservableInput<T2>, o3: ObservableInput<T3>, o4: ObservableInput<T4>, o5: ObservableInput<T5>, o6: ObservableInput<T6>, flushSelector: () => Observable<any>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;
export declare function withLatestFromWhen<T, R>(array: ObservableInput<any>[], flushSelector: () => Observable<any>): OperatorFunction<T, R>;
export declare function withLatestFromWhen<T, R>(...observables: (ObservableInput<any> | (() => Observable<any>))[]): OperatorFunction<T, R>;
