import { from, Subscriber, Subscription, } from "rxjs";
import { finalize } from "rxjs/operators";
export function deferFinalize(callback) {
    return (source) => source.lift(new DeferFinalizeOperator(callback));
}
class DeferFinalizeOperator {
    constructor(callback) {
        this.callback = callback;
    }
    call(subscriber, source) {
        return source.subscribe(new DeferFinalizeSubscriber(subscriber, this.callback));
    }
}
class DeferFinalizeSubscriber extends Subscriber {
    constructor(destination, callback) {
        super(destination);
        this.callback = callback;
        this.kind = "U";
        this.subscription = undefined;
    }
    complete() {
        this.kind = "C";
        this.defer(() => super.complete());
    }
    error(error) {
        this.kind = "E";
        this.defer(() => super.error(error));
    }
    unsubscribe() {
        this.defer(() => super.unsubscribe());
    }
    defer(func) {
        if (this.subscription) {
            this.subscription.add(func);
            return;
        }
        const subscription = new Subscription();
        this.subscription = subscription;
        subscription.add(func);
        const result = this.callback(this.kind);
        from(result)
            .pipe(finalize(() => subscription.unsubscribe()))
            .subscribe();
    }
}
//# sourceMappingURL=deferFinalize.js.map