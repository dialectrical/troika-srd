import { merge, Observable, Subscription, timer, } from "rxjs";
import { debounce, mapTo, publish, startWith, switchMap } from "rxjs/operators";
export function debounceTimeWithinReason(debounceDuration, reasonableDuration, scheduler) {
    return (source) => source.pipe(publish((sharedSource) => new Observable((observer) => {
        let reasonableTimer;
        const debounced = sharedSource.pipe(debounce(() => merge(timer(debounceDuration, scheduler), reasonableTimer)));
        reasonableTimer = debounced.pipe(mapTo(undefined), startWith(undefined), switchMap(() => timer(reasonableDuration, scheduler)), publish());
        const subscription = new Subscription();
        subscription.add(reasonableTimer.connect());
        subscription.add(debounced.subscribe(observer));
        return subscription;
    })));
}
//# sourceMappingURL=debounceTimeWithinReason.js.map