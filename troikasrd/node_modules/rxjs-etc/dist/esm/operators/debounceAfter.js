import { concat, of, } from "rxjs";
import { concatMap, delay, distinctUntilChanged, filter, publish, startWith, switchMap, takeLast, takeUntil, } from "rxjs/operators";
export function debounceAfter(notifier, duration, scheduler) {
    return (source) => source.pipe(publish((sharedSource) => notifier.pipe(switchMap(() => concat(of(true), of(false).pipe(delay(duration, scheduler)))), startWith(false), distinctUntilChanged(), publish((sharedSignal) => sharedSignal.pipe(concatMap((signalled) => signalled
        ? sharedSource.pipe(takeUntil(sharedSignal.pipe(filter((signalled) => !signalled))), takeLast(1))
        : sharedSource.pipe(takeUntil(sharedSignal.pipe(filter((signalled) => signalled))))))))));
}
//# sourceMappingURL=debounceAfter.js.map