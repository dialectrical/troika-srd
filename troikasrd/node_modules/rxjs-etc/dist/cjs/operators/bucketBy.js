"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bucketBy = void 0;
const rxjs_1 = require("rxjs");
function bucketBy(count, hashSelector, subjectSelector = () => new rxjs_1.Subject()) {
    return (source) => source.lift(new BucketByOperator(count, hashSelector, subjectSelector));
}
exports.bucketBy = bucketBy;
class BucketByOperator {
    constructor(count, hashSelector, subjectSelector) {
        this.count = count;
        this.hashSelector = hashSelector;
        this.subjectSelector = subjectSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new BucketBySubscriber(subscriber, this.count, this.hashSelector, this.subjectSelector));
    }
}
class BucketBySubscriber extends rxjs_1.Subscriber {
    constructor(destination, count, hashSelector, subjectSelector) {
        super(destination);
        this.count = count;
        this.hashSelector = hashSelector;
        this.subjectSelector = subjectSelector;
        this.index = 0;
        const buckets = (this.buckets = new Array(count));
        for (let i = 0; i < count; ++i) {
            buckets[i] = subjectSelector();
        }
        destination.next(buckets.map((subject) => subject.asObservable()));
    }
    _next(value) {
        const { buckets, closed, count, hashSelector } = this;
        if (closed) {
            return;
        }
        let index;
        try {
            const hash = hashSelector(value, this.index++);
            index = Math.abs(Math.floor(hash)) % count;
        }
        catch (error) {
            this.error(error);
            return;
        }
        buckets[index].next(value);
    }
    _error(error) {
        const { buckets, closed, destination } = this;
        if (closed) {
            return;
        }
        buckets.forEach((bucket) => bucket.error(error));
        destination.error(error);
    }
    _complete() {
        const { buckets, closed, destination } = this;
        if (closed) {
            return;
        }
        buckets.forEach((bucket) => bucket.complete());
        destination.complete();
    }
}
//# sourceMappingURL=bucketBy.js.map