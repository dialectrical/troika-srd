"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatMapEager = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function concatMapEager(project, concurrency) {
    return (source) => rxjs_1.defer(() => {
        let activeIndex = 0;
        const innersByIndex = new Map();
        function flush() {
            const values = [];
            let activeInner = innersByIndex.get(activeIndex);
            while (activeInner) {
                values.push(...activeInner.values);
                activeInner.values.length = 0;
                if (activeInner.complete) {
                    innersByIndex.delete(activeIndex);
                    activeInner = innersByIndex.get(++activeIndex);
                }
                else {
                    break;
                }
            }
            return values;
        }
        return source.pipe(operators_1.mergeMap((value, index) => rxjs_1.from(project(value, index)).pipe(operators_1.materialize(), operators_1.map((notification) => ({
            index,
            notification,
        }))), concurrency), operators_1.mergeMap(({ index, notification }) => {
            let inner = innersByIndex.get(index);
            if (!inner) {
                inner = { complete: false, index, values: [] };
                innersByIndex.set(index, inner);
            }
            switch (notification.kind) {
                case "N":
                    inner.values.push(notification.value);
                    break;
                case "C":
                    inner.complete = true;
                    break;
                case "E":
                    return notification.toObservable();
                default:
                    break;
            }
            if (inner.index !== activeIndex) {
                return rxjs_1.EMPTY;
            }
            return flush();
        }));
    });
}
exports.concatMapEager = concatMapEager;
//# sourceMappingURL=concatMapEager.js.map