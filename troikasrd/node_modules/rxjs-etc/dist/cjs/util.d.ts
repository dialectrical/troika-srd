import { Observable, OperatorFunction, SchedulerLike } from "rxjs";
export declare type ObservableValue<T> = T extends Observable<infer U> ? U : never;
export declare type ObservableValues<T> = {
    [K in keyof T]: ObservableValue<T[K]>;
};
export declare type Op<T> = OperatorFunction<any, T>;
export declare function isNonNulled<T>(value: T): value is NonNullable<T>;
export declare const isNotNullish: typeof isNonNulled;
export declare function isNulled<T>(value: T | null | undefined): value is null | undefined;
export declare const isNullish: typeof isNulled;
export declare function isObservable(value: any): value is Observable<any>;
export declare function isScheduler(value: object | null | undefined): value is SchedulerLike;
