{"version":3,"sources":["../src/addMarkers.js"],"names":["filter","require","visit","NodeMap","lineNumberify","ast","context","lineNumber","reduce","result","node","lineStart","type","value","indexOf","lineEnd","nodes","push","lines","split","i","length","lineNum","children","processed","firstChild","lastChild","unwrapLine","markerLine","tree","headMap","lineMap","tailMap","cloned","addCopy","map","ancestors","forEach","ancestor","has","set","Object","assign","get","child","leaf","some","clone","filtered","getChildren","rootNode","Math","max","merged","concat","clear","wrapBatch","marker","options","className","tagName","component","properties","line","isMarker","wrapLines","treeNodes","markers","acc","wrapped","astIndex","m","batch","addMarkers","sort","nodeA","nodeB","numbered","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,0BAAD,CAArB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,OAAD,CAAvB;;AAEA,SAASG,aAAT,CAAuBC,GAAvB,EAAuD;AAAA,MAA3BC,OAA2B,uEAAjB;AAACC,IAAAA,UAAU,EAAE;AAAb,GAAiB;AACrD,SAAOF,GAAG,CAACG,MAAJ,CACL,UAACC,MAAD,EAASC,IAAT,EAAkB;AAChB,QAAMC,SAAS,GAAGL,OAAO,CAACC,UAA1B;;AAEA,QAAIG,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxB,UAAIF,IAAI,CAACG,KAAL,CAAWC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CAAlC,EAAqC;AACnCJ,QAAAA,IAAI,CAACC,SAAL,GAAiBA,SAAjB;AACAD,QAAAA,IAAI,CAACK,OAAL,GAAeJ,SAAf;AACAF,QAAAA,MAAM,CAACO,KAAP,CAAaC,IAAb,CAAkBP,IAAlB;AACA,eAAOD,MAAP;AACD;;AAED,UAAMS,KAAK,GAAGR,IAAI,CAACG,KAAL,CAAWM,KAAX,CAAiB,IAAjB,CAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAME,OAAO,GAAGF,CAAC,KAAK,CAAN,GAAUd,OAAO,CAACC,UAAlB,GAA+B,EAAED,OAAO,CAACC,UAAzD;AACAE,QAAAA,MAAM,CAACO,KAAP,CAAaC,IAAb,CAAkB;AAChBL,UAAAA,IAAI,EAAE,MADU;AAEhBC,UAAAA,KAAK,EAAEO,CAAC,KAAKF,KAAK,CAACG,MAAN,GAAe,CAArB,GAAyBH,KAAK,CAACE,CAAD,CAA9B,aAAuCF,KAAK,CAACE,CAAD,CAA5C,OAFS;AAGhBT,UAAAA,SAAS,EAAEW,OAHK;AAIhBP,UAAAA,OAAO,EAAEO;AAJO,SAAlB;AAMD;;AAEDb,MAAAA,MAAM,CAACF,UAAP,GAAoBD,OAAO,CAACC,UAA5B;AACA,aAAOE,MAAP;AACD;;AAED,QAAIC,IAAI,CAACa,QAAT,EAAmB;AACjB,UAAMC,SAAS,GAAGpB,aAAa,CAACM,IAAI,CAACa,QAAN,EAAgBjB,OAAhB,CAA/B;AACA,UAAMmB,UAAU,GAAGD,SAAS,CAACR,KAAV,CAAgB,CAAhB,CAAnB;AACA,UAAMU,SAAS,GAAGF,SAAS,CAACR,KAAV,CAAgBQ,SAAS,CAACR,KAAV,CAAgBK,MAAhB,GAAyB,CAAzC,CAAlB;AACAX,MAAAA,IAAI,CAACC,SAAL,GAAiBc,UAAU,GAAGA,UAAU,CAACd,SAAd,GAA0BA,SAArD;AACAD,MAAAA,IAAI,CAACK,OAAL,GAAeW,SAAS,GAAGA,SAAS,CAACX,OAAb,GAAuBJ,SAA/C;AACAD,MAAAA,IAAI,CAACa,QAAL,GAAgBC,SAAS,CAACR,KAA1B;AACAP,MAAAA,MAAM,CAACF,UAAP,GAAoBiB,SAAS,CAACjB,UAA9B;AACAE,MAAAA,MAAM,CAACO,KAAP,CAAaC,IAAb,CAAkBP,IAAlB;AACA,aAAOD,MAAP;AACD;;AAEDA,IAAAA,MAAM,CAACO,KAAP,CAAaC,IAAb,CAAkBP,IAAlB;AACA,WAAOD,MAAP;AACD,GAzCI,EA0CL;AAACO,IAAAA,KAAK,EAAE,EAAR;AAAYT,IAAAA,UAAU,EAAED,OAAO,CAACC;AAAhC,GA1CK,CAAP;AA4CD;;AAED,SAASoB,UAAT,CAAoBC,UAApB,EAAgCZ,KAAhC,EAAuC;AACrC,MAAMa,IAAI,GAAG;AAACjB,IAAAA,IAAI,EAAE,MAAP;AAAeW,IAAAA,QAAQ,EAAEP;AAAzB,GAAb;AAEA,MAAMc,OAAO,GAAG,IAAI3B,OAAJ,EAAhB;AACA,MAAM4B,OAAO,GAAG,IAAI5B,OAAJ,EAAhB;AACA,MAAM6B,OAAO,GAAG,IAAI7B,OAAJ,EAAhB;AACA,MAAM8B,MAAM,GAAG,EAAf;;AAEA,WAASC,OAAT,CAAiBC,GAAjB,EAAsBzB,IAAtB,EAA4B0B,SAA5B,EAAuC;AACrCH,IAAAA,MAAM,CAAChB,IAAP,CAAYP,IAAZ;AAEA0B,IAAAA,SAAS,CAACC,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC9B,UAAI,CAACH,GAAG,CAACI,GAAJ,CAAQD,QAAR,CAAL,EAAwB;AACtBH,QAAAA,GAAG,CAACK,GAAJ,CAAQF,QAAR,EAAkBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,QAAlB,EAA4B;AAACf,UAAAA,QAAQ,EAAE;AAAX,SAA5B,CAAlB;;AAEA,YAAIe,QAAQ,KAAKT,IAAjB,EAAuB;AACrBI,UAAAA,MAAM,CAAChB,IAAP,CAAYqB,QAAZ;AACD;AACF;AACF,KARD;AAUA,QAAIlB,CAAC,GAAGgB,SAAS,CAACf,MAAlB;;AACA,WAAOD,CAAC,EAAR,EAAY;AACV,UAAMkB,QAAQ,GAAGH,GAAG,CAACQ,GAAJ,CAAQP,SAAS,CAAChB,CAAD,CAAjB,CAAjB;AACA,UAAMwB,KAAK,GAAGR,SAAS,CAAChB,CAAC,GAAG,CAAL,CAAvB;AACA,UAAMyB,IAAI,GAAGV,GAAG,CAACQ,GAAJ,CAAQC,KAAR,KAAkBlC,IAA/B;;AACA,UAAI4B,QAAQ,CAACf,QAAT,CAAkBT,OAAlB,CAA0B+B,IAA1B,MAAoC,CAAC,CAAzC,EAA4C;AAC1CP,QAAAA,QAAQ,CAACf,QAAT,CAAkBN,IAAlB,CAAuB4B,IAAvB;AACD;AACF;AACF;;AAED3C,EAAAA,KAAK,CAAC2B,IAAD,EAAO,UAACnB,IAAD,EAAO0B,SAAP,EAAqB;AAC/B,QAAI1B,IAAI,CAACa,QAAT,EAAmB;AACjB;AACD,KAH8B,CAK/B;;;AACA,QAAIb,IAAI,CAACC,SAAL,GAAiBiB,UAArB,EAAiC;AAC/BM,MAAAA,OAAO,CAACJ,OAAD,EAAUpB,IAAV,EAAgB0B,SAAhB,CAAP;AACA;AACD,KAT8B,CAW/B;;;AACA,QAAI1B,IAAI,CAACC,SAAL,KAAmBiB,UAAvB,EAAmC;AACjCM,MAAAA,OAAO,CAACH,OAAD,EAAUrB,IAAV,EAAgB0B,SAAhB,CAAP;AACA;AACD,KAf8B,CAiB/B;AACA;;;AACA,QAAI1B,IAAI,CAACK,OAAL,GAAea,UAAf,IAA6BK,MAAM,CAACa,IAAP,CAAY,UAACC,KAAD;AAAA,aAAWX,SAAS,CAACtB,OAAV,CAAkBiC,KAAlB,MAA6B,CAAC,CAAzC;AAAA,KAAZ,CAAjC,EAA0F;AACxFb,MAAAA,OAAO,CAACF,OAAD,EAAUtB,IAAV,EAAgB0B,SAAhB,CAAP;AACD;AACF,GAtBI,CAAL,CAhCqC,CAwDrC;;AACA,MAAMY,QAAQ,GAAGhD,MAAM,CAAC6B,IAAD,EAAO,UAACnB,IAAD;AAAA,WAAUuB,MAAM,CAACnB,OAAP,CAAeJ,IAAf,MAAyB,CAAC,CAApC;AAAA,GAAP,CAAvB;;AACA,MAAMuC,WAAW,GAAG,SAAdA,WAAc,CAACd,GAAD,EAAS;AAC3B,QAAMe,QAAQ,GAAGf,GAAG,CAACQ,GAAJ,CAAQd,IAAR,CAAjB;;AACA,QAAI,CAACqB,QAAL,EAAe;AACb,aAAO,EAAP;AACD;;AAEDhD,IAAAA,KAAK,CAACgD,QAAD,EAAW,UAACL,IAAD,EAAOT,SAAP,EAAqB;AACnC,UAAIS,IAAI,CAACtB,QAAT,EAAmB;AACjBsB,QAAAA,IAAI,CAAClC,SAAL,GAAiB,CAAjB;AACAkC,QAAAA,IAAI,CAAC9B,OAAL,GAAe,CAAf;AACA;AACD;;AAEDqB,MAAAA,SAAS,CAACC,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC9BA,QAAAA,QAAQ,CAAC3B,SAAT,GAAqBwC,IAAI,CAACC,GAAL,CAASd,QAAQ,CAAC3B,SAAlB,EAA6BkC,IAAI,CAAClC,SAAlC,CAArB;AACA2B,QAAAA,QAAQ,CAACvB,OAAT,GAAmBoC,IAAI,CAACC,GAAL,CAASd,QAAQ,CAACvB,OAAlB,EAA2B8B,IAAI,CAAC9B,OAAhC,CAAnB;AACD,OAHD;AAID,KAXI,CAAL;AAaA,WAAOmC,QAAQ,CAAC3B,QAAhB;AACD,GApBD;;AAsBA,MAAM8B,MAAM,GAAG,GAAGC,MAAH,CACbL,WAAW,CAACnB,OAAD,CADE,EAEbmB,WAAW,CAAClB,OAAD,CAFE,EAGbkB,WAAW,CAACjB,OAAD,CAHE,EAIbgB,QAAQ,GAAGA,QAAQ,CAACzB,QAAZ,GAAuB,EAJlB,CAAf;AAOAO,EAAAA,OAAO,CAACyB,KAAR;AACAxB,EAAAA,OAAO,CAACwB,KAAR;AACAvB,EAAAA,OAAO,CAACuB,KAAR;AAEA,SAAOF,MAAP;AACD;;AAED,SAASG,SAAT,CAAmBjC,QAAnB,EAA6BkC,MAA7B,EAAqCC,OAArC,EAA8C;AAC5C,MAAMC,SAAS,GAAGF,MAAM,CAACE,SAAP,IAAoB,kBAAtC;AACA,SAAO;AACL/C,IAAAA,IAAI,EAAE,SADD;AAELgD,IAAAA,OAAO,EAAEH,MAAM,CAACI,SAAP,IAAoB,KAFxB;AAGLC,IAAAA,UAAU,EAAEL,MAAM,CAACI,SAAP,GAAmBpB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBgB,OAAlB,EAA2B;AAACC,MAAAA,SAAS,EAATA;AAAD,KAA3B,CAAnB,GAA6D;AAACA,MAAAA,SAAS,EAATA;AAAD,KAHpE;AAILpC,IAAAA,QAAQ,EAARA,QAJK;AAKLZ,IAAAA,SAAS,EAAE8C,MAAM,CAACM,IALb;AAMLhD,IAAAA,OAAO,EAAEQ,QAAQ,CAACA,QAAQ,CAACF,MAAT,GAAkB,CAAnB,CAAR,CAA8BN,OANlC;AAOLiD,IAAAA,QAAQ,EAAE;AAPL,GAAP;AASD;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,OAA9B,EAAuCT,OAAvC,EAAgD;AAC9C,MAAIS,OAAO,CAAC9C,MAAR,KAAmB,CAAnB,IAAwB6C,SAAS,CAAC7C,MAAV,KAAqB,CAAjD,EAAoD;AAClD,WAAO6C,SAAP;AACD;;AAED,MAAM7D,GAAG,GAAG8D,OAAO,CAAC3D,MAAR,CAAe,UAAC4D,GAAD,EAAMX,MAAN;AAAA,WAAiB9B,UAAU,CAAC8B,MAAM,CAACM,IAAR,EAAcK,GAAd,CAA3B;AAAA,GAAf,EAA8DF,SAA9D,CAAZ,CAL8C,CAO9C;;AACA,MAAMG,OAAO,GAAG,EAAhB,CAR8C,CAU9C;;AACA,MAAIC,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAAC9C,MAA5B,EAAoCkD,CAAC,EAArC,EAAyC;AACvC,QAAMd,MAAM,GAAGU,OAAO,CAACI,CAAD,CAAtB,CADuC,CAGvC;;AACA,SAAK,IAAI7D,IAAI,GAAGL,GAAG,CAACiE,QAAD,CAAnB,EAA+B5D,IAAI,IAAIA,IAAI,CAACK,OAAL,GAAe0C,MAAM,CAACM,IAA7D,EAAmErD,IAAI,GAAGL,GAAG,CAAC,EAAEiE,QAAH,CAA7E,EAA2F;AACzFD,MAAAA,OAAO,CAACpD,IAAR,CAAaP,IAAb;AACD,KANsC,CAQvC;;;AACA,QAAM8D,KAAK,GAAG,EAAd;;AACA,SAAK,IAAI9D,KAAI,GAAGL,GAAG,CAACiE,QAAD,CAAnB,EAA+B5D,KAAI,IAAIA,KAAI,CAACK,OAAL,KAAiB0C,MAAM,CAACM,IAA/D,EAAqErD,KAAI,GAAGL,GAAG,CAAC,EAAEiE,QAAH,CAA/E,EAA6F;AAC3FE,MAAAA,KAAK,CAACvD,IAAN,CAAWP,KAAX;AACD,KAZsC,CAcvC;;;AACA,QAAI8D,KAAK,CAACnD,MAAN,GAAe,CAAnB,EAAsB;AACpBgD,MAAAA,OAAO,CAACpD,IAAR,CAAauC,SAAS,CAACgB,KAAD,EAAQf,MAAR,EAAgBC,OAAhB,CAAtB;AACD;AACF,GA9B6C,CAgC9C;;;AACA,SAAOY,QAAQ,GAAGjE,GAAG,CAACgB,MAAtB,EAA8B;AAC5BgD,IAAAA,OAAO,CAACpD,IAAR,CAAaZ,GAAG,CAACiE,QAAQ,EAAT,CAAhB;AACD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASI,UAAT,CAAoBpE,GAApB,EAAyBqD,OAAzB,EAAkC;AAChC,MAAMS,OAAO,GAAGT,OAAO,CAACS,OAAR,CACbhC,GADa,CACT,UAACsB,MAAD;AAAA,WAAaA,MAAM,CAACM,IAAP,GAAcN,MAAd,GAAuB;AAACM,MAAAA,IAAI,EAAEN;AAAP,KAApC;AAAA,GADS,EAEbiB,IAFa,CAER,UAACC,KAAD,EAAQC,KAAR;AAAA,WAAkBD,KAAK,CAACZ,IAAN,GAAaa,KAAK,CAACb,IAArC;AAAA,GAFQ,CAAhB;AAIA,MAAMc,QAAQ,GAAGzE,aAAa,CAACC,GAAD,CAAb,CAAmBW,KAApC;AACA,SAAOiD,SAAS,CAACY,QAAD,EAAWV,OAAX,EAAoBT,OAApB,CAAhB;AACD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBN,UAAjB","sourcesContent":["const filter = require('unist-util-filter')\nconst visit = require('unist-util-visit-parents')\nconst NodeMap = require('./map')\n\nfunction lineNumberify(ast, context = {lineNumber: 1}) {\n  return ast.reduce(\n    (result, node) => {\n      const lineStart = context.lineNumber\n\n      if (node.type === 'text') {\n        if (node.value.indexOf('\\n') === -1) {\n          node.lineStart = lineStart\n          node.lineEnd = lineStart\n          result.nodes.push(node)\n          return result\n        }\n\n        const lines = node.value.split('\\n')\n        for (let i = 0; i < lines.length; i++) {\n          const lineNum = i === 0 ? context.lineNumber : ++context.lineNumber\n          result.nodes.push({\n            type: 'text',\n            value: i === lines.length - 1 ? lines[i] : `${lines[i]}\\n`,\n            lineStart: lineNum,\n            lineEnd: lineNum,\n          })\n        }\n\n        result.lineNumber = context.lineNumber\n        return result\n      }\n\n      if (node.children) {\n        const processed = lineNumberify(node.children, context)\n        const firstChild = processed.nodes[0]\n        const lastChild = processed.nodes[processed.nodes.length - 1]\n        node.lineStart = firstChild ? firstChild.lineStart : lineStart\n        node.lineEnd = lastChild ? lastChild.lineEnd : lineStart\n        node.children = processed.nodes\n        result.lineNumber = processed.lineNumber\n        result.nodes.push(node)\n        return result\n      }\n\n      result.nodes.push(node)\n      return result\n    },\n    {nodes: [], lineNumber: context.lineNumber}\n  )\n}\n\nfunction unwrapLine(markerLine, nodes) {\n  const tree = {type: 'root', children: nodes}\n\n  const headMap = new NodeMap()\n  const lineMap = new NodeMap()\n  const tailMap = new NodeMap()\n  const cloned = []\n\n  function addCopy(map, node, ancestors) {\n    cloned.push(node)\n\n    ancestors.forEach((ancestor) => {\n      if (!map.has(ancestor)) {\n        map.set(ancestor, Object.assign({}, ancestor, {children: []}))\n\n        if (ancestor !== tree) {\n          cloned.push(ancestor)\n        }\n      }\n    })\n\n    let i = ancestors.length\n    while (i--) {\n      const ancestor = map.get(ancestors[i])\n      const child = ancestors[i + 1]\n      const leaf = map.get(child) || node\n      if (ancestor.children.indexOf(leaf) === -1) {\n        ancestor.children.push(leaf)\n      }\n    }\n  }\n\n  visit(tree, (node, ancestors) => {\n    if (node.children) {\n      return\n    }\n\n    // These nodes are on previous lines, but nested within the same structure\n    if (node.lineStart < markerLine) {\n      addCopy(headMap, node, ancestors)\n      return\n    }\n\n    // These nodes are on the target line\n    if (node.lineStart === markerLine) {\n      addCopy(lineMap, node, ancestors)\n      return\n    }\n\n    // If we have shared ancestors with some of the cloned elements,\n    // create another tree of the remaining nodes\n    if (node.lineEnd > markerLine && cloned.some((clone) => ancestors.indexOf(clone) !== -1)) {\n      addCopy(tailMap, node, ancestors)\n    }\n  })\n\n  // Get the remaining nodes - the ones who were not part of the same tree\n  const filtered = filter(tree, (node) => cloned.indexOf(node) === -1)\n  const getChildren = (map) => {\n    const rootNode = map.get(tree)\n    if (!rootNode) {\n      return []\n    }\n\n    visit(rootNode, (leaf, ancestors) => {\n      if (leaf.children) {\n        leaf.lineStart = 0\n        leaf.lineEnd = 0\n        return\n      }\n\n      ancestors.forEach((ancestor) => {\n        ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart)\n        ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd)\n      })\n    })\n\n    return rootNode.children\n  }\n\n  const merged = [].concat(\n    getChildren(headMap),\n    getChildren(lineMap),\n    getChildren(tailMap),\n    filtered ? filtered.children : []\n  )\n\n  headMap.clear()\n  lineMap.clear()\n  tailMap.clear()\n\n  return merged\n}\n\nfunction wrapBatch(children, marker, options) {\n  const className = marker.className || 'refractor-marker'\n  return {\n    type: 'element',\n    tagName: marker.component || 'div',\n    properties: marker.component ? Object.assign({}, options, {className}) : {className},\n    children,\n    lineStart: marker.line,\n    lineEnd: children[children.length - 1].lineEnd,\n    isMarker: true,\n  }\n}\n\nfunction wrapLines(treeNodes, markers, options) {\n  if (markers.length === 0 || treeNodes.length === 0) {\n    return treeNodes\n  }\n\n  const ast = markers.reduce((acc, marker) => unwrapLine(marker.line, acc), treeNodes)\n\n  // Container for the new AST\n  const wrapped = []\n\n  // Note: Markers are already sorted by line number (ascending)\n  let astIndex = 0\n  for (let m = 0; m < markers.length; m++) {\n    const marker = markers[m]\n\n    // Start by eating all AST nodes with line numbers up to the given marker\n    for (let node = ast[astIndex]; node && node.lineEnd < marker.line; node = ast[++astIndex]) {\n      wrapped.push(node)\n    }\n\n    // Now proceed to find all _contiguous_ nodes on the same line\n    const batch = []\n    for (let node = ast[astIndex]; node && node.lineEnd === marker.line; node = ast[++astIndex]) {\n      batch.push(node)\n    }\n\n    // Now add that batch, if we have anything\n    if (batch.length > 0) {\n      wrapped.push(wrapBatch(batch, marker, options))\n    }\n  }\n\n  // Now add the remaining AST nodes\n  while (astIndex < ast.length) {\n    wrapped.push(ast[astIndex++])\n  }\n\n  return wrapped\n}\n\nfunction addMarkers(ast, options) {\n  const markers = options.markers\n    .map((marker) => (marker.line ? marker : {line: marker}))\n    .sort((nodeA, nodeB) => nodeA.line - nodeB.line)\n\n  const numbered = lineNumberify(ast).nodes\n  return wrapLines(numbered, markers, options)\n}\n\nmodule.exports = addMarkers\n"],"file":"addMarkers.js"}