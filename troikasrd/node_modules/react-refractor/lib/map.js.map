{"version":3,"sources":["../src/map.js"],"names":["module","exports","WeakMap","HappyMap","SadMap","map","prototype","has","key","set","value","get","clear","keys","values","indexOf","index","push","undefined"],"mappings":";;AAAA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,OAAP,KAAmB,UAAnB,GAAgCC,QAAhC,GAA2CC,MAA5D,C,CAEA;;AACA,SAASD,QAAT,GAAoB;AAClB,OAAKE,GAAL,GAAW,IAAIH,OAAJ,EAAX;AACD;;AAEDC,QAAQ,CAACG,SAAT,CAAmBC,GAAnB,GAAyB,UAAUC,GAAV,EAAe;AACtC,SAAO,KAAKH,GAAL,CAASE,GAAT,CAAaC,GAAb,CAAP;AACD,CAFD;;AAIAL,QAAQ,CAACG,SAAT,CAAmBG,GAAnB,GAAyB,UAAUD,GAAV,EAAeE,KAAf,EAAsB;AAC7C,OAAKL,GAAL,CAASI,GAAT,CAAaD,GAAb,EAAkBE,KAAlB;AACA,SAAO,IAAP;AACD,CAHD;;AAKAP,QAAQ,CAACG,SAAT,CAAmBK,GAAnB,GAAyB,UAAUH,GAAV,EAAe;AACtC,SAAO,KAAKH,GAAL,CAASM,GAAT,CAAaH,GAAb,CAAP;AACD,CAFD;;AAIAL,QAAQ,CAACG,SAAT,CAAmBM,KAAnB,GAA2B,YAAY,CACrC;AACD,CAFD,C,CAIA;;;AACA,SAASR,MAAT,GAAkB;AAChB,OAAKS,IAAL,GAAY,EAAZ;AACA,OAAKC,MAAL,GAAc,EAAd;AACD;;AAEDV,MAAM,CAACE,SAAP,CAAiBC,GAAjB,GAAuB,UAAUC,GAAV,EAAe;AACpC,SAAO,KAAKK,IAAL,CAAUE,OAAV,CAAkBP,GAAlB,MAA2B,CAAC,CAAnC;AACD,CAFD;;AAIAJ,MAAM,CAACE,SAAP,CAAiBG,GAAjB,GAAuB,UAAUD,GAAV,EAAeE,KAAf,EAAsB;AAC3C,MAAMM,KAAK,GAAG,KAAKH,IAAL,CAAUE,OAAV,CAAkBP,GAAlB,CAAd;;AACA,MAAIQ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,SAAKH,IAAL,CAAUI,IAAV,CAAeT,GAAf;AACA,SAAKM,MAAL,CAAYG,IAAZ,CAAiBP,KAAjB;AACD,GAHD,MAGO;AACL,SAAKI,MAAL,CAAYE,KAAZ,IAAqBN,KAArB;AACD;;AACD,SAAO,IAAP;AACD,CATD;;AAWAN,MAAM,CAACE,SAAP,CAAiBK,GAAjB,GAAuB,UAAUH,GAAV,EAAe;AACpC,MAAMQ,KAAK,GAAG,KAAKH,IAAL,CAAUE,OAAV,CAAkBP,GAAlB,CAAd;AACA,SAAOQ,KAAK,KAAK,CAAC,CAAX,GAAeE,SAAf,GAA2B,KAAKJ,MAAL,CAAYE,KAAZ,CAAlC;AACD,CAHD;;AAKAZ,MAAM,CAACE,SAAP,CAAiBM,KAAjB,GAAyB,YAAY;AACnC,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,MAAL,GAAc,EAAd;AACD,CAHD","sourcesContent":["/**\n * Weird \"map\" polyfill, that's weak if possible\n */\nmodule.exports = typeof WeakMap === 'function' ? HappyMap : SadMap\n\n// Happy path! Fakes a `clear()` if possible (noop)\nfunction HappyMap() {\n  this.map = new WeakMap()\n}\n\nHappyMap.prototype.has = function (key) {\n  return this.map.has(key)\n}\n\nHappyMap.prototype.set = function (key, value) {\n  this.map.set(key, value)\n  return this\n}\n\nHappyMap.prototype.get = function (key) {\n  return this.map.get(key)\n}\n\nHappyMap.prototype.clear = function () {\n  // intentional noop, since we dont need to/cant clear\n}\n\n// Sad path! Use less stylish approach\nfunction SadMap() {\n  this.keys = []\n  this.values = []\n}\n\nSadMap.prototype.has = function (key) {\n  return this.keys.indexOf(key) !== -1\n}\n\nSadMap.prototype.set = function (key, value) {\n  const index = this.keys.indexOf(key)\n  if (index === -1) {\n    this.keys.push(key)\n    this.values.push(value)\n  } else {\n    this.values[index] = value\n  }\n  return this\n}\n\nSadMap.prototype.get = function (key) {\n  const index = this.keys.indexOf(key)\n  return index === -1 ? undefined : this.values[index]\n}\n\nSadMap.prototype.clear = function () {\n  this.keys = []\n  this.values = []\n}\n"],"file":"map.js"}