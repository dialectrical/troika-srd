module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=9)}([function(e,t,n){"function"==typeof Symbol&&Symbol.iterator;e.exports=n(7)()},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function r(e,t,n,r,i,s,a,u){if(o(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,i,s,a,u],p=0;c=new Error(t.replace(/%s/g,function(){return l[p++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var o=function(e){};e.exports=r},function(e,t,n){"use strict";var r=n(5),o=n(6),i=n(8);e.exports=function(){function e(e,t,n,r,s,a){a!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),u=n.n(a),c=n(3),l=(n.n(c),n(4)),p=(n.n(l),n(1)),d=n.n(p),f=n(2),h=n.n(f),v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y="data-focus-index",O=function(e){function t(){var e,r,s,a;o(this,t);for(var u=arguments.length,p=Array(u),d=0;d<u;d++)p[d]=arguments[d];return r=s=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.state={activeChildIndex:s.props.defaultActiveChildIndex,children:[]},s.handleKeyDown=function(e){switch(e.key){case"ArrowUp":s.props.mode!==t.mode.VERTICAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(-1));break;case"ArrowLeft":s.props.mode!==t.mode.HORIZONTAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(-1));break;case"ArrowDown":s.props.mode!==t.mode.VERTICAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(1));break;case"ArrowRight":s.props.mode!==t.mode.HORIZONTAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(1))}s.props.onKeyDown&&s.props.onKeyDown(e)},s.handleFocus=function(e){if(e.target.hasAttribute(y)){var t=parseInt(e.target.getAttribute(y),10),n=c.Children.toArray(s.state.children)[t];s.setState({activeChildIndex:t}),n.props.onFocus&&n.props.onFocus(e)}},s.persistWrapperElementReference=function(e){s.$wrapper=e instanceof HTMLElement?e:n.i(l.findDOMNode)(e)},a=r,i(s,a)}return s(t,e),m(t,[{key:"getFilteredChildren",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return c.Children.toArray(e.children).filter(Boolean)}},{key:"setActiveChildIndex",value:function(){if(0!==this.state.activeChildIndex){var e=c.Children.count(this.state.children);0===e?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=e&&this.setState({activeChildIndex:e-1})}}},{key:"componentWillMount",value:function(){this.setState({children:this.getFilteredChildren()})}},{key:"componentWillReceiveProps",value:function(e){if(e.children!==this.props.children)return this.setState({children:this.getFilteredChildren(e)},this.setActiveChildIndex);this.setActiveChildIndex()}},{key:"componentDidUpdate",value:function(e,t){this.state.activeChildIndex!==t.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"setFocus",value:function(e){var t=this.$wrapper.children[e];t&&t.hasAttribute("data-focus-skip")?this.moveFocus(t.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):t&&document.activeElement!==t&&t.focus()}},{key:"moveFocus",value:function(e){var t=this.state.children?c.Children.count(this.state.children):0,n=this.state.activeChildIndex+e;n>=t?n=0:n<0&&(n=t-1),this.setState({activeChildIndex:n})}},{key:"renderChildren",value:function(){var e=this;return c.Children.map(this.state.children,function(t,o){var i;return n.i(c.cloneElement)(t,(i={},r(i,y,o),r(i,"data-focus-skip",-1===parseInt(t.props.tabIndex,10)||void 0),r(i,"key",t.key||o),r(i,"tabIndex",e.state.activeChildIndex===o?0:-1),i))})}},{key:"render",value:function(){return n.i(c.createElement)(this.props.component,v({},d()(this.props,t.internalKeys),{ref:this.persistWrapperElementReference,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.renderChildren())}}]),t}(c.PureComponent);O.mode={HORIZONTAL:h()(),VERTICAL:h()(),BOTH:h()()},O.propTypes={"*":u.a.any,component:u.a.oneOfType([u.a.string,u.a.func]),defaultActiveChildIndex:u.a.number,mode:u.a.oneOf([O.mode.BOTH,O.mode.HORIZONTAL,O.mode.VERTICAL])},O.defaultProps={component:"div",defaultActiveChildIndex:0,mode:O.mode.BOTH,onKeyDown:function(){}},O.internalKeys=Object.keys(O.defaultProps),t.default=O}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,