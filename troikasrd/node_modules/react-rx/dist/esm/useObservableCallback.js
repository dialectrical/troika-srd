import { useCallback, useEffect, useRef } from 'react';
import { observableCallback } from 'observable-callback';
var EMPTY_DEPS = [];
export function useObservableCallback(fn, dependencies) {
    if (dependencies === void 0) { dependencies = EMPTY_DEPS; }
    var callbackRef = useRef();
    if (!callbackRef.current) {
        callbackRef.current = observableCallback();
    }
    var _a = callbackRef.current, calls$ = _a[0], call = _a[1];
    // eslint-disable-next-line react-hooks/exhaustive-deps
    var callback = useCallback(fn, dependencies);
    useEffect(function () {
        var subscription = calls$.pipe(callback).subscribe();
        return function () {
            subscription.unsubscribe();
        };
    }, [calls$, call, callback]);
    return call;
}
