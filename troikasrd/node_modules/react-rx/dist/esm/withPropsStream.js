var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { map } from 'rxjs/operators';
import { wrapDisplayName } from './displayName';
import { reactiveComponent } from './reactiveComponent';
/**
 * @deprecated Use reactiveComponent instead
 */
export function withPropsStream(observableOrFactory, TargetComponent) {
    var ComposedComponent = reactiveComponent(function (sourceProps$) {
        var targetProps$ = typeof observableOrFactory === 'function'
            ? observableOrFactory(sourceProps$)
            : observableOrFactory;
        return targetProps$.pipe(map(function (props) { return React.createElement(TargetComponent, __assign({}, props)); }));
    });
    ComposedComponent.displayName = wrapDisplayName(TargetComponent, 'withPropsStream');
    return ComposedComponent;
}
