import { useMemo, useRef, useState } from 'react';
import { useIsomorphicEffect } from './useIsomorphicEffect';
function getValue(value) {
    return typeof value === 'function' ? value() : value;
}
export function useObservable(observable, initialValue) {
    var subscription = useRef();
    var isInitial = useRef(true);
    var _a = useState(function () {
        var isSync = true;
        var syncVal = getValue(initialValue);
        subscription.current = observable.subscribe(function (nextVal) {
            if (isSync) {
                syncVal = nextVal;
            }
            else {
                setState(nextVal);
            }
        });
        isSync = false;
        return syncVal;
    }), value = _a[0], setState = _a[1];
    useIsomorphicEffect(function () {
        // when the observable changes after initial (possibly sync render)
        if (!isInitial.current) {
            subscription.current = observable.subscribe(function (nextVal) { return setState(nextVal); });
        }
        isInitial.current = false;
        return function () {
            if (subscription.current) {
                subscription.current.unsubscribe();
                subscription.current = undefined;
            }
        };
    }, [observable]);
    return value;
}
export function useMemoObservable(observableOrFactory, deps, initialValue) {
    return useObservable(useMemo(function () { return getValue(observableOrFactory); }, deps), initialValue);
}
