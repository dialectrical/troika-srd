import { distinctUntilChanged, map, switchMap } from 'rxjs/operators';
import { reactiveComponent } from './reactiveComponent';
function createWithObservable() {
    return reactiveComponent(function (props$) {
        return props$.pipe(distinctUntilChanged(function (props, prevProps) { return props.observable === prevProps.observable; }), switchMap(function (props) {
            return props.observable.pipe(map(function (observableValue) { return props.children(observableValue); }));
        }));
    });
}
/**
 * @deprecated Use the useObservable hook instead
 */
export var WithObservable = createWithObservable();
