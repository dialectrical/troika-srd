import { wrapDisplayName } from './displayName';
import { useAsObservable } from './useAsObservable';
import { useObservable } from './useObservable';
import { createElement, Fragment, useRef, forwardRef as reactForwardRef, } from 'react';
function fromComponent(component) {
    const wrappedComponent = (props) => {
        return createElement(Fragment, null, useObservable(useRef(component(useAsObservable(props))).current));
    };
    wrappedComponent.displayName = wrapDisplayName(component, 'reactiveComponent');
    return wrappedComponent;
}
function fromObservable(input$) {
    return function ReactiveComponent() {
        return createElement(Fragment, null, useObservable(input$));
    };
}
export function reactiveComponent(observableOrComponent) {
    return typeof observableOrComponent === 'function'
        ? fromComponent(observableOrComponent)
        : fromObservable(observableOrComponent);
}
export function forwardRef(component) {
    const wrappedComponent = reactForwardRef((props, ref) => {
        return createElement(Fragment, null, useObservable(useRef(component(useAsObservable(props), ref)).current));
    });
    wrappedComponent.displayName = wrapDisplayName(component, 'reactiveComponent');
    return wrappedComponent;
}
