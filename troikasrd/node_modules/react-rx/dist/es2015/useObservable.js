import { useMemo, useRef, useState } from 'react';
import { useIsomorphicEffect } from './useIsomorphicEffect';
function getValue(value) {
    return typeof value === 'function' ? value() : value;
}
export function useObservable(observable, initialValue) {
    const subscription = useRef();
    const isInitial = useRef(true);
    const [value, setState] = useState(() => {
        let isSync = true;
        let syncVal = getValue(initialValue);
        subscription.current = observable.subscribe(nextVal => {
            if (isSync) {
                syncVal = nextVal;
            }
            else {
                setState(nextVal);
            }
        });
        isSync = false;
        return syncVal;
    });
    useIsomorphicEffect(() => {
        // when the observable changes after initial (possibly sync render)
        if (!isInitial.current) {
            subscription.current = observable.subscribe(nextVal => setState(nextVal));
        }
        isInitial.current = false;
        return () => {
            if (subscription.current) {
                subscription.current.unsubscribe();
                subscription.current = undefined;
            }
        };
    }, [observable]);
    return value;
}
export function useMemoObservable(observableOrFactory, deps, initialValue) {
    return useObservable(useMemo(() => getValue(observableOrFactory), deps), initialValue);
}
