import * as React from 'react';
import { map } from 'rxjs/operators';
import { wrapDisplayName } from './displayName';
import { reactiveComponent } from './reactiveComponent';
/**
 * @deprecated Use reactiveComponent instead
 */
export function withPropsStream(observableOrFactory, TargetComponent) {
    const ComposedComponent = reactiveComponent(sourceProps$ => {
        const targetProps$ = typeof observableOrFactory === 'function'
            ? observableOrFactory(sourceProps$)
            : observableOrFactory;
        return targetProps$.pipe(map(props => React.createElement(TargetComponent, Object.assign({}, props))));
    });
    ComposedComponent.displayName = wrapDisplayName(TargetComponent, 'withPropsStream');
    return ComposedComponent;
}
