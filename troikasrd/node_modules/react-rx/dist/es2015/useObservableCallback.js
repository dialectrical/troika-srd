import { useCallback, useEffect, useRef } from 'react';
import { observableCallback } from 'observable-callback';
const EMPTY_DEPS = [];
export function useObservableCallback(fn, dependencies = EMPTY_DEPS) {
    const callbackRef = useRef();
    if (!callbackRef.current) {
        callbackRef.current = observableCallback();
    }
    const [calls$, call] = callbackRef.current;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const callback = useCallback(fn, dependencies);
    useEffect(() => {
        const subscription = calls$.pipe(callback).subscribe();
        return () => {
            subscription.unsubscribe();
        };
    }, [calls$, call, callback]);
    return call;
}
