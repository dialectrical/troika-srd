import { BehaviorSubject } from 'rxjs';
import { useRef } from 'react';
import { useIsomorphicEffect } from './useIsomorphicEffect';
export function useAsObservable(value, operator) {
    const isInitial = useRef(true);
    const subjectRef = useRef(new BehaviorSubject(value));
    const observableRef = useRef();
    if (!observableRef.current) {
        const observable = subjectRef.current.asObservable();
        observableRef.current = operator ? observable.pipe(operator) : observable;
    }
    useIsomorphicEffect(() => {
        if (isInitial.current) {
            isInitial.current = false;
        }
        else {
            // emit only on update
            subjectRef.current.next(value);
        }
    }, [value]);
    useIsomorphicEffect(() => {
        return () => {
            return subjectRef.current.complete();
        };
    }, []);
    return observableRef.current;
}
