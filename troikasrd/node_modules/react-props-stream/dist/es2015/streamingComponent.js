import * as React from 'react';
import { Subject } from 'rxjs';
export function streamingComponent(observableOrFactory) {
    return class StreamingComponent extends React.Component {
        constructor(props) {
            super(props);
            this.props$ = new Subject();
            this.setStateMaybeSync = (nextState, isSync) => {
                if (isSync) {
                    this.state = nextState;
                }
                else {
                    this.setState(nextState);
                }
            };
            this.state = { node: null };
            const node$ = typeof observableOrFactory === 'function'
                ? observableOrFactory(this.props$.asObservable())
                : observableOrFactory;
            let isSync = true;
            this.subscription = node$.subscribe(node => {
                this.setStateMaybeSync({ node }, isSync);
            });
            this.props$.next(this.props);
            isSync = false;
        }
        componentWillUnmount() {
            this.subscription.unsubscribe();
        }
        // todo: figure out a future proof way of handling this
        UNSAFE_componentWillReceiveProps(nextProps) {
            this.props$.next(nextProps);
        }
        render() {
            return this.state.node;
        }
    };
}
