"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamingComponent = void 0;
var React = __importStar(require("react"));
var rxjs_1 = require("rxjs");
function streamingComponent(observableOrFactory) {
    return /** @class */ (function (_super) {
        __extends(StreamingComponent, _super);
        function StreamingComponent(props) {
            var _this = _super.call(this, props) || this;
            _this.props$ = new rxjs_1.Subject();
            _this.setStateMaybeSync = function (nextState, isSync) {
                if (isSync) {
                    _this.state = nextState;
                }
                else {
                    _this.setState(nextState);
                }
            };
            _this.state = { node: null };
            var node$ = typeof observableOrFactory === 'function'
                ? observableOrFactory(_this.props$.asObservable())
                : observableOrFactory;
            var isSync = true;
            _this.subscription = node$.subscribe(function (node) {
                _this.setStateMaybeSync({ node: node }, isSync);
            });
            _this.props$.next(_this.props);
            isSync = false;
            return _this;
        }
        StreamingComponent.prototype.componentWillUnmount = function () {
            this.subscription.unsubscribe();
        };
        // todo: figure out a future proof way of handling this
        StreamingComponent.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
            this.props$.next(nextProps);
        };
        StreamingComponent.prototype.render = function () {
            return this.state.node;
        };
        return StreamingComponent;
    }(React.Component));
}
exports.streamingComponent = streamingComponent;
