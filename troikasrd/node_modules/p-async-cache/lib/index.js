'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LRU = require('lru-cache');
var assert = require('assert');
var Queue = require('pending-queue');

var AsyncCache = function () {
  function AsyncCache(options) {
    var _this = this;

    _classCallCheck(this, AsyncCache);

    this._stringify = JSON.stringify;

    assert(Object(options) === options, 'options must be an object');
    assert(typeof options.load === 'function', 'options.load must be a function');

    this._cache = new LRU(options);
    this._stales = {};

    if (options.stringify) {
      this._stringify = options.stringify;
    }

    this._allowStale = options.stale;
    this._queue = new Queue({
      load: options.load
    }).on('load', function (key, value) {
      delete _this._stales[key];
      _this._cache.set(key, value);
    });
  }

  _createClass(AsyncCache, [{
    key: '_load_if_necessary',
    value: function _load_if_necessary(key, params) {
      if (this._queue.listenerCount(key) > 1) {
        return;
      }

      this._load(key, params);
    }
  }, {
    key: '_load',
    value: function _load(key, params) {
      var _queue;

      return (_queue = this._queue).addWithKey.apply(_queue, [key].concat(_toConsumableArray(params))).then(function (value) {
        return value;
      });
    }
  }, {
    key: 'get',
    value: function get() {
      var stringify = this._stringify;

      for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }

      var key = stringify(params);

      if (this._allowStale && key in this._stales) {
        this._load_if_necessary(key, params);
        return Promise.resolve({
          value: this._stales[key],
          stale: true
        });
      }

      var has = this._cache.has(key);
      var value = this._cache.get(key);

      if (has) {
        return Promise.resolve({
          value: value,
          stale: false
        });
      } else if (
      // Maybe the value never exist
      value !== undefined && this._allowStale) {
        this._stales[key] = value;
        this._load_if_necessary(key, params);
        return Promise.resolve({
          value: value,
          stale: true
        });
      }

      return this._load(key, params).then(function (value) {
        return {
          value: value,
          stale: false
        };
      });
    }
  }, {
    key: 'reset',
    value: function reset() {
      return this._cache.reset();
    }
  }]);

  return AsyncCache;
}();

var proto = AsyncCache.prototype;

'has del peek'.split(' ').forEach(function (name) {
  proto[name] = function () {
    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      params[_key2] = arguments[_key2];
    }

    return this._cache[name](this._stringify(params));
  };
});

Object.defineProperty(AsyncCache.prototype, 'itemCount', {
  get: function get() {
    return this._cache.itemCount;
  },

  enumerable: true,
  configurable: true
});

module.exports = AsyncCache;