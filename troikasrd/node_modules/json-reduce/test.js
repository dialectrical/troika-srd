// @flow
import reduce from './src/reduce'
import type {Path} from './src/types'

function isObject(value) {
  return value !== null && typeof value === 'object'
}

const document: Object = {
  _createdAt: '2017-09-11T13:12:30Z',
  _id: 'drafts.4e604b7c-4ac4-4799-9e3b-61f6e4bf69d8',
  _rev: 'fn6zg8-rln-y49-n05-in0ueycw9',
  _type: 'datesTest',
  _updatedAt: '2017-09-11T14:03:55Z',
  myDateField: {
    _type: 'richDate',
    local: '2017-09-08T01:30:00+02:00',
    offset: 120,
    timezone: 'CET',
    utc: '2017-09-07T23:30:00Z'
  },
  some: {
    empty: {array: []}
  },
  myDeprecatedDateField: {
    _type: 'date',
    local: '2017-09-14T01:15:00+02:00',
    offset: 120,
    timezone: 'CET',
    utc: '2017-09-13T23:15:00Z'
  },
  title: 'Test document datesasddfs'
}

function generatePatches(document, createPatch) {
  return reduce(
    document,
    (acc, value, path: Path) => {
      const patches = createPatch(value, path)
      return patches && patches.length > 0 ? patches.concat(acc) : acc
    },
    []
  )
}

function isEmpty(value: any) {
  return (
    (isObject(value) && Object.keys(value).every(key => isEmpty(value[key]))) ||
    (Array.isArray(value) && value.every(isEmpty))
  )
}

const patches = generatePatches(document, (value: any, path: Path) => {
  const key = path[path.length - 1]
  return [
    key === '_type' &&
    value === 'date' && {
      type: 'set',
      path: path,
      value: 'richDate'
    },
    isEmpty(value) && {
      type: 'unset',
      path: path
    }
  ].filter(Boolean)
})

console.log(patches)
