'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = reduce;
// @flow

/*:: import type {Path, Reducer} from './types'*/
/*:: type Primitive = string | number | boolean*/


function isObject(value) {
  return value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

function reducePrimitive /*:: <Value: Primitive, Accumulator>*/(value /*: Value*/, reducer /*: Reducer<Value, Accumulator>*/, accumulator /*: Accumulator*/, path /*: Path*/) /*: Accumulator*/ {
  return reducer(accumulator, value, path);
}

function reduceArray /*:: <Value: Array<*>, Accumulator>*/(value /*: Value*/, reducer /*: Reducer<Value, Accumulator>*/, accumulator /*: Accumulator*/, path /*: Path*/) /*: Accumulator*/ {
  return value.reduce(function (acc, item, index) {
    return reduce(item, reducer, acc, path.concat(index));
  }, reducer(accumulator, value, path));
}

function reduceObject /*:: <Value: Object, Accumulator>*/(value /*: Value*/, reducer /*: Reducer<Value, Accumulator>*/, accumulator /*: Accumulator*/, path /*: Path*/) /*: Accumulator*/ {
  return Object.keys(value).reduce(function (acc, key, i) {
    return reduce(value[key], reducer, acc, path.concat(key));
  }, reducer(accumulator, value, path));
}

var ROOT_PATH = [];

function reduce /*:: <Value: any, Accumulator>*/(value /*: Value*/, reducer /*: Reducer<Value, Accumulator>*/, accumulator /*: Accumulator*/) /*: Accumulator*/ {
  var path /*: Path*/ = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ROOT_PATH;

  if (Array.isArray(value)) {
    return reduceArray(value, reducer, accumulator, path);
  }
  if (isObject(value)) {
    return reduceObject(value, reducer, accumulator, path);
  }
  return reducePrimitive(value, reducer, accumulator, path);
}