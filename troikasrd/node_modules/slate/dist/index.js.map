{"version":3,"file":"index.js","sources":["../../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArray.js","../../../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../../../node_modules/@babel/runtime/helpers/toConsumableArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../../../node_modules/@babel/runtime/helpers/nonIterableRest.js","../../../node_modules/@babel/runtime/helpers/slicedToArray.js","../../../node_modules/@babel/runtime/helpers/defineProperty.js","../../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../src/utils/weak-maps.ts","../src/utils/string.ts","../src/interfaces/editor.ts","../src/interfaces/element.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts","../src/create-editor.ts"],"sourcesContent":["function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { createDraft, finishDraft, isDraft } from 'immer'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  Descendant,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface Editor {\n  children: Node[]\n  selection: Range | null\n  operations: Operation[]\n  marks: Record<string, any> | null\n  [key: string]: unknown\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: () => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport const Editor = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, { ...options, at: range })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(editor: Editor): void {\n    editor.deleteFragment()\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    return (\n      isPlainObject(value) &&\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    )\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Iterable<NodeEntry<T>> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Record<string, any> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.last(editor, at)\n    const [, to] = Editor.last(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Iterable<NodeEntry<T>> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const iterable = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of iterable) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ) {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const path = getDirtyPaths(editor).pop()!\n        const entry = Editor.node(editor, path)\n        editor.normalizeNode(entry)\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Iterate through all of the positions in the document where a `Point` can be\n   * placed.\n   *\n   * By default it will move forward by individual offsets at a time,  but you\n   * can pass the `unit: 'character'` option to moved forward one character, word,\n   * or line at at time.\n   *\n   * Note: void nodes are treated as a single point, and iteration will not\n   * happen inside their content.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n    } = {}\n  ): Iterable<Point> {\n    const { at = editor.selection, unit = 'offset', reverse = false } = options\n\n    if (!at) {\n      return\n    }\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let string = ''\n    let available = 0\n    let offset = 0\n    let distance: number | null = null\n    let isNewBlock = false\n\n    const advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string)\n        } else if (unit === 'word') {\n          distance = getWordDistance(string)\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length\n        } else {\n          distance = 1\n        }\n\n        string = string.slice(distance)\n      }\n\n      // Add or substract the offset.\n      offset = reverse ? offset - distance : offset + distance\n      // Subtract the distance traveled from the available text.\n      available = available - distance!\n      // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n      distance = available >= 0 ? null : 0 - available\n    }\n\n    for (const [node, path] of Editor.nodes(editor, { at, reverse })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, since we don't want to iterate over\n        // their content. We instead always just yield their first point.\n        if (editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        if (editor.isInline(node)) {\n          continue\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          const text = Editor.string(editor, { anchor: s, focus: e })\n          string = reverse ? reverseText(text) : text\n          isNewBlock = true\n        }\n      }\n\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n        available = node.text.length\n        offset = reverse ? available : 0\n\n        if (isFirst) {\n          available = reverse ? first.offset : available - first.offset\n          offset = first.offset\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset }\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break\n          } else {\n            advance()\n          }\n\n          // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n          if (available >= 0) {\n            yield { path, offset }\n          } else {\n            break\n          }\n        }\n\n        isNewBlock = false\n      }\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.first(editor, at)\n    const [, to] = Editor.first(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: the text of void nodes is presumed to be an empty string, regardless\n   * of what their actual content is.\n   */\n\n  string(editor: Editor, at: Location): string {\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\ntype NodeMatch<T extends Node> =\n  | ((node: Node) => node is T)\n  | ((node: Node) => boolean)\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface Element {\n  children: Node[]\n  [key: string]: unknown\n}\n\nexport const Element = {\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Element.isElement(value[0]))\n    )\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport const Location = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport const Span = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Element, ElementEntry, Path, Range, Text } from '..'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type Node = Editor | Element | Text\n\nexport const Node = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry<Ancestor>> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry<Descendant>> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry<Descendant>> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return an iterable of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<ElementEntry> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce(root, r => {\n      const [start, end] = Range.edges(range)\n      const iterable = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of iterable) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      delete r.selection\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]))\n  },\n\n  /**\n   * Get the lash node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) && Element.matches(node, props)) ||\n      (Text.isText(node) && Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return an iterable of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't decsended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return an iterable of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry<Text>> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n","import { Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type InsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type InsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type MergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type MoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n  [key: string]: unknown\n}\n\nexport type RemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type RemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type SetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type SetSelectionOperation =\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Range\n      newProperties: null\n    }\n\nexport type SplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport const Operation = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Operation.isOperation(value[0]))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport const Path = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport const PathRef = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface Point {\n  path: Path\n  offset: number\n  [key: string]: unknown\n}\n\nexport const Point = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport const PointRef = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface Range {\n  anchor: Point\n  focus: Point\n  [key: string]: unknown\n}\n\nexport const Range = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Iterable<PointEntry> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: { affinity: 'forward' | 'backward' | 'outward' | 'inward' | null }\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport const RangeRef = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { Range } from '..'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface Text {\n  text: string\n  [key: string]: unknown\n}\n\nexport const Text = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    for (const key in text) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    for (const key in another) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]))\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= offset + length) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range starts after the leaf, or ends before it, continue.\n        if (\n          start.offset > offset + length ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < offset + length) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport const GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\n\nexport const NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n =>\n          levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const { text, children, ...properties } = node\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path) as NodeEntry<Ancestor>\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry as NodeEntry<Ancestor>\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n => commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport const SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor) {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location) {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>) {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport const TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Editor.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: () => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor)\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const child = node.children[i] as Descendant\n        const prev = node.children[i - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","text","offset","prev","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","length","i","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","next","code","Editor","above","editor","options","voids","mode","at","selection","match","path","reverse","levels","n","p","Text","isText","Path","equals","addMark","key","value","after","anchor","point","edge","focus","end","range","distance","d","target","positions","before","start","deleteBackward","unit","deleteForward","deleteFragment","edges","first","node","fragment","Node","hasBlocks","element","children","some","isBlock","hasInlines","isInline","hasTexts","every","insertBreak","insertFragment","insertNode","insertText","Element","isElement","isEditor","isPlainObject","apply","isVoid","normalizeNode","onChange","removeMark","marks","Range","isRange","isNodeList","Operation","isOperationList","operations","isEnd","Point","isEdge","isStart","isEmpty","isNormalizing","get","undefined","last","leaf","push","isExpanded","nodes","previous","block","prevNode","prevPath","blockPath","isAncestor","from","to","span","isPath","Error","parent","includes","universal","Span","isSpan","iterable","pass","matches","hit","isLower","compare","emit","normalize","force","getDirtyPaths","allPaths","Array","set","withoutNormalizing","max","m","pop","entry","parentPath","depth","firstPath","lastPath","common","isPoint","pathRef","affinity","ref","current","unref","pathRefs","refs","add","Set","pointRef","pointRefs","string","available","isNewBlock","advance","e","s","reverseText","isFirst","rangeRef","rangeRefs","t","transform","op","createDraft","type","index","splice","points","newPath","truePath","newParent","newIndex","result","texts","newProperties","JSON","stringify","Object","assign","position","properties","newNode","finishDraft","isDraft","unhangRange","isCollapsed","endBlock","skip","isBefore","fn","isElementList","isArray","props","Location","isLocation","ancestor","root","ancestors","child","c","childPath","concat","another","descendant","descendants","elements","newRoot","produce","r","has","isNode","visited","isAfter","nextIndex","map","join","isNodeOperation","isOperation","endsWith","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","PathRef","PointRef","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","affinityAnchor","affinityFocus","RangeRef","loose","isTextList","decorations","leaves","dec","o","middle","off","GeneralTransforms","NodeTransforms","insertNodes","hanging","select","Transforms","matchPath","isAtEnd","splitNodes","liftNodes","parentNodeEntry","toPath","moveNodes","removeNodes","splitPath","mergeNodes","commonPath","isPreviousSibling","emptyAncestor","emptyRef","toRef","targets","depths","setNodes","split","splitMode","k","keys","height","always","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","unsetNodes","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setSelection","setPoint","oldProps","newProps","TextTransforms","furthestVoid","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","inlinePath","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef","createEditor","dirtyPaths","oldDirtyPaths","newDirtyPaths","Promise","resolve","then","getFragment","inline","shouldHaveInlines","isLast","isInlineOrText","newChild","previousPath","oldAncestors","newAncestors","nextPath"],"mappings":";;;;;;;;;;AAAA,SAAS,kBAAkB,CAAC,GAAG,EAAE;EAC/B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACjE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;KAClB;;IAED,OAAO,IAAI,CAAC;GACb;CACF;;AAED,qBAAc,GAAG,kBAAkB;;ACVnC,SAAS,gBAAgB,CAAC,IAAI,EAAE;EAC9B,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,oBAAoB,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC/H;;AAED,mBAAc,GAAG,gBAAgB;;ACJjC,SAAS,kBAAkB,GAAG;EAC5B,MAAM,IAAI,SAAS,CAAC,iDAAiD,CAAC,CAAC;CACxE;;AAED,qBAAc,GAAG,kBAAkB;;ACEnC,SAAS,kBAAkB,CAAC,GAAG,EAAE;EAC/B,OAAO,iBAAiB,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,GAAG,CAAC,IAAI,iBAAiB,EAAE,CAAC;CAC9E;;AAED,qBAAc,GAAG,kBAAkB;;ACVnC,SAAS,eAAe,CAAC,GAAG,EAAE;EAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC;CACpC;;AAED,kBAAc,GAAG,eAAe;;ACJhC,SAAS,qBAAqB,CAAC,GAAG,EAAE,CAAC,EAAE;EACrC,IAAI,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,oBAAoB,CAAC,EAAE;IACrG,OAAO;GACR;;EAED,IAAI,IAAI,GAAG,EAAE,CAAC;EACd,IAAI,EAAE,GAAG,IAAI,CAAC;EACd,IAAI,EAAE,GAAG,KAAK,CAAC;EACf,IAAI,EAAE,GAAG,SAAS,CAAC;;EAEnB,IAAI;IACF,KAAK,IAAI,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,EAAE;MAClF,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;MAEpB,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM;KACnC;GACF,CAAC,OAAO,GAAG,EAAE;IACZ,EAAE,GAAG,IAAI,CAAC;IACV,EAAE,GAAG,GAAG,CAAC;GACV,SAAS;IACR,IAAI;MACF,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;KACjD,SAAS;MACR,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC;KAClB;GACF;;EAED,OAAO,IAAI,CAAC;CACb;;AAED,wBAAc,GAAG,qBAAqB;;AC9BtC,SAAS,gBAAgB,GAAG;EAC1B,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;CAC7E;;AAED,mBAAc,GAAG,gBAAgB;;ACEjC,SAAS,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE;EAC9B,OAAO,cAAc,CAAC,GAAG,CAAC,IAAI,oBAAoB,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,eAAe,EAAE,CAAC;CACjF;;AAED,iBAAc,GAAG,cAAc;;ACV/B,SAAS,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;EACxC,IAAI,GAAG,IAAI,GAAG,EAAE;IACd,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;MAC9B,KAAK,EAAE,KAAK;MACZ,UAAU,EAAE,IAAI;MAChB,YAAY,EAAE,IAAI;MAClB,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;GACJ,MAAM;IACL,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;GAClB;;EAED,OAAO,GAAG,CAAC;CACZ;;AAED,kBAAc,GAAG,eAAe;;ACfhC,SAAS,6BAA6B,CAAC,MAAM,EAAE,QAAQ,EAAE;EACvD,IAAI,MAAM,IAAI,IAAI,EAAE,OAAO,EAAE,CAAC;EAC9B,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACrC,IAAI,GAAG,EAAE,CAAC,CAAC;;EAEX,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS;IACzC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;GAC3B;;EAED,OAAO,MAAM,CAAC;CACf;;AAED,gCAAc,GAAG,6BAA6B;;ACb9C,SAAS,wBAAwB,CAAC,MAAM,EAAE,QAAQ,EAAE;EAClD,IAAI,MAAM,IAAI,IAAI,EAAE,OAAO,EAAE,CAAC;EAC9B,IAAI,MAAM,GAAG,4BAA4B,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;EAC5D,IAAI,GAAG,EAAE,CAAC,CAAC;;EAEX,IAAI,MAAM,CAAC,qBAAqB,EAAE;IAChC,IAAI,gBAAgB,GAAG,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;;IAE5D,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MAC5C,GAAG,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;MAC1B,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS;MACzC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,SAAS;MACvE,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;KAC3B;GACF;;EAED,OAAO,MAAM,CAAC;CACf;;AAED,2BAAc,GAAG,wBAAwB;;ACnBlC,IAAMA,WAAW,GAA4B,IAAIC,OAAJ,EAA7C;AACP,AAAO,IAAMC,QAAQ,GAA6B,IAAID,OAAJ,EAA3C;AACP,AAAO,IAAME,WAAW,GAA6B,IAAIF,OAAJ,EAA9C;AACP,AAAO,IAAMG,SAAS,GAAkC,IAAIH,OAAJ,EAAjD;AACP,AAAO,IAAMI,UAAU,GAAmC,IAAIJ,OAAJ,EAAnD;AACP,AAAO,IAAMK,UAAU,GAAmC,IAAIL,OAAJ,EAAnD;;ACPP;;;AAIA,IAAMM,KAAK,GAAG,IAAd;AACA,IAAMC,WAAW,GAAG,oyCAApB;AACA,IAAMC,SAAS,GAAG,iBAAlB;AACA,IAAMC,eAAe,GAAG,MAAxB;AACA,IAAMC,aAAa,GAAG,MAAtB;AACA,IAAMC,iBAAiB,GAAG,MAA1B;;;;;AAMA,AAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;MAC9BC,MAAM,GAAG,CAAb;;;;;;;MAOIC,IAAI,GAAkD,IAA1D;MACIC,QAAQ,GAAGH,IAAI,CAACI,UAAL,CAAgB,CAAhB,CAAf;;SAEOD,QAAP,EAAiB;QACXE,WAAW,CAACF,QAAD,CAAf,EAA2B;UACnBG,QAAQ,GAAGC,UAAU,CAACJ,QAAD,EAAWH,IAAX,EAAiBC,MAAjB,CAA3B,CADyB;;;;UAMrBC,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,KAAhC,EAAuC;;;;MAIvCD,MAAM,IAAI,CAAV;MACAC,IAAI,GAAGI,QAAQ,GAAG,KAAH,GAAW,MAA1B;MACAH,QAAQ,GAAGH,IAAI,CAACI,UAAL,CAAgBH,MAAhB,CAAX,CAZyB;;;;;;QAkBvBE,QAAQ,KAAKL,iBAAjB,EAAoC;MAClCG,MAAM,IAAI,CAAV;MACAC,IAAI,GAAG,KAAP;MACAC,QAAQ,GAAGH,IAAI,CAACI,UAAL,CAAgBH,MAAhB,CAAX;;;;QAKEO,UAAU,CAACL,QAAD,CAAd,EAA0B;UACpBD,IAAI,IAAIA,IAAI,KAAK,KAAjB,IAA0BA,IAAI,KAAK,KAAvC,EAA8C;;;;MAG9CD,MAAM,IAAI,CAAV;MACAC,IAAI,GAAG,KAAP;MACAC,QAAQ,GAAGH,IAAI,CAACI,UAAL,CAAgBH,MAAhB,CAAX;;;;QAKEQ,mBAAmB,CAACN,QAAD,CAAvB,EAAmC;UAC7BD,IAAI,IAAIA,IAAI,KAAK,KAArB,EAA4B;;;;MAG5BD,MAAM,IAAI,CAAV;MACAC,IAAI,GAAG,KAAP;MACAC,QAAQ,GAAGH,IAAI,CAACI,UAAL,CAAgBH,MAAhB,CAAX;;KA5Ca;;;;QAkDXC,IAAI,KAAK,KAAb,EAAoB;MAClBD,MAAM,IAAI,CAAV;;KAnDa;;;;;;SA2DVA,MAAM,IAAI,CAAjB;CAtEK;;;;;AA6EP,AAAO,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAACV,IAAD;MACzBW,MAAM,GAAG,CAAb;MACIC,CAAC,GAAG,CAAR;MACIC,OAAO,GAAG,KAAd;;MACIC,KAAJ;;SAEQA,KAAI,GAAGd,IAAI,CAACe,MAAL,CAAYH,CAAZ,CAAf,EAAgC;QACxBI,CAAC,GAAGjB,oBAAoB,CAACe,KAAD,CAA9B;IACAA,KAAI,GAAGd,IAAI,CAACiB,KAAL,CAAWL,CAAX,EAAcA,CAAC,GAAGI,CAAlB,CAAP;QACME,IAAI,GAAGlB,IAAI,CAACiB,KAAL,CAAWL,CAAC,GAAGI,CAAf,CAAb;;QAEIG,eAAe,CAACL,KAAD,EAAOI,IAAP,CAAnB,EAAiC;MAC/BL,OAAO,GAAG,IAAV;MACAF,MAAM,IAAIK,CAAV;KAFF,MAGO,IAAI,CAACH,OAAL,EAAc;MACnBF,MAAM,IAAIK,CAAV;KADK,MAEA;;;;IAIPJ,CAAC,IAAII,CAAL;;;SAGKL,MAAP;CAvBK;;;;;;AA+BP,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACL,MAAD,EAAeM,SAAf;MAClB3B,KAAK,CAAC4B,IAAN,CAAWP,MAAX,CAAJ,EAAsB;WACb,KAAP;;;;;MAKEnB,SAAS,CAAC0B,IAAV,CAAeP,MAAf,CAAJ,EAA0B;QACpBQ,IAAI,GAAGF,SAAS,CAACL,MAAV,CAAiB,CAAjB,CAAX;QACMJ,MAAM,GAAGZ,oBAAoB,CAACuB,IAAD,CAAnC;IACAA,IAAI,GAAGF,SAAS,CAACH,KAAV,CAAgB,CAAhB,EAAmBN,MAAnB,CAAP;QACMO,IAAI,GAAGE,SAAS,CAACH,KAAV,CAAgBN,MAAhB,CAAb;;QAEIQ,eAAe,CAACG,IAAD,EAAOJ,IAAP,CAAnB,EAAiC;aACxB,IAAP;;;;MAIAxB,WAAW,CAAC2B,IAAZ,CAAiBP,MAAjB,CAAJ,EAA4B;WACnB,KAAP;;;SAGK,IAAP;CAtBF;;;;;;AA6BA,IAAMT,WAAW,GAAG,SAAdA,WAAc,CAACkB,IAAD;SAClB3B,eAAe,IAAI2B,IAAnB,IAA2BA,IAAI,IAAI1B,aADjB;CAApB;;;;;;;;AASA,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAACgB,IAAD,EAAevB,IAAf,EAA6BC,MAA7B;MACbsB,IAAI,KAAK,MAAb,EAAqB;QACbD,IAAI,GAAGtB,IAAI,CAACI,UAAL,CAAgBH,MAAM,GAAG,CAAzB,CAAb;WACOqB,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,MAAjC;;;SAEK,KAAP;CALF;;;;;;;;AAcA,IAAMb,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACc,IAAD;SACnBA,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,MAAjC;CADF;;;;;;;;AAUA,IAAMf,UAAU,GAAG,SAAbA,UAAa,CAACe,IAAD;;;;;SAMfA,IAAI,KAAK,MAAT;EACAA,IAAI,KAAK,MADT;EAEAA,IAAI,KAAK,MAFT;EAGAA,IAAI,KAAK,MAHT;EAIAA,IAAI,KAAK,MAJT;EAKAA,IAAI,KAAK,MALT;EAMAA,IAAI,KAAK,MAPX;;CALF;;;;;IC3HaC,MAAM,GAAG;;;;EAKpBC,KALoB,iBAMlBC,MANkB;QAOlBC,8EAKI;yBAOAA,QAJFC;QAAAA,oCAAQ;wBAIND,QAHFE;QAAAA,kCAAO;sBAGLF,QAFFG;QAAAA,8BAAKJ,MAAM,CAACK;QACZC,QACEL,QADFK;;QAGE,CAACF,EAAL,EAAS;;;;QAIHG,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,CAAb;QACMI,OAAO,GAAGL,IAAI,KAAK,QAAzB;;;;;;2BAEqBL,MAAM,CAACW,MAAP,CAAcT,MAAd,EAAsB;QACzCI,EAAE,EAAEG,IADqC;QAEzCL,KAAK,EAALA,KAFyC;QAGzCI,KAAK,EAALA,KAHyC;QAIzCE,OAAO,EAAPA;OAJmB,CAArB,8HAKI;;YALQE,CAKR;YALWC,CAKX;;YACE,CAACC,IAAI,CAACC,MAAL,CAAYH,CAAZ,CAAD,IAAmB,CAACI,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkBI,CAAlB,CAAxB,EAA8C;iBACrC,CAACD,CAAD,EAAIC,CAAJ,CAAP;;;;;;;;;;;;;;;;;GAnCc;;;;;;;;EA+CpBK,OA/CoB,mBA+CZhB,MA/CY,EA+CIiB,GA/CJ,EA+CiBC,KA/CjB;IAgDlBlB,MAAM,CAACgB,OAAP,CAAeC,GAAf,EAAoBC,KAApB;GAhDkB;;;;;EAuDpBC,KAvDoB,iBAwDlBnB,MAxDkB,EAyDlBI,EAzDkB;QA0DlBH,8EAGI;QAEEmB,MAAM,GAAGtB,MAAM,CAACuB,KAAP,CAAarB,MAAb,EAAqBI,EAArB,EAAyB;MAAEkB,IAAI,EAAE;KAAjC,CAAf;QACMC,KAAK,GAAGzB,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmB,EAAnB,CAAd;QACMyB,KAAK,GAAG;MAAEL,MAAM,EAANA,MAAF;MAAUG,KAAK,EAALA;KAAxB;4BACyBtB,QAAjByB;QAAAA,0CAAW;QACfC,CAAC,GAAG,CAAR;QACIC,MAAJ;;;;;;4BAEgB9B,MAAM,CAAC+B,SAAP,CAAiB7B,MAAjB,oBAA8BC,OAA9B;QAAuCG,EAAE,EAAEqB;SAA3D,mIAAqE;YAA1Dd,CAA0D;;YAC/DgB,CAAC,GAAGD,QAAR,EAAkB;;;;YAIdC,CAAC,KAAK,CAAV,EAAa;UACXC,MAAM,GAAGjB,CAAT;;;QAGFgB,CAAC;;;;;;;;;;;;;;;;;WAGIC,MAAP;GAlFkB;;;;;EAyFpBE,MAzFoB,kBA0FlB9B,MA1FkB,EA2FlBI,EA3FkB;QA4FlBH,8EAGI;QAEEmB,MAAM,GAAGtB,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqB,EAArB,CAAf;QACMuB,KAAK,GAAGzB,MAAM,CAACuB,KAAP,CAAarB,MAAb,EAAqBI,EAArB,EAAyB;MAAEkB,IAAI,EAAE;KAAjC,CAAd;QACMG,KAAK,GAAG;MAAEL,MAAM,EAANA,MAAF;MAAUG,KAAK,EAALA;KAAxB;6BACyBtB,QAAjByB;QAAAA,2CAAW;QACfC,CAAC,GAAG,CAAR;QACIC,MAAJ;;;;;;4BAEgB9B,MAAM,CAAC+B,SAAP,CAAiB7B,MAAjB,oBACXC,OADW;QAEdG,EAAE,EAAEqB,KAFU;QAGdjB,OAAO,EAAE;SAHX,mIAII;YAJOG,CAIP;;YACEgB,CAAC,GAAGD,QAAR,EAAkB;;;;YAIdC,CAAC,KAAK,CAAV,EAAa;UACXC,MAAM,GAAGjB,CAAT;;;QAGFgB,CAAC;;;;;;;;;;;;;;;;;WAGIC,MAAP;GAxHkB;;;;;EA+HpBI,cA/HoB,0BAgIlBhC,MAhIkB;QAiIlBC,8EAEI;wBAE2BA,QAAvBgC;QAAAA,kCAAO;IACfjC,MAAM,CAACgC,cAAP,CAAsBC,IAAtB;GAtIkB;;;;;EA6IpBC,aA7IoB,yBA8IlBlC,MA9IkB;QA+IlBC,8EAEI;yBAE2BA,QAAvBgC;QAAAA,mCAAO;IACfjC,MAAM,CAACkC,aAAP,CAAqBD,IAArB;GApJkB;;;;;EA2JpBE,cA3JoB,0BA2JLnC,MA3JK;IA4JlBA,MAAM,CAACmC,cAAP;GA5JkB;;;;;EAmKpBC,KAnKoB,iBAmKdpC,MAnKc,EAmKEI,EAnKF;WAoKX,CAACN,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqBI,EAArB,CAAD,EAA2BN,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmBI,EAAnB,CAA3B,CAAP;GApKkB;;;;;EA2KpBoB,GA3KoB,eA2KhBxB,MA3KgB,EA2KAI,EA3KA;WA4KXN,MAAM,CAACuB,KAAP,CAAarB,MAAb,EAAqBI,EAArB,EAAyB;MAAEkB,IAAI,EAAE;KAAjC,CAAP;GA5KkB;;;;;EAmLpBe,KAnLoB,iBAmLdrC,MAnLc,EAmLEI,EAnLF;QAoLZG,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwB;MAAEkB,IAAI,EAAE;KAAhC,CAAb;WACOxB,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBO,IAApB,CAAP;GArLkB;;;;;EA4LpBgC,QA5LoB,oBA4LXvC,MA5LW,EA4LKI,EA5LL;QA6LZqB,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBI,EAArB,CAAd;QACMmC,QAAQ,GAAGC,IAAI,CAACD,QAAL,CAAcvC,MAAd,EAAsByB,KAAtB,CAAjB;WACOc,QAAP;GA/LkB;;;;;EAqMpBE,SArMoB,qBAqMVzC,MArMU,EAqMM0C,OArMN;WAsMXA,OAAO,CAACC,QAAR,CAAiBC,IAAjB,CAAsB,UAAAlC,CAAC;aAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;KAAvB,CAAP;GAtMkB;;;;;EA6MpBoC,UA7MoB,sBA6MT9C,MA7MS,EA6MO0C,OA7MP;WA8MXA,OAAO,CAACC,QAAR,CAAiBC,IAAjB,CACL,UAAAlC,CAAC;aAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAtB;KADI,CAAP;GA9MkB;;;;;EAuNpBsC,QAvNoB,oBAuNXhD,MAvNW,EAuNK0C,OAvNL;WAwNXA,OAAO,CAACC,QAAR,CAAiBM,KAAjB,CAAuB,UAAAvC,CAAC;aAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,CAAJ;KAAxB,CAAP;GAxNkB;;;;;;;EAiOpBwC,WAjOoB,uBAiORlD,MAjOQ;IAkOlBA,MAAM,CAACkD,WAAP;GAlOkB;;;;;;;EA2OpBC,cA3OoB,0BA2OLnD,MA3OK,EA2OWuC,QA3OX;IA4OlBvC,MAAM,CAACmD,cAAP,CAAsBZ,QAAtB;GA5OkB;;;;;;;EAqPpBa,UArPoB,sBAqPTpD,MArPS,EAqPOsC,IArPP;IAsPlBtC,MAAM,CAACoD,UAAP,CAAkBd,IAAlB;GAtPkB;;;;;;;EA+PpBe,UA/PoB,sBA+PTrD,MA/PS,EA+PO1B,IA/PP;IAgQlB0B,MAAM,CAACqD,UAAP,CAAkB/E,IAAlB;GAhQkB;;;;;EAuQpBuE,OAvQoB,mBAuQZ7C,MAvQY,EAuQIkB,KAvQJ;WAwQXoC,OAAO,CAACC,SAAR,CAAkBrC,KAAlB,KAA4B,CAAClB,MAAM,CAAC+C,QAAP,CAAgB7B,KAAhB,CAApC;GAxQkB;;;;;EA+QpBsC,QA/QoB,oBA+QXtC,KA/QW;WAiRhBuC,aAAa,CAACvC,KAAD,CAAb,IACA,OAAOA,KAAK,CAACF,OAAb,KAAyB,UADzB,IAEA,OAAOE,KAAK,CAACwC,KAAb,KAAuB,UAFvB,IAGA,OAAOxC,KAAK,CAACc,cAAb,KAAgC,UAHhC,IAIA,OAAOd,KAAK,CAACgB,aAAb,KAA+B,UAJ/B,IAKA,OAAOhB,KAAK,CAACiB,cAAb,KAAgC,UALhC,IAMA,OAAOjB,KAAK,CAACgC,WAAb,KAA6B,UAN7B,IAOA,OAAOhC,KAAK,CAACiC,cAAb,KAAgC,UAPhC,IAQA,OAAOjC,KAAK,CAACkC,UAAb,KAA4B,UAR5B,IASA,OAAOlC,KAAK,CAACmC,UAAb,KAA4B,UAT5B,IAUA,OAAOnC,KAAK,CAAC6B,QAAb,KAA0B,UAV1B,IAWA,OAAO7B,KAAK,CAACyC,MAAb,KAAwB,UAXxB,IAYA,OAAOzC,KAAK,CAAC0C,aAAb,KAA+B,UAZ/B,IAaA,OAAO1C,KAAK,CAAC2C,QAAb,KAA0B,UAb1B,IAcA,OAAO3C,KAAK,CAAC4C,UAAb,KAA4B,UAd5B,KAeC5C,KAAK,CAAC6C,KAAN,KAAgB,IAAhB,IAAwBN,aAAa,CAACvC,KAAK,CAAC6C,KAAP,CAftC,MAgBC7C,KAAK,CAACb,SAAN,KAAoB,IAApB,IAA4B2D,KAAK,CAACC,OAAN,CAAc/C,KAAK,CAACb,SAApB,CAhB7B,KAiBAmC,IAAI,CAAC0B,UAAL,CAAgBhD,KAAK,CAACyB,QAAtB,CAjBA,IAkBAwB,SAAS,CAACC,eAAV,CAA0BlD,KAAK,CAACmD,UAAhC,CAnBF;GAhRkB;;;;;EA2SpBC,KA3SoB,iBA2SdtE,MA3Sc,EA2SEqB,KA3SF,EA2SgBjB,EA3ShB;QA4SZoB,GAAG,GAAG1B,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmBI,EAAnB,CAAZ;WACOmE,KAAK,CAACxD,MAAN,CAAaM,KAAb,EAAoBG,GAApB,CAAP;GA7SkB;;;;;EAoTpBgD,MApToB,kBAoTbxE,MApTa,EAoTGqB,KApTH,EAoTiBjB,EApTjB;WAqTXN,MAAM,CAAC2E,OAAP,CAAezE,MAAf,EAAuBqB,KAAvB,EAA8BjB,EAA9B,KAAqCN,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBqB,KAArB,EAA4BjB,EAA5B,CAA5C;GArTkB;;;;;EA4TpBsE,OA5ToB,mBA4TZ1E,MA5TY,EA4TI0C,OA5TJ;QA6TVC,WAAaD,QAAbC;;kCACQA;QAATN;;WAELM,QAAQ,CAAC1D,MAAT,KAAoB,CAApB,IACC0D,QAAQ,CAAC1D,MAAT,KAAoB,CAApB,IACC2B,IAAI,CAACC,MAAL,CAAYwB,KAAZ,CADD,IAECA,KAAK,CAAC/D,IAAN,KAAe,EAFhB,IAGC,CAAC0B,MAAM,CAAC2D,MAAP,CAAcjB,OAAd,CALL;GA/TkB;;;;;EA4UpBK,QA5UoB,oBA4UX/C,MA5UW,EA4UKkB,KA5UL;WA6UXoC,OAAO,CAACC,SAAR,CAAkBrC,KAAlB,KAA4BlB,MAAM,CAAC+C,QAAP,CAAgB7B,KAAhB,CAAnC;GA7UkB;;;;;EAoVpByD,aApVoB,yBAoVN3E,MApVM;QAqVZ2E,aAAa,GAAGhH,WAAW,CAACiH,GAAZ,CAAgB5E,MAAhB,CAAtB;WACO2E,aAAa,KAAKE,SAAlB,GAA8B,IAA9B,GAAqCF,aAA5C;GAtVkB;;;;;EA6VpBF,OA7VoB,mBA6VZzE,MA7VY,EA6VIqB,KA7VJ,EA6VkBjB,EA7VlB;;QA+VdiB,KAAK,CAAC9C,MAAN,KAAiB,CAArB,EAAwB;aACf,KAAP;;;QAGIwD,KAAK,GAAGjC,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqBI,EAArB,CAAd;WACOmE,KAAK,CAACxD,MAAN,CAAaM,KAAb,EAAoBU,KAApB,CAAP;GApWkB;;;;;EA2WpB4B,MA3WoB,kBA2Wb3D,MA3Wa,EA2WGkB,KA3WH;WA4WXoC,OAAO,CAACC,SAAR,CAAkBrC,KAAlB,KAA4BlB,MAAM,CAAC2D,MAAP,CAAczC,KAAd,CAAnC;GA5WkB;;;;;EAmXpB4D,IAnXoB,gBAmXf9E,MAnXe,EAmXCI,EAnXD;QAoXZG,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwB;MAAEkB,IAAI,EAAE;KAAhC,CAAb;WACOxB,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBO,IAApB,CAAP;GArXkB;;;;;EA4XpBwE,IA5XoB,gBA6XlB/E,MA7XkB,EA8XlBI,EA9XkB;QA+XlBH,8EAGI;QAEEM,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwBH,OAAxB,CAAb;QACMqC,IAAI,GAAGE,IAAI,CAACuC,IAAL,CAAU/E,MAAV,EAAkBO,IAAlB,CAAb;WACO,CAAC+B,IAAD,EAAO/B,IAAP,CAAP;GAtYkB;;;;;EA6YnBE,MA7YmB,mBA8YlBT,MA9YkB;QA+YlBC,8EAKI;uBAE8DA,QAA1DG;QAAAA,+BAAKJ,MAAM,CAACK;2BAA8CJ,QAAnCO;QAAAA,wCAAU;0BAAyBP,QAAlBC;QAAAA,qCAAQ;QAClDI,QAAUL,QAAVK;;QAEFA,KAAK,IAAI,IAAb,EAAmB;MACjBA,KAAK,GAAG;eAAM,IAAN;OAAR;;;QAGE,CAACF,EAAL,EAAS;;;;QAIHK,MAAM,GAAmB,EAA/B;QACMF,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,CAAb;;;;;;4BAEqBoC,IAAI,CAAC/B,MAAL,CAAYT,MAAZ,EAAoBO,IAApB,CAArB,mIAAgD;;YAApCG,CAAoC;YAAjCC,CAAiC;;YAC1C,CAACL,KAAK,CAACI,CAAD,CAAV,EAAe;;;;QAIfD,MAAM,CAACuE,IAAP,CAAY,CAACtE,CAAD,EAAIC,CAAJ,CAAZ;;YAEI,CAACT,KAAD,IAAUJ,MAAM,CAAC6D,MAAP,CAAc3D,MAAd,EAAsBU,CAAtB,CAAd,EAAwC;;;;;;;;;;;;;;;;;;;QAKtCF,OAAJ,EAAa;MACXC,MAAM,CAACD,OAAP;;;WAGKC,MAAP;GApbkB;;;;;EA2bpBsD,KA3boB,iBA2bd/D,MA3bc;QA4bV+D,QAAqB/D,OAArB+D;QAAO1D,YAAcL,OAAdK;;QAEX,CAACA,SAAL,EAAgB;aACP,IAAP;;;QAGE0D,KAAJ,EAAW;aACFA,KAAP;;;QAGEC,KAAK,CAACiB,UAAN,CAAiB5E,SAAjB,CAAJ,EAAiC;0BACfP,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEM,KAAK,EAAEM,IAAI,CAACC;OAAnC,CADe;;UACxBP,KADwB;;UAG3BA,KAAJ,EAAW;mCACMA,KADN;YACFgC,KADE;;YAEDhE,KAFC,GAEiBgE,KAFjB,CAEDhE,IAFC;YAEQkB,KAFR,2BAEiB8C,KAFjB;;eAGF9C,KAAP;OAHF,MAIO;eACE,EAAP;;;;QAII4B,SAAWf,UAAXe;QACAb,OAASa,OAATb;;uBACKT,MAAM,CAACiF,IAAP,CAAY/E,MAAZ,EAAoBO,IAApB;;QAAR+B;;QAEDlB,MAAM,CAAC7C,MAAP,KAAkB,CAAtB,EAAyB;UACjBC,IAAI,GAAGsB,MAAM,CAACqF,QAAP,CAAgBnF,MAAhB,EAAwB;QAAEI,EAAE,EAAEG,IAAN;QAAYD,KAAK,EAAEM,IAAI,CAACC;OAAhD,CAAb;UACMuE,KAAK,GAAGtF,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;QACjCM,KAAK,EAAE,eAAAI,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;;OADI,CAAd;;UAIIlC,IAAI,IAAI4G,KAAZ,EAAmB;kCACY5G,IADZ;YACV6G,QADU;YACAC,QADA;;mCAEKF,KAFL;YAERG,SAFQ;;YAIbzE,IAAI,CAAC0E,UAAL,CAAgBD,SAAhB,EAA2BD,QAA3B,CAAJ,EAA0C;UACxChD,IAAI,GAAG+C,QAAP;;;;;iBAKoB/C;QAAlBhE,cAAAA;QAASkB;;WACVA,IAAP;GAvekB;;;;;EA8epBI,IA9eoB,gBA+elBI,MA/ekB;QAgflBC,8EAKI;yBAEuCA,QAAnCE;QAAAA,mCAAO;0BAA4BF,QAAlBC;QAAAA,qCAAQ;QAC3BI,QAAiCL,QAAjCK;uBAAiCL,QAA1BG;QAAAA,+BAAKJ,MAAM,CAACK;;QAErB,CAACD,EAAL,EAAS;;;;uBAIQN,MAAM,CAACgF,IAAP,CAAY9E,MAAZ,EAAoBI,EAApB;;QAARqF;;wBACM3F,MAAM,CAACgF,IAAP,CAAY9E,MAAZ,EAAoB,EAApB;;QAAN0F;;QACHC,IAAI,GAAS,CAACF,IAAD,EAAOC,EAAP,CAAnB;;QAEI5E,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,KAAmBA,EAAE,CAACnB,MAAH,KAAc,CAArC,EAAwC;YAChC,IAAI4G,KAAJ,gDAAN;;;QAGEvF,KAAK,IAAI,IAAb,EAAmB;UACbQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;6BACFN,MAAM,CAACgG,MAAP,CAAc9F,MAAd,EAAsBI,EAAtB,CADE;;YACZ0F,MADY;;QAEnBxF,KAAK,GAAG,eAAAI,CAAC;iBAAIoF,MAAM,CAACnD,QAAP,CAAgBoD,QAAhB,CAAyBrF,CAAzB,CAAJ;SAAT;OAFF,MAGO;QACLJ,KAAK,GAAG;iBAAM,IAAN;SAAR;;;;yBAIaR,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;MAAEI,EAAE,EAAEuF,IAAN;MAAYrF,KAAK,EAALA,KAAZ;MAAmBH,IAAI,EAAJA,IAAnB;MAAyBD,KAAK,EAALA;KAA9C;;QAARN;;WACFA,IAAP;GAhhBkB;;;;;EAuhBpB0C,IAvhBoB,gBAwhBlBtC,MAxhBkB,EAyhBlBI,EAzhBkB;QA0hBlBH,8EAGI;QAEEM,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwBH,OAAxB,CAAb;QACMqC,IAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,IAAjB,CAAb;WACO,CAAC+B,IAAD,EAAO/B,IAAP,CAAP;GAjiBkB;;;;;EAwiBnB2E,KAxiBmB,kBAyiBlBlF,MAziBkB;QA0iBlBC,8EAOI;uBAQAA,QALFG;QAAAA,+BAAKJ,MAAM,CAACK;yBAKVJ,QAJFE;QAAAA,mCAAO;6BAILF,QAHF+F;QAAAA,4CAAY;4BAGV/F,QAFFO;QAAAA,yCAAU;0BAERP,QADFC;QAAAA,qCAAQ;QAEJI,QAAUL,QAAVK;;QAEF,CAACA,KAAL,EAAY;MACVA,KAAK,GAAG;eAAM,IAAN;OAAR;;;QAGE,CAACF,EAAL,EAAS;;;;QAILqF,IAAJ;QACIC,EAAJ;;QAEIO,IAAI,CAACC,MAAL,CAAY9F,EAAZ,CAAJ,EAAqB;MACnBqF,IAAI,GAAGrF,EAAE,CAAC,CAAD,CAAT;MACAsF,EAAE,GAAGtF,EAAE,CAAC,CAAD,CAAP;KAFF,MAGO;UACCiC,KAAK,GAAGvC,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwB;QAAEkB,IAAI,EAAE;OAAhC,CAAd;UACMwD,IAAI,GAAGhF,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwB;QAAEkB,IAAI,EAAE;OAAhC,CAAb;MACAmE,IAAI,GAAGjF,OAAO,GAAGsE,IAAH,GAAUzC,KAAxB;MACAqD,EAAE,GAAGlF,OAAO,GAAG6B,KAAH,GAAWyC,IAAvB;;;QAGIqB,QAAQ,GAAG3D,IAAI,CAAC0C,KAAL,CAAWlF,MAAX,EAAmB;MAClCQ,OAAO,EAAPA,OADkC;MAElCiF,IAAI,EAAJA,IAFkC;MAGlCC,EAAE,EAAFA,EAHkC;MAIlCU,IAAI,EAAE;;YAAE1F,CAAF;;eAAUR,KAAK,GAAG,KAAH,GAAWJ,MAAM,CAAC6D,MAAP,CAAc3D,MAAd,EAAsBU,CAAtB,CAA1B;;KAJS,CAAjB;QAOM2F,OAAO,GAAmB,EAAhC;QACIC,GAAJ;;;;;;4BAE2BH,QAA3B,mIAAqC;;YAAzB7D,IAAyB;YAAnB/B,IAAmB;;YAC7BgG,OAAO,GAAGD,GAAG,IAAIxF,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmB+F,GAAG,CAAC,CAAD,CAAtB,MAA+B,CAAtD,CADmC;;YAI/BnG,IAAI,KAAK,SAAT,IAAsBoG,OAA1B,EAAmC;;;;YAI/B,CAACjG,KAAK,CAACgC,IAAD,CAAV,EAAkB;;;;cAIZ0D,SAAS,IAAI,CAACO,OAAd,IAAyB3F,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAA7B,EAAgD;;WAAhD,MAEO;;;SAd0B;;;YAoB/BnC,IAAI,KAAK,QAAT,IAAqBoG,OAAzB,EAAkC;UAChCD,GAAG,GAAG,CAAChE,IAAD,EAAO/B,IAAP,CAAN;;SArBiC;;;YA0B7BkG,IAAI,GACRtG,IAAI,KAAK,QAAT,GAAoBmG,GAApB,GAA0B,CAAChE,IAAD,EAAO/B,IAAP,CAD5B;;YAGIkG,IAAJ,EAAU;cACJT,SAAJ,EAAe;YACbK,OAAO,CAACrB,IAAR,CAAayB,IAAb;WADF,MAEO;kBACCA,IAAN;;;;QAIJH,GAAG,GAAG,CAAChE,IAAD,EAAO/B,IAAP,CAAN;;;;;;;;;;;;;;;;;;QAIEJ,IAAI,KAAK,QAAT,IAAqBmG,GAAzB,EAA8B;UACxBN,SAAJ,EAAe;QACbK,OAAO,CAACrB,IAAR,CAAasB,GAAb;OADF,MAEO;cACCA,GAAN;;;;;;QAMAN,SAAJ,EAAe;aACNK,OAAP;;GA/oBgB;;;;;EAspBpBK,SAtpBoB,qBAupBlB1G,MAvpBkB;QAwpBlBC,8EAEI;yBAEsBA,QAAlB0G;QAAAA,oCAAQ;;QACVC,aAAa,GAAG,SAAhBA,aAAgB,CAAC5G,MAAD;aACbxC,WAAW,CAACoH,GAAZ,CAAgB5E,MAAhB,KAA2B,EAAlC;KADF;;QAII,CAACF,MAAM,CAAC6E,aAAP,CAAqB3E,MAArB,CAAL,EAAmC;;;;QAI/B2G,KAAJ,EAAW;UACHE,QAAQ,GAAGC,KAAK,CAACrB,IAAN,CAAWjD,IAAI,CAAC0C,KAAL,CAAWlF,MAAX,CAAX,EAA+B;;YAAIW,CAAJ;;eAAWA,CAAX;OAA/B,CAAjB;MACAnD,WAAW,CAACuJ,GAAZ,CAAgB/G,MAAhB,EAAwB6G,QAAxB;;;QAGED,aAAa,CAAC5G,MAAD,CAAb,CAAsBf,MAAtB,KAAiC,CAArC,EAAwC;;;;IAIxCa,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;UAC1BiH,GAAG,GAAGL,aAAa,CAAC5G,MAAD,CAAb,CAAsBf,MAAtB,GAA+B,EAA3C;;UACIiI,CAAC,GAAG,CAAR;;aAEON,aAAa,CAAC5G,MAAD,CAAb,CAAsBf,MAAtB,KAAiC,CAAxC,EAA2C;YACrCiI,CAAC,GAAGD,GAAR,EAAa;gBACL,IAAIpB,KAAJ,yEAC8CoB,GAD9C,2HAAN;;;YAKI1G,IAAI,GAAGqG,aAAa,CAAC5G,MAAD,CAAb,CAAsBmH,GAAtB,EAAb;YACMC,KAAK,GAAGtH,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBO,IAApB,CAAd;QACAP,MAAM,CAAC4D,aAAP,CAAqBwD,KAArB;QACAF,CAAC;;KAdL;GA9qBkB;;;;;EAqsBpBpB,MArsBoB,kBAssBlB9F,MAtsBkB,EAusBlBI,EAvsBkB;QAwsBlBH,8EAGI;QAEEM,IAAI,GAAGT,MAAM,CAACS,IAAP,CAAYP,MAAZ,EAAoBI,EAApB,EAAwBH,OAAxB,CAAb;QACMoH,UAAU,GAAGvG,IAAI,CAACgF,MAAL,CAAYvF,IAAZ,CAAnB;QACM6G,KAAK,GAAGtH,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBqH,UAApB,CAAd;WACOD,KAAP;GAhtBkB;;;;;EAutBpB7G,IAvtBoB,gBAwtBlBP,MAxtBkB,EAytBlBI,EAztBkB;QA0tBlBH,8EAGI;QAEIqH,QAAgBrH,QAAhBqH;QAAOhG,OAASrB,QAATqB;;QAEXR,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;UACfkB,IAAI,KAAK,OAAb,EAAsB;0BACEkB,IAAI,CAACH,KAAL,CAAWrC,MAAX,EAAmBI,EAAnB,CADF;;YACXmH,SADW;;QAEpBnH,EAAE,GAAGmH,SAAL;OAFF,MAGO,IAAIjG,IAAI,KAAK,KAAb,EAAoB;yBACJkB,IAAI,CAACsC,IAAL,CAAU9E,MAAV,EAAkBI,EAAlB,CADI;;YAChBoH,QADgB;;QAEzBpH,EAAE,GAAGoH,QAAL;;;;QAIAxD,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;UACjBkB,IAAI,KAAK,OAAb,EAAsB;QACpBlB,EAAE,GAAG4D,KAAK,CAACjC,KAAN,CAAY3B,EAAZ,CAAL;OADF,MAEO,IAAIkB,IAAI,KAAK,KAAb,EAAoB;QACzBlB,EAAE,GAAG4D,KAAK,CAACxC,GAAN,CAAUpB,EAAV,CAAL;OADK,MAEA;QACLA,EAAE,GAAGU,IAAI,CAAC2G,MAAL,CAAYrH,EAAE,CAACgB,MAAH,CAAUb,IAAtB,EAA4BH,EAAE,CAACmB,KAAH,CAAShB,IAArC,CAAL;;;;QAIAgE,KAAK,CAACmD,OAAN,CAActH,EAAd,CAAJ,EAAuB;MACrBA,EAAE,GAAGA,EAAE,CAACG,IAAR;;;QAGE+G,KAAK,IAAI,IAAb,EAAmB;MACjBlH,EAAE,GAAGA,EAAE,CAACb,KAAH,CAAS,CAAT,EAAY+H,KAAZ,CAAL;;;WAGKlH,EAAP;GA7vBkB;;;;;;EAqwBpBuH,OArwBoB,mBAswBlB3H,MAtwBkB,EAuwBlBO,IAvwBkB;QAwwBlBN,8EAEI;4BAE6BA,QAAzB2H;QAAAA,0CAAW;QACbC,GAAG,GAAY;MACnBC,OAAO,EAAEvH,IADU;MAEnBqH,QAAQ,EAARA,QAFmB;MAGnBG,KAHmB;YAITD,UAAYD,IAAZC;YACFE,QAAQ,GAAGlI,MAAM,CAACkI,QAAP,CAAgBhI,MAAhB,CAAjB;QACAgI,QAAQ,UAAR,CAAgBH,GAAhB;QACAA,GAAG,CAACC,OAAJ,GAAc,IAAd;eACOA,OAAP;;KARJ;QAYMG,IAAI,GAAGnI,MAAM,CAACkI,QAAP,CAAgBhI,MAAhB,CAAb;IACAiI,IAAI,CAACC,GAAL,CAASL,GAAT;WACOA,GAAP;GA3xBkB;;;;;EAkyBpBG,QAlyBoB,oBAkyBXhI,MAlyBW;QAmyBdiI,IAAI,GAAGrK,SAAS,CAACgH,GAAV,CAAc5E,MAAd,CAAX;;QAEI,CAACiI,IAAL,EAAW;MACTA,IAAI,GAAG,IAAIE,GAAJ,EAAP;MACAvK,SAAS,CAACmJ,GAAV,CAAc/G,MAAd,EAAsBiI,IAAtB;;;WAGKA,IAAP;GA1yBkB;;;;;EAizBpB5G,KAjzBoB,iBAkzBlBrB,MAlzBkB,EAmzBlBI,EAnzBkB;QAozBlBH,8EAEI;wBAEuBA,QAAnBqB;QAAAA,kCAAO;;QAEXR,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;UACfG,IAAJ;;UAEIe,IAAI,KAAK,KAAb,EAAoB;0BACGkB,IAAI,CAACsC,IAAL,CAAU9E,MAAV,EAAkBI,EAAlB,CADH;;YACToH,QADS;;QAElBjH,IAAI,GAAGiH,QAAP;OAFF,MAGO;2BACiBhF,IAAI,CAACH,KAAL,CAAWrC,MAAX,EAAmBI,EAAnB,CADjB;;YACImH,SADJ;;QAELhH,IAAI,GAAGgH,SAAP;;;UAGIjF,IAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,IAAjB,CAAb;;UAEI,CAACK,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAL,EAAwB;cAChB,IAAIuD,KAAJ,0BACcvE,IADd,yCACiDlB,EADjD,iCAC0EkB,IAD1E,iBAAN;;;aAKK;QAAEf,IAAI,EAAJA,IAAF;QAAQhC,MAAM,EAAE+C,IAAI,KAAK,KAAT,GAAiBgB,IAAI,CAAChE,IAAL,CAAUW,MAA3B,GAAoC;OAA3D;;;QAGE+E,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;yBACA4D,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ,CADA;;UACd2B,KADc;UACPP,GADO;;aAEdF,IAAI,KAAK,OAAT,GAAmBS,KAAnB,GAA2BP,GAAlC;;;WAGKpB,EAAP;GAr1BkB;;;;;;EA61BpBgI,QA71BoB,oBA81BlBpI,MA91BkB,EA+1BlBqB,KA/1BkB;QAg2BlBpB,8EAEI;6BAE6BA,QAAzB2H;QAAAA,2CAAW;QACbC,GAAG,GAAa;MACpBC,OAAO,EAAEzG,KADW;MAEpBuG,QAAQ,EAARA,QAFoB;MAGpBG,KAHoB;YAIVD,UAAYD,IAAZC;YACFO,SAAS,GAAGvI,MAAM,CAACuI,SAAP,CAAiBrI,MAAjB,CAAlB;QACAqI,SAAS,UAAT,CAAiBR,GAAjB;QACAA,GAAG,CAACC,OAAJ,GAAc,IAAd;eACOA,OAAP;;KARJ;QAYMG,IAAI,GAAGnI,MAAM,CAACuI,SAAP,CAAiBrI,MAAjB,CAAb;IACAiI,IAAI,CAACC,GAAL,CAASL,GAAT;WACOA,GAAP;GAn3BkB;;;;;EA03BpBQ,SA13BoB,qBA03BVrI,MA13BU;QA23BdiI,IAAI,GAAGpK,UAAU,CAAC+G,GAAX,CAAe5E,MAAf,CAAX;;QAEI,CAACiI,IAAL,EAAW;MACTA,IAAI,GAAG,IAAIE,GAAJ,EAAP;MACAtK,UAAU,CAACkJ,GAAX,CAAe/G,MAAf,EAAuBiI,IAAvB;;;WAGKA,IAAP;GAl4BkB;;;;;;;;;;;;;EAi5BnBpG,SAj5BmB,sBAk5BlB7B,MAl5BkB;QAm5BlBC,8EAII;uBAEgEA,QAA5DG;QAAAA,+BAAKJ,MAAM,CAACK;yBAAgDJ,QAArCgC;QAAAA,mCAAO;4BAA8BhC,QAApBO;QAAAA,yCAAU;;QAEtD,CAACJ,EAAL,EAAS;;;;QAIHqB,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBI,EAArB,CAAd;;wBACqB4D,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAAdM;QAAOP;;QACRa,KAAK,GAAG7B,OAAO,GAAGgB,GAAH,GAASO,KAA9B;QACIuG,MAAM,GAAG,EAAb;QACIC,SAAS,GAAG,CAAhB;QACIhK,MAAM,GAAG,CAAb;QACImD,QAAQ,GAAkB,IAA9B;QACI8G,UAAU,GAAG,KAAjB;;QAEMC,OAAO,GAAG,SAAVA,OAAU;UACV/G,QAAQ,IAAI,IAAhB,EAAsB;YAChBO,IAAI,KAAK,WAAb,EAA0B;UACxBP,QAAQ,GAAGrD,oBAAoB,CAACiK,MAAD,CAA/B;SADF,MAEO,IAAIrG,IAAI,KAAK,MAAb,EAAqB;UAC1BP,QAAQ,GAAG1C,eAAe,CAACsJ,MAAD,CAA1B;SADK,MAEA,IAAIrG,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAAhC,EAAyC;UAC9CP,QAAQ,GAAG4G,MAAM,CAACrJ,MAAlB;SADK,MAEA;UACLyC,QAAQ,GAAG,CAAX;;;QAGF4G,MAAM,GAAGA,MAAM,CAAC/I,KAAP,CAAamC,QAAb,CAAT;;;;MAIFnD,MAAM,GAAGiC,OAAO,GAAGjC,MAAM,GAAGmD,QAAZ,GAAuBnD,MAAM,GAAGmD,QAAhD;;MAEA6G,SAAS,GAAGA,SAAS,GAAG7G,QAAxB;;;MAGAA,QAAQ,GAAG6G,SAAS,IAAI,CAAb,GAAiB,IAAjB,GAAwB,IAAIA,SAAvC;KArBF;;;;;;;4BAwB2BzI,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAMI,OAAO,EAAPA;OAA3B,CAA3B,mIAAkE;;YAAtD8B,IAAsD;YAAhD/B,IAAgD;;YAC5D+C,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,CAAJ,EAA6B;;;cAGvBtC,MAAM,CAAC2D,MAAP,CAAcrB,IAAd,CAAJ,EAAyB;kBACjBxC,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqBO,IAArB,CAAN;;;;cAIEP,MAAM,CAAC+C,QAAP,CAAgBT,IAAhB,CAAJ,EAA2B;;;;cAIvBxC,MAAM,CAACgD,UAAP,CAAkB9C,MAAlB,EAA0BsC,IAA1B,CAAJ,EAAqC;gBAC7BoG,CAAC,GAAG5H,IAAI,CAAC0E,UAAL,CAAgBjF,IAAhB,EAAsBiB,GAAG,CAACjB,IAA1B,IACNiB,GADM,GAEN1B,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmBO,IAAnB,CAFJ;gBAGMoI,CAAC,GAAG7H,IAAI,CAAC0E,UAAL,CAAgBjF,IAAhB,EAAsBwB,KAAK,CAACxB,IAA5B,IACNwB,KADM,GAENjC,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqBO,IAArB,CAFJ;gBAIMjC,IAAI,GAAGwB,MAAM,CAACwI,MAAP,CAActI,MAAd,EAAsB;cAAEoB,MAAM,EAAEuH,CAAV;cAAapH,KAAK,EAAEmH;aAA1C,CAAb;YACAJ,MAAM,GAAG9H,OAAO,GAAGoI,eAAW,CAACtK,IAAD,CAAd,GAAuBA,IAAvC;YACAkK,UAAU,GAAG,IAAb;;;;YAIA5H,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAJ,EAAuB;cACfuG,OAAO,GAAG/H,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkB8B,KAAK,CAAC9B,IAAxB,CAAhB;UACAgI,SAAS,GAAGjG,IAAI,CAAChE,IAAL,CAAUW,MAAtB;UACAV,MAAM,GAAGiC,OAAO,GAAG+H,SAAH,GAAe,CAA/B;;cAEIM,OAAJ,EAAa;YACXN,SAAS,GAAG/H,OAAO,GAAG6B,KAAK,CAAC9D,MAAT,GAAkBgK,SAAS,GAAGlG,KAAK,CAAC9D,MAAvD;YACAA,MAAM,GAAG8D,KAAK,CAAC9D,MAAf;;;cAGEsK,OAAO,IAAIL,UAAX,IAAyBvG,IAAI,KAAK,QAAtC,EAAgD;kBACxC;cAAE1B,IAAI,EAAJA,IAAF;cAAQhC,MAAM,EAANA;aAAd;;;iBAGK,IAAP,EAAa;;gBAEP+J,MAAM,KAAK,EAAf,EAAmB;;aAAnB,MAEO;cACLG,OAAO;aALE;;;;gBAUPF,SAAS,IAAI,CAAjB,EAAoB;oBACZ;gBAAEhI,IAAI,EAAJA,IAAF;gBAAQhC,MAAM,EAANA;eAAd;aADF,MAEO;;;;;UAKTiK,UAAU,GAAG,KAAb;;;;;;;;;;;;;;;;;GA1/Bc;;;;;EAmgCpBrD,QAngCoB,oBAogClBnF,MApgCkB;QAqgClBC,8EAKI;yBAEuCA,QAAnCE;QAAAA,mCAAO;0BAA4BF,QAAlBC;QAAAA,qCAAQ;QAC3BI,QAAiCL,QAAjCK;uBAAiCL,QAA1BG;QAAAA,+BAAKJ,MAAM,CAACK;;QAErB,CAACD,EAAL,EAAS;;;;wBAIQN,MAAM,CAACuC,KAAP,CAAarC,MAAb,EAAqBI,EAArB;;QAARqF;;yBACM3F,MAAM,CAACuC,KAAP,CAAarC,MAAb,EAAqB,EAArB;;QAAN0F;;QACHC,IAAI,GAAS,CAACF,IAAD,EAAOC,EAAP,CAAnB;;QAEI5E,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,KAAmBA,EAAE,CAACnB,MAAH,KAAc,CAArC,EAAwC;YAChC,IAAI4G,KAAJ,oDAAN;;;QAGEvF,KAAK,IAAI,IAAb,EAAmB;UACbQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;8BACFN,MAAM,CAACgG,MAAP,CAAc9F,MAAd,EAAsBI,EAAtB,CADE;;YACZ0F,MADY;;QAEnBxF,KAAK,GAAG,eAAAI,CAAC;iBAAIoF,MAAM,CAACnD,QAAP,CAAgBoD,QAAhB,CAAyBrF,CAAzB,CAAJ;SAAT;OAFF,MAGO;QACLJ,KAAK,GAAG;iBAAM,IAAN;SAAR;;;;yBAIiBR,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;MACxCQ,OAAO,EAAE,IAD+B;MAExCJ,EAAE,EAAEuF,IAFoC;MAGxCrF,KAAK,EAALA,KAHwC;MAIxCH,IAAI,EAAJA,IAJwC;MAKxCD,KAAK,EAALA;KALmB;;QAAZiF;;WAQFA,QAAP;GA5iCkB;;;;;EAmjCpB1D,KAnjCoB,iBAmjCdzB,MAnjCc,EAmjCEI,EAnjCF,EAmjCgBsF,EAnjChB;QAojCd1B,KAAK,CAACC,OAAN,CAAc7D,EAAd,KAAqB,CAACsF,EAA1B,EAA8B;aACrBtF,EAAP;;;QAGI2B,KAAK,GAAGjC,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqBI,EAArB,CAAd;QACMoB,GAAG,GAAG1B,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmB0F,EAAE,IAAItF,EAAzB,CAAZ;WACO;MAAEgB,MAAM,EAAEW,KAAV;MAAiBR,KAAK,EAAEC;KAA/B;GA1jCkB;;;;;;EAkkCpBsH,QAlkCoB,oBAmkClB9I,MAnkCkB,EAokClByB,KApkCkB;QAqkClBxB,8EAEI;6BAE6BA,QAAzB2H;QAAAA,2CAAW;QACbC,GAAG,GAAa;MACpBC,OAAO,EAAErG,KADW;MAEpBmG,QAAQ,EAARA,QAFoB;MAGpBG,KAHoB;YAIVD,UAAYD,IAAZC;YACFiB,SAAS,GAAGjJ,MAAM,CAACiJ,SAAP,CAAiB/I,MAAjB,CAAlB;QACA+I,SAAS,UAAT,CAAiBlB,GAAjB;QACAA,GAAG,CAACC,OAAJ,GAAc,IAAd;eACOA,OAAP;;KARJ;QAYMG,IAAI,GAAGnI,MAAM,CAACiJ,SAAP,CAAiB/I,MAAjB,CAAb;IACAiI,IAAI,CAACC,GAAL,CAASL,GAAT;WACOA,GAAP;GAxlCkB;;;;;EA+lCpBkB,SA/lCoB,qBA+lCV/I,MA/lCU;QAgmCdiI,IAAI,GAAGnK,UAAU,CAAC8G,GAAX,CAAe5E,MAAf,CAAX;;QAEI,CAACiI,IAAL,EAAW;MACTA,IAAI,GAAG,IAAIE,GAAJ,EAAP;MACArK,UAAU,CAACiJ,GAAX,CAAe/G,MAAf,EAAuBiI,IAAvB;;;WAGKA,IAAP;GAvmCkB;;;;;;;;;EAknCpBnE,UAlnCoB,sBAknCT9D,MAlnCS,EAknCOiB,GAlnCP;IAmnClBjB,MAAM,CAAC8D,UAAP,CAAkB7C,GAAlB;GAnnCkB;;;;;EA0nCpBc,KA1nCoB,iBA0nCd/B,MA1nCc,EA0nCEI,EA1nCF;WA2nCXN,MAAM,CAACuB,KAAP,CAAarB,MAAb,EAAqBI,EAArB,EAAyB;MAAEkB,IAAI,EAAE;KAAjC,CAAP;GA3nCkB;;;;;;;;EAqoCpBgH,MAroCoB,kBAqoCbtI,MAroCa,EAqoCGI,EAroCH;QAsoCZqB,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBI,EAArB,CAAd;;wBACqB4D,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAAdM;QAAOP;;QACVlD,IAAI,GAAG,EAAX;;;;;;4BAE2BwB,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAC9CI,EAAE,EAAEqB,KAD0C;QAE9CnB,KAAK,EAAEM,IAAI,CAACC;OAFa,CAA3B,mIAGI;;YAHQyB,IAGR;YAHc/B,IAGd;;YACEyI,CAAC,GAAG1G,IAAI,CAAChE,IAAb;;YAEIwC,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkBiB,GAAG,CAACjB,IAAtB,CAAJ,EAAiC;UAC/ByI,CAAC,GAAGA,CAAC,CAACzJ,KAAF,CAAQ,CAAR,EAAWiC,GAAG,CAACjD,MAAf,CAAJ;;;YAGEuC,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkBwB,KAAK,CAACxB,IAAxB,CAAJ,EAAmC;UACjCyI,CAAC,GAAGA,CAAC,CAACzJ,KAAF,CAAQwC,KAAK,CAACxD,MAAd,CAAJ;;;QAGFD,IAAI,IAAI0K,CAAR;;;;;;;;;;;;;;;;;WAGK1K,IAAP;GA3pCkB;;;;;EAkqCpB2K,SAlqCoB,qBAkqCVjJ,MAlqCU,EAkqCMkJ,EAlqCN;IAmqClBlJ,MAAM,CAAC2C,QAAP,GAAkBwG,iBAAW,CAACnJ,MAAM,CAAC2C,QAAR,CAA7B;QACItC,SAAS,GAAGL,MAAM,CAACK,SAAP,IAAoB8I,iBAAW,CAACnJ,MAAM,CAACK,SAAR,CAA/C;;YAEQ6I,EAAE,CAACE,IAAX;WACO,aAAL;;cACU7I,IADU,GACK2I,EADL,CACV3I,IADU;cACJ+B,IADI,GACK4G,EADL,CACJ5G,IADI;cAEZwD,MAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,IAApB,CAAf;cACM8I,KAAK,GAAG9I,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;UACA6G,MAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,KAAvB,EAA8B,CAA9B,EAAiC/G,IAAjC;;cAEIjC,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,KAAwC;oBAAjCJ,GAAiC;;gBAClDZ,SAAS,CAACY,GAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,KAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,aAAL;;cACU3I,KADU,GACa2I,EADb,CACV3I,IADU;cACJhC,MADI,GACa2K,EADb,CACJ3K,MADI;cACID,IADJ,GACa4K,EADb,CACI5K,IADJ;;cAEZgE,MAAI,GAAGE,IAAI,CAACuC,IAAL,CAAU/E,MAAV,EAAkBO,KAAlB,CAAb;;cACMuB,MAAM,GAAGQ,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmBhB,MAAnB,CAAf;;cACM4C,KAAK,GAAGmB,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgBhB,MAAhB,CAAd;;UACA+D,MAAI,CAAChE,IAAL,GAAYwD,MAAM,GAAGxD,IAAT,GAAgB6C,KAA5B;;cAEId,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,MAAwC;oBAAjCJ,IAAiC;;gBAClDZ,SAAS,CAACY,IAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,MAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,YAAL;;cACU3I,MADS,GACA2I,EADA,CACT3I,IADS;;cAEX+B,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;cACM+E,QAAQ,GAAGxE,IAAI,CAACqE,QAAL,CAAc5E,MAAd,CAAjB;cACM/B,IAAI,GAAGgE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBsF,QAAjB,CAAb;;cACMQ,OAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;cACM8I,MAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;;cAEI2B,IAAI,CAACC,MAAL,CAAYyB,MAAZ,KAAqB1B,IAAI,CAACC,MAAL,CAAYrC,IAAZ,CAAzB,EAA4C;YAC1CA,IAAI,CAACF,IAAL,IAAagE,MAAI,CAAChE,IAAlB;WADF,MAEO,IAAI,CAACsC,IAAI,CAACC,MAAL,CAAYyB,MAAZ,CAAD,IAAsB,CAAC1B,IAAI,CAACC,MAAL,CAAYrC,IAAZ,CAA3B,EAA8C;;;8BACnDA,IAAI,CAACmE,QAAL,EAAcqC,IAAd,yCAAsB1C,MAAI,CAACK,QAA3B;WADK,MAEA;kBACC,IAAIkD,KAAJ,4DAC8CtF,MAD9C,gDACwF+B,MADxF,cACgG9D,IADhG,EAAN;;;UAKFsH,OAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,MAAvB,EAA8B,CAA9B;;cAEIhJ,SAAJ,EAAe;;;;;;qCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,wIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,WAAL;;cACU3I,MADQ,GACU2I,EADV,CACR3I,IADQ;cACFiJ,OADE,GACUN,EADV,CACFM,OADE;;cAGZ1I,IAAI,CAAC0E,UAAL,CAAgBjF,MAAhB,EAAsBiJ,OAAtB,CAAJ,EAAoC;kBAC5B,IAAI3D,KAAJ,+BACmBtF,MADnB,4BACyCiJ,OADzC,iDAAN;;;cAKIlH,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;cACMuF,QAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;cACM8I,OAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB,CAXgB;;;;;;;UAmBhB6G,QAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,OAAvB,EAA8B,CAA9B;;cACMI,QAAQ,GAAG3I,IAAI,CAACmI,SAAL,CAAe1I,MAAf,EAAqB2I,EAArB,CAAjB;cACMQ,SAAS,GAAGlH,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBc,IAAI,CAACgF,MAAL,CAAY2D,QAAZ,CAAjB,CAAlB;cACME,QAAQ,GAAGF,QAAQ,CAACA,QAAQ,CAACxK,MAAT,GAAkB,CAAnB,CAAzB;UAEAyK,SAAS,CAAC/G,QAAV,CAAmB2G,MAAnB,CAA0BK,QAA1B,EAAoC,CAApC,EAAuCrH,MAAvC;;cAEIjC,SAAJ,EAAe;;;;;;qCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,wIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,aAAL;;cACU3I,MADU,GACD2I,EADC,CACV3I,IADU;cAEZ8I,OAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;;cACM6G,QAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;UACAuF,QAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,OAAvB,EAA8B,CAA9B,EAJkB;;;;cAQdhJ,SAAJ,EAAe;;;;;;qCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,wIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;oBAC5C2I,MAAM,GAAGrF,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAf;;oBAEI7I,SAAS,IAAI,IAAb,IAAqBuJ,MAAM,IAAI,IAAnC,EAAyC;kBACvCvJ,SAAS,CAACY,KAAD,CAAT,GAAiB2I,MAAjB;iBADF,MAEO;sBACDpL,MAAiC,SAArC;;sBACIoB,IAAiC,SAArC;;;;;;2CAEqB4C,IAAI,CAACqH,KAAL,CAAW7J,MAAX,CAArB,wIAAyC;;0BAA7BU,CAA6B;0BAA1BC,CAA0B;;0BACnCG,IAAI,CAAC0F,OAAL,CAAa7F,CAAb,EAAgBJ,MAAhB,MAA0B,CAAC,CAA/B,EAAkC;wBAChC/B,MAAI,GAAG,CAACkC,CAAD,EAAIC,CAAJ,CAAP;uBADF,MAEO;wBACLf,IAAI,GAAG,CAACc,CAAD,EAAIC,CAAJ,CAAP;;;;;;;;;;;;;;;;;;;sBAKAnC,MAAJ,EAAU;oBACR6C,OAAK,CAACd,IAAN,GAAa/B,MAAI,CAAC,CAAD,CAAjB;oBACA6C,OAAK,CAAC9C,MAAN,GAAeC,MAAI,CAAC,CAAD,CAAJ,CAAQF,IAAR,CAAaW,MAA5B;mBAFF,MAGO,IAAIW,IAAJ,EAAU;oBACfyB,OAAK,CAACd,IAAN,GAAaX,IAAI,CAAC,CAAD,CAAjB;oBACAyB,OAAK,CAAC9C,MAAN,GAAe,CAAf;mBAFK,MAGA;oBACL8B,SAAS,GAAG,IAAZ;;;;;;;;;;;;;;;;;;;;;;;WASL,aAAL;;cACUE,MADU,GACa2I,EADb,CACV3I,IADU;cACJhC,OADI,GACa2K,EADb,CACJ3K,MADI;cACID,MADJ,GACa4K,EADb,CACI5K,IADJ;;cAEZgE,MAAI,GAAGE,IAAI,CAACuC,IAAL,CAAU/E,MAAV,EAAkBO,MAAlB,CAAb;;cACMuB,OAAM,GAAGQ,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmBhB,OAAnB,CAAf;;cACM4C,MAAK,GAAGmB,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgBhB,OAAM,GAAGD,MAAI,CAACW,MAA9B,CAAd;;UACAqD,MAAI,CAAChE,IAAL,GAAYwD,OAAM,GAAGX,MAArB;;cAEId,SAAJ,EAAe;;;;;;qCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,wIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,UAAL;;cACU3I,MADO,GACiB2I,EADjB,CACP3I,IADO;cACDuJ,aADC,GACiBZ,EADjB,CACDY,aADC;;cAGXvJ,MAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;kBACf,IAAI4G,KAAJ,2CAAN;;;cAGIvD,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;eAEK,IAAMU,KAAX,IAAkB6I,aAAlB,EAAiC;gBAC3B7I,KAAG,KAAK,UAAR,IAAsBA,KAAG,KAAK,MAAlC,EAA0C;oBAClC,IAAI4E,KAAJ,4BAA6B5E,KAA7B,2BAAN;;;gBAGIC,KAAK,GAAG4I,aAAa,CAAC7I,KAAD,CAA3B;;gBAEIC,KAAK,IAAI,IAAb,EAAmB;qBACVoB,MAAI,CAACrB,KAAD,CAAX;aADF,MAEO;cACLqB,MAAI,CAACrB,KAAD,CAAJ,GAAYC,KAAZ;;;;;;;WAOD,eAAL;;cACU4I,cADY,GACMZ,EADN,CACZY,aADY;;cAGhBA,cAAa,IAAI,IAArB,EAA2B;YACzBzJ,SAAS,GAAGyJ,cAAZ;WADF,MAEO,IAAIzJ,SAAS,IAAI,IAAjB,EAAuB;gBACxB,CAAC2D,KAAK,CAACC,OAAN,CAAc6F,cAAd,CAAL,EAAmC;oBAC3B,IAAIjE,KAAJ,6EAC+DkE,IAAI,CAACC,SAAL,CACjEF,cADiE,CAD/D,0CAAN;;;YAOFzJ,SAAS,GAAGyJ,cAAZ;WATK,MAUA;YACLG,MAAM,CAACC,MAAP,CAAc7J,SAAd,EAAyByJ,cAAzB;;;;;;WAMC,YAAL;;cACUvJ,MADS,GACsB2I,EADtB,CACT3I,IADS;cACH4J,QADG,GACsBjB,EADtB,CACHiB,QADG;cACOC,UADP,GACsBlB,EADtB,CACOkB,UADP;;cAGb7J,MAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;kBACf,IAAI4G,KAAJ,4DAC8CtF,MAD9C,8CAAN;;;cAKI+B,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;cACMuF,QAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;cACM8I,OAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;cACIoL,OAAJ;;cAEIzJ,IAAI,CAACC,MAAL,CAAYyB,MAAZ,CAAJ,EAAuB;gBACfR,QAAM,GAAGQ,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmB4K,QAAnB,CAAf;;gBACMhJ,OAAK,GAAGmB,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB4K,QAAhB,CAAd;;YACA7H,MAAI,CAAChE,IAAL,GAAYwD,QAAZ;YACAuI,OAAO,qBACF/H,MADE,MAED8H,UAFC;cAGL9L,IAAI,EAAE6C;cAHR;WAJF,MASO;gBACCW,QAAM,GAAGQ,MAAI,CAACK,QAAL,CAAcpD,KAAd,CAAoB,CAApB,EAAuB4K,QAAvB,CAAf;;gBACMhJ,OAAK,GAAGmB,MAAI,CAACK,QAAL,CAAcpD,KAAd,CAAoB4K,QAApB,CAAd;;YACA7H,MAAI,CAACK,QAAL,GAAgBb,QAAhB;YAEAuI,OAAO,qBACF/H,MADE,MAED8H,UAFC;cAGLzH,QAAQ,EAAExB;cAHZ;;;UAOF2E,QAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,OAAK,GAAG,CAA/B,EAAkC,CAAlC,EAAqCgB,OAArC;;cAEIhK,SAAJ,EAAe;;;;;;qCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,wIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;;IAQRlJ,MAAM,CAAC2C,QAAP,GAAkB2H,iBAAW,CAACtK,MAAM,CAAC2C,QAAR,CAA7B;;QAEItC,SAAJ,EAAe;MACbL,MAAM,CAACK,SAAP,GAAmBkK,aAAO,CAAClK,SAAD,CAAP,GACdiK,iBAAW,CAACjK,SAAD,CADG,GAEfA,SAFJ;KADF,MAIO;MACLL,MAAM,CAACK,SAAP,GAAmB,IAAnB;;GAv6CgB;;;;;EA+6CpBmK,WA/6CoB,uBAg7ClBxK,MAh7CkB,EAi7ClByB,KAj7CkB;QAk7ClBxB,8EAEI;0BAEsBA,QAAlBC;QAAAA,qCAAQ;;wBACG8D,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAAdM;QAAOP;;;QAGRO,KAAK,CAACxD,MAAN,KAAiB,CAAjB,IAAsBiD,GAAG,CAACjD,MAAJ,KAAe,CAArC,IAA0CyF,KAAK,CAACyG,WAAN,CAAkBhJ,KAAlB,CAA9C,EAAwE;aAC/DA,KAAP;;;QAGIiJ,QAAQ,GAAG5K,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;MACpCI,EAAE,EAAEoB,GADgC;MAEpClB,KAAK,EAAE,eAAAI,CAAC;eAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;;KAFO,CAAjB;QAIM6E,SAAS,GAAGmF,QAAQ,GAAGA,QAAQ,CAAC,CAAD,CAAX,GAAiB,EAA3C;QACMrI,KAAK,GAAGvC,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqB,EAArB,CAAd;QACM8B,MAAM,GAAG;MAAEV,MAAM,EAAEiB,KAAV;MAAiBd,KAAK,EAAEC;KAAvC;QACImJ,IAAI,GAAG,IAAX;;;;;;6BAE2B7K,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAC9CI,EAAE,EAAE0B,MAD0C;QAE9CxB,KAAK,EAAEM,IAAI,CAACC,MAFkC;QAG9CL,OAAO,EAAE,IAHqC;QAI9CN,KAAK,EAALA;OAJyB,CAA3B,wIAKI;;YALQoC,IAKR;YALc/B,IAKd;;YACEoK,IAAJ,EAAU;UACRA,IAAI,GAAG,KAAP;;;;YAIErI,IAAI,CAAChE,IAAL,KAAc,EAAd,IAAoBwC,IAAI,CAAC8J,QAAL,CAAcrK,IAAd,EAAoBgF,SAApB,CAAxB,EAAwD;UACtD/D,GAAG,GAAG;YAAEjB,IAAI,EAAJA,IAAF;YAAQhC,MAAM,EAAE+D,IAAI,CAAChE,IAAL,CAAUW;WAAhC;;;;;;;;;;;;;;;;;;;WAKG;MAAEmC,MAAM,EAAEW,KAAV;MAAiBR,KAAK,EAAEC;KAA/B;GAx9CkB;;;;;yBAg+ClBxB,MAh+CkB;QAi+ClBC,8EAII;WAEGH,MAAM,CAACC,KAAP,CAAaC,MAAb,oBACFC,OADE;MAELK,KAAK,EAAE,eAAAI,CAAC;eAAIZ,MAAM,CAAC6D,MAAP,CAAc3D,MAAd,EAAsBU,CAAtB,CAAJ;;OAFV;GAv+CkB;;;;;EAi/CpBsG,kBAj/CoB,8BAi/CDhH,MAj/CC,EAi/Ce6K,EAj/Cf;QAk/CZ3J,KAAK,GAAGpB,MAAM,CAAC6E,aAAP,CAAqB3E,MAArB,CAAd;IACArC,WAAW,CAACoJ,GAAZ,CAAgB/G,MAAhB,EAAwB,KAAxB;IACA6K,EAAE;IACFlN,WAAW,CAACoJ,GAAZ,CAAgB/G,MAAhB,EAAwBkB,KAAxB;IACApB,MAAM,CAAC4G,SAAP,CAAiB1G,MAAjB;;CAt/CG;;IChDMsD,OAAO,GAAG;;;;EAKrBC,SALqB,qBAKXrC,KALW;WAOjBuC,aAAa,CAACvC,KAAD,CAAb,IACAsB,IAAI,CAAC0B,UAAL,CAAgBhD,KAAK,CAACyB,QAAtB,CADA,IAEA,CAAC7C,MAAM,CAAC0D,QAAP,CAAgBtC,KAAhB,CAHH;GANmB;;;;;EAiBrB4J,aAjBqB,yBAiBP5J,KAjBO;WAmBjB4F,KAAK,CAACiE,OAAN,CAAc7J,KAAd,MACCA,KAAK,CAACjC,MAAN,KAAiB,CAAjB,IAAsBqE,OAAO,CAACC,SAAR,CAAkBrC,KAAK,CAAC,CAAD,CAAvB,CADvB,CADF;GAlBmB;;;;;;;;EA+BrBmF,OA/BqB,mBA+Bb3D,OA/Ba,EA+BKsI,KA/BL;SAgCd,IAAM/J,GAAX,IAAkB+J,KAAlB,EAAyB;UACnB/J,GAAG,KAAK,UAAZ,EAAwB;;;;UAIpByB,OAAO,CAACzB,GAAD,CAAP,KAAiB+J,KAAK,CAAC/J,GAAD,CAA1B,EAAiC;eACxB,KAAP;;;;WAIG,IAAP;;CA1CG;;ICDMgK,QAAQ,GAAG;;;;EAKtBC,UALsB,sBAKXhK,KALW;WAMbJ,IAAI,CAAC8E,MAAL,CAAY1E,KAAZ,KAAsBqD,KAAK,CAACmD,OAAN,CAAcxG,KAAd,CAAtB,IAA8C8C,KAAK,CAACC,OAAN,CAAc/C,KAAd,CAArD;;CANG;AAiBP,IAAa+E,IAAI,GAAG;;;;EAKlBC,MALkB,kBAKXhF,KALW;WAOd4F,KAAK,CAACiE,OAAN,CAAc7J,KAAd,KAAwBA,KAAK,CAACjC,MAAN,KAAiB,CAAzC,IAA8CiC,KAAK,CAAC+B,KAAN,CAAYnC,IAAI,CAAC8E,MAAjB,CADhD;;CANG;;ICpBMpD,IAAI,GAAG;;;;EAKlB2I,QALkB,oBAKTC,IALS,EAKG7K,IALH;QAMV+B,IAAI,GAAGE,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAe7K,IAAf,CAAb;;QAEIK,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAJ,EAAuB;YACf,IAAIuD,KAAJ,iDACqCtF,IADrC,yDACwF+B,IADxF,EAAN;;;WAKKA,IAAP;GAdgB;;;;;;;;EAwBjB+I,SAxBiB,sBAyBhBD,IAzBgB,EA0BhB7K,IA1BgB;QA2BhBN,8EAEI;;;;;;2BAEYa,IAAI,CAACuK,SAAL,CAAe9K,IAAf,EAAqBN,OAArB,CAAhB,8HAA+C;YAApCU,CAAoC;YACvCD,CAAC,GAAG8B,IAAI,CAAC2I,QAAL,CAAcC,IAAd,EAAoBzK,CAApB,CAAV;YACMyG,KAAK,GAAwB,CAAC1G,CAAD,EAAIC,CAAJ,CAAnC;cACMyG,KAAN;;;;;;;;;;;;;;;;GAlCc;;;;;EA0ClBkE,KA1CkB,iBA0CZF,IA1CY,EA0CA/B,KA1CA;QA2CZzI,IAAI,CAACC,MAAL,CAAYuK,IAAZ,CAAJ,EAAuB;YACf,IAAIvF,KAAJ,gDACoCkE,IAAI,CAACC,SAAL,CAAeoB,IAAf,CADpC,EAAN;;;QAKIG,CAAC,GAAGH,IAAI,CAACzI,QAAL,CAAc0G,KAAd,CAAV;;QAEIkC,CAAC,IAAI,IAAT,EAAe;YACP,IAAI1F,KAAJ,sCAC2BwD,KAD3B,wBAC+CU,IAAI,CAACC,SAAL,CACjDoB,IADiD,CAD/C,EAAN;;;WAOKG,CAAP;GA3DgB;;;;;EAkEjB5I,QAlEiB,qBAmEhByI,IAnEgB,EAoEhB7K,IApEgB;QAqEhBN,8EAEI;2BAEwBA,QAApBO;QAAAA,wCAAU;QACZ2K,QAAQ,GAAG3I,IAAI,CAAC2I,QAAL,CAAcC,IAAd,EAAoB7K,IAApB,CAAjB;QACQoC,WAAawI,SAAbxI;QACJ0G,KAAK,GAAG7I,OAAO,GAAGmC,QAAQ,CAAC1D,MAAT,GAAkB,CAArB,GAAyB,CAA5C;;WAEOuB,OAAO,GAAG6I,KAAK,IAAI,CAAZ,GAAgBA,KAAK,GAAG1G,QAAQ,CAAC1D,MAA/C,EAAuD;UAC/CqM,KAAK,GAAG9I,IAAI,CAAC8I,KAAL,CAAWH,QAAX,EAAqB9B,KAArB,CAAd;UACMmC,SAAS,GAAGjL,IAAI,CAACkL,MAAL,CAAYpC,KAAZ,CAAlB;YACM,CAACiC,KAAD,EAAQE,SAAR,CAAN;MACAnC,KAAK,GAAG7I,OAAO,GAAG6I,KAAK,GAAG,CAAX,GAAeA,KAAK,GAAG,CAAtC;;GAlFc;;;;;EA0FlB5B,MA1FkB,kBA0FX2D,IA1FW,EA0FC7K,IA1FD,EA0FamL,OA1Fb;QA2FV/K,CAAC,GAAGG,IAAI,CAAC2G,MAAL,CAAYlH,IAAZ,EAAkBmL,OAAlB,CAAV;QACMhL,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAV;WACO,CAACD,CAAD,EAAIC,CAAJ,CAAP;GA7FgB;;;;;EAoGlBgL,UApGkB,sBAoGPP,IApGO,EAoGK7K,IApGL;QAqGV+B,IAAI,GAAGE,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAe7K,IAAf,CAAb;;QAEIT,MAAM,CAAC0D,QAAP,CAAgBlB,IAAhB,CAAJ,EAA2B;YACnB,IAAIuD,KAAJ,mDACuCtF,IADvC,kEACmG+B,IADnG,EAAN;;;WAKKA,IAAP;GA7GgB;;;;;EAoHjBsJ,WApHiB,wBAqHhBR,IArHgB;QAsHhBnL,8EAKI;;;;;;4BAEuBuC,IAAI,CAAC0C,KAAL,CAAWkG,IAAX,EAAiBnL,OAAjB,CAA3B,mIAAsD;;YAA1CqC,IAA0C;YAApC/B,IAAoC;;YAChDA,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;;;gBAGf,CAACqD,IAAD,EAAO/B,IAAP,CAAN;;;;;;;;;;;;;;;;;GAjIY;;;;;;;EA4IjBsL,QA5IiB,qBA6IhBT,IA7IgB;QA8IhBnL,8EAKI;;;;;;4BAEuBuC,IAAI,CAAC0C,KAAL,CAAWkG,IAAX,EAAiBnL,OAAjB,CAA3B,mIAAsD;;YAA1CqC,IAA0C;YAApC/B,IAAoC;;YAChD+C,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,CAAJ,EAA6B;gBACrB,CAACA,IAAD,EAAO/B,IAAP,CAAN;;;;;;;;;;;;;;;;;GAvJY;;;;;EAgKlB8B,KAhKkB,iBAgKZ+I,IAhKY,EAgKA7K,IAhKA;QAiKVI,CAAC,GAAGJ,IAAI,CAAChB,KAAL,EAAV;QACImB,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAR;;WAEOD,CAAP,EAAU;UACJE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBA,CAAC,CAACiC,QAAF,CAAW1D,MAAX,KAAsB,CAA5C,EAA+C;;OAA/C,MAEO;QACLyB,CAAC,GAAGA,CAAC,CAACiC,QAAF,CAAW,CAAX,CAAJ;QACAhC,CAAC,CAACqE,IAAF,CAAO,CAAP;;;;WAIG,CAACtE,CAAD,EAAIC,CAAJ,CAAP;GA7KgB;;;;;EAoLlB4B,QApLkB,oBAoLT6I,IApLS,EAoLG3J,KApLH;QAqLZb,IAAI,CAACC,MAAL,CAAYuK,IAAZ,CAAJ,EAAuB;YACf,IAAIvF,KAAJ,iEACqDkE,IAAI,CAACC,SAAL,CACvDoB,IADuD,CADrD,EAAN;;;QAOIU,OAAO,GAAGC,aAAO,CAACX,IAAD,EAAO,UAAAY,CAAC;yBACRhI,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;UAAdM;UAAOP;;UACR2E,QAAQ,GAAG3D,IAAI,CAAC0C,KAAL,CAAW8G,CAAX,EAAc;QAC7BxL,OAAO,EAAE,IADoB;QAE7B4F,IAAI,EAAE;;cAAI7F,IAAJ;;iBAAc,CAACyD,KAAK,CAAC+B,QAAN,CAAetE,KAAf,EAAsBlB,IAAtB,CAAf;;OAFS,CAAjB;;;;;;8BAKuB4F,QAAvB,mIAAiC;;cAAnB5F,IAAmB;;cAC3B,CAACyD,KAAK,CAAC+B,QAAN,CAAetE,KAAf,EAAsBlB,IAAtB,CAAL,EAAkC;gBAC1BuF,MAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAYkG,CAAZ,EAAezL,IAAf,CAAf;gBACM8I,KAAK,GAAG9I,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;YACA6G,MAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,KAAvB,EAA8B,CAA9B;;;cAGEvI,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkBiB,GAAG,CAACjB,IAAtB,CAAJ,EAAiC;gBACzBwE,IAAI,GAAGvC,IAAI,CAACuC,IAAL,CAAUiH,CAAV,EAAazL,IAAb,CAAb;YACAwE,IAAI,CAACzG,IAAL,GAAYyG,IAAI,CAACzG,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmBiC,GAAG,CAACjD,MAAvB,CAAZ;;;cAGEuC,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkBwB,KAAK,CAACxB,IAAxB,CAAJ,EAAmC;gBAC3BwE,KAAI,GAAGvC,IAAI,CAACuC,IAAL,CAAUiH,CAAV,EAAazL,IAAb,CAAb;;YACAwE,KAAI,CAACzG,IAAL,GAAYyG,KAAI,CAACzG,IAAL,CAAUiB,KAAV,CAAgBwC,KAAK,CAACxD,MAAtB,CAAZ;;;;;;;;;;;;;;;;;;aAIGyN,CAAC,CAAC3L,SAAT;KAzBqB,CAAvB;WA4BOyL,OAAO,CAACnJ,QAAf;GAzNgB;;;;;;EAiOlBiC,GAjOkB,eAiOdwG,IAjOc,EAiOF7K,IAjOE;QAkOZ+B,IAAI,GAAG8I,IAAX;;SAEK,IAAIlM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,IAAI,CAACtB,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;UAC9ByB,CAAC,GAAGJ,IAAI,CAACrB,CAAD,CAAd;;UAEI0B,IAAI,CAACC,MAAL,CAAYyB,IAAZ,KAAqB,CAACA,IAAI,CAACK,QAAL,CAAchC,CAAd,CAA1B,EAA4C;cACpC,IAAIkF,KAAJ,6CACiCtF,IADjC,wBACmDwJ,IAAI,CAACC,SAAL,CACrDoB,IADqD,CADnD,EAAN;;;MAOF9I,IAAI,GAAGA,IAAI,CAACK,QAAL,CAAchC,CAAd,CAAP;;;WAGK2B,IAAP;GAlPgB;;;;;EAyPlB2J,GAzPkB,eAyPdb,IAzPc,EAyPF7K,IAzPE;QA0PZ+B,IAAI,GAAG8I,IAAX;;SAEK,IAAIlM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,IAAI,CAACtB,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;UAC9ByB,CAAC,GAAGJ,IAAI,CAACrB,CAAD,CAAd;;UAEI0B,IAAI,CAACC,MAAL,CAAYyB,IAAZ,KAAqB,CAACA,IAAI,CAACK,QAAL,CAAchC,CAAd,CAA1B,EAA4C;eACnC,KAAP;;;MAGF2B,IAAI,GAAGA,IAAI,CAACK,QAAL,CAAchC,CAAd,CAAP;;;WAGK,IAAP;GAtQgB;;;;;EA6QlBuL,MA7QkB,kBA6QXhL,KA7QW;WA+QdN,IAAI,CAACC,MAAL,CAAYK,KAAZ,KAAsBoC,OAAO,CAACC,SAAR,CAAkBrC,KAAlB,CAAtB,IAAkDpB,MAAM,CAAC0D,QAAP,CAAgBtC,KAAhB,CADpD;GA9QgB;;;;;EAuRlBgD,UAvRkB,sBAuRPhD,KAvRO;WAwRT4F,KAAK,CAACiE,OAAN,CAAc7J,KAAd,MAAyBA,KAAK,CAACjC,MAAN,KAAiB,CAAjB,IAAsBuD,IAAI,CAAC0J,MAAL,CAAYhL,KAAK,CAAC,CAAD,CAAjB,CAA/C,CAAP;GAxRgB;;;;;EA+RlB4D,IA/RkB,gBA+RbsG,IA/Ra,EA+RD7K,IA/RC;QAgSVI,CAAC,GAAGJ,IAAI,CAAChB,KAAL,EAAV;QACImB,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAR;;WAEOD,CAAP,EAAU;UACJE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBA,CAAC,CAACiC,QAAF,CAAW1D,MAAX,KAAsB,CAA5C,EAA+C;;OAA/C,MAEO;YACCC,CAAC,GAAGwB,CAAC,CAACiC,QAAF,CAAW1D,MAAX,GAAoB,CAA9B;QACAyB,CAAC,GAAGA,CAAC,CAACiC,QAAF,CAAWzD,CAAX,CAAJ;QACAyB,CAAC,CAACqE,IAAF,CAAO9F,CAAP;;;;WAIG,CAACwB,CAAD,EAAIC,CAAJ,CAAP;GA7SgB;;;;;EAoTlBoE,IApTkB,gBAoTbqG,IApTa,EAoTD7K,IApTC;QAqTV+B,IAAI,GAAGE,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAe7K,IAAf,CAAb;;QAEI,CAACK,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAL,EAAwB;YAChB,IAAIuD,KAAJ,6CACiCtF,IADjC,qDACgF+B,IADhF,EAAN;;;WAKKA,IAAP;GA7TgB;;;;;;;;EAuUjB7B,MAvUiB,mBAwUhB2K,IAxUgB,EAyUhB7K,IAzUgB;QA0UhBN,8EAEI;;;;;;4BAEYa,IAAI,CAACL,MAAL,CAAYF,IAAZ,EAAkBN,OAAlB,CAAhB,mIAA4C;YAAjCU,CAAiC;YACpCD,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAV;cACM,CAACD,CAAD,EAAIC,CAAJ,CAAN;;;;;;;;;;;;;;;;GAhVc;;;;;EAwVlB0F,OAxVkB,mBAwVV/D,IAxVU,EAwVE0I,KAxVF;WA0Vb1H,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,KAA2BgB,OAAO,CAAC+C,OAAR,CAAgB/D,IAAhB,EAAsB0I,KAAtB,CAA5B,IACCpK,IAAI,CAACC,MAAL,CAAYyB,IAAZ,KAAqB1B,IAAI,CAACyF,OAAL,CAAa/D,IAAb,EAAmB0I,KAAnB,CAFxB;GAzVgB;;;;;;;EAqWjB9F,KArWiB,kBAsWhBkG,IAtWgB;QAuWhBnL,8EAKI;QAEImG,OAA0BnG,QAA1BmG;4BAA0BnG,QAApBO;QAAAA,yCAAU;wBACEP,QAAlBwF;QAAAA,kCAAO;QAAIC,KAAOzF,QAAPyF;QACbyG,OAAO,GAAG,IAAIhE,GAAJ,EAAhB;QACIxH,CAAC,GAAS,EAAd;QACID,CAAC,GAAG0K,IAAR;;WAEO,IAAP,EAAa;UACP1F,EAAE,KAAKlF,OAAO,GAAGM,IAAI,CAAC8J,QAAL,CAAcjK,CAAd,EAAiB+E,EAAjB,CAAH,GAA0B5E,IAAI,CAACsL,OAAL,CAAazL,CAAb,EAAgB+E,EAAhB,CAAtC,CAAN,EAAkE;;;;UAI9D,CAACyG,OAAO,CAACF,GAAR,CAAYvL,CAAZ,CAAL,EAAqB;cACb,CAACA,CAAD,EAAIC,CAAJ,CAAN;OANS;;;UAWT,CAACwL,OAAO,CAACF,GAAR,CAAYvL,CAAZ,CAAD,IACA,CAACE,IAAI,CAACC,MAAL,CAAYH,CAAZ,CADD,IAEAA,CAAC,CAACiC,QAAF,CAAW1D,MAAX,KAAsB,CAFtB,KAGCmH,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC,CAAC1F,CAAD,EAAIC,CAAJ,CAAD,CAAJ,KAAiB,KAHlC,CADF,EAKE;QACAwL,OAAO,CAACjE,GAAR,CAAYxH,CAAZ;YACI2L,SAAS,GAAG7L,OAAO,GAAGE,CAAC,CAACiC,QAAF,CAAW1D,MAAX,GAAoB,CAAvB,GAA2B,CAAlD;;YAEI6B,IAAI,CAAC0E,UAAL,CAAgB7E,CAAhB,EAAmB8E,IAAnB,CAAJ,EAA8B;UAC5B4G,SAAS,GAAG5G,IAAI,CAAC9E,CAAC,CAAC1B,MAAH,CAAhB;;;QAGF0B,CAAC,GAAGA,CAAC,CAAC8K,MAAF,CAASY,SAAT,CAAJ;QACA3L,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAJ;;OAxBS;;;UA6BPA,CAAC,CAAC1B,MAAF,KAAa,CAAjB,EAAoB;;OA7BT;;;UAkCP,CAACuB,OAAL,EAAc;YACNgJ,OAAO,GAAG1I,IAAI,CAAClB,IAAL,CAAUe,CAAV,CAAhB;;YAEI6B,IAAI,CAACyJ,GAAL,CAASb,IAAT,EAAe5B,OAAf,CAAJ,EAA6B;UAC3B7I,CAAC,GAAG6I,OAAJ;UACA9I,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAJ;;;OAvCO;;;UA6CPH,OAAO,IAAIG,CAAC,CAACA,CAAC,CAAC1B,MAAF,GAAW,CAAZ,CAAD,KAAoB,CAAnC,EAAsC;YAC9BuK,QAAO,GAAG1I,IAAI,CAACqE,QAAL,CAAcxE,CAAd,CAAhB;;QACAA,CAAC,GAAG6I,QAAJ;QACA9I,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAJ;;OAhDS;;;MAqDXA,CAAC,GAAGG,IAAI,CAACgF,MAAL,CAAYnF,CAAZ,CAAJ;MACAD,CAAC,GAAG8B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAezK,CAAf,CAAJ;MACAwL,OAAO,CAACjE,GAAR,CAAYxH,CAAZ;;GA3ac;;;;;EAmblBoF,MAnbkB,kBAmbXsF,IAnbW,EAmbC7K,IAnbD;QAobV8G,UAAU,GAAGvG,IAAI,CAACgF,MAAL,CAAYvF,IAAZ,CAAnB;QACMI,CAAC,GAAG6B,IAAI,CAACoC,GAAL,CAASwG,IAAT,EAAe/D,UAAf,CAAV;;QAEIzG,IAAI,CAACC,MAAL,CAAYF,CAAZ,CAAJ,EAAoB;YACZ,IAAIkF,KAAJ,0CAC8BtF,IAD9B,8CAAN;;;WAKKI,CAAP;GA7bgB;;;;;;;;;EAwclB2H,MAxckB,kBAwcXhG,IAxcW;QAycZ1B,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAJ,EAAuB;aACdA,IAAI,CAAChE,IAAZ;KADF,MAEO;aACEgE,IAAI,CAACK,QAAL,CAAc2J,GAAd,CAAkB9J,IAAI,CAAC8F,MAAvB,EAA+BiE,IAA/B,CAAoC,EAApC,CAAP;;GA5cc;;;;;EAodjB1C,KApdiB,kBAqdhBuB,IArdgB;QAsdhBnL,8EAKI;;;;;;4BAEuBuC,IAAI,CAAC0C,KAAL,CAAWkG,IAAX,EAAiBnL,OAAjB,CAA3B,mIAAsD;;YAA1CqC,IAA0C;YAApC/B,IAAoC;;YAChDK,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAJ,EAAuB;gBACf,CAACA,IAAD,EAAO/B,IAAP,CAAN;;;;;;;;;;;;;;;;;;CA/dD;;;;;IC+FM4D,SAAS,GAAG;;;;EAKvBqI,eALuB,2BAKPtL,KALO;WAMdiD,SAAS,CAACsI,WAAV,CAAsBvL,KAAtB,KAAgCA,KAAK,CAACkI,IAAN,CAAWsD,QAAX,CAAoB,OAApB,CAAvC;GANqB;;;;;EAavBD,WAbuB,uBAaXvL,KAbW;QAcjB,CAACuC,aAAa,CAACvC,KAAD,CAAlB,EAA2B;aAClB,KAAP;;;YAGMA,KAAK,CAACkI,IAAd;WACO,aAAL;eACStI,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,KAA2BiC,IAAI,CAAC0J,MAAL,CAAYhL,KAAK,CAACoB,IAAlB,CAAlC;;WACG,aAAL;eAEI,OAAOpB,KAAK,CAAC3C,MAAb,KAAwB,QAAxB,IACA,OAAO2C,KAAK,CAAC5C,IAAb,KAAsB,QADtB,IAEAwC,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,CAHF;;WAKG,YAAL;eAEI,OAAOW,KAAK,CAACiJ,QAAb,KAA0B,QAA1B,IACArJ,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,CADA,IAEAkD,aAAa,CAACvC,KAAK,CAACkJ,UAAP,CAHf;;WAKG,WAAL;eACStJ,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,KAA2BO,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACsI,OAAlB,CAAlC;;WACG,aAAL;eACS1I,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,KAA2BiC,IAAI,CAAC0J,MAAL,CAAYhL,KAAK,CAACoB,IAAlB,CAAlC;;WACG,aAAL;eAEI,OAAOpB,KAAK,CAAC3C,MAAb,KAAwB,QAAxB,IACA,OAAO2C,KAAK,CAAC5C,IAAb,KAAsB,QADtB,IAEAwC,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,CAHF;;WAKG,UAAL;eAEIO,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,KACAkD,aAAa,CAACvC,KAAK,CAACkJ,UAAP,CADb,IAEA3G,aAAa,CAACvC,KAAK,CAAC4I,aAAP,CAHf;;WAKG,eAAL;eAEK5I,KAAK,CAACkJ,UAAN,KAAqB,IAArB,IAA6BpG,KAAK,CAACC,OAAN,CAAc/C,KAAK,CAAC4I,aAApB,CAA9B,IACC5I,KAAK,CAAC4I,aAAN,KAAwB,IAAxB,IAAgC9F,KAAK,CAACC,OAAN,CAAc/C,KAAK,CAACkJ,UAApB,CADjC,IAEC3G,aAAa,CAACvC,KAAK,CAACkJ,UAAP,CAAb,IACC3G,aAAa,CAACvC,KAAK,CAAC4I,aAAP,CAJjB;;WAMG,YAAL;eAEIhJ,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,KACA,OAAOW,KAAK,CAACiJ,QAAb,KAA0B,QAD1B,IAEA1G,aAAa,CAACvC,KAAK,CAACkJ,UAAP,CAHf;;;eAMO,KAAP;;GA/DiB;;;;;EAuEvBhG,eAvEuB,2BAuEPlD,KAvEO;WAyEnB4F,KAAK,CAACiE,OAAN,CAAc7J,KAAd,MACCA,KAAK,CAACjC,MAAN,KAAiB,CAAjB,IAAsBkF,SAAS,CAACsI,WAAV,CAAsBvL,KAAK,CAAC,CAAD,CAA3B,CADvB,CADF;GAxEqB;;;;;EAkFvByL,oBAlFuB,gCAkFFzL,KAlFE;WAmFdiD,SAAS,CAACsI,WAAV,CAAsBvL,KAAtB,KAAgCA,KAAK,CAACkI,IAAN,CAAWsD,QAAX,CAAoB,YAApB,CAAvC;GAnFqB;;;;;EA0FvBE,eA1FuB,2BA0FP1L,KA1FO;WA2FdiD,SAAS,CAACsI,WAAV,CAAsBvL,KAAtB,KAAgCA,KAAK,CAACkI,IAAN,CAAWsD,QAAX,CAAoB,OAApB,CAAvC;GA3FqB;;;;;;EAmGvBG,OAnGuB,mBAmGf3D,EAnGe;YAoGbA,EAAE,CAACE,IAAX;WACO,aAAL;;qCACcF,EAAZ;YAAgBE,IAAI,EAAE;;;;WAGnB,aAAL;;qCACcF,EAAZ;YAAgBE,IAAI,EAAE;;;;WAGnB,YAAL;;qCACcF,EAAZ;YAAgBE,IAAI,EAAE,YAAtB;YAAoC7I,IAAI,EAAEO,IAAI,CAACqE,QAAL,CAAc+D,EAAE,CAAC3I,IAAjB;;;;WAGvC,WAAL;;cACUiJ,OADQ,GACUN,EADV,CACRM,OADQ;cACCjJ,IADD,GACU2I,EADV,CACC3I,IADD;;cAIZO,IAAI,CAACC,MAAL,CAAYyI,OAAZ,EAAqBjJ,IAArB,CAAJ,EAAgC;mBACvB2I,EAAP;WALc;;;;cAUZpI,IAAI,CAACgM,SAAL,CAAevM,IAAf,EAAqBiJ,OAArB,CAAJ,EAAmC;uCACrBN,EAAZ;cAAgB3I,IAAI,EAAEiJ,OAAtB;cAA+BA,OAAO,EAAEjJ;;WAX1B;;;;;;;;cAoBVwM,WAAW,GAAGjM,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,CAApB;cACM8D,cAAc,GAAGlM,IAAI,CAACmI,SAAL,CAAenI,IAAI,CAAClB,IAAL,CAAUW,IAAV,CAAf,EAAgC2I,EAAhC,CAAvB;qCACYA,EAAZ;YAAgB3I,IAAI,EAAEwM,WAAtB;YAAmCvD,OAAO,EAAEwD;;;;WAGzC,aAAL;;qCACc9D,EAAZ;YAAgBE,IAAI,EAAE;;;;WAGnB,aAAL;;qCACcF,EAAZ;YAAgBE,IAAI,EAAE;;;;WAGnB,UAAL;;cACUgB,UADO,GACuBlB,EADvB,CACPkB,UADO;cACKN,aADL,GACuBZ,EADvB,CACKY,aADL;qCAEHZ,EAAZ;YAAgBkB,UAAU,EAAEN,aAA5B;YAA2CA,aAAa,EAAEM;;;;WAGvD,eAAL;;cACUA,WADY,GACkBlB,EADlB,CACZkB,UADY;cACAN,cADA,GACkBZ,EADlB,CACAY,aADA;;cAGhBM,WAAU,IAAI,IAAlB,EAAwB;uCAEjBlB,EADL;cAEEkB,UAAU,EAAEN,cAFd;cAGEA,aAAa,EAAE;;WAJnB,MAMO,IAAIA,cAAa,IAAI,IAArB,EAA2B;uCAE3BZ,EADL;cAEEkB,UAAU,EAAE,IAFd;cAGEN,aAAa,EAAEM;;WAJZ,MAMA;uCACOlB,EAAZ;cAAgBkB,UAAU,EAAEN,cAA5B;cAA2CA,aAAa,EAAEM;;;;;WAIzD,YAAL;;qCACclB,EAAZ;YAAgBE,IAAI,EAAE,YAAtB;YAAoC7I,IAAI,EAAEO,IAAI,CAAClB,IAAL,CAAUsJ,EAAE,CAAC3I,IAAb;;;;;CA5K3C;;IC9FMO,IAAI,GAAG;;;;;;;EAQlBuK,SARkB,qBAQR9K,IARQ;QAQIN,8EAAiC;2BACzBA,QAApBO;QAAAA,wCAAU;QACdyM,KAAK,GAAGnM,IAAI,CAACL,MAAL,CAAYF,IAAZ,EAAkBN,OAAlB,CAAZ;;QAEIO,OAAJ,EAAa;MACXyM,KAAK,GAAGA,KAAK,CAAC1N,KAAN,CAAY,CAAZ,CAAR;KADF,MAEO;MACL0N,KAAK,GAAGA,KAAK,CAAC1N,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;;;WAGK0N,KAAP;GAlBgB;;;;;EAyBlBxF,MAzBkB,kBAyBXlH,IAzBW,EAyBCmL,OAzBD;QA0BVjE,MAAM,GAAS,EAArB;;SAEK,IAAIvI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,IAAI,CAACtB,MAAT,IAAmBC,CAAC,GAAGwM,OAAO,CAACzM,MAA/C,EAAuDC,CAAC,EAAxD,EAA4D;UACpDgO,EAAE,GAAG3M,IAAI,CAACrB,CAAD,CAAf;UACMiO,EAAE,GAAGzB,OAAO,CAACxM,CAAD,CAAlB;;UAEIgO,EAAE,KAAKC,EAAX,EAAe;;;;MAIf1F,MAAM,CAACzC,IAAP,CAAYkI,EAAZ;;;WAGKzF,MAAP;GAvCgB;;;;;;;;;;EAmDlBjB,OAnDkB,mBAmDVjG,IAnDU,EAmDEmL,OAnDF;QAoDV0B,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS7M,IAAI,CAACtB,MAAd,EAAsByM,OAAO,CAACzM,MAA9B,CAAZ;;SAEK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkO,GAApB,EAAyBlO,CAAC,EAA1B,EAA8B;UACxBqB,IAAI,CAACrB,CAAD,CAAJ,GAAUwM,OAAO,CAACxM,CAAD,CAArB,EAA0B,OAAO,CAAC,CAAR;UACtBqB,IAAI,CAACrB,CAAD,CAAJ,GAAUwM,OAAO,CAACxM,CAAD,CAArB,EAA0B,OAAO,CAAP;;;WAGrB,CAAP;GA3DgB;;;;;EAkElBoO,SAlEkB,qBAkER/M,IAlEQ,EAkEImL,OAlEJ;QAmEVxM,CAAC,GAAGqB,IAAI,CAACtB,MAAL,GAAc,CAAxB;QACMsO,EAAE,GAAGhN,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAcL,CAAd,CAAX;QACMsO,EAAE,GAAG9B,OAAO,CAACnM,KAAR,CAAc,CAAd,EAAiBL,CAAjB,CAAX;QACMgO,EAAE,GAAG3M,IAAI,CAACrB,CAAD,CAAf;QACMiO,EAAE,GAAGzB,OAAO,CAACxM,CAAD,CAAlB;WACO4B,IAAI,CAACC,MAAL,CAAYwM,EAAZ,EAAgBC,EAAhB,KAAuBN,EAAE,GAAGC,EAAnC;GAxEgB;;;;;EA+ElBM,MA/EkB,kBA+EXlN,IA/EW,EA+ECmL,OA/ED;QAgFVxM,CAAC,GAAGqB,IAAI,CAACtB,MAAf;QACMsO,EAAE,GAAGhN,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAcL,CAAd,CAAX;QACMsO,EAAE,GAAG9B,OAAO,CAACnM,KAAR,CAAc,CAAd,EAAiBL,CAAjB,CAAX;WACO4B,IAAI,CAACC,MAAL,CAAYwM,EAAZ,EAAgBC,EAAhB,CAAP;GAnFgB;;;;;EA0FlBE,UA1FkB,sBA0FPnN,IA1FO,EA0FKmL,OA1FL;QA2FVxM,CAAC,GAAGqB,IAAI,CAACtB,MAAL,GAAc,CAAxB;QACMsO,EAAE,GAAGhN,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAcL,CAAd,CAAX;QACMsO,EAAE,GAAG9B,OAAO,CAACnM,KAAR,CAAc,CAAd,EAAiBL,CAAjB,CAAX;QACMgO,EAAE,GAAG3M,IAAI,CAACrB,CAAD,CAAf;QACMiO,EAAE,GAAGzB,OAAO,CAACxM,CAAD,CAAlB;WACO4B,IAAI,CAACC,MAAL,CAAYwM,EAAZ,EAAgBC,EAAhB,KAAuBN,EAAE,GAAGC,EAAnC;GAhGgB;;;;;EAuGlBpM,MAvGkB,kBAuGXR,IAvGW,EAuGCmL,OAvGD;WAyGdnL,IAAI,CAACtB,MAAL,KAAgByM,OAAO,CAACzM,MAAxB,IAAkCsB,IAAI,CAAC0C,KAAL,CAAW,UAACvC,CAAD,EAAIxB,CAAJ;aAAUwB,CAAC,KAAKgL,OAAO,CAACxM,CAAD,CAAvB;KAAX,CADpC;GAxGgB;;;;;EAiHlBkN,OAjHkB,mBAiHV7L,IAjHU,EAiHEmL,OAjHF;WAkHT5K,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CAAvC;GAlHgB;;;;;EAyHlBlG,UAzHkB,sBAyHPjF,IAzHO,EAyHKmL,OAzHL;WA0HTnL,IAAI,CAACtB,MAAL,GAAcyM,OAAO,CAACzM,MAAtB,IAAgC6B,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CAAvE;GA1HgB;;;;;EAiIlBd,QAjIkB,oBAiITrK,IAjIS,EAiIGmL,OAjIH;WAkIT5K,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CAAC,CAAxC;GAlIgB;;;;;EAyIlBiC,OAzIkB,mBAyIVpN,IAzIU,EAyIEmL,OAzIF;WA2IdnL,IAAI,CAACtB,MAAL,KAAgByM,OAAO,CAACzM,MAAR,GAAiB,CAAjC,IAAsC6B,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CADxE;GA1IgB;;;;;EAmJlBkC,QAnJkB,oBAmJTrN,IAnJS,EAmJGmL,OAnJH;WAoJTnL,IAAI,CAACtB,MAAL,IAAeyM,OAAO,CAACzM,MAAvB,IAAiC6B,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CAAxE;GApJgB;;;;;EA2JlBmC,YA3JkB,wBA2JLtN,IA3JK,EA2JOmL,OA3JP;WA4JTnL,IAAI,CAACtB,MAAL,GAAcyM,OAAO,CAACzM,MAAtB,IAAgC6B,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CAAvE;GA5JgB;;;;;EAmKlBoC,QAnKkB,oBAmKTvN,IAnKS,EAmKGmL,OAnKH;WAqKdnL,IAAI,CAACtB,MAAL,GAAc,CAAd,KAAoByM,OAAO,CAACzM,MAA5B,IAAsC6B,IAAI,CAAC0F,OAAL,CAAajG,IAAb,EAAmBmL,OAAnB,MAAgC,CADxE;GApKgB;;;;;EA6KlB9F,MA7KkB,kBA6KX1E,KA7KW;WA+Kd4F,KAAK,CAACiE,OAAN,CAAc7J,KAAd,MACCA,KAAK,CAACjC,MAAN,KAAiB,CAAjB,IAAsB,OAAOiC,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAD3C,CADF;GA9KgB;;;;;EAwLlB4L,SAxLkB,qBAwLRvM,IAxLQ,EAwLImL,OAxLJ;QAyLZnL,IAAI,CAACtB,MAAL,KAAgByM,OAAO,CAACzM,MAA5B,EAAoC;aAC3B,KAAP;;;QAGIsO,EAAE,GAAGhN,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAX;QACMiO,EAAE,GAAG9B,OAAO,CAACnM,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAX;QACMwO,EAAE,GAAGxN,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAf;QACM+O,EAAE,GAAGtC,OAAO,CAACA,OAAO,CAACzM,MAAR,GAAiB,CAAlB,CAAlB;WACO8O,EAAE,KAAKC,EAAP,IAAalN,IAAI,CAACC,MAAL,CAAYwM,EAAZ,EAAgBC,EAAhB,CAApB;GAjMgB;;;;;;;;;EA4MlB/M,MA5MkB,kBA6MhBF,IA7MgB;QA8MhBN,8EAEI;4BAEwBA,QAApBO;QAAAA,yCAAU;QACZyN,IAAI,GAAW,EAArB;;SAEK,IAAI/O,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIqB,IAAI,CAACtB,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;MACrC+O,IAAI,CAACjJ,IAAL,CAAUzE,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAcL,CAAd,CAAV;;;QAGEsB,OAAJ,EAAa;MACXyN,IAAI,CAACzN,OAAL;;;WAGKyN,IAAP;GA7NgB;;;;;EAoOlBrO,IApOkB,gBAoObW,IApOa;QAqOZA,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;YACf,IAAI4G,KAAJ,oDACwCtF,IADxC,sCAAN;;;QAKIuE,IAAI,GAAGvE,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAjB;WACOsB,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBkM,MAAlB,CAAyB3G,IAAI,GAAG,CAAhC,CAAP;GA5OgB;;;;;EAmPlBgB,MAnPkB,kBAmPXvF,IAnPW;QAoPZA,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;YACf,IAAI4G,KAAJ,wDAA0DtF,IAA1D,QAAN;;;WAGKA,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;GAxPgB;;;;;EA+PlB4F,QA/PkB,oBA+PT5E,IA/PS;QAgQZA,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;YACf,IAAI4G,KAAJ,wDAC4CtF,IAD5C,0CAAN;;;QAKIuE,IAAI,GAAGvE,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAjB;;QAEI6F,IAAI,IAAI,CAAZ,EAAe;YACP,IAAIe,KAAJ,+DACmDtF,IADnD,oDAAN;;;WAKKA,IAAI,CAAChB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBkM,MAAlB,CAAyB3G,IAAI,GAAG,CAAhC,CAAP;GA9QgB;;;;;EAqRlBoJ,QArRkB,oBAqRT3N,IArRS,EAqRG4K,QArRH;QAsRZ,CAACrK,IAAI,CAAC0E,UAAL,CAAgB2F,QAAhB,EAA0B5K,IAA1B,CAAD,IAAoC,CAACO,IAAI,CAACC,MAAL,CAAYR,IAAZ,EAAkB4K,QAAlB,CAAzC,EAAsE;YAC9D,IAAItF,KAAJ,4CACgCtF,IADhC,gCAC0D4K,QAD1D,sDAAN;;;WAKK5K,IAAI,CAAChB,KAAL,CAAW4L,QAAQ,CAAClM,MAApB,CAAP;GA5RgB;;;;;EAmSlBgK,SAnSkB,qBAoShB1I,IApSgB,EAqShB4N,SArSgB;QAsShBlO,8EAAwD;WAEjD8L,aAAO,CAACxL,IAAD,EAAO,UAAAI,CAAC;8BACaV,QAAzB2H;UAAAA,0CAAW;;UAGfrH,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;;;;cAIfkP,SAAS,CAAC/E,IAAlB;aACO,aAAL;;gBACgBF,EADI,GACGiF,SADH,CACV5N,IADU;;gBAIhBO,IAAI,CAACC,MAAL,CAAYmI,EAAZ,EAAgBvI,CAAhB,KACAG,IAAI,CAAC4M,UAAL,CAAgBxE,EAAhB,EAAoBvI,CAApB,CADA,IAEAG,IAAI,CAAC0E,UAAL,CAAgB0D,EAAhB,EAAoBvI,CAApB,CAHF,EAIE;cACAA,CAAC,CAACuI,EAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;;;;;;aAMC,aAAL;;gBACgBiK,GADI,GACGiF,SADH,CACV5N,IADU;;gBAGdO,IAAI,CAACC,MAAL,CAAYmI,GAAZ,EAAgBvI,CAAhB,KAAsBG,IAAI,CAAC0E,UAAL,CAAgB0D,GAAhB,EAAoBvI,CAApB,CAA1B,EAAkD;qBACzC,IAAP;aADF,MAEO,IAAIG,IAAI,CAAC4M,UAAL,CAAgBxE,GAAhB,EAAoBvI,CAApB,CAAJ,EAA4B;cACjCA,CAAC,CAACuI,GAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;;;;;;aAMC,YAAL;;gBACgBiK,IADG,GACciF,SADd,CACT5N,IADS;gBACC4J,QADD,GACcgE,SADd,CACChE,QADD;;gBAGbrJ,IAAI,CAACC,MAAL,CAAYmI,IAAZ,EAAgBvI,CAAhB,KAAsBG,IAAI,CAAC4M,UAAL,CAAgBxE,IAAhB,EAAoBvI,CAApB,CAA1B,EAAkD;cAChDA,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;aADF,MAEO,IAAI6B,IAAI,CAAC0E,UAAL,CAAgB0D,IAAhB,EAAoBvI,CAApB,CAAJ,EAA4B;cACjCA,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;cACA0B,CAAC,CAACuI,IAAE,CAACjK,MAAJ,CAAD,IAAgBkL,QAAhB;;;;;;aAMC,YAAL;;gBACgBjB,IADG,GACciF,SADd,CACT5N,IADS;gBACC4J,SADD,GACcgE,SADd,CACChE,QADD;;gBAGbrJ,IAAI,CAACC,MAAL,CAAYmI,IAAZ,EAAgBvI,CAAhB,CAAJ,EAAwB;kBAClBiH,QAAQ,KAAK,SAAjB,EAA4B;gBAC1BjH,CAAC,CAACA,CAAC,CAAC1B,MAAF,GAAW,CAAZ,CAAD,IAAmB,CAAnB;eADF,MAEO,IAAI2I,QAAQ,KAAK,UAAjB,EAA6B,CAA7B,MAEA;uBACE,IAAP;;aANJ,MAQO,IAAI9G,IAAI,CAAC4M,UAAL,CAAgBxE,IAAhB,EAAoBvI,CAApB,CAAJ,EAA4B;cACjCA,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;aADK,MAEA,IAAI6B,IAAI,CAAC0E,UAAL,CAAgB0D,IAAhB,EAAoBvI,CAApB,KAA0BJ,IAAI,CAAC2I,IAAE,CAACjK,MAAJ,CAAJ,IAAmBkL,SAAjD,EAA2D;cAChExJ,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;cACA0B,CAAC,CAACuI,IAAE,CAACjK,MAAJ,CAAD,IAAgBkL,SAAhB;;;;;;aAMC,WAAL;;gBACgBjB,IADE,GACmBiF,SADnB,CACR5N,IADQ;gBACW6N,GADX,GACmBD,SADnB,CACE3E,OADF;;gBAIZ1I,IAAI,CAACC,MAAL,CAAYmI,IAAZ,EAAgBkF,GAAhB,CAAJ,EAA0B;;;;gBAItBtN,IAAI,CAAC0E,UAAL,CAAgB0D,IAAhB,EAAoBvI,CAApB,KAA0BG,IAAI,CAACC,MAAL,CAAYmI,IAAZ,EAAgBvI,CAAhB,CAA9B,EAAkD;kBAC1C0N,IAAI,GAAGD,GAAG,CAAC7O,KAAJ,EAAb;;kBAEIuB,IAAI,CAAC4M,UAAL,CAAgBxE,IAAhB,EAAoBkF,GAApB,KAA4BlF,IAAE,CAACjK,MAAH,GAAYmP,GAAG,CAACnP,MAAhD,EAAwD;gBACtDoP,IAAI,CAACnF,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAJ,IAAuB,CAAvB;;;qBAGKoP,IAAI,CAAC5C,MAAL,CAAY9K,CAAC,CAACpB,KAAF,CAAQ2J,IAAE,CAACjK,MAAX,CAAZ,CAAP;aAPF,MAQO,IACL6B,IAAI,CAACgM,SAAL,CAAe5D,IAAf,EAAmBkF,GAAnB,MACCtN,IAAI,CAAC0E,UAAL,CAAgB4I,GAAhB,EAAqBzN,CAArB,KAA2BG,IAAI,CAACC,MAAL,CAAYqN,GAAZ,EAAiBzN,CAAjB,CAD5B,CADK,EAGL;kBACIG,IAAI,CAAC4M,UAAL,CAAgBxE,IAAhB,EAAoBvI,CAApB,CAAJ,EAA4B;gBAC1BA,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;eADF,MAEO;gBACL0B,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;;aAPG,MASA,IACL6B,IAAI,CAAC4M,UAAL,CAAgBU,GAAhB,EAAqBzN,CAArB,KACAG,IAAI,CAACC,MAAL,CAAYqN,GAAZ,EAAiBzN,CAAjB,CADA,IAEAG,IAAI,CAAC0E,UAAL,CAAgB4I,GAAhB,EAAqBzN,CAArB,CAHK,EAIL;kBACIG,IAAI,CAAC4M,UAAL,CAAgBxE,IAAhB,EAAoBvI,CAApB,CAAJ,EAA4B;gBAC1BA,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;;;cAGF0B,CAAC,CAACyN,GAAG,CAACnP,MAAJ,GAAa,CAAd,CAAD,IAAqB,CAArB;aATK,MAUA,IAAI6B,IAAI,CAAC4M,UAAL,CAAgBxE,IAAhB,EAAoBvI,CAApB,CAAJ,EAA4B;kBAC7BG,IAAI,CAACC,MAAL,CAAYqN,GAAZ,EAAiBzN,CAAjB,CAAJ,EAAyB;gBACvBA,CAAC,CAACyN,GAAG,CAACnP,MAAJ,GAAa,CAAd,CAAD,IAAqB,CAArB;;;cAGF0B,CAAC,CAACuI,IAAE,CAACjK,MAAH,GAAY,CAAb,CAAD,IAAoB,CAApB;;;;;;KA7GM,CAAd;;CAxSG;;ICGMqP,OAAO,GAAG;;;;EAKrBrF,SALqB,qBAKXpB,GALW,EAKGqB,EALH;QAMXpB,UAAsBD,IAAtBC;QAASF,WAAaC,IAAbD;;QAEbE,OAAO,IAAI,IAAf,EAAqB;;;;QAIfvH,IAAI,GAAGO,IAAI,CAACmI,SAAL,CAAenB,OAAf,EAAwBoB,EAAxB,EAA4B;MAAEtB,QAAQ,EAARA;KAA9B,CAAb;IACAC,GAAG,CAACC,OAAJ,GAAcvH,IAAd;;QAEIA,IAAI,IAAI,IAAZ,EAAkB;MAChBsH,GAAG,CAACE,KAAJ;;;CAhBC;;;;;ICGMxD,KAAK,GAAG;;;;;EAMnBiC,OANmB,mBAMXnF,KANW,EAMGqK,OANH;QAOX9B,MAAM,GAAG9I,IAAI,CAAC0F,OAAL,CAAanF,KAAK,CAACd,IAAnB,EAAyBmL,OAAO,CAACnL,IAAjC,CAAf;;QAEIqJ,MAAM,KAAK,CAAf,EAAkB;UACZvI,KAAK,CAAC9C,MAAN,GAAemN,OAAO,CAACnN,MAA3B,EAAmC,OAAO,CAAC,CAAR;UAC/B8C,KAAK,CAAC9C,MAAN,GAAemN,OAAO,CAACnN,MAA3B,EAAmC,OAAO,CAAP;aAC5B,CAAP;;;WAGKqL,MAAP;GAfiB;;;;;EAsBnBwC,OAtBmB,mBAsBX/K,KAtBW,EAsBGqK,OAtBH;WAuBVnH,KAAK,CAACiC,OAAN,CAAcnF,KAAd,EAAqBqK,OAArB,MAAkC,CAAzC;GAvBiB;;;;;EA8BnBd,QA9BmB,oBA8BVvJ,KA9BU,EA8BIqK,OA9BJ;WA+BVnH,KAAK,CAACiC,OAAN,CAAcnF,KAAd,EAAqBqK,OAArB,MAAkC,CAAC,CAA1C;GA/BiB;;;;;EAsCnB3K,MAtCmB,kBAsCZM,KAtCY,EAsCEqK,OAtCF;;WAyCfrK,KAAK,CAAC9C,MAAN,KAAiBmN,OAAO,CAACnN,MAAzB,IAAmCuC,IAAI,CAACC,MAAL,CAAYM,KAAK,CAACd,IAAlB,EAAwBmL,OAAO,CAACnL,IAAhC,CADrC;GAxCiB;;;;;EAiDnBmH,OAjDmB,mBAiDXxG,KAjDW;WAmDfuC,aAAa,CAACvC,KAAD,CAAb,IACA,OAAOA,KAAK,CAAC3C,MAAb,KAAwB,QADxB,IAEAuC,IAAI,CAAC8E,MAAL,CAAY1E,KAAK,CAACX,IAAlB,CAHF;GAlDiB;;;;;EA6DnB0I,SA7DmB,qBA8DjB5H,KA9DiB,EA+DjB6H,EA/DiB;QAgEjBjJ,8EAAwD;WAEjD8L,aAAO,CAAC1K,KAAD,EAAQ,UAAAV,CAAC;8BACYV,QAAzB2H;UAAAA,0CAAW;UACXrH,OAAiBI,EAAjBJ;UAAMhC,SAAWoC,EAAXpC;;cAEN2K,EAAE,CAACE,IAAX;aACO,aAAL;aACK,WAAL;;YACEzI,CAAC,CAACJ,IAAF,GAASO,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,EAAyBjJ,OAAzB,CAAT;;;;aAIG,aAAL;;gBACMa,IAAI,CAACC,MAAL,CAAYmI,EAAE,CAAC3I,IAAf,EAAqBA,IAArB,KAA8B2I,EAAE,CAAC3K,MAAH,IAAaA,MAA/C,EAAuD;cACrDoC,CAAC,CAACpC,MAAF,IAAY2K,EAAE,CAAC5K,IAAH,CAAQW,MAApB;;;;;;aAMC,YAAL;;gBACM6B,IAAI,CAACC,MAAL,CAAYmI,EAAE,CAAC3I,IAAf,EAAqBA,IAArB,CAAJ,EAAgC;cAC9BI,CAAC,CAACpC,MAAF,IAAY2K,EAAE,CAACiB,QAAf;;;YAGFxJ,CAAC,CAACJ,IAAF,GAASO,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,EAAyBjJ,OAAzB,CAAT;;;;aAIG,aAAL;;gBACMa,IAAI,CAACC,MAAL,CAAYmI,EAAE,CAAC3I,IAAf,EAAqBA,IAArB,KAA8B2I,EAAE,CAAC3K,MAAH,IAAaA,MAA/C,EAAuD;cACrDoC,CAAC,CAACpC,MAAF,IAAY8O,IAAI,CAACD,GAAL,CAAS7O,MAAM,GAAG2K,EAAE,CAAC3K,MAArB,EAA6B2K,EAAE,CAAC5K,IAAH,CAAQW,MAArC,CAAZ;;;;;;aAMC,aAAL;;gBACM6B,IAAI,CAACC,MAAL,CAAYmI,EAAE,CAAC3I,IAAf,EAAqBA,IAArB,KAA8BO,IAAI,CAAC0E,UAAL,CAAgB0D,EAAE,CAAC3I,IAAnB,EAAyBA,IAAzB,CAAlC,EAAkE;qBACzD,IAAP;;;YAGFI,CAAC,CAACJ,IAAF,GAASO,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,EAAyBjJ,OAAzB,CAAT;;;;aAIG,YAAL;;gBACMa,IAAI,CAACC,MAAL,CAAYmI,EAAE,CAAC3I,IAAf,EAAqBA,IAArB,CAAJ,EAAgC;kBAC1B2I,EAAE,CAACiB,QAAH,KAAgB5L,MAAhB,IAA0BqJ,QAAQ,IAAI,IAA1C,EAAgD;uBACvC,IAAP;eADF,MAEO,IACLsB,EAAE,CAACiB,QAAH,GAAc5L,MAAd,IACC2K,EAAE,CAACiB,QAAH,KAAgB5L,MAAhB,IAA0BqJ,QAAQ,KAAK,SAFnC,EAGL;gBACAjH,CAAC,CAACpC,MAAF,IAAY2K,EAAE,CAACiB,QAAf;gBAEAxJ,CAAC,CAACJ,IAAF,GAASO,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,sBACJjJ,OADI;kBAEP2H,QAAQ,EAAE;mBAFZ;;aATJ,MAcO;cACLjH,CAAC,CAACJ,IAAF,GAASO,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,EAAyBjJ,OAAzB,CAAT;;;;;;KA7DM,CAAd;;CAlEG;;ICHMsO,QAAQ,GAAG;;;;EAKtBtF,SALsB,qBAKZpB,GALY,EAKGqB,EALH;QAMZpB,UAAsBD,IAAtBC;QAASF,WAAaC,IAAbD;;QAEbE,OAAO,IAAI,IAAf,EAAqB;;;;QAIfzG,KAAK,GAAGkD,KAAK,CAAC0E,SAAN,CAAgBnB,OAAhB,EAAyBoB,EAAzB,EAA6B;MAAEtB,QAAQ,EAARA;KAA/B,CAAd;IACAC,GAAG,CAACC,OAAJ,GAAczG,KAAd;;QAEIA,KAAK,IAAI,IAAb,EAAmB;MACjBwG,GAAG,CAACE,KAAJ;;;CAhBC;;;;;ICEM/D,KAAK,GAAG;;;;;EAMnB5B,KANmB,iBAOjBX,KAPiB;QAQjBxB,8EAEI;2BAEwBA,QAApBO;QAAAA,wCAAU;QACVY,SAAkBK,MAAlBL;QAAQG,QAAUE,MAAVF;WACTyC,KAAK,CAACwK,UAAN,CAAiB/M,KAAjB,MAA4BjB,OAA5B,GACH,CAACY,MAAD,EAASG,KAAT,CADG,GAEH,CAACA,KAAD,EAAQH,MAAR,CAFJ;GAdiB;;;;;EAuBnBI,GAvBmB,eAuBfC,KAvBe;uBAwBDuC,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAAPD;;WACFA,GAAP;GAzBiB;;;;;EAgCnBT,MAhCmB,kBAgCZU,KAhCY,EAgCEiK,OAhCF;WAkCfnH,KAAK,CAACxD,MAAN,CAAaU,KAAK,CAACL,MAAnB,EAA2BsK,OAAO,CAACtK,MAAnC,KACAmD,KAAK,CAACxD,MAAN,CAAaU,KAAK,CAACF,KAAnB,EAA0BmK,OAAO,CAACnK,KAAlC,CAFF;GAjCiB;;;;;EA2CnBwE,QA3CmB,oBA2CVtE,KA3CU,EA2CIG,MA3CJ;QA4CboC,KAAK,CAACC,OAAN,CAAcrC,MAAd,CAAJ,EAA2B;UAEvBoC,KAAK,CAAC+B,QAAN,CAAetE,KAAf,EAAsBG,MAAM,CAACR,MAA7B,KACA4C,KAAK,CAAC+B,QAAN,CAAetE,KAAf,EAAsBG,MAAM,CAACL,KAA7B,CAFF,EAGE;eACO,IAAP;;;0BAGeyC,KAAK,CAAC5B,KAAN,CAAYX,KAAZ,CARQ;;UAQlBgN,EARkB;UAQdC,EARc;;0BASR1K,KAAK,CAAC5B,KAAN,CAAYR,MAAZ,CATQ;;UASlB+M,EATkB;UASdC,EATc;;aAUlBrK,KAAK,CAACqG,QAAN,CAAe6D,EAAf,EAAmBE,EAAnB,KAA0BpK,KAAK,CAAC6H,OAAN,CAAcsC,EAAd,EAAkBE,EAAlB,CAAjC;;;wBAGmB5K,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAAdM;QAAOP;;QACVqN,YAAY,GAAG,KAAnB;QACIC,WAAW,GAAG,KAAlB;;QAEIvK,KAAK,CAACmD,OAAN,CAAc9F,MAAd,CAAJ,EAA2B;MACzBiN,YAAY,GAAGtK,KAAK,CAACiC,OAAN,CAAc5E,MAAd,EAAsBG,KAAtB,KAAgC,CAA/C;MACA+M,WAAW,GAAGvK,KAAK,CAACiC,OAAN,CAAc5E,MAAd,EAAsBJ,GAAtB,KAA8B,CAA5C;KAFF,MAGO;MACLqN,YAAY,GAAG/N,IAAI,CAAC0F,OAAL,CAAa5E,MAAb,EAAqBG,KAAK,CAACxB,IAA3B,KAAoC,CAAnD;MACAuO,WAAW,GAAGhO,IAAI,CAAC0F,OAAL,CAAa5E,MAAb,EAAqBJ,GAAG,CAACjB,IAAzB,KAAkC,CAAhD;;;WAGKsO,YAAY,IAAIC,WAAvB;GArEiB;;;;;EA4EnBC,YA5EmB,wBA4ENtN,KA5EM,EA4EQiK,OA5ER;QA6ETtK,SAA2BK,MAA3BL;QAAQG,QAAmBE,MAAnBF;QAAU/B,+BAASiC;;wBAClBuC,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAAVuN;QAAIC;;yBACMjL,KAAK,CAAC5B,KAAN,CAAYsJ,OAAZ;;QAAVwD;QAAIC;;QACLpN,KAAK,GAAGwC,KAAK,CAACqG,QAAN,CAAeoE,EAAf,EAAmBE,EAAnB,IAAyBA,EAAzB,GAA8BF,EAA5C;QACMxN,GAAG,GAAG+C,KAAK,CAACqG,QAAN,CAAeqE,EAAf,EAAmBE,EAAnB,IAAyBF,EAAzB,GAA8BE,EAA1C;;QAEI5K,KAAK,CAACqG,QAAN,CAAepJ,GAAf,EAAoBO,KAApB,CAAJ,EAAgC;aACvB,IAAP;KADF,MAEO;;QACIX,MAAM,EAAEW,KAAjB;QAAwBR,KAAK,EAAEC;SAAQhC,IAAvC;;GAtFe;;;;;;EA+FnBgP,UA/FmB,sBA+FR/M,KA/FQ;QAgGTL,SAAkBK,MAAlBL;QAAQG,QAAUE,MAAVF;WACTgD,KAAK,CAAC6H,OAAN,CAAchL,MAAd,EAAsBG,KAAtB,CAAP;GAjGiB;;;;;;EAyGnBkJ,WAzGmB,uBAyGPhJ,KAzGO;QA0GTL,SAAkBK,MAAlBL;QAAQG,QAAUE,MAAVF;WACTgD,KAAK,CAACxD,MAAN,CAAaK,MAAb,EAAqBG,KAArB,CAAP;GA3GiB;;;;;;;EAoHnB0D,UApHmB,sBAoHRxD,KApHQ;WAqHV,CAACuC,KAAK,CAACyG,WAAN,CAAkBhJ,KAAlB,CAAR;GArHiB;;;;;;;EA8HnB2N,SA9HmB,qBA8HT3N,KA9HS;WA+HV,CAACuC,KAAK,CAACwK,UAAN,CAAiB/M,KAAjB,CAAR;GA/HiB;;;;;EAsInBwC,OAtImB,mBAsIX/C,KAtIW;WAwIfuC,aAAa,CAACvC,KAAD,CAAb,IACAqD,KAAK,CAACmD,OAAN,CAAcxG,KAAK,CAACE,MAApB,CADA,IAEAmD,KAAK,CAACmD,OAAN,CAAcxG,KAAK,CAACK,KAApB,CAHF;GAvIiB;;;;;EAkJlBgI,MAlJkB,mBAkJX9H,KAlJW;UAmJX,CAACA,KAAK,CAACL,MAAP,EAAe,QAAf,CAAN;UACM,CAACK,KAAK,CAACF,KAAP,EAAc,OAAd,CAAN;GApJiB;;;;;EA2JnBQ,KA3JmB,iBA2JbN,KA3Ja;yBA4JDuC,KAAK,CAAC5B,KAAN,CAAYX,KAAZ;;QAATM;;WACAA,KAAP;GA7JiB;;;;;EAoKnBkH,SApKmB,qBAqKjBxH,KArKiB,EAsKjByH,EAtKiB,EAuKjBjJ,OAvKiB;4BAyKeA,QAAxB2H;QAAAA,0CAAW;QACfyH,cAAJ;QACIC,aAAJ;;QAEI1H,QAAQ,KAAK,QAAjB,EAA2B;UACrB5D,KAAK,CAACoL,SAAN,CAAgB3N,KAAhB,CAAJ,EAA4B;QAC1B4N,cAAc,GAAG,SAAjB;QACAC,aAAa,GAAG,UAAhB;OAFF,MAGO;QACLD,cAAc,GAAG,UAAjB;QACAC,aAAa,GAAG,SAAhB;;KANJ,MAQO,IAAI1H,QAAQ,KAAK,SAAjB,EAA4B;UAC7B5D,KAAK,CAACoL,SAAN,CAAgB3N,KAAhB,CAAJ,EAA4B;QAC1B4N,cAAc,GAAG,UAAjB;QACAC,aAAa,GAAG,SAAhB;OAFF,MAGO;QACLD,cAAc,GAAG,SAAjB;QACAC,aAAa,GAAG,UAAhB;;KANG,MAQA;MACLD,cAAc,GAAGzH,QAAjB;MACA0H,aAAa,GAAG1H,QAAhB;;;WAGKmE,aAAO,CAACtK,KAAD,EAAQ,UAAAuK,CAAC;UACf5K,MAAM,GAAGmD,KAAK,CAAC0E,SAAN,CAAgB+C,CAAC,CAAC5K,MAAlB,EAA0B8H,EAA1B,EAA8B;QAAEtB,QAAQ,EAAEyH;OAA1C,CAAf;UACM9N,KAAK,GAAGgD,KAAK,CAAC0E,SAAN,CAAgB+C,CAAC,CAACzK,KAAlB,EAAyB2H,EAAzB,EAA6B;QAAEtB,QAAQ,EAAE0H;OAAzC,CAAd;;UAEI,CAAClO,MAAD,IAAW,CAACG,KAAhB,EAAuB;eACd,IAAP;;;MAGFyK,CAAC,CAAC5K,MAAF,GAAWA,MAAX;MACA4K,CAAC,CAACzK,KAAF,GAAUA,KAAV;KATY,CAAd;;CAlMG;;ICFMgO,QAAQ,GAAG;;;;EAKtBtG,SALsB,qBAKZpB,GALY,EAKGqB,EALH;QAMZpB,UAAsBD,IAAtBC;QAASF,WAAaC,IAAbD;;QAEbE,OAAO,IAAI,IAAf,EAAqB;;;;QAIfvH,IAAI,GAAGyD,KAAK,CAACiF,SAAN,CAAgBnB,OAAhB,EAAyBoB,EAAzB,EAA6B;MAAEtB,QAAQ,EAARA;KAA/B,CAAb;IACAC,GAAG,CAACC,OAAJ,GAAcvH,IAAd;;QAEIA,IAAI,IAAI,IAAZ,EAAkB;MAChBsH,GAAG,CAACE,KAAJ;;;CAhBC;;;;;ICAMnH,IAAI,GAAG;;;;EAKlBG,MALkB,kBAMhBzC,IANgB,EAOhBoN,OAPgB;QAQhBzL,8EAA+B;yBAELA,QAAlBuP;QAAAA,oCAAQ;;SAEX,IAAMvO,GAAX,IAAkB3C,IAAlB,EAAwB;UAClBkR,KAAK,IAAIvO,GAAG,KAAK,MAArB,EAA6B;;;;UAIzB3C,IAAI,CAAC2C,GAAD,CAAJ,KAAcyK,OAAO,CAACzK,GAAD,CAAzB,EAAgC;eACvB,KAAP;;;;SAIC,IAAMA,IAAX,IAAkByK,OAAlB,EAA2B;UACrB8D,KAAK,IAAIvO,IAAG,KAAK,MAArB,EAA6B;;;;UAIzB3C,IAAI,CAAC2C,IAAD,CAAJ,KAAcyK,OAAO,CAACzK,IAAD,CAAzB,EAAgC;eACvB,KAAP;;;;WAIG,IAAP;GAhCgB;;;;;EAuClBJ,MAvCkB,kBAuCXK,KAvCW;WAwCTuC,aAAa,CAACvC,KAAD,CAAb,IAAwB,OAAOA,KAAK,CAAC5C,IAAb,KAAsB,QAArD;GAxCgB;;;;;EA+ClBmR,UA/CkB,sBA+CPvO,KA/CO;WAgDT4F,KAAK,CAACiE,OAAN,CAAc7J,KAAd,MAAyBA,KAAK,CAACjC,MAAN,KAAiB,CAAjB,IAAsB2B,IAAI,CAACC,MAAL,CAAYK,KAAK,CAAC,CAAD,CAAjB,CAA/C,CAAP;GAhDgB;;;;;;;;EA0DlBmF,OA1DkB,mBA0DV/H,IA1DU,EA0DE0M,KA1DF;SA2DX,IAAM/J,GAAX,IAAkB+J,KAAlB,EAAyB;UACnB/J,GAAG,KAAK,MAAZ,EAAoB;;;;UAIhB3C,IAAI,CAAC2C,GAAD,CAAJ,KAAc+J,KAAK,CAAC/J,GAAD,CAAvB,EAA8B;eACrB,KAAP;;;;WAIG,IAAP;GArEgB;;;;;EA4ElByO,WA5EkB,uBA4ENpN,IA5EM,EA4EMoN,YA5EN;QA6EZC,MAAM,GAAW,qBAAMrN,IAAN,EAArB;;;;;;2BAEkBoN,YAAlB,8HAA+B;YAApBE,GAAoB;;YACrBxO,MADqB,GACMwO,GADN,CACrBxO,MADqB;YACbG,KADa,GACMqO,GADN,CACbrO,KADa;YACH/B,IADG,2BACMoQ,GADN;;2BAER5L,KAAK,CAAC5B,KAAN,CAAYwN,GAAZ,CAFQ;;YAEtB7N,KAFsB;YAEfP,GAFe;;YAGvB5B,IAAI,GAAG,EAAb;YACIiQ,CAAC,GAAG,CAAR;;;;;;gCAEmBF,MAAnB,mIAA2B;gBAAhB5K,IAAgB;gBACjB9F,MADiB,GACN8F,IAAI,CAACzG,IADC,CACjBW,MADiB;gBAEnBV,MAAM,GAAGsR,CAAf;YACAA,CAAC,IAAI5Q,MAAL,CAHyB;;gBAMrB8C,KAAK,CAACxD,MAAN,IAAgBA,MAAhB,IAA0BiD,GAAG,CAACjD,MAAJ,IAAcA,MAAM,GAAGU,MAArD,EAA6D;cAC3DgL,MAAM,CAACC,MAAP,CAAcnF,IAAd,EAAoBvF,IAApB;cACAI,IAAI,CAACoF,IAAL,CAAUD,IAAV;;aARuB;;;gBAcvBhD,KAAK,CAACxD,MAAN,GAAeA,MAAM,GAAGU,MAAxB,IACAuC,GAAG,CAACjD,MAAJ,GAAaA,MADb,IAECiD,GAAG,CAACjD,MAAJ,KAAeA,MAAf,IAAyBA,MAAM,KAAK,CAHvC,EAIE;cACAqB,IAAI,CAACoF,IAAL,CAAUD,IAAV;;aAlBuB;;;;;gBAyBrB+K,MAAM,GAAG/K,IAAb;gBACIjD,MAAM,SAAV;gBACIX,KAAK,SAAT;;gBAEIK,GAAG,CAACjD,MAAJ,GAAaA,MAAM,GAAGU,MAA1B,EAAkC;kBAC1B8Q,GAAG,GAAGvO,GAAG,CAACjD,MAAJ,GAAaA,MAAzB;cACA4C,KAAK,uBAAQ2O,MAAR;gBAAgBxR,IAAI,EAAEwR,MAAM,CAACxR,IAAP,CAAYiB,KAAZ,CAAkBwQ,GAAlB;gBAA3B;cACAD,MAAM,uBAAQA,MAAR;gBAAgBxR,IAAI,EAAEwR,MAAM,CAACxR,IAAP,CAAYiB,KAAZ,CAAkB,CAAlB,EAAqBwQ,GAArB;gBAA5B;;;gBAGEhO,KAAK,CAACxD,MAAN,GAAeA,MAAnB,EAA2B;kBACnBwR,IAAG,GAAGhO,KAAK,CAACxD,MAAN,GAAeA,MAA3B;;cACAuD,MAAM,uBAAQgO,MAAR;gBAAgBxR,IAAI,EAAEwR,MAAM,CAACxR,IAAP,CAAYiB,KAAZ,CAAkB,CAAlB,EAAqBwQ,IAArB;gBAA5B;cACAD,MAAM,uBAAQA,MAAR;gBAAgBxR,IAAI,EAAEwR,MAAM,CAACxR,IAAP,CAAYiB,KAAZ,CAAkBwQ,IAAlB;gBAA5B;;;YAGF9F,MAAM,CAACC,MAAP,CAAc4F,MAAd,EAAsBtQ,IAAtB;;gBAEIsC,MAAJ,EAAY;cACVlC,IAAI,CAACoF,IAAL,CAAUlD,MAAV;;;YAGFlC,IAAI,CAACoF,IAAL,CAAU8K,MAAV;;gBAEI3O,KAAJ,EAAW;cACTvB,IAAI,CAACoF,IAAL,CAAU7D,KAAV;;;;;;;;;;;;;;;;;;QAIJwO,MAAM,GAAG/P,IAAT;;;;;;;;;;;;;;;;;WAGK+P,MAAP;;CA9IG;;;;;ACCA,IAAMK,iBAAiB,GAAG;;;;EAK/B/G,SAL+B,qBAKrBjJ,MALqB,EAKLkJ,EALK;IAM7BlJ,MAAM,CAAC2C,QAAP,GAAkBwG,iBAAW,CAACnJ,MAAM,CAAC2C,QAAR,CAA7B;QACItC,SAAS,GAAGL,MAAM,CAACK,SAAP,IAAoB8I,iBAAW,CAACnJ,MAAM,CAACK,SAAR,CAA/C;;YAEQ6I,EAAE,CAACE,IAAX;WACO,aAAL;;cACU7I,IADU,GACK2I,EADL,CACV3I,IADU;cACJ+B,IADI,GACK4G,EADL,CACJ5G,IADI;cAEZwD,MAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,IAApB,CAAf;cACM8I,KAAK,GAAG9I,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;UACA6G,MAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,KAAvB,EAA8B,CAA9B,EAAiC/G,IAAjC;;cAEIjC,SAAJ,EAAe;;;;;;mCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,8HAAoD;;oBAAxCgB,KAAwC;oBAAjCJ,GAAiC;;gBAClDZ,SAAS,CAACY,GAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,KAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,aAAL;;cACU3I,KADU,GACa2I,EADb,CACV3I,IADU;cACJhC,MADI,GACa2K,EADb,CACJ3K,MADI;cACID,IADJ,GACa4K,EADb,CACI5K,IADJ;;cAEZgE,KAAI,GAAGE,IAAI,CAACuC,IAAL,CAAU/E,MAAV,EAAkBO,KAAlB,CAAb;;cACMuB,MAAM,GAAGQ,KAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmBhB,MAAnB,CAAf;;cACM4C,KAAK,GAAGmB,KAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgBhB,MAAhB,CAAd;;UACA+D,KAAI,CAAChE,IAAL,GAAYwD,MAAM,GAAGxD,IAAT,GAAgB6C,KAA5B;;cAEId,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,MAAwC;oBAAjCJ,IAAiC;;gBAClDZ,SAAS,CAACY,IAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,MAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,YAAL;;cACU3I,MADS,GACA2I,EADA,CACT3I,IADS;;cAEX+B,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;cACM+E,QAAQ,GAAGxE,IAAI,CAACqE,QAAL,CAAc5E,MAAd,CAAjB;cACM/B,IAAI,GAAGgE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBsF,QAAjB,CAAb;;cACMQ,OAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;cACM8I,MAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;;cAEI2B,IAAI,CAACC,MAAL,CAAYyB,MAAZ,KAAqB1B,IAAI,CAACC,MAAL,CAAYrC,IAAZ,CAAzB,EAA4C;YAC1CA,IAAI,CAACF,IAAL,IAAagE,MAAI,CAAChE,IAAlB;WADF,MAEO,IAAI,CAACsC,IAAI,CAACC,MAAL,CAAYyB,MAAZ,CAAD,IAAsB,CAAC1B,IAAI,CAACC,MAAL,CAAYrC,IAAZ,CAA3B,EAA8C;;;8BACnDA,IAAI,CAACmE,QAAL,EAAcqC,IAAd,yCAAsB1C,MAAI,CAACK,QAA3B;WADK,MAEA;kBACC,IAAIkD,KAAJ,4DAC8CtF,MAD9C,gDACwF+B,MADxF,cACgG9D,IADhG,EAAN;;;UAKFsH,OAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,MAAvB,EAA8B,CAA9B;;cAEIhJ,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,WAAL;;cACU3I,MADQ,GACU2I,EADV,CACR3I,IADQ;cACFiJ,OADE,GACUN,EADV,CACFM,OADE;;cAGZ1I,IAAI,CAAC0E,UAAL,CAAgBjF,MAAhB,EAAsBiJ,OAAtB,CAAJ,EAAoC;kBAC5B,IAAI3D,KAAJ,+BACmBtF,MADnB,4BACyCiJ,OADzC,iDAAN;;;cAKIlH,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;cACMuF,QAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;cACM8I,OAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB,CAXgB;;;;;;;UAmBhB6G,QAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,OAAvB,EAA8B,CAA9B;;cACMI,QAAQ,GAAG3I,IAAI,CAACmI,SAAL,CAAe1I,MAAf,EAAqB2I,EAArB,CAAjB;cACMQ,SAAS,GAAGlH,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBc,IAAI,CAACgF,MAAL,CAAY2D,QAAZ,CAAjB,CAAlB;cACME,QAAQ,GAAGF,QAAQ,CAACA,QAAQ,CAACxK,MAAT,GAAkB,CAAnB,CAAzB;UAEAyK,SAAS,CAAC/G,QAAV,CAAmB2G,MAAnB,CAA0BK,QAA1B,EAAoC,CAApC,EAAuCrH,MAAvC;;cAEIjC,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,aAAL;;cACU3I,MADU,GACD2I,EADC,CACV3I,IADU;cAEZ8I,OAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;;cACM6G,QAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;UACAuF,QAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,OAAvB,EAA8B,CAA9B,EAJkB;;;;cAQdhJ,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;oBAC5C2I,MAAM,GAAGrF,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAf;;oBAEI7I,SAAS,IAAI,IAAb,IAAqBuJ,MAAM,IAAI,IAAnC,EAAyC;kBACvCvJ,SAAS,CAACY,KAAD,CAAT,GAAiB2I,MAAjB;iBADF,MAEO;sBACDpL,KAAiC,SAArC;;sBACIoB,IAAiC,SAArC;;;;;;0CAEqB4C,IAAI,CAACqH,KAAL,CAAW7J,MAAX,CAArB,mIAAyC;;0BAA7BU,CAA6B;0BAA1BC,CAA0B;;0BACnCG,IAAI,CAAC0F,OAAL,CAAa7F,CAAb,EAAgBJ,MAAhB,MAA0B,CAAC,CAA/B,EAAkC;wBAChC/B,KAAI,GAAG,CAACkC,CAAD,EAAIC,CAAJ,CAAP;uBADF,MAEO;wBACLf,IAAI,GAAG,CAACc,CAAD,EAAIC,CAAJ,CAAP;;;;;;;;;;;;;;;;;;;sBAKAnC,KAAJ,EAAU;oBACR6C,OAAK,CAACd,IAAN,GAAa/B,KAAI,CAAC,CAAD,CAAjB;oBACA6C,OAAK,CAAC9C,MAAN,GAAeC,KAAI,CAAC,CAAD,CAAJ,CAAQF,IAAR,CAAaW,MAA5B;mBAFF,MAGO,IAAIW,IAAJ,EAAU;oBACfyB,OAAK,CAACd,IAAN,GAAaX,IAAI,CAAC,CAAD,CAAjB;oBACAyB,OAAK,CAAC9C,MAAN,GAAe,CAAf;mBAFK,MAGA;oBACL8B,SAAS,GAAG,IAAZ;;;;;;;;;;;;;;;;;;;;;;;WASL,aAAL;;cACUE,MADU,GACa2I,EADb,CACV3I,IADU;cACJhC,OADI,GACa2K,EADb,CACJ3K,MADI;cACID,KADJ,GACa4K,EADb,CACI5K,IADJ;;cAEZgE,MAAI,GAAGE,IAAI,CAACuC,IAAL,CAAU/E,MAAV,EAAkBO,MAAlB,CAAb;;cACMuB,OAAM,GAAGQ,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmBhB,OAAnB,CAAf;;cACM4C,MAAK,GAAGmB,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgBhB,OAAM,GAAGD,KAAI,CAACW,MAA9B,CAAd;;UACAqD,MAAI,CAAChE,IAAL,GAAYwD,OAAM,GAAGX,MAArB;;cAEId,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;WAOD,UAAL;;cACU3I,MADO,GACiB2I,EADjB,CACP3I,IADO;cACDuJ,aADC,GACiBZ,EADjB,CACDY,aADC;;cAGXvJ,MAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;kBACf,IAAI4G,KAAJ,2CAAN;;;cAGIvD,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;eAEK,IAAMU,KAAX,IAAkB6I,aAAlB,EAAiC;gBAC3B7I,KAAG,KAAK,UAAR,IAAsBA,KAAG,KAAK,MAAlC,EAA0C;oBAClC,IAAI4E,KAAJ,4BAA6B5E,KAA7B,2BAAN;;;gBAGIC,KAAK,GAAG4I,aAAa,CAAC7I,KAAD,CAA3B;;gBAEIC,KAAK,IAAI,IAAb,EAAmB;qBACVoB,MAAI,CAACrB,KAAD,CAAX;aADF,MAEO;cACLqB,MAAI,CAACrB,KAAD,CAAJ,GAAYC,KAAZ;;;;;;;WAOD,eAAL;;cACU4I,cADY,GACMZ,EADN,CACZY,aADY;;cAGhBA,cAAa,IAAI,IAArB,EAA2B;YACzBzJ,SAAS,GAAGyJ,cAAZ;WADF,MAEO,IAAIzJ,SAAS,IAAI,IAAjB,EAAuB;gBACxB,CAAC2D,KAAK,CAACC,OAAN,CAAc6F,cAAd,CAAL,EAAmC;oBAC3B,IAAIjE,KAAJ,6EAC+DkE,IAAI,CAACC,SAAL,CACjEF,cADiE,CAD/D,0CAAN;;;YAOFzJ,SAAS,GAAGyJ,cAAZ;WATK,MAUA;YACLG,MAAM,CAACC,MAAP,CAAc7J,SAAd,EAAyByJ,cAAzB;;;;;;WAMC,YAAL;;cACUvJ,MADS,GACsB2I,EADtB,CACT3I,IADS;cACH4J,QADG,GACsBjB,EADtB,CACHiB,QADG;cACOC,UADP,GACsBlB,EADtB,CACOkB,UADP;;cAGb7J,MAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;kBACf,IAAI4G,KAAJ,4DAC8CtF,MAD9C,8CAAN;;;cAKI+B,MAAI,GAAGE,IAAI,CAACoC,GAAL,CAAS5E,MAAT,EAAiBO,MAAjB,CAAb;;cACMuF,QAAM,GAAGtD,IAAI,CAACsD,MAAL,CAAY9F,MAAZ,EAAoBO,MAApB,CAAf;;cACM8I,OAAK,GAAG9I,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;cACIoL,OAAJ;;cAEIzJ,IAAI,CAACC,MAAL,CAAYyB,MAAZ,CAAJ,EAAuB;gBACfR,QAAM,GAAGQ,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB,CAAhB,EAAmB4K,QAAnB,CAAf;;gBACMhJ,OAAK,GAAGmB,MAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgB4K,QAAhB,CAAd;;YACA7H,MAAI,CAAChE,IAAL,GAAYwD,QAAZ;YACAuI,OAAO,uBACF/H,MADE,MAED8H,UAFC;cAGL9L,IAAI,EAAE6C;cAHR;WAJF,MASO;gBACCW,QAAM,GAAGQ,MAAI,CAACK,QAAL,CAAcpD,KAAd,CAAoB,CAApB,EAAuB4K,QAAvB,CAAf;;gBACMhJ,OAAK,GAAGmB,MAAI,CAACK,QAAL,CAAcpD,KAAd,CAAoB4K,QAApB,CAAd;;YACA7H,MAAI,CAACK,QAAL,GAAgBb,QAAhB;YAEAuI,OAAO,uBACF/H,MADE,MAED8H,UAFC;cAGLzH,QAAQ,EAAExB;cAHZ;;;UAOF2E,QAAM,CAACnD,QAAP,CAAgB2G,MAAhB,CAAuBD,OAAK,GAAG,CAA/B,EAAkC,CAAlC,EAAqCgB,OAArC;;cAEIhK,SAAJ,EAAe;;;;;;oCACc2D,KAAK,CAACuF,MAAN,CAAalJ,SAAb,CAA3B,mIAAoD;;oBAAxCgB,OAAwC;oBAAjCJ,KAAiC;;gBAClDZ,SAAS,CAACY,KAAD,CAAT,GAAiBsD,KAAK,CAAC0E,SAAN,CAAgB5H,OAAhB,EAAuB6H,EAAvB,CAAjB;;;;;;;;;;;;;;;;;;;;;;IAQRlJ,MAAM,CAAC2C,QAAP,GAAkB2H,iBAAW,CAACtK,MAAM,CAAC2C,QAAR,CAA7B;;QAEItC,SAAJ,EAAe;MACbL,MAAM,CAACK,SAAP,GAAmBkK,aAAO,CAAClK,SAAD,CAAP,GACdiK,iBAAW,CAACjK,SAAD,CADG,GAEfA,SAFJ;KADF,MAIO;MACLL,MAAM,CAACK,SAAP,GAAmB,IAAnB;;;CA1QC;;;;;ACDA,IAAM4P,cAAc,GAAG;;;;EAK5BC,WAL4B,uBAM1BlQ,MAN0B,EAO1BkF,KAP0B;QAQ1BjF,8EAOI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;6BAC4BC,QAApDkQ;UAAAA,wCAAU;2BAA0ClQ,QAAnCC;UAAAA,oCAAQ;0BAA2BD,QAApBE;UAAAA,kCAAO;UACzCC,KAAsBH,QAAtBG;UAAIE,QAAkBL,QAAlBK;UAAO8P,SAAWnQ,QAAXmQ;;UAEb5N,IAAI,CAAC0J,MAAL,CAAYhH,KAAZ,CAAJ,EAAwB;QACtBA,KAAK,GAAG,CAACA,KAAD,CAAR;;;UAGEA,KAAK,CAACjG,MAAN,KAAiB,CAArB,EAAwB;;;;mBAITiG;;UAAR5C;;;;;UAKH,CAAClC,EAAL,EAAS;YACHJ,MAAM,CAACK,SAAX,EAAsB;UACpBD,EAAE,GAAGJ,MAAM,CAACK,SAAZ;SADF,MAEO,IAAIL,MAAM,CAAC2C,QAAP,CAAgB1D,MAAhB,GAAyB,CAA7B,EAAgC;UACrCmB,EAAE,GAAGN,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmB,EAAnB,CAAL;SADK,MAEA;UACLI,EAAE,GAAG,CAAC,CAAD,CAAL;;;QAGFgQ,MAAM,GAAG,IAAT;;;UAGEA,MAAM,IAAI,IAAd,EAAoB;QAClBA,MAAM,GAAG,KAAT;;;UAGEpM,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;YACjB,CAAC+P,OAAL,EAAc;UACZ/P,EAAE,GAAGN,MAAM,CAAC0K,WAAP,CAAmBxK,MAAnB,EAA2BI,EAA3B,CAAL;;;YAGE4D,KAAK,CAACyG,WAAN,CAAkBrK,EAAlB,CAAJ,EAA2B;UACzBA,EAAE,GAAGA,EAAE,CAACgB,MAAR;SADF,MAEO;6BACW4C,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ,CADX;;cACIoB,GADJ;;cAEC4G,QAAQ,GAAGtI,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBwB,GAAxB,CAAjB;UACA6O,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;YAAEI,EAAE,EAAFA;WAA5B;UACAA,EAAE,GAAGgI,QAAQ,CAACL,KAAT,EAAL;;;;UAIAxD,KAAK,CAACmD,OAAN,CAActH,EAAd,CAAJ,EAAuB;YACjBE,KAAK,IAAI,IAAb,EAAmB;cACbM,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAJ,EAAuB;YACrBhC,KAAK,GAAG,eAAAI,CAAC;qBAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,CAAJ;aAAT;WADF,MAEO,IAAIV,MAAM,CAAC+C,QAAP,CAAgBT,IAAhB,CAAJ,EAA2B;YAChChC,KAAK,GAAG,eAAAI,CAAC;qBAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAtB;aAAT;WADK,MAEA;YACLJ,KAAK,GAAG,eAAAI,CAAC;qBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;aAAT;;;;4BAIYZ,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;UACnCI,EAAE,EAAEA,EAAE,CAACG,IAD4B;UAEnCD,KAAK,EAALA,KAFmC;UAGnCH,IAAI,EAAJA,IAHmC;UAInCD,KAAK,EAALA;SAJc,CAXK;;YAWdkH,KAXc;;YAkBjBA,KAAJ,EAAW;qCACaA,KADb;cACAkJ,UADA;;cAEH3I,OAAO,GAAG7H,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBsQ,UAAvB,CAAhB;cACMC,OAAO,GAAGzQ,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBI,EAArB,EAAyBkQ,UAAzB,CAAhB;UACAD,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;YAAEI,EAAE,EAAFA,EAAF;YAAME,KAAK,EAALA,KAAN;YAAaH,IAAI,EAAJA,IAAb;YAAmBD,KAAK,EAALA;WAAjD;cACMK,IAAI,GAAGoH,OAAO,CAACI,KAAR,EAAb;UACA3H,EAAE,GAAGmQ,OAAO,GAAGzP,IAAI,CAAClB,IAAL,CAAUW,IAAV,CAAH,GAAqBA,IAAjC;SANF,MAOO;;;;;UAKH8G,UAAU,GAAGvG,IAAI,CAACgF,MAAL,CAAY1F,EAAZ,CAAnB;UACIiJ,KAAK,GAAGjJ,EAAE,CAACA,EAAE,CAACnB,MAAH,GAAY,CAAb,CAAd;;UAEI,CAACiB,KAAD,IAAUJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;QAAEI,EAAE,EAAEiH;OAA1B,CAAd,EAAuD;;;;;;;;;6BAIpCnC,KAAnB,8HAA0B;cAAf5C,KAAe;;cAClB/B,KAAI,GAAG8G,UAAU,CAACoE,MAAX,CAAkBpC,KAAlB,CAAb;;UACAA,KAAK;UACLrJ,MAAM,CAAC0D,KAAP,CAAa;YAAE0F,IAAI,EAAE,aAAR;YAAuB7I,IAAI,EAAJA,KAAvB;YAA6B+B,IAAI,EAAJA;WAA1C;;;;;;;;;;;;;;;;;UAGE8N,MAAJ,EAAY;YACJ/O,KAAK,GAAGvB,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmBI,EAAnB,CAAd;;YAEIiB,KAAJ,EAAW;UACTgP,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BqB,KAA1B;;;KA/FN;GAjB0B;;;;;;EA2H5BoP,SA3H4B,qBA4H1BzQ,MA5H0B;QA6H1BC,8EAKI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;wBACkCC,QAA1DG;UAAAA,8BAAKJ,MAAM,CAACK;2BAA8CJ,QAAnCE;UAAAA,mCAAO;4BAA4BF,QAAlBC;UAAAA,qCAAQ;UAClDI,QAAUL,QAAVK;;UAEFA,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAGQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,IACJkQ,SAAS,CAACtQ,MAAD,EAASI,EAAT,CADL,GAEJ,UAAAM,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAFL;;;UAKE,CAACN,EAAL,EAAS;;;;UAIHiG,OAAO,GAAGvG,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaH,IAAI,EAAJA,IAAb;QAAmBD,KAAK,EAALA;OAAxC,CAAhB;UACM8H,QAAQ,GAAGlB,KAAK,CAACrB,IAAN,CAAWY,OAAX,EAAoB;;YAAI1F,CAAJ;;eAAWb,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBW,CAAvB,CAAX;OAApB,CAAjB;;mCAEsBqH,QAAtB,+BAAgC;YAArBL,OAAO,gBAAb;YACGpH,IAAI,GAAGoH,OAAO,CAACI,KAAR,EAAb;;YAEIxH,IAAI,CAACtB,MAAL,GAAc,CAAlB,EAAqB;gBACb,IAAI4G,KAAJ,uCAC2BtF,IAD3B,gDAAN;;;YAKImQ,eAAe,GAAG5Q,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBc,IAAI,CAACgF,MAAL,CAAYvF,IAAZ,CAApB,CAAxB;;6CAC6BmQ,eAVC;YAUvB5K,MAVuB;YAUfuB,UAVe;;YAWxBgC,KAAK,GAAG9I,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAc,CAAf,CAAlB;YACQA,MAZsB,GAYX6G,MAAM,CAACnD,QAZI,CAYtB1D,MAZsB;;YAc1BA,MAAM,KAAK,CAAf,EAAkB;cACV0R,MAAM,GAAG7P,IAAI,CAAClB,IAAL,CAAUyH,UAAV,CAAf;UACAgJ,UAAU,CAACO,SAAX,CAAqB5Q,MAArB,EAA6B;YAAEI,EAAE,EAAEG,IAAN;YAAYmF,EAAE,EAAEiL,MAAhB;YAAwBzQ,KAAK,EAALA;WAArD;UACAmQ,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;YAAEI,EAAE,EAAEiH,UAAN;YAAkBnH,KAAK,EAALA;WAAjD;SAHF,MAIO,IAAImJ,KAAK,KAAK,CAAd,EAAiB;UACtBgH,UAAU,CAACO,SAAX,CAAqB5Q,MAArB,EAA6B;YAAEI,EAAE,EAAEG,IAAN;YAAYmF,EAAE,EAAE2B,UAAhB;YAA4BnH,KAAK,EAALA;WAAzD;SADK,MAEA,IAAImJ,KAAK,KAAKpK,MAAM,GAAG,CAAvB,EAA0B;cACzB0R,OAAM,GAAG7P,IAAI,CAAClB,IAAL,CAAUyH,UAAV,CAAf;;UACAgJ,UAAU,CAACO,SAAX,CAAqB5Q,MAArB,EAA6B;YAAEI,EAAE,EAAEG,IAAN;YAAYmF,EAAE,EAAEiL,OAAhB;YAAwBzQ,KAAK,EAALA;WAArD;SAFK,MAGA;cACC4Q,SAAS,GAAGhQ,IAAI,CAAClB,IAAL,CAAUW,IAAV,CAAlB;;cACMoQ,QAAM,GAAG7P,IAAI,CAAClB,IAAL,CAAUyH,UAAV,CAAf;;UACAgJ,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;YAAEI,EAAE,EAAE0Q,SAAN;YAAiB5Q,KAAK,EAALA;WAA/C;UACAmQ,UAAU,CAACO,SAAX,CAAqB5Q,MAArB,EAA6B;YAAEI,EAAE,EAAEG,IAAN;YAAYmF,EAAE,EAAEiL,QAAhB;YAAwBzQ,KAAK,EAALA;WAArD;;;KA5CN;GApI0B;;;;;;EA2L5B6Q,UA3L4B,sBA4L1B/Q,MA5L0B;QA6L1BC,8EAMI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;UAC1BM,QAAiCL,QAAjCK;yBAAiCL,QAA1BG;UAAAA,+BAAKJ,MAAM,CAACK;8BACmCJ,QAApDkQ;UAAAA,yCAAU;4BAA0ClQ,QAAnCC;UAAAA,qCAAQ;2BAA2BD,QAApBE;UAAAA,mCAAO;;UAE3C,CAACC,EAAL,EAAS;;;;UAILE,KAAK,IAAI,IAAb,EAAmB;YACbQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;+BACFN,MAAM,CAACgG,MAAP,CAAc9F,MAAd,EAAsBI,EAAtB,CADE;;cACZ0F,MADY;;UAEnBxF,KAAK,GAAG,eAAAI,CAAC;mBAAIoF,MAAM,CAACnD,QAAP,CAAgBoD,QAAhB,CAAyBrF,CAAzB,CAAJ;WAAT;SAFF,MAGO;UACLJ,KAAK,GAAG,eAAAI,CAAC;mBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;WAAT;;;;UAIA,CAACyP,OAAD,IAAYnM,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAhB,EAAmC;QACjCA,EAAE,GAAGN,MAAM,CAAC0K,WAAP,CAAmBxK,MAAnB,EAA2BI,EAA3B,CAAL;;;UAGE4D,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;YACjB4D,KAAK,CAACyG,WAAN,CAAkBrK,EAAlB,CAAJ,EAA2B;UACzBA,EAAE,GAAGA,EAAE,CAACgB,MAAR;SADF,MAEO;8BACW4C,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ,CADX;;cACIoB,GADJ;;cAEC4G,QAAQ,GAAGtI,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBwB,GAAxB,CAAjB;UACA6O,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;YAAEI,EAAE,EAAFA;WAA5B;UACAA,EAAE,GAAGgI,QAAQ,CAACL,KAAT,EAAL;;cAEI9H,OAAO,CAACG,EAAR,IAAc,IAAlB,EAAwB;YACtBiQ,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BI,EAA1B;;;;;2BAKYN,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaJ,KAAK,EAALA,KAAb;QAAoBC,IAAI,EAAJA;OAAzC;;UAAX2H;;UACDtJ,IAAI,GAAGsB,MAAM,CAACqF,QAAP,CAAgBnF,MAAhB,EAAwB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaJ,KAAK,EAALA,KAAb;QAAoBC,IAAI,EAAJA;OAA5C,CAAb;;UAEI,CAAC2H,OAAD,IAAY,CAACtJ,IAAjB,EAAuB;;;;mCAIFsJ;UAAdxF;UAAM/B;;gCACgB/B;UAAtB6G;UAAUC;;UAEb/E,IAAI,CAACtB,MAAL,KAAgB,CAAhB,IAAqBqG,QAAQ,CAACrG,MAAT,KAAoB,CAA7C,EAAgD;;;;UAI1CuK,OAAO,GAAG1I,IAAI,CAAClB,IAAL,CAAU0F,QAAV,CAAhB;UACM0L,UAAU,GAAGlQ,IAAI,CAAC2G,MAAL,CAAYlH,IAAZ,EAAkB+E,QAAlB,CAAnB;UACM2L,iBAAiB,GAAGnQ,IAAI,CAACgM,SAAL,CAAevM,IAAf,EAAqB+E,QAArB,CAA1B;UACM7E,MAAM,GAAGqG,KAAK,CAACrB,IAAN,CAAW3F,MAAM,CAACW,MAAP,CAAcT,MAAd,EAAsB;QAAEI,EAAE,EAAEG;OAA5B,CAAX,EAAgD;;YAAEG,CAAF;;eAASA,CAAT;OAAhD,EACZnB,KADY,CACNyR,UAAU,CAAC/R,MADL,EAEZM,KAFY,CAEN,CAFM,EAEH,CAAC,CAFE,CAAf;;;UAMM2R,aAAa,GAAGpR,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;QACzCI,EAAE,EAAEG,IADqC;QAEzCJ,IAAI,EAAE,SAFmC;QAGzCG,KAAK,EAAE,eAAAI,CAAC;iBACND,MAAM,CAACsF,QAAP,CAAgBrF,CAAhB,KAAsB4C,OAAO,CAACC,SAAR,CAAkB7C,CAAlB,CAAtB,IAA8CA,CAAC,CAACiC,QAAF,CAAW1D,MAAX,KAAsB,CAD9D;;OAHY,CAAtB;UAOMkS,QAAQ,GAAGD,aAAa,IAAIpR,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBkR,aAAa,CAAC,CAAD,CAApC,CAAlC;UACI9G,UAAJ;UACID,QAAJ;;;UAIIvJ,IAAI,CAACC,MAAL,CAAYyB,IAAZ,KAAqB1B,IAAI,CAACC,MAAL,CAAYwE,QAAZ,CAAzB,EAAgD;YACtC/G,IADsC,GACpBgE,IADoB,CACtChE,IADsC;YAC7BkB,IAD6B,2BACpB8C,IADoB;;QAE9C6H,QAAQ,GAAG9E,QAAQ,CAAC/G,IAAT,CAAcW,MAAzB;QACAmL,UAAU,GAAG5K,IAAb;OAHF,MAIO,IAAI8D,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,KAA2BgB,OAAO,CAACC,SAAR,CAAkB8B,QAAlB,CAA/B,EAA4D;YACzD1C,QADyD,GACnCL,IADmC,CACzDK,QADyD;YAC5CnD,KAD4C,2BACnC8C,IADmC;;QAEjE6H,QAAQ,GAAG9E,QAAQ,CAAC1C,QAAT,CAAkB1D,MAA7B;QACAmL,UAAU,GAAG5K,KAAb;OAHK,MAIA;cACC,IAAIqG,KAAJ,0CAC8BtF,IAD9B,0EACkGwJ,IAAI,CAACC,SAAL,CACpG1H,IADoG,CADlG,cAGCyH,IAAI,CAACC,SAAL,CAAe3E,QAAf,CAHD,EAAN;;;;;UASE,CAAC4L,iBAAL,EAAwB;QACtBZ,UAAU,CAACO,SAAX,CAAqB5Q,MAArB,EAA6B;UAAEI,EAAE,EAAEG,IAAN;UAAYmF,EAAE,EAAE8D,OAAhB;UAAyBtJ,KAAK,EAALA;SAAtD;;;;;UAKEiR,QAAJ,EAAc;QACZd,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;UAAEI,EAAE,EAAE+Q,QAAQ,CAACrJ,OAAf;UAAyB5H,KAAK,EAALA;SAAxD;;;;;;;UAQCoD,OAAO,CAACC,SAAR,CAAkB8B,QAAlB,KAA+BvF,MAAM,CAAC4E,OAAP,CAAe1E,MAAf,EAAuBqF,QAAvB,CAAhC,IACCzE,IAAI,CAACC,MAAL,CAAYwE,QAAZ,KAAyBA,QAAQ,CAAC/G,IAAT,KAAkB,EAF9C,EAGE;QACA+R,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;UAAEI,EAAE,EAAEkF,QAAN;UAAgBpF,KAAK,EAALA;SAA/C;OAJF,MAKO;QACLF,MAAM,CAAC0D,KAAP,CAAa;UACX0F,IAAI,EAAE,YADK;UAEX7I,IAAI,EAAEiJ,OAFK;UAGXW,QAAQ,EAARA,QAHW;UAIXC,UAAU,EAAVA;SAJF;;;UAQE+G,QAAJ,EAAc;QACZA,QAAQ,CAACpJ,KAAT;;KAvHJ;GArM0B;;;;;EAqU5B6I,SArU4B,qBAsU1B5Q,MAtU0B,EAuU1BC,OAvU0B;IA+U1BH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;UAE9B0F,KAIEzF,QAJFyF;yBAIEzF,QAHFG;UAAAA,+BAAKJ,MAAM,CAACK;2BAGVJ,QAFFE;UAAAA,mCAAO;4BAELF,QADFC;UAAAA,qCAAQ;UAEJI,QAAUL,QAAVK;;UAEF,CAACF,EAAL,EAAS;;;;UAILE,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAGQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,IACJkQ,SAAS,CAACtQ,MAAD,EAASI,EAAT,CADL,GAEJ,UAAAM,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAFL;;;UAKI0Q,KAAK,GAAGtR,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuB0F,EAAvB,CAAd;UACM2L,OAAO,GAAGvR,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaH,IAAI,EAAJA,IAAb;QAAmBD,KAAK,EAALA;OAAxC,CAAhB;UACM8H,QAAQ,GAAGlB,KAAK,CAACrB,IAAN,CAAW4L,OAAX,EAAoB;;YAAI1Q,CAAJ;;eAAWb,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBW,CAAvB,CAAX;OAApB,CAAjB;;qCAEsBqH,QAAtB,kCAAgC;YAArBL,OAAO,kBAAb;YACGpH,IAAI,GAAGoH,OAAO,CAACI,KAAR,EAAb;YACMyB,OAAO,GAAG4H,KAAK,CAACtJ,OAAtB;;YAEIvH,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;UACrBe,MAAM,CAAC0D,KAAP,CAAa;YAAE0F,IAAI,EAAE,WAAR;YAAqB7I,IAAI,EAAJA,IAArB;YAA2BiJ,OAAO,EAAPA;WAAxC;;;;MAIJ4H,KAAK,CAACrJ,KAAN;KAhCF;GA/U0B;;;;;EAuX5B8I,WAvX4B,uBAwX1B7Q,MAxX0B;QAyX1BC,8EAMI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;8BAC4BC,QAApDkQ;UAAAA,yCAAU;4BAA0ClQ,QAAnCC;UAAAA,qCAAQ;2BAA2BD,QAApBE;UAAAA,mCAAO;yBACRF,QAAjCG;UAAAA,+BAAKJ,MAAM,CAACK;UAAWC,QAAUL,QAAVK;;UAEzB,CAACF,EAAL,EAAS;;;;UAILE,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAGQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,IACJkQ,SAAS,CAACtQ,MAAD,EAASI,EAAT,CADL,GAEJ,UAAAM,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAFL;;;UAKE,CAACyP,OAAD,IAAYnM,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAhB,EAAmC;QACjCA,EAAE,GAAGN,MAAM,CAAC0K,WAAP,CAAmBxK,MAAnB,EAA2BI,EAA3B,CAAL;;;UAGIkR,MAAM,GAAGxR,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaH,IAAI,EAAJA,IAAb;QAAmBD,KAAK,EAALA;OAAxC,CAAf;UACM8H,QAAQ,GAAGlB,KAAK,CAACrB,IAAN,CAAW6L,MAAX,EAAmB;;YAAI3Q,CAAJ;;eAAWb,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBW,CAAvB,CAAX;OAAnB,CAAjB;;qCAEsBqH,QAAtB,kCAAgC;YAArBL,OAAO,kBAAb;YACGpH,IAAI,GAAGoH,OAAO,CAACI,KAAR,EAAb;;YAEIxH,IAAJ,EAAU;6BACOT,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBO,IAApB,CADP;;cACD+B,IADC;;UAERtC,MAAM,CAAC0D,KAAP,CAAa;YAAE0F,IAAI,EAAE,aAAR;YAAuB7I,IAAI,EAAJA,IAAvB;YAA6B+B,IAAI,EAAJA;WAA1C;;;KA1BN;GAjY0B;;;;;EAqa5BiP,QAra4B,oBAsa1BvR,MAta0B,EAua1BgL,KAva0B;QAwa1B/K,8EAOI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;UAC1BM,QAAiCL,QAAjCK;yBAAiCL,QAA1BG;UAAAA,+BAAKJ,MAAM,CAACK;8BAMrBJ,QAJFkQ;UAAAA,yCAAU;2BAIRlQ,QAHFE;UAAAA,mCAAO;2BAGLF,QAFFuR;UAAAA,oCAAQ;4BAENvR,QADFC;UAAAA,qCAAQ;;UAGN,CAACE,EAAL,EAAS;;;;UAILE,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAGQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,IACJkQ,SAAS,CAACtQ,MAAD,EAASI,EAAT,CADL,GAEJ,UAAAM,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAFL;;;UAKE,CAACyP,OAAD,IAAYnM,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAhB,EAAmC;QACjCA,EAAE,GAAGN,MAAM,CAAC0K,WAAP,CAAmBxK,MAAnB,EAA2BI,EAA3B,CAAL;;;UAGEoR,KAAK,IAAIxN,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAb,EAAgC;YACxB0I,QAAQ,GAAGhJ,MAAM,CAACgJ,QAAP,CAAgB9I,MAAhB,EAAwBI,EAAxB,EAA4B;UAAEwH,QAAQ,EAAE;SAAxC,CAAjB;;4BACqB5D,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ,CAFS;;YAEvB2B,KAFuB;YAEhBP,GAFgB;;YAGxBiQ,SAAS,GAAGtR,IAAI,KAAK,QAAT,GAAoB,QAApB,GAA+B,SAAjD;QACAkQ,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;UAC5BI,EAAE,EAAEoB,GADwB;UAE5BlB,KAAK,EAALA,KAF4B;UAG5BH,IAAI,EAAEsR,SAHsB;UAI5BvR,KAAK,EAALA;SAJF;QAMAmQ,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;UAC5BI,EAAE,EAAE2B,KADwB;UAE5BzB,KAAK,EAALA,KAF4B;UAG5BH,IAAI,EAAEsR,SAHsB;UAI5BvR,KAAK,EAALA;SAJF;QAMAE,EAAE,GAAG0I,QAAQ,CAACf,KAAT,EAAL;;YAEI9H,OAAO,CAACG,EAAR,IAAc,IAAlB,EAAwB;UACtBiQ,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BI,EAA1B;;;;;;;;;8BAIuBN,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;UAC9CI,EAAE,EAAFA,EAD8C;UAE9CE,KAAK,EAALA,KAF8C;UAG9CH,IAAI,EAAJA,IAH8C;UAI9CD,KAAK,EAALA;SAJyB,CAA3B,mIAKI;;cALQoC,IAKR;cALc/B,IAKd;;cACI6J,UAAU,GAAkB,EAAlC;cACMN,aAAa,GAAkB,EAArC,CAFE;;cAKEvJ,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAuB;;;;eAIlB,IAAMyS,CAAX,IAAgB1G,KAAhB,EAAuB;gBACjB0G,CAAC,KAAK,UAAN,IAAoBA,CAAC,KAAK,MAA9B,EAAsC;;;;gBAIlC1G,KAAK,CAAC0G,CAAD,CAAL,KAAapP,IAAI,CAACoP,CAAD,CAArB,EAA0B;cACxBtH,UAAU,CAACsH,CAAD,CAAV,GAAgBpP,IAAI,CAACoP,CAAD,CAApB;cACA5H,aAAa,CAAC4H,CAAD,CAAb,GAAmB1G,KAAK,CAAC0G,CAAD,CAAxB;;;;cAIAzH,MAAM,CAAC0H,IAAP,CAAY7H,aAAZ,EAA2B7K,MAA3B,KAAsC,CAA1C,EAA6C;YAC3Ce,MAAM,CAAC0D,KAAP,CAAa;cACX0F,IAAI,EAAE,UADK;cAEX7I,IAAI,EAAJA,IAFW;cAGX6J,UAAU,EAAVA,UAHW;cAIXN,aAAa,EAAbA;aAJF;;;;;;;;;;;;;;;;;KAxEN;GAjb0B;;;;;EAwgB5B0G,UAxgB4B,sBAygB1BxQ,MAzgB0B;QA0gB1BC,8EAOI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;2BACWC,QAAnCE;UAAAA,mCAAO;4BAA4BF,QAAlBC;UAAAA,qCAAQ;UAC3BI,QAA6DL,QAA7DK;yBAA6DL,QAAtDG;UAAAA,+BAAKJ,MAAM,CAACK;4BAA0CJ,QAA/B2R;UAAAA,sCAAS;4BAAsB3R,QAAnB4R;UAAAA,sCAAS;;UAErDvR,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAG,eAAAI,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAAT;;;UAGEsD,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;QACrBA,EAAE,GAAG0R,WAAW,CAAC9R,MAAD,EAASI,EAAT,CAAhB;;;;;UAKEU,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;YACbG,IAAI,GAAGH,EAAb;YACMiB,KAAK,GAAGvB,MAAM,CAACuB,KAAP,CAAarB,MAAb,EAAqBO,IAArB,CAAd;;8BACiBT,MAAM,CAACgG,MAAP,CAAc9F,MAAd,EAAsBO,IAAtB,CAHE;;YAGZuF,MAHY;;QAInBxF,KAAK,GAAG,eAAAI,CAAC;iBAAIA,CAAC,KAAKoF,MAAV;SAAT;;QACA8L,MAAM,GAAGvQ,KAAK,CAACd,IAAN,CAAWtB,MAAX,GAAoBsB,IAAI,CAACtB,MAAzB,GAAkC,CAA3C;QACAmB,EAAE,GAAGiB,KAAL;QACAwQ,MAAM,GAAG,IAAT;;;UAGE,CAACzR,EAAL,EAAS;;;;UAIH2R,SAAS,GAAGjS,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBI,EAAxB,EAA4B;QAC5CwH,QAAQ,EAAE;OADM,CAAlB;;2BAGkB9H,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaH,IAAI,EAAJA,IAAb;QAAmBD,KAAK,EAALA;OAAxC;;UAAX8R;;UAEH,CAACA,OAAL,EAAc;;;;UAIRC,SAAS,GAAGnS,MAAM,QAAN,CAAYE,MAAZ,EAAoB;QAAEI,EAAE,EAAFA,EAAF;QAAMD,IAAI,EAAE;OAAhC,CAAlB;UACM+R,KAAK,GAAG,CAAd;;UAEI,CAAChS,KAAD,IAAU+R,SAAd,EAAyB;uCACMA,SADN;YAChBE,QADgB;YACNC,QADM;;YAGnB9O,OAAO,CAACC,SAAR,CAAkB4O,QAAlB,KAA+BnS,MAAM,CAAC+C,QAAP,CAAgBoP,QAAhB,CAAnC,EAA8D;cACxDhR,KAAK,GAAGrB,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBoS,QAArB,CAAZ;;cAEI,CAACjR,KAAL,EAAY;gBACJ7C,IAAI,GAAG;cAAEA,IAAI,EAAE;aAArB;gBACM+T,SAAS,GAAGvR,IAAI,CAAClB,IAAL,CAAUwS,QAAV,CAAlB;YACA/B,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+B1B,IAA/B,EAAqC;cAAE8B,EAAE,EAAEiS,SAAN;cAAiBnS,KAAK,EAALA;aAAtD;YACAiB,KAAK,GAAGrB,MAAM,CAACuB,KAAP,CAAarB,MAAb,EAAqBqS,SAArB,CAAR;;;UAGFjS,EAAE,GAAGe,KAAL;UACA0Q,MAAM,GAAG,IAAT;;;YAGIS,aAAa,GAAGlS,EAAE,CAACG,IAAH,CAAQtB,MAAR,GAAiBmT,QAAQ,CAACnT,MAAhD;QACA2S,MAAM,GAAGU,aAAa,GAAG,CAAzB;QACAT,MAAM,GAAG,IAAT;;;UAGIU,QAAQ,GAAGzS,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBI,EAAxB,CAAjB;UACMkH,KAAK,GAAGlH,EAAE,CAACG,IAAH,CAAQtB,MAAR,GAAiB2S,MAA/B;;mCACwBI;UAAfQ;;UACHC,UAAU,GAAGrS,EAAE,CAACG,IAAH,CAAQhB,KAAR,CAAc,CAAd,EAAiB+H,KAAjB,CAAnB;UACI6C,QAAQ,GAAGyH,MAAM,KAAK,CAAX,GAAexR,EAAE,CAAC7B,MAAlB,GAA2B6B,EAAE,CAACG,IAAH,CAAQ+G,KAAR,IAAiB4K,KAA3D;;;;;;8BAE2BpS,MAAM,CAACW,MAAP,CAAcT,MAAd,EAAsB;UAC/CI,EAAE,EAAEqS,UAD2C;UAE/CjS,OAAO,EAAE,IAFsC;UAG/CN,KAAK,EAALA;SAHyB,CAA3B,mIAII;;cAJQoC,IAIR;cAJc/B,MAId;;cACEiR,KAAK,GAAG,KAAZ;;cAGEjR,MAAI,CAACtB,MAAL,GAAcuT,WAAW,CAACvT,MAA1B,IACAsB,MAAI,CAACtB,MAAL,KAAgB,CADhB,IAEC,CAACiB,KAAD,IAAUJ,MAAM,CAAC6D,MAAP,CAAc3D,MAAd,EAAsBsC,IAAtB,CAHb,EAIE;;;;cAIIjB,OAAK,GAAG0Q,SAAS,CAACjK,OAAxB;cACMxD,KAAK,GAAGxE,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBqB,OAArB,EAA4Bd,MAA5B,CAAd;;cAEIsR,MAAM,IAAI,CAACE,SAAX,IAAwB,CAACjS,MAAM,CAAC0E,MAAP,CAAcxE,MAAd,EAAsBqB,OAAtB,EAA6Bd,MAA7B,CAA7B,EAAiE;YAC/DiR,KAAK,GAAG,IAAR;;gBACQlT,KAFuD,GAErBgE,IAFqB,CAEvDhE,IAFuD;gBAEjDqE,QAFiD,GAErBL,IAFqB,CAEjDK,QAFiD;gBAEpCyH,UAFoC,2BAErB9H,IAFqB;;YAG/DtC,MAAM,CAAC0D,KAAP,CAAa;cACX0F,IAAI,EAAE,YADK;cAEX7I,IAAI,EAAJA,MAFW;cAGX4J,QAAQ,EAARA,QAHW;cAIXC,UAAU,EAAVA;aAJF;;;UAQFD,QAAQ,GAAG5J,MAAI,CAACA,MAAI,CAACtB,MAAL,GAAc,CAAf,CAAJ,IAAyBuS,KAAK,IAAIlN,KAAT,GAAiB,CAAjB,GAAqB,CAA9C,CAAX;;;;;;;;;;;;;;;;;UAGErE,OAAO,CAACG,EAAR,IAAc,IAAlB,EAAwB;YAChBiB,MAAK,GAAGkR,QAAQ,CAACzK,OAAT,IAAoBhI,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmB,EAAnB,CAAlC;;QACAqQ,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BqB,MAA1B;;;MAGF0Q,SAAS,CAAChK,KAAV;MACAwK,QAAQ,CAACxK,KAAT;KA1GF;GAnhB0B;;;;;EAqoB5B2K,UAroB4B,sBAsoB1B1S,MAtoB0B,EAuoB1BgL,KAvoB0B;QAwoB1B/K,8EAMI;;QAEA,CAAC6G,KAAK,CAACiE,OAAN,CAAcC,KAAd,CAAL,EAA2B;MACzBA,KAAK,GAAG,CAACA,KAAD,CAAR;;;QAGI2H,GAAG,GAAG,EAAZ;;;;;;4BAEkB3H,KAAlB,mIAAyB;YAAd/J,GAAc;QACvB0R,GAAG,CAAC1R,GAAD,CAAH,GAAW,IAAX;;;;;;;;;;;;;;;;;IAGFoP,UAAU,CAACkB,QAAX,CAAoBvR,MAApB,EAA4B2S,GAA5B,EAAiC1S,OAAjC;GA1pB0B;;;;;;EAkqB5B2S,WAlqB4B,uBAmqB1B5S,MAnqB0B,EAoqB1BC,OApqB0B;IA4qB1BH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;2BAC0BC,QAAlDE;UAAAA,mCAAO;4BAA2CF,QAAjCuR;UAAAA,qCAAQ;4BAAyBvR,QAAlBC;UAAAA,qCAAQ;yBACTD,QAAjCG;UAAAA,+BAAKJ,MAAM,CAACK;UAAWC,QAAUL,QAAVK;;UAEzB,CAACF,EAAL,EAAS;;;;UAILE,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAGQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,IACJkQ,SAAS,CAACtQ,MAAD,EAASI,EAAT,CADL,GAEJ,UAAAM,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAFL;;;UAKEI,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;QACnBA,EAAE,GAAGN,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBI,EAArB,CAAL;;;UAGI0I,QAAQ,GAAG9E,KAAK,CAACC,OAAN,CAAc7D,EAAd,IAAoBN,MAAM,CAACgJ,QAAP,CAAgB9I,MAAhB,EAAwBI,EAAxB,CAApB,GAAkD,IAAnE;UACMiG,OAAO,GAAGvG,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QAAEI,EAAE,EAAFA,EAAF;QAAME,KAAK,EAALA,KAAN;QAAaH,IAAI,EAAJA,IAAb;QAAmBD,KAAK,EAALA;OAAxC,CAAhB;UACM8H,QAAQ,GAAGlB,KAAK,CAACrB,IAAN,CAAWY,OAAX,EAAoB;;YAAI1F,CAAJ;;eAAWb,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBW,CAAvB,CAAX;OAApB,CAAjB;;;YAEWgH,OAAO,kBAAb;YACGpH,IAAI,GAAGoH,OAAO,CAACI,KAAR,EAAb;;4BACejI,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBO,IAApB;;YAAR+B;;YACHb,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBO,IAArB,CAAZ;;YAEIiR,KAAK,IAAI1I,QAAb,EAAuB;UACrBrH,KAAK,GAAGuC,KAAK,CAAC+K,YAAN,CAAmBjG,QAAQ,CAAChB,OAA5B,EAAsCrG,KAAtC,CAAR;;;QAGF4O,UAAU,CAACI,SAAX,CAAqBzQ,MAArB,EAA6B;UAC3BI,EAAE,EAAEqB,KADuB;UAE3BnB,KAAK,EAAE,eAAAI,CAAC;mBAAI4B,IAAI,CAACK,QAAL,CAAcoD,QAAd,CAAuBrF,CAAvB,CAAJ;WAFmB;UAG3BR,KAAK,EAALA;SAHF;;;qCAToB8H,QAAtB,kCAAgC;;;;UAgB5Bc,QAAJ,EAAc;QACZA,QAAQ,CAACf,KAAT;;KAvCJ;GA5qB0B;;;;;;EA6tB5B8K,SA7tB4B,qBA8tB1B7S,MA9tB0B,EA+tB1B0C,OA/tB0B;QAguB1BzC,8EAMI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;2BAC0BC,QAAlDE;UAAAA,mCAAO;4BAA2CF,QAAjCuR;UAAAA,qCAAQ;4BAAyBvR,QAAlBC;UAAAA,qCAAQ;UAC1CI,QAAiCL,QAAjCK;yBAAiCL,QAA1BG;UAAAA,+BAAKJ,MAAM,CAACK;;UAErB,CAACD,EAAL,EAAS;;;;UAILE,KAAK,IAAI,IAAb,EAAmB;YACbQ,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;UACnBE,KAAK,GAAGgQ,SAAS,CAACtQ,MAAD,EAASI,EAAT,CAAjB;SADF,MAEO,IAAIJ,MAAM,CAAC+C,QAAP,CAAgBL,OAAhB,CAAJ,EAA8B;UACnCpC,KAAK,GAAG,eAAAI,CAAC;mBAAIZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,KAA8BE,IAAI,CAACC,MAAL,CAAYH,CAAZ,CAAlC;WAAT;SADK,MAEA;UACLJ,KAAK,GAAG,eAAAI,CAAC;mBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;WAAT;;;;UAIA8Q,KAAK,IAAIxN,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAb,EAAgC;4BACT4D,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ,CADS;;YACvB2B,KADuB;YAChBP,GADgB;;YAExBsH,QAAQ,GAAGhJ,MAAM,CAACgJ,QAAP,CAAgB9I,MAAhB,EAAwBI,EAAxB,EAA4B;UAC3CwH,QAAQ,EAAE;SADK,CAAjB;QAGAyI,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;UAAEI,EAAE,EAAEoB,GAAN;UAAWlB,KAAK,EAALA,KAAX;UAAkBJ,KAAK,EAALA;SAAhD;QACAmQ,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;UAAEI,EAAE,EAAE2B,KAAN;UAAazB,KAAK,EAALA,KAAb;UAAoBJ,KAAK,EAALA;SAAlD;QACAE,EAAE,GAAG0I,QAAQ,CAACf,KAAT,EAAL;;YAEI9H,OAAO,CAACG,EAAR,IAAc,IAAlB,EAAwB;UACtBiQ,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BI,EAA1B;;;;UAIE0S,KAAK,GAAGhM,KAAK,CAACrB,IAAN,CACZ3F,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QACnBI,EAAE,EAAFA,EADmB;QAEnBE,KAAK,EAAEN,MAAM,CAAC+C,QAAP,CAAgBL,OAAhB,IACH,UAAAhC,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SADE,GAEH,UAAAA,CAAC;iBAAIZ,MAAM,CAAC0D,QAAP,CAAgB9C,CAAhB,CAAJ;SAJc;QAKnBP,IAAI,EAAE,QALa;QAMnBD,KAAK,EAALA;OANF,CADY,CAAd;;iCAW2B4S,KAA3B,8BAAkC;;YAApBC,QAAoB;;YAC1BC,CAAC,GAAGhP,KAAK,CAACC,OAAN,CAAc7D,EAAd,IACN4D,KAAK,CAAC+K,YAAN,CAAmB3O,EAAnB,EAAuBN,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqB+S,QAArB,CAAvB,CADM,GAEN3S,EAFJ;;YAII,CAAC4S,CAAL,EAAQ;;;;YAIF3M,OAAO,GAAGS,KAAK,CAACrB,IAAN,CACd3F,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;UAAEI,EAAE,EAAE4S,CAAN;UAAS1S,KAAK,EAALA,KAAT;UAAgBH,IAAI,EAAJA,IAAhB;UAAsBD,KAAK,EAALA;SAA3C,CADc,CAAhB;;YAIImG,OAAO,CAACpH,MAAR,GAAiB,CAArB,EAAwB;;yCACNoH,OADM;gBACfhE,KADe;;gBAEhByC,IAAI,GAAGuB,OAAO,CAACA,OAAO,CAACpH,MAAR,GAAiB,CAAlB,CAApB;;uCACsBoD,KAHA;gBAGbkF,SAHa;;sCAIDzC,IAJC;gBAIb0C,QAJa;;gBAKhBwJ,UAAU,GAAGlQ,IAAI,CAACC,MAAL,CAAYwG,SAAZ,EAAuBC,QAAvB,IACf1G,IAAI,CAACgF,MAAL,CAAYyB,SAAZ,CADe,GAEfzG,IAAI,CAAC2G,MAAL,CAAYF,SAAZ,EAAuBC,QAAvB,CAFJ;gBAIM/F,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBuH,SAArB,EAAgCC,QAAhC,CAAd;gBACMyL,eAAe,GAAGnT,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBgR,UAApB,CAAxB;;iDACqBiC,eAXC;gBAWfC,UAXe;;gBAYhB5L,KAAK,GAAG0J,UAAU,CAAC/R,MAAX,GAAoB,CAAlC;gBACMkU,WAAW,GAAGrS,IAAI,CAAClB,IAAL,CAAU4H,QAAQ,CAACjI,KAAT,CAAe,CAAf,EAAkB+H,KAAlB,CAAV,CAApB;;gBACM8L,OAAO,uBAAQ1Q,OAAR;cAAiBC,QAAQ,EAAE;cAAxC;;YACA0N,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BoT,OAA/B,EAAwC;cAAEhT,EAAE,EAAE+S,WAAN;cAAmBjT,KAAK,EAALA;aAA3D;YAEAmQ,UAAU,CAACO,SAAX,CAAqB5Q,MAArB,EAA6B;cAC3BI,EAAE,EAAEqB,KADuB;cAE3BnB,KAAK,EAAE,eAAAI,CAAC;uBAAIwS,UAAU,CAACvQ,QAAX,CAAoBoD,QAApB,CAA6BrF,CAA7B,CAAJ;eAFmB;cAG3BgF,EAAE,EAAEyN,WAAW,CAAC1H,MAAZ,CAAmB,CAAnB,CAHuB;cAI3BvL,KAAK,EAALA;aAJF;;;;KAzEN;;CAxuBG;;;;;AAi0BP,IAAM4R,WAAW,GAAG,SAAdA,WAAc,CAAC9R,MAAD,EAAiByB,KAAjB;MACduC,KAAK,CAACyG,WAAN,CAAkBhJ,KAAlB,CAAJ,EAA8B;WACrBA,KAAK,CAACL,MAAb;GADF,MAEO;wBACW4C,KAAK,CAAC5B,KAAN,CAAYX,KAAZ,CADX;;QACID,GADJ;;QAEC4G,QAAQ,GAAGtI,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBwB,GAAxB,CAAjB;IACA6O,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;MAAEI,EAAE,EAAEqB;KAAhC;WACO2G,QAAQ,CAACL,KAAT,EAAP;;CAPJ;;AAWA,IAAMuI,SAAS,GAAG,SAAZA,SAAY,CAACtQ,MAAD,EAAiBO,IAAjB;sBACDT,MAAM,CAACwC,IAAP,CAAYtC,MAAZ,EAAoBO,IAApB;;MAAR+B;;SACA,UAAA5B,CAAC;WAAIA,CAAC,KAAK4B,IAAV;GAAR;CAFF;;;;;ACx1BO,IAAM+Q,mBAAmB,GAAG;;;;EAKjCC,QALiC,oBAM/BtT,MAN+B;QAO/BC,8EAEI;wBAEwBA,QAApBqB;QAAAA,kCAAO;QACPjB,YAAcL,OAAdK;;QAEJ,CAACA,SAAL,EAAgB;;KAAhB,MAEO,IAAIiB,IAAI,KAAK,QAAb,EAAuB;MAC5B+O,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BK,SAAS,CAACe,MAApC;KADK,MAEA,IAAIE,IAAI,KAAK,OAAb,EAAsB;MAC3B+O,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BK,SAAS,CAACkB,KAApC;KADK,MAEA,IAAID,IAAI,KAAK,OAAb,EAAsB;yBACX0C,KAAK,CAAC5B,KAAN,CAAY/B,SAAZ,CADW;;UACpB0B,KADoB;;MAE3BsO,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0B+B,KAA1B;KAFK,MAGA,IAAIT,IAAI,KAAK,KAAb,EAAoB;0BACT0C,KAAK,CAAC5B,KAAN,CAAY/B,SAAZ,CADS;;UAChBmB,GADgB;;MAEzB6O,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BwB,GAA1B;;GAzB6B;;;;;EAiCjC+R,QAjCiC,oBAiCxBvT,MAjCwB;QAkCvBK,YAAcL,OAAdK;;QAEJA,SAAJ,EAAe;MACbL,MAAM,CAAC0D,KAAP,CAAa;QACX0F,IAAI,EAAE,eADK;QAEXgB,UAAU,EAAE/J,SAFD;QAGXyJ,aAAa,EAAE;OAHjB;;GArC6B;;;;;EAiDjC0J,IAjDiC,gBAkD/BxT,MAlD+B;QAmD/BC,8EAKI;QAEII,YAAcL,OAAdK;4BACsDJ,QAAtDyB;QAAAA,0CAAW;wBAA2CzB,QAAxCgC;QAAAA,kCAAO;2BAAiChC,QAApBO;QAAAA,wCAAU;yBAC9BP,QAAhBqB;QAAAA,mCAAO;;QAET,CAACjB,SAAL,EAAgB;;;;QAIZiB,IAAI,KAAK,OAAb,EAAsB;MACpBA,IAAI,GAAG0C,KAAK,CAACwK,UAAN,CAAiBnO,SAAjB,IAA8B,OAA9B,GAAwC,QAA/C;;;QAGEiB,IAAI,KAAK,KAAb,EAAoB;MAClBA,IAAI,GAAG0C,KAAK,CAACwK,UAAN,CAAiBnO,SAAjB,IAA8B,QAA9B,GAAyC,OAAhD;;;QAGMe,SAAkBf,UAAlBe;QAAQG,QAAUlB,UAAVkB;QACVkS,IAAI,GAAG;MAAE/R,QAAQ,EAARA,QAAF;MAAYO,IAAI,EAAJA;KAAzB;QACM+I,KAAK,GAAmB,EAA9B;;QAEI1J,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,QAA7B,EAAuC;UAC/BD,KAAK,GAAGb,OAAO,GACjBV,MAAM,CAACgC,MAAP,CAAc9B,MAAd,EAAsBoB,MAAtB,EAA8BqS,IAA9B,CADiB,GAEjB3T,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBoB,MAArB,EAA6BqS,IAA7B,CAFJ;;UAIIpS,KAAJ,EAAW;QACT2J,KAAK,CAAC5J,MAAN,GAAeC,KAAf;;;;QAIAC,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,OAA7B,EAAsC;UAC9BD,MAAK,GAAGb,OAAO,GACjBV,MAAM,CAACgC,MAAP,CAAc9B,MAAd,EAAsBuB,KAAtB,EAA6BkS,IAA7B,CADiB,GAEjB3T,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBuB,KAArB,EAA4BkS,IAA5B,CAFJ;;UAIIpS,MAAJ,EAAW;QACT2J,KAAK,CAACzJ,KAAN,GAAcF,MAAd;;;;IAIJgP,UAAU,CAACqD,YAAX,CAAwB1T,MAAxB,EAAgCgL,KAAhC;GAlG+B;;;;;EAyGjCoF,MAzGiC,kBAyG1BpQ,MAzG0B,EAyGV4B,MAzGU;QA0GvBvB,YAAcL,OAAdK;IACRuB,MAAM,GAAG9B,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqB4B,MAArB,CAAT;;QAEIvB,SAAJ,EAAe;MACbgQ,UAAU,CAACqD,YAAX,CAAwB1T,MAAxB,EAAgC4B,MAAhC;;;;QAIE,CAACoC,KAAK,CAACC,OAAN,CAAcrC,MAAd,CAAL,EAA4B;YACpB,IAAIiE,KAAJ,6IACuIkE,IAAI,CAACC,SAAL,CACzIpI,MADyI,CADvI,EAAN;;;IAOF5B,MAAM,CAAC0D,KAAP,CAAa;MACX0F,IAAI,EAAE,eADK;MAEXgB,UAAU,EAAE/J,SAFD;MAGXyJ,aAAa,EAAElI;KAHjB;GA1H+B;;;;;EAqIjC+R,QArIiC,oBAsI/B3T,MAtI+B,EAuI/BgL,KAvI+B,EAwI/B/K,OAxI+B;QA4IvBI,YAAcL,OAAdK;yBACgBJ,QAAlBqB;QAAAA,mCAAO;;QAET,CAACjB,SAAL,EAAgB;;;;QAIZiB,IAAI,KAAK,OAAb,EAAsB;MACpBA,IAAI,GAAG0C,KAAK,CAACwK,UAAN,CAAiBnO,SAAjB,IAA8B,OAA9B,GAAwC,QAA/C;;;QAGEiB,IAAI,KAAK,KAAb,EAAoB;MAClBA,IAAI,GAAG0C,KAAK,CAACwK,UAAN,CAAiBnO,SAAjB,IAA8B,QAA9B,GAAyC,OAAhD;;;QAGMe,SAAkBf,UAAlBe;QAAQG,QAAUlB,UAAVkB;QACVF,KAAK,GAAGC,IAAI,KAAK,QAAT,GAAoBF,MAApB,GAA6BG,KAA3C;IAEA8O,UAAU,CAACqD,YAAX,CAAwB1T,MAAxB,qBACGsB,IAAI,KAAK,QAAT,GAAoB,QAApB,GAA+B,OADlC,sBACiDD,KADjD,MAC2D2J,KAD3D;GA9J+B;;;;;EAuKjC0I,YAvKiC,wBAuKpB1T,MAvKoB,EAuKJgL,KAvKI;QAwKvB3K,YAAcL,OAAdK;QACFuT,QAAQ,GAA0B,EAAxC;QACMC,QAAQ,GAAmB,EAAjC;;QAEI,CAACxT,SAAL,EAAgB;;;;SAIX,IAAMqR,CAAX,IAAgB1G,KAAhB,EAAuB;UAElB0G,CAAC,KAAK,QAAN,IACC1G,KAAK,CAAC5J,MAAN,IAAgB,IADjB,IAEC,CAACmD,KAAK,CAACxD,MAAN,CAAaiK,KAAK,CAAC5J,MAAnB,EAA2Bf,SAAS,CAACe,MAArC,CAFH,IAGCsQ,CAAC,KAAK,OAAN,IACC1G,KAAK,CAACzJ,KAAN,IAAe,IADhB,IAEC,CAACgD,KAAK,CAACxD,MAAN,CAAaiK,KAAK,CAACzJ,KAAnB,EAA0BlB,SAAS,CAACkB,KAApC,CALH,IAMCmQ,CAAC,KAAK,QAAN,IAAkBA,CAAC,KAAK,OAAxB,IAAmC1G,KAAK,CAAC0G,CAAD,CAAL,KAAarR,SAAS,CAACqR,CAAD,CAP5D,EAQE;QACAkC,QAAQ,CAAClC,CAAD,CAAR,GAAcrR,SAAS,CAACqR,CAAD,CAAvB;QACAmC,QAAQ,CAACnC,CAAD,CAAR,GAAc1G,KAAK,CAAC0G,CAAD,CAAnB;;;;QAIAzH,MAAM,CAAC0H,IAAP,CAAYiC,QAAZ,EAAsB3U,MAAtB,GAA+B,CAAnC,EAAsC;MACpCe,MAAM,CAAC0D,KAAP,CAAa;QACX0F,IAAI,EAAE,eADK;QAEXgB,UAAU,EAAEwJ,QAFD;QAGX9J,aAAa,EAAE+J;OAHjB;;;CAhMC;;ACWA,IAAMC,cAAc,GAAG;;;;6BAM1B9T,MAN0B;QAO1BC,8EAOI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;6BAM5BC,QAJFO;UAAAA,wCAAU;0BAIRP,QAHFgC;UAAAA,kCAAO;8BAGLhC,QAFFyB;UAAAA,0CAAW;2BAETzB,QADFC;UAAAA,oCAAQ;wBAEuCD,QAA3CG;UAAAA,8BAAKJ,MAAM,CAACK;6BAA+BJ,QAApBkQ;UAAAA,wCAAU;;UAEnC,CAAC/P,EAAL,EAAS;;;;UAIL4D,KAAK,CAACC,OAAN,CAAc7D,EAAd,KAAqB4D,KAAK,CAACyG,WAAN,CAAkBrK,EAAlB,CAAzB,EAAgD;QAC9CA,EAAE,GAAGA,EAAE,CAACgB,MAAR;;;UAGEmD,KAAK,CAACmD,OAAN,CAActH,EAAd,CAAJ,EAAuB;YACf2T,YAAY,GAAGjU,MAAM,QAAN,CAAYE,MAAZ,EAAoB;UAAEI,EAAE,EAAFA,EAAF;UAAMD,IAAI,EAAE;SAAhC,CAArB;;YAEI,CAACD,KAAD,IAAU6T,YAAd,EAA4B;4CACLA,YADK;cACjB3B,QADiB;;UAE1BhS,EAAE,GAAGgS,QAAL;SAFF,MAGO;cACCqB,IAAI,GAAG;YAAExR,IAAI,EAAJA,IAAF;YAAQP,QAAQ,EAARA;WAArB;cACME,MAAM,GAAGpB,OAAO,GAClBV,MAAM,CAACgC,MAAP,CAAc9B,MAAd,EAAsBI,EAAtB,EAA0BqT,IAA1B,KAAmC3T,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqB,EAArB,CADjB,GAElBF,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBI,EAArB,EAAyBqT,IAAzB,KAAkC3T,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmB,EAAnB,CAFtC;UAGAI,EAAE,GAAG;YAAEgB,MAAM,EAAEhB,EAAV;YAAcmB,KAAK,EAAEK;WAA1B;UACAuO,OAAO,GAAG,IAAV;;;;UAIArP,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;QACnBiQ,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;UAAEI,EAAE,EAAFA,EAAF;UAAMF,KAAK,EAALA;SAArC;;;;UAIE8D,KAAK,CAACyG,WAAN,CAAkBrK,EAAlB,CAAJ,EAA2B;;;;UAIvB,CAAC+P,OAAL,EAAc;QACZ/P,EAAE,GAAGN,MAAM,CAAC0K,WAAP,CAAmBxK,MAAnB,EAA2BI,EAA3B,EAA+B;UAAEF,KAAK,EAALA;SAAjC,CAAL;;;yBAGiB8D,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ;;UAAd2B;UAAOP;;UACNwS,UAAU,GAAGlU,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;QACtCM,KAAK,EAAE,eAAAI,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAD8B;QAEtCN,EAAE,EAAE2B,KAFkC;QAGtC7B,KAAK,EAALA;OAHiB,CAAnB;UAKMwK,QAAQ,GAAG5K,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;QACpCM,KAAK,EAAE,eAAAI,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAD4B;QAEpCN,EAAE,EAAEoB,GAFgC;QAGpCtB,KAAK,EAALA;OAHe,CAAjB;UAKM+T,cAAc,GAClBD,UAAU,IAAItJ,QAAd,IAA0B,CAAC5J,IAAI,CAACC,MAAL,CAAYiT,UAAU,CAAC,CAAD,CAAtB,EAA2BtJ,QAAQ,CAAC,CAAD,CAAnC,CAD7B;UAEMwJ,YAAY,GAAGpT,IAAI,CAACC,MAAL,CAAYgB,KAAK,CAACxB,IAAlB,EAAwBiB,GAAG,CAACjB,IAA5B,CAArB;UACM4T,SAAS,GAAGjU,KAAK,GACnB,IADmB,GAEnBJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;QAAEI,EAAE,EAAE2B,KAAN;QAAa5B,IAAI,EAAE;OAAvC,CAFJ;UAGMiU,OAAO,GAAGlU,KAAK,GACjB,IADiB,GAEjBJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;QAAEI,EAAE,EAAEoB,GAAN;QAAWrB,IAAI,EAAE;OAArC,CAFJ;;UAKIgU,SAAJ,EAAe;YACPrS,MAAM,GAAGhC,MAAM,CAACgC,MAAP,CAAc9B,MAAd,EAAsB+B,KAAtB,CAAf;;YAGED,MAAM,IACNkS,UADA,IAEAlT,IAAI,CAAC0E,UAAL,CAAgBwO,UAAU,CAAC,CAAD,CAA1B,EAA+BlS,MAAM,CAACvB,IAAtC,CAHF,EAIE;UACAwB,KAAK,GAAGD,MAAR;;;;UAIAsS,OAAJ,EAAa;YACLjT,KAAK,GAAGrB,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBwB,GAArB,CAAd;;YAEIL,KAAK,IAAIuJ,QAAT,IAAqB5J,IAAI,CAAC0E,UAAL,CAAgBkF,QAAQ,CAAC,CAAD,CAAxB,EAA6BvJ,KAAK,CAACZ,IAAnC,CAAzB,EAAmE;UACjEiB,GAAG,GAAGL,KAAN;;;;;;UAMEkF,OAAO,GAAgB,EAA7B;UACImB,QAAJ;;;;;;6BAEoB1H,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;UAAEI,EAAE,EAAFA,EAAF;UAAMF,KAAK,EAALA;SAA3B,CAApB,8HAAyD;cAA9CkH,KAA8C;;qCAClCA,KADkC;cAChD9E,MADgD;cAC1C/B,MAD0C;;cAGnDiH,QAAQ,IAAI1G,IAAI,CAAC0F,OAAL,CAAajG,MAAb,EAAmBiH,QAAnB,MAAiC,CAAjD,EAAoD;;;;cAKjD,CAACtH,KAAD,IAAUJ,MAAM,CAAC6D,MAAP,CAAc3D,MAAd,EAAsBsC,MAAtB,CAAX,IACC,CAACxB,IAAI,CAAC8M,QAAL,CAAcrN,MAAd,EAAoBwB,KAAK,CAACxB,IAA1B,CAAD,IAAoC,CAACO,IAAI,CAAC8M,QAAL,CAAcrN,MAAd,EAAoBiB,GAAG,CAACjB,IAAxB,CAFxC,EAGE;YACA8F,OAAO,CAACrB,IAAR,CAAaoC,KAAb;YACAI,QAAQ,GAAGjH,MAAX;;;;;;;;;;;;;;;;;;UAIEyH,QAAQ,GAAGlB,KAAK,CAACrB,IAAN,CAAWY,OAAX,EAAoB;;YAAI1F,CAAJ;;eAAWb,MAAM,CAAC6H,OAAP,CAAe3H,MAAf,EAAuBW,CAAvB,CAAX;OAApB,CAAjB;UACM0T,QAAQ,GAAGvU,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwB+B,KAAxB,CAAjB;UACMuS,MAAM,GAAGxU,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBwB,GAAxB,CAAf;;UAEI,CAAC0S,YAAD,IAAiB,CAACC,SAAtB,EAAiC;YACzB9S,MAAK,GAAGgT,QAAQ,CAACvM,OAAvB;;2BACehI,MAAM,CAACiF,IAAP,CAAY/E,MAAZ,EAAoBqB,MAApB,CAFgB;;YAExBiB,IAFwB;;YAGvB/B,IAHuB,GAGdc,MAHc,CAGvBd,IAHuB;qBAIZwB,KAJY;YAIvBxD,MAJuB,UAIvBA,MAJuB;YAKzBD,IAAI,GAAGgE,IAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgBhB,MAAhB,CAAb;QACAyB,MAAM,CAAC0D,KAAP,CAAa;UAAE0F,IAAI,EAAE,aAAR;UAAuB7I,IAAI,EAAJA,IAAvB;UAA6BhC,MAAM,EAANA,MAA7B;UAAqCD,IAAI,EAAJA;SAAlD;;;mCAGoB0J,QAAtB,+BAAgC;YAArBL,OAAO,gBAAb;;YACGpH,MAAI,GAAGoH,OAAO,CAACI,KAAR,EAAb;;QACAsI,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;UAAEI,EAAE,EAAEG,MAAN;UAAYL,KAAK,EAALA;SAA3C;;;UAGE,CAACkU,OAAL,EAAc;YACN/S,OAAK,GAAGiT,MAAM,CAACxM,OAArB;;4BACehI,MAAM,CAACiF,IAAP,CAAY/E,MAAZ,EAAoBqB,OAApB,CAFH;;YAELiB,KAFK;;YAGJ/B,KAHI,GAGKc,OAHL,CAGJd,IAHI;;YAINhC,OAAM,GAAG2V,YAAY,GAAGnS,KAAK,CAACxD,MAAT,GAAkB,CAA7C;;YACMD,KAAI,GAAGgE,KAAI,CAAChE,IAAL,CAAUiB,KAAV,CAAgBhB,OAAhB,EAAwBiD,GAAG,CAACjD,MAA5B,CAAb;;QACAyB,MAAM,CAAC0D,KAAP,CAAa;UAAE0F,IAAI,EAAE,aAAR;UAAuB7I,IAAI,EAAJA,KAAvB;UAA6BhC,MAAM,EAANA,OAA7B;UAAqCD,IAAI,EAAJA;SAAlD;;;UAIA,CAAC4V,YAAD,IACAD,cADA,IAEAK,MAAM,CAACxM,OAFP,IAGAuM,QAAQ,CAACvM,OAJX,EAKE;QACAuI,UAAU,CAACU,UAAX,CAAsB/Q,MAAtB,EAA8B;UAC5BI,EAAE,EAAEkU,MAAM,CAACxM,OADiB;UAE5BqI,OAAO,EAAE,IAFmB;UAG5BjQ,KAAK,EAALA;SAHF;;;UAOImB,KAAK,GAAGiT,MAAM,CAACvM,KAAP,MAAkBsM,QAAQ,CAACtM,KAAT,EAAhC;;UAEI9H,OAAO,CAACG,EAAR,IAAc,IAAd,IAAsBiB,KAA1B,EAAiC;QAC/BgP,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BqB,KAA1B;;KAxJJ;GAhB0B;;;;;EAiL5B8B,cAjL4B,0BAkL1BnD,MAlL0B,EAmL1BuC,QAnL0B;QAoL1BtC,8EAII;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;8BACWC,QAAnCkQ;UAAAA,yCAAU;4BAAyBlQ,QAAlBC;UAAAA,qCAAQ;yBACDD,QAA1BG;UAAAA,+BAAKJ,MAAM,CAACK;;UAEd,CAACkC,QAAQ,CAACtD,MAAd,EAAsB;;;;UAIlB,CAACmB,EAAL,EAAS;;OAAT,MAEO,IAAI4D,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;YACxB,CAAC+P,OAAL,EAAc;UACZ/P,EAAE,GAAGN,MAAM,CAAC0K,WAAP,CAAmBxK,MAAnB,EAA2BI,EAA3B,CAAL;;;YAGE4D,KAAK,CAACyG,WAAN,CAAkBrK,EAAlB,CAAJ,EAA2B;UACzBA,EAAE,GAAGA,EAAE,CAACgB,MAAR;SADF,MAEO;8BACW4C,KAAK,CAAC5B,KAAN,CAAYhC,EAAZ,CADX;;cACIoB,GADJ;;cAGD,CAACtB,KAAD,IAAUJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;YAAEI,EAAE,EAAEoB;WAA1B,CAAd,EAAgD;;;;cAI1C4G,QAAQ,GAAGtI,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBwB,GAAxB,CAAjB;UACA6O,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;YAAEI,EAAE,EAAFA;WAA5B;UACAA,EAAE,GAAGgI,QAAQ,CAACL,KAAT,EAAL;;OAhBG,MAkBA,IAAIjH,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;QAC1BA,EAAE,GAAGN,MAAM,CAACiC,KAAP,CAAa/B,MAAb,EAAqBI,EAArB,CAAL;;;UAGE,CAACF,KAAD,IAAUJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;QAAEI,EAAE,EAAFA;OAAtB,CAAd,EAA2C;;;;;;UAMrCmU,kBAAkB,GAAGzU,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;QAC9CI,EAAE,EAAFA,EAD8C;QAE9CE,KAAK,EAAE,eAAAI,CAAC;iBAAIZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAJ;SAFsC;QAG9CP,IAAI,EAAE,SAHwC;QAI9CD,KAAK,EAALA;OAJyB,CAA3B;;UAOIqU,kBAAJ,EAAwB;gDACCA,kBADD;YACbC,WADa;;YAGlB1U,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBI,EAArB,EAAyBoU,WAAzB,CAAJ,EAA0C;cAClCrT,KAAK,GAAGrB,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBwU,WAArB,CAAd;UACApU,EAAE,GAAGe,KAAL;SAFF,MAGO,IAAIrB,MAAM,CAAC2E,OAAP,CAAezE,MAAf,EAAuBI,EAAvB,EAA2BoU,WAA3B,CAAJ,EAA4C;cAC3C1S,MAAM,GAAGhC,MAAM,CAACgC,MAAP,CAAc9B,MAAd,EAAsBwU,WAAtB,CAAf;UACApU,EAAE,GAAG0B,MAAL;;;;UAIE2S,UAAU,GAAG3U,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;QACtCM,KAAK,EAAE,eAAAI,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAD8B;QAEtCN,EAAE,EAAFA,EAFsC;QAGtCF,KAAK,EAALA;OAHiB,CAAnB;;sCAKsBuU;UAAblP;;UACHmP,YAAY,GAAG5U,MAAM,CAAC2E,OAAP,CAAezE,MAAf,EAAuBI,EAAvB,EAA2BmF,SAA3B,CAArB;UACMoP,UAAU,GAAG7U,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBI,EAArB,EAAyBmF,SAAzB,CAAnB;UACMqP,UAAU,GAAG,CAACF,YAAD,IAAkBA,YAAY,IAAIC,UAArD;UACME,QAAQ,GAAG,CAACF,UAAlB;;wBACsBnS,IAAI,CAACH,KAAL,CAAW;QAAEM,QAAQ,EAAEJ;OAAvB,EAAmC,EAAnC;;UAAbgF;;uBACY/E,IAAI,CAACsC,IAAL,CAAU;QAAEnC,QAAQ,EAAEJ;OAAtB,EAAkC,EAAlC;;UAAZiF;;UAEHnB,OAAO,GAAgB,EAA7B;;UACMyO,OAAO,GAAG,SAAVA,OAAU;;YAAEpU;YAAGC;;YAEjBiU,UAAU,IACV9T,IAAI,CAAC0E,UAAL,CAAgB7E,CAAhB,EAAmB4G,SAAnB,CADA,IAEAjE,OAAO,CAACC,SAAR,CAAkB7C,CAAlB,CAFA,IAGA,CAACV,MAAM,CAAC2D,MAAP,CAAcjD,CAAd,CAHD,IAIA,CAACV,MAAM,CAAC+C,QAAP,CAAgBrC,CAAhB,CALH,EAME;iBACO,KAAP;;;YAIAmU,QAAQ,IACR/T,IAAI,CAAC0E,UAAL,CAAgB7E,CAAhB,EAAmB6G,QAAnB,CADA,IAEAlE,OAAO,CAACC,SAAR,CAAkB7C,CAAlB,CAFA,IAGA,CAACV,MAAM,CAAC2D,MAAP,CAAcjD,CAAd,CAHD,IAIA,CAACV,MAAM,CAAC+C,QAAP,CAAgBrC,CAAhB,CALH,EAME;iBACO,KAAP;;;eAGK,IAAP;OArBF;;;;;;;8BAwBoB8B,IAAI,CAAC0C,KAAL,CAClB;UAAEvC,QAAQ,EAAEJ;SADM,EAElB;UAAE6D,IAAI,EAAE0O;SAFU,CAApB,mIAGG;cAHQ1N,KAGR;;cACGA,KAAK,CAAC,CAAD,CAAL,CAASnI,MAAT,GAAkB,CAAlB,IAAuB6V,OAAO,CAAC1N,KAAD,CAAlC,EAA2C;YACzCf,OAAO,CAACrB,IAAR,CAAaoC,KAAb;;;;;;;;;;;;;;;;;;UAIE2N,MAAM,GAAG,EAAf;UACMC,OAAO,GAAG,EAAhB;UACMC,IAAI,GAAG,EAAb;UACIC,QAAQ,GAAG,IAAf;UACIzS,SAAS,GAAG,KAAhB;;mCAEqB4D,OAArB,gCAA8B;;YAAlB/D,IAAkB;;YACxBgB,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,KAA2B,CAACtC,MAAM,CAAC+C,QAAP,CAAgBT,IAAhB,CAAhC,EAAuD;UACrD4S,QAAQ,GAAG,KAAX;UACAzS,SAAS,GAAG,IAAZ;UACAuS,OAAO,CAAChQ,IAAR,CAAa1C,IAAb;SAHF,MAIO,IAAI4S,QAAJ,EAAc;UACnBH,MAAM,CAAC/P,IAAP,CAAY1C,IAAZ;SADK,MAEA;UACL2S,IAAI,CAACjQ,IAAL,CAAU1C,IAAV;;;;0BAIkBxC,MAAM,CAACoF,KAAP,CAAalF,MAAb,EAAqB;QACzCI,EAAE,EAAFA,EADyC;QAEzCE,KAAK,EAAE,eAAAI,CAAC;iBAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAtB;SAFiC;QAGzCP,IAAI,EAAE,SAHmC;QAIzCD,KAAK,EAALA;OAJoB;;UAAfiV;;uCAOgBA;UAAdX;;UACHY,aAAa,GAAGtV,MAAM,CAAC2E,OAAP,CAAezE,MAAf,EAAuBI,EAAvB,EAA2BoU,UAA3B,CAAtB;UACMa,WAAW,GAAGvV,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBI,EAArB,EAAyBoU,UAAzB,CAApB;UAEMc,SAAS,GAAGxV,MAAM,CAAC6H,OAAP,CAChB3H,MADgB,EAEhB2U,UAAU,GAAG7T,IAAI,CAAClB,IAAL,CAAU2F,SAAV,CAAH,GAA0BA,SAFpB,CAAlB;UAKM+O,MAAM,GAAGxU,MAAM,CAAC6H,OAAP,CACb3H,MADa,EAEbqV,WAAW,GAAGvU,IAAI,CAAClB,IAAL,CAAU4U,UAAV,CAAH,GAA2BA,UAFzB,CAAf;MAKAnE,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;QAC5BI,EAAE,EAAFA,EAD4B;QAE5BE,KAAK,EAAE,eAAAI,CAAC;iBACN+B,SAAS,GACL3C,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CADK,GAELE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAHhB;SAFoB;QAM5BP,IAAI,EAAEsC,SAAS,GAAG,QAAH,GAAc,SAND;QAO5BvC,KAAK,EAALA;OAPF;UAUMmU,QAAQ,GAAGvU,MAAM,CAAC6H,OAAP,CACf3H,MADe,EAEf,CAACoV,aAAD,IAAmBA,aAAa,IAAIC,WAApC,GACIvU,IAAI,CAAClB,IAAL,CAAU4U,UAAV,CADJ,GAEIA,UAJW,CAAjB;MAOAnE,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+B+U,MAA/B,EAAuC;QACrC3U,EAAE,EAAEiU,QAAQ,CAACvM,OADwB;QAErCxH,KAAK,EAAE,eAAAI,CAAC;iBAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAtB;SAF6B;QAGrCP,IAAI,EAAE,SAH+B;QAIrCD,KAAK,EAALA;OAJF;MAOAmQ,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BgV,OAA/B,EAAwC;QACtC5U,EAAE,EAAEkV,SAAS,CAACxN,OADwB;QAEtCxH,KAAK,EAAE,eAAAI,CAAC;iBAAIZ,MAAM,CAAC+C,OAAP,CAAe7C,MAAf,EAAuBU,CAAvB,CAAJ;SAF8B;QAGtCP,IAAI,EAAE,QAHgC;QAItCD,KAAK,EAALA;OAJF;MAOAmQ,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BiV,IAA/B,EAAqC;QACnC7U,EAAE,EAAEkU,MAAM,CAACxM,OADwB;QAEnCxH,KAAK,EAAE,eAAAI,CAAC;iBAAIE,IAAI,CAACC,MAAL,CAAYH,CAAZ,KAAkBZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAtB;SAF2B;QAGnCP,IAAI,EAAE,SAH6B;QAInCD,KAAK,EAALA;OAJF;;UAOI,CAACD,OAAO,CAACG,EAAb,EAAiB;YACXG,IAAJ;;YAEI0U,IAAI,CAAChW,MAAL,GAAc,CAAlB,EAAqB;UACnBsB,IAAI,GAAGO,IAAI,CAACqE,QAAL,CAAcmP,MAAM,CAACxM,OAArB,CAAP;SADF,MAEO,IAAIkN,OAAO,CAAC/V,MAAR,GAAiB,CAArB,EAAwB;UAC7BsB,IAAI,GAAGO,IAAI,CAACqE,QAAL,CAAcmQ,SAAS,CAACxN,OAAxB,CAAP;SADK,MAEA;UACLvH,IAAI,GAAGO,IAAI,CAACqE,QAAL,CAAckP,QAAQ,CAACvM,OAAvB,CAAP;;;YAGItG,IAAG,GAAG1B,MAAM,CAAC0B,GAAP,CAAWxB,MAAX,EAAmBO,IAAnB,CAAZ;;QACA8P,UAAU,CAACD,MAAX,CAAkBpQ,MAAlB,EAA0BwB,IAA1B;;;MAGF6S,QAAQ,CAACtM,KAAT;MACAuN,SAAS,CAACvN,KAAV;MACAuM,MAAM,CAACvM,KAAP;KAtMF;GA1L0B;;;;;EAwY5B1E,UAxY4B,sBAyY1BrD,MAzY0B,EA0Y1B1B,IA1Y0B;QA2Y1B2B,8EAGI;IAEJH,MAAM,CAACkH,kBAAP,CAA0BhH,MAA1B,EAAkC;4BACNC,QAAlBC;UAAAA,qCAAQ;yBACgBD,QAA1BG;UAAAA,+BAAKJ,MAAM,CAACK;;UAEd,CAACD,EAAL,EAAS;;;;UAILU,IAAI,CAAC8E,MAAL,CAAYxF,EAAZ,CAAJ,EAAqB;QACnBA,EAAE,GAAGN,MAAM,CAAC2B,KAAP,CAAazB,MAAb,EAAqBI,EAArB,CAAL;;;UAGE4D,KAAK,CAACC,OAAN,CAAc7D,EAAd,CAAJ,EAAuB;YACjB4D,KAAK,CAACyG,WAAN,CAAkBrK,EAAlB,CAAJ,EAA2B;UACzBA,EAAE,GAAGA,EAAE,CAACgB,MAAR;SADF,MAEO;cACCI,GAAG,GAAGwC,KAAK,CAACxC,GAAN,CAAUpB,EAAV,CAAZ;;cAEI,CAACF,KAAD,IAAUJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;YAAEI,EAAE,EAAEoB;WAA1B,CAAd,EAAgD;;;;cAI1C4G,QAAQ,GAAGtI,MAAM,CAACsI,QAAP,CAAgBpI,MAAhB,EAAwBwB,GAAxB,CAAjB;UACA6O,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;YAAEI,EAAE,EAAFA,EAAF;YAAMF,KAAK,EAALA;WAAhC;UACAE,EAAE,GAAGgI,QAAQ,CAACL,KAAT,EAAL;UACAsI,UAAU,CAACqD,YAAX,CAAwB1T,MAAxB,EAAgC;YAAEoB,MAAM,EAAEhB,EAAV;YAAcmB,KAAK,EAAEnB;WAArD;;;;UAIA,CAACF,KAAD,IAAUJ,MAAM,QAAN,CAAYE,MAAZ,EAAoB;QAAEI,EAAE,EAAFA;OAAtB,CAAd,EAA2C;;;;gBAIlBA;UAAjBG,WAAAA;UAAMhC,aAAAA;MACdyB,MAAM,CAAC0D,KAAP,CAAa;QAAE0F,IAAI,EAAE,aAAR;QAAuB7I,IAAI,EAAJA,IAAvB;QAA6BhC,MAAM,EAANA,MAA7B;QAAqCD,IAAI,EAAJA;OAAlD;KAlCF;;CAhZG;;;;;ICRM+R,UAAU,uBAClBL,iBADkB,MAElBC,cAFkB,MAGlBoD,mBAHkB,MAIlBS,cAJkB,CAAhB;;;;;ACYP;;;;AAIA,IAAayB,YAAY,GAAG,SAAfA,YAAe;MACpBvV,MAAM,GAAW;IACrB2C,QAAQ,EAAE,EADW;IAErB0B,UAAU,EAAE,EAFS;IAGrBhE,SAAS,EAAE,IAHU;IAIrB0D,KAAK,EAAE,IAJc;IAKrBhB,QAAQ,EAAE;aAAM,KAAN;KALW;IAMrBY,MAAM,EAAE;aAAM,KAAN;KANa;IAOrBE,QAAQ,EAAE,sBAPW;IASrBH,KAAK,EAAE,eAACwF,EAAD;;;;;;6BACapJ,MAAM,CAACkI,QAAP,CAAgBhI,MAAhB,CAAlB,8HAA2C;cAAhC6H,GAAgC;UACzCyG,OAAO,CAACrF,SAAR,CAAkBpB,GAAlB,EAAuBqB,EAAvB;;;;;;;;;;;;;;;;;;;;;;8BAGgBpJ,MAAM,CAACuI,SAAP,CAAiBrI,MAAjB,CAAlB,mIAA4C;cAAjC6H,IAAiC;UAC1C0G,QAAQ,CAACtF,SAAT,CAAmBpB,IAAnB,EAAwBqB,EAAxB;;;;;;;;;;;;;;;;;;;;;;8BAGgBpJ,MAAM,CAACiJ,SAAP,CAAiB/I,MAAjB,CAAlB,mIAA4C;cAAjC6H,KAAiC;UAC1C0H,QAAQ,CAACtG,SAAT,CAAmBpB,KAAnB,EAAwBqB,EAAxB;;;;;;;;;;;;;;;;;UAGInC,GAAG,GAAG,IAAIoB,GAAJ,EAAZ;UACMqN,UAAU,GAAW,EAA3B;;UAEMtN,GAAG,GAAG,SAANA,GAAM,CAAC3H,IAAD;YACNA,IAAJ,EAAU;cACFU,GAAG,GAAGV,IAAI,CAACgM,IAAL,CAAU,GAAV,CAAZ;;cAEI,CAACxF,GAAG,CAACkF,GAAJ,CAAQhL,GAAR,CAAL,EAAmB;YACjB8F,GAAG,CAACmB,GAAJ,CAAQjH,GAAR;YACAuU,UAAU,CAACxQ,IAAX,CAAgBzE,IAAhB;;;OANN;;UAWMkV,aAAa,GAAGjY,WAAW,CAACoH,GAAZ,CAAgB5E,MAAhB,KAA2B,EAAjD;UACM0V,aAAa,GAAG9O,aAAa,CAACsC,EAAD,CAAnC;;;;;;8BAEmBuM,aAAnB,mIAAkC;cAAvBlV,IAAuB;cAC1BiJ,OAAO,GAAG1I,IAAI,CAACmI,SAAL,CAAe1I,IAAf,EAAqB2I,EAArB,CAAhB;UACAhB,GAAG,CAACsB,OAAD,CAAH;;;;;;;;;;;;;;;;;;;;;;8BAGiBkM,aAAnB,mIAAkC;cAAvBnV,KAAuB;UAChC2H,GAAG,CAAC3H,KAAD,CAAH;;;;;;;;;;;;;;;;;MAGF/C,WAAW,CAACuJ,GAAZ,CAAgB/G,MAAhB,EAAwBwV,UAAxB;MACA1V,MAAM,CAACmJ,SAAP,CAAiBjJ,MAAjB,EAAyBkJ,EAAzB;MACAlJ,MAAM,CAACqE,UAAP,CAAkBW,IAAlB,CAAuBkE,EAAvB;MACApJ,MAAM,CAAC4G,SAAP,CAAiB1G,MAAjB;;UAGIkJ,EAAE,CAACE,IAAH,KAAY,eAAhB,EAAiC;QAC/BpJ,MAAM,CAAC+D,KAAP,GAAe,IAAf;;;UAGE,CAACrG,QAAQ,CAACkH,GAAT,CAAa5E,MAAb,CAAL,EAA2B;QACzBtC,QAAQ,CAACqJ,GAAT,CAAa/G,MAAb,EAAqB,IAArB;QAEA2V,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB;UACrBnY,QAAQ,CAACqJ,GAAT,CAAa/G,MAAb,EAAqB,KAArB;UACAA,MAAM,CAAC6D,QAAP;UACA7D,MAAM,CAACqE,UAAP,GAAoB,EAApB;SAHF;;KA7DiB;IAqErBrD,OAAO,EAAE,iBAACC,GAAD,EAAcC,KAAd;UACCb,YAAcL,OAAdK;;UAEJA,SAAJ,EAAe;YACT2D,KAAK,CAACiB,UAAN,CAAiB5E,SAAjB,CAAJ,EAAiC;UAC/BgQ,UAAU,CAACkB,QAAX,CACEvR,MADF,qBAEKiB,GAFL,EAEWC,KAFX,GAGE;YAAEZ,KAAK,EAAEM,IAAI,CAACC,MAAd;YAAsB2Q,KAAK,EAAE;WAH/B;SADF,MAMO;cACCzN,KAAK,uBACLjE,MAAM,CAACiE,KAAP,CAAa/D,MAAb,KAAwB,EADnB,qBAERiB,GAFQ,EAEFC,KAFE,EAAX;;UAKAlB,MAAM,CAAC+D,KAAP,GAAeA,KAAf;UACA/D,MAAM,CAAC6D,QAAP;;;KAtFe;IA2FrB7B,cAAc,EAAE,wBAACC,IAAD;UACN5B,YAAcL,OAAdK;;UAEJA,SAAS,IAAI2D,KAAK,CAACyG,WAAN,CAAkBpK,SAAlB,CAAjB,EAA+C;QAC7CgQ,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;UAAEiC,IAAI,EAAJA,IAAF;UAAQzB,OAAO,EAAE;SAA3C;;KA/FiB;IAmGrB0B,aAAa,EAAE,uBAACD,IAAD;UACL5B,YAAcL,OAAdK;;UAEJA,SAAS,IAAI2D,KAAK,CAACyG,WAAN,CAAkBpK,SAAlB,CAAjB,EAA+C;QAC7CgQ,UAAU,UAAV,CAAkBrQ,MAAlB,EAA0B;UAAEiC,IAAI,EAAJA;SAA5B;;KAvGiB;IA2GrBE,cAAc,EAAE;UACN9B,YAAcL,OAAdK;;UAEJA,SAAS,IAAI2D,KAAK,CAACiB,UAAN,CAAiB5E,SAAjB,CAAjB,EAA8C;QAC5CgQ,UAAU,UAAV,CAAkBrQ,MAAlB;;KA/GiB;IAmHrB8V,WAAW,EAAE;UACHzV,YAAcL,OAAdK;;UAEJA,SAAJ,EAAe;eACNmC,IAAI,CAACD,QAAL,CAAcvC,MAAd,EAAsBK,SAAtB,CAAP;;;aAEK,EAAP;KAzHmB;IA4HrB6C,WAAW,EAAE;MACXmN,UAAU,CAACG,UAAX,CAAsBxQ,MAAtB,EAA8B;QAAE6R,MAAM,EAAE;OAAxC;KA7HmB;IAgIrB1O,cAAc,EAAE,wBAACZ,QAAD;MACd8N,UAAU,CAAClN,cAAX,CAA0BnD,MAA1B,EAAkCuC,QAAlC;KAjImB;IAoIrBa,UAAU,EAAE,oBAACd,IAAD;MACV+N,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BsC,IAA/B;KArImB;IAwIrBe,UAAU,EAAE,oBAAC/E,IAAD;UACF+B,YAAqBL,OAArBK;UAAW0D,QAAU/D,OAAV+D;;UAEf1D,SAAJ,EAAe;;;YAGT2D,KAAK,CAACyG,WAAN,CAAkBpK,SAAlB,CAAJ,EAAkC;cAC1B0V,MAAM,GAAGjW,MAAM,CAACC,KAAP,CAAaC,MAAb,EAAqB;YAClCM,KAAK,EAAE,eAAAI,CAAC;qBAAIZ,MAAM,CAACiD,QAAP,CAAgB/C,MAAhB,EAAwBU,CAAxB,CAAJ;aAD0B;YAElCP,IAAI,EAAE;WAFO,CAAf;;cAKI4V,MAAJ,EAAY;wCACaA,MADb;gBACDvB,UADC;;gBAGN1U,MAAM,CAACwE,KAAP,CAAatE,MAAb,EAAqBK,SAAS,CAACe,MAA/B,EAAuCoT,UAAvC,CAAJ,EAAwD;kBAChDnT,KAAK,GAAGvB,MAAM,CAACqB,KAAP,CAAanB,MAAb,EAAqBwU,UAArB,CAAd;cACAnE,UAAU,CAACqD,YAAX,CAAwB1T,MAAxB,EAAgC;gBAC9BoB,MAAM,EAAEC,KADsB;gBAE9BE,KAAK,EAAEF;eAFT;;;;;YAQF0C,KAAJ,EAAW;cACHzB,IAAI;YAAKhE,IAAI,EAAJA;aAASyF,KAAd,CAAV;;UACAsM,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BsC,IAA/B;SAFF,MAGO;UACL+N,UAAU,CAAChN,UAAX,CAAsBrD,MAAtB,EAA8B1B,IAA9B;;;QAGF0B,MAAM,CAAC+D,KAAP,GAAe,IAAf;;KAxKiB;IA4KrBH,aAAa,EAAE,uBAACwD,KAAD;iCACQA;UAAd9E;UAAM/B;;;UAGTK,IAAI,CAACC,MAAL,CAAYyB,IAAZ,CAAJ,EAAuB;;;;;UAKnBgB,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,KAA2BA,IAAI,CAACK,QAAL,CAAc1D,MAAd,KAAyB,CAAxD,EAA2D;YACnDqM,KAAK,GAAG;UAAEhN,IAAI,EAAE;SAAtB;QACA+R,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BsL,KAA/B,EAAsC;UACpClL,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY,CAAZ,CADgC;UAEpCvL,KAAK,EAAE;SAFT;;;;;UAQI8V,iBAAiB,GAAGlW,MAAM,CAAC0D,QAAP,CAAgBlB,IAAhB,IACtB,KADsB,GAEtBgB,OAAO,CAACC,SAAR,CAAkBjB,IAAlB,MACCtC,MAAM,CAAC+C,QAAP,CAAgBT,IAAhB,KACCA,IAAI,CAACK,QAAL,CAAc1D,MAAd,KAAyB,CAD1B,IAEC2B,IAAI,CAACC,MAAL,CAAYyB,IAAI,CAACK,QAAL,CAAc,CAAd,CAAZ,CAFD,IAGC3C,MAAM,CAAC+C,QAAP,CAAgBT,IAAI,CAACK,QAAL,CAAc,CAAd,CAAhB,CAJF,CAFJ;;;UAUIjC,CAAC,GAAG,CAAR;;WAEK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoD,IAAI,CAACK,QAAL,CAAc1D,MAAlC,EAA0CC,CAAC,IAAIwB,CAAC,EAAhD,EAAoD;YAC5C4K,MAAK,GAAGhJ,IAAI,CAACK,QAAL,CAAczD,CAAd,CAAd;YACMV,IAAI,GAAG8D,IAAI,CAACK,QAAL,CAAczD,CAAC,GAAG,CAAlB,CAAb;YACM+W,MAAM,GAAG/W,CAAC,KAAKoD,IAAI,CAACK,QAAL,CAAc1D,MAAd,GAAuB,CAA5C;YACMiX,cAAc,GAClBtV,IAAI,CAACC,MAAL,CAAYyK,MAAZ,KACChI,OAAO,CAACC,SAAR,CAAkB+H,MAAlB,KAA4BtL,MAAM,CAAC+C,QAAP,CAAgBuI,MAAhB,CAF/B,CAJkD;;;;;YAY9C4K,cAAc,KAAKF,iBAAvB,EAA0C;UACxC3F,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;YAAEI,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY/K,CAAZ,CAAN;YAAsBR,KAAK,EAAE;WAA5D;UACAQ,CAAC;SAFH,MAGO,IAAI4C,OAAO,CAACC,SAAR,CAAkB+H,MAAlB,CAAJ,EAA8B;;cAE/BtL,MAAM,CAAC+C,QAAP,CAAgBuI,MAAhB,CAAJ,EAA4B;gBACtB9M,IAAI,IAAI,IAAR,IAAgB,CAACoC,IAAI,CAACC,MAAL,CAAYrC,IAAZ,CAArB,EAAwC;kBAChC2X,QAAQ,GAAG;gBAAE7X,IAAI,EAAE;eAAzB;cACA+R,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BmW,QAA/B,EAAyC;gBACvC/V,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY/K,CAAZ,CADmC;gBAEvCR,KAAK,EAAE;eAFT;cAIAQ,CAAC;aANH,MAOO,IAAIuV,MAAJ,EAAY;kBACXE,SAAQ,GAAG;gBAAE7X,IAAI,EAAE;eAAzB;cACA+R,UAAU,CAACH,WAAX,CAAuBlQ,MAAvB,EAA+BmW,SAA/B,EAAyC;gBACvC/V,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY/K,CAAC,GAAG,CAAhB,CADmC;gBAEvCR,KAAK,EAAE;eAFT;cAIAQ,CAAC;;;SAhBA,MAmBA;;cAEDlC,IAAI,IAAI,IAAR,IAAgBoC,IAAI,CAACC,MAAL,CAAYrC,IAAZ,CAApB,EAAuC;gBACjCoC,IAAI,CAACG,MAAL,CAAYuK,MAAZ,EAAmB9M,IAAnB,EAAyB;cAAEgR,KAAK,EAAE;aAAlC,CAAJ,EAA+C;cAC7Ca,UAAU,CAACU,UAAX,CAAsB/Q,MAAtB,EAA8B;gBAAEI,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY/K,CAAZ,CAAN;gBAAsBR,KAAK,EAAE;eAA3D;cACAQ,CAAC;aAFH,MAGO,IAAIlC,IAAI,CAACF,IAAL,KAAc,EAAlB,EAAsB;cAC3B+R,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;gBAC7BI,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY/K,CAAC,GAAG,CAAhB,CADyB;gBAE7BR,KAAK,EAAE;eAFT;cAIAQ,CAAC;aALI,MAMA,IAAIuV,MAAM,IAAI3K,MAAK,CAAChN,IAAN,KAAe,EAA7B,EAAiC;cACtC+R,UAAU,CAACQ,WAAX,CAAuB7Q,MAAvB,EAA+B;gBAC7BI,EAAE,EAAEG,IAAI,CAACkL,MAAL,CAAY/K,CAAZ,CADyB;gBAE7BR,KAAK,EAAE;eAFT;cAIAQ,CAAC;;;;;KA9PU;IAqQrBoD,UAAU,EAAE,oBAAC7C,GAAD;UACFZ,YAAcL,OAAdK;;UAEJA,SAAJ,EAAe;YACT2D,KAAK,CAACiB,UAAN,CAAiB5E,SAAjB,CAAJ,EAAiC;UAC/BgQ,UAAU,CAACqC,UAAX,CAAsB1S,MAAtB,EAA8BiB,GAA9B,EAAmC;YACjCX,KAAK,EAAEM,IAAI,CAACC,MADqB;YAEjC2Q,KAAK,EAAE;WAFT;SADF,MAKO;cACCzN,KAAK,uBAASjE,MAAM,CAACiE,KAAP,CAAa/D,MAAb,KAAwB,EAAjC,CAAX;;iBACO+D,KAAK,CAAC9C,GAAD,CAAZ;UACAjB,MAAM,CAAC+D,KAAP,GAAeA,KAAf;UACA/D,MAAM,CAAC6D,QAAP;;;;GAlRR;SAwRO7D,MAAP;CAzRK;;;;;AAgSP,IAAM4G,aAAa,GAAG,SAAhBA,aAAgB,CAACsC,EAAD;UACZA,EAAE,CAACE,IAAX;SACO,aAAL;SACK,aAAL;SACK,UAAL;;YACU7I,IADO,GACE2I,EADF,CACP3I,IADO;eAERO,IAAI,CAACL,MAAL,CAAYF,IAAZ,CAAP;;;SAGG,aAAL;;YACU+B,IADU,GACK4G,EADL,CACV5G,IADU;YACJ/B,MADI,GACK2I,EADL,CACJ3I,IADI;YAEZE,MAAM,GAAGK,IAAI,CAACL,MAAL,CAAYF,MAAZ,CAAf;YACMqL,WAAW,GAAGhL,IAAI,CAACC,MAAL,CAAYyB,IAAZ,IAChB,EADgB,GAEhBwE,KAAK,CAACrB,IAAN,CAAWjD,IAAI,CAAC0C,KAAL,CAAW5C,IAAX,CAAX,EAA6B;;cAAI3B,CAAJ;;iBAAWJ,MAAI,CAACkL,MAAL,CAAY9K,CAAZ,CAAX;SAA7B,CAFJ;2CAIWF,MAAX,qBAAsBmL,WAAtB;;;SAGG,YAAL;;YACUrL,MADS,GACA2I,EADA,CACT3I,IADS;YAEX8K,SAAS,GAAGvK,IAAI,CAACuK,SAAL,CAAe9K,MAAf,CAAlB;YACM6V,YAAY,GAAGtV,IAAI,CAACqE,QAAL,CAAc5E,MAAd,CAArB;2CACW8K,SAAX,IAAsB+K,YAAtB;;;SAGG,WAAL;;YACU7V,MADQ,GACU2I,EADV,CACR3I,IADQ;YACFiJ,OADE,GACUN,EADV,CACFM,OADE;;YAGZ1I,IAAI,CAACC,MAAL,CAAYR,MAAZ,EAAkBiJ,OAAlB,CAAJ,EAAgC;iBACvB,EAAP;;;YAGI6M,YAAY,GAAW,EAA7B;YACMC,YAAY,GAAW,EAA7B;;;;;;gCAEuBxV,IAAI,CAACuK,SAAL,CAAe9K,MAAf,CAAvB,mIAA6C;gBAAlC4K,QAAkC;gBACrCxK,CAAC,GAAGG,IAAI,CAACmI,SAAL,CAAekC,QAAf,EAAyBjC,EAAzB,CAAV;YACAmN,YAAY,CAACrR,IAAb,CAAkBrE,CAAlB;;;;;;;;;;;;;;;;;;;;;;gCAGqBG,IAAI,CAACuK,SAAL,CAAe7B,OAAf,CAAvB,mIAAgD;gBAArC2B,SAAqC;;gBACxCxK,EAAC,GAAGG,IAAI,CAACmI,SAAL,CAAekC,SAAf,EAAyBjC,EAAzB,CAAV;;YACAoN,YAAY,CAACtR,IAAb,CAAkBrE,EAAlB;;;;;;;;;;;;;;;;;yBAGS0V,YAAX,EAA4BC,YAA5B;;;SAGG,aAAL;;YACU/V,MADU,GACD2I,EADC,CACV3I,IADU;;YAEZ8K,UAAS,GAAGvK,IAAI,CAACuK,SAAL,CAAe9K,MAAf,CAAlB;;iCACW8K,UAAX;;;SAGG,YAAL;;YACU9K,MADS,GACA2I,EADA,CACT3I,IADS;;YAEXE,OAAM,GAAGK,IAAI,CAACL,MAAL,CAAYF,MAAZ,CAAf;;YACMgW,QAAQ,GAAGzV,IAAI,CAAClB,IAAL,CAAUW,MAAV,CAAjB;2CACWE,OAAX,IAAmB8V,QAAnB;;;;;eAIO,EAAP;;;CA/DN;;;;;;;;;;;;;;;;;;"}