{"version":3,"sources":["../../src/scripts/print-bundle-size.js"],"names":["fs","require","path","boxen","chalk","gzipSize","prettyBytes","read","Promise","resolve","reject","readFile","filePath","err","content","zip","zipSize","uncompressed","length","compressed","umdPath","join","__dirname","bundlePath","minPath","allPath","minAllPath","all","map","then","files","output","catch","throwOnError","res","text","size","console","log","padding","borderColor","align","code","Error","bytes","color"],"mappings":";;AAAA;AACA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAMG,QAAQH,QAAQ,OAAR,CAAd;AACA,IAAMI,WAAWJ,QAAQ,WAAR,CAAjB;AACA,IAAMK,cAAcL,QAAQ,cAAR,CAApB;;AAEA,IAAMM,OAAO,SAAPA,IAAO;AAAA,SACX,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BV,OAAGW,QAAH,CAAYC,QAAZ,EAAsB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACtC,UAAID,GAAJ,EAAS;AACPH,eAAOG,GAAP;AACD,OAFD,MAEO;AACLJ,gBAAQK,OAAR;AACD;AACF,KAND;AAOD,GARD,CADW;AAAA,CAAb;;AAWA,IAAMC,MAAM,SAANA,GAAM;AAAA,SACV,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BL,aAASS,OAAT,EAAkB,UAACD,GAAD,EAAMG,OAAN,EAAkB;AAClC,UAAIH,GAAJ,EAAS;AACPH,eAAOG,GAAP;AACD,OAFD,MAEO;AACLJ,gBAAQ;AACNQ,wBAAcH,QAAQI,MADhB;AAENC,sBAAYH;AAFN,SAAR;AAID;AACF,KATD;AAUD,GAXD,CADU;AAAA,CAAZ;;AAcA,IAAMI,UAAUlB,KAAKmB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,KAAjC,CAAhB;AACA,IAAMC,aAAarB,KAAKmB,IAAL,CAAUD,OAAV,EAAmB,WAAnB,CAAnB;AACA,IAAMI,UAAUtB,KAAKmB,IAAL,CAAUD,OAAV,EAAmB,eAAnB,CAAhB;AACA,IAAMK,UAAUvB,KAAKmB,IAAL,CAAUD,OAAV,EAAmB,eAAnB,CAAhB;AACA,IAAMM,aAAaxB,KAAKmB,IAAL,CAAUD,OAAV,EAAmB,mBAAnB,CAAnB;;AAEAZ,QAAQmB,GAAR,CAAY,CAACJ,UAAD,EAAaC,OAAb,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CE,GAA3C,CAA+CrB,IAA/C,CAAZ,EACGsB,IADH,CACQ;AAAA,SAASrB,QAAQmB,GAAR,CAAYG,MAAMF,GAAN,CAAUb,GAAV,CAAZ,CAAT;AAAA,CADR,EAEGc,IAFH,CAEQE,MAFR,EAGGC,KAHH,CAGSC,YAHT;;AAKA,SAASF,MAAT,CAAgBG,GAAhB,EAAqB;AACnB,MAAMC,OAAO,CACX,kBADW,EAEX,kBAFW,YAGHC,KAAKF,IAAI,CAAJ,EAAOjB,YAAZ,CAHG,mBAIImB,KAAKF,IAAI,CAAJ,EAAOf,UAAZ,CAJJ,EAKX,EALW,iBAMEiB,KAAKF,IAAI,CAAJ,EAAOjB,YAAZ,CANF,wBAOSmB,KAAKF,IAAI,CAAJ,EAAOf,UAAZ,CAPT,EAQX,EARW,oBASKiB,KAAKF,IAAI,CAAJ,EAAOjB,YAAZ,CATL,2BAUYmB,KAAKF,IAAI,CAAJ,EAAOf,UAAZ,CAVZ,EAWX,EAXW,8BAYeiB,KAAKF,IAAI,CAAJ,EAAOjB,YAAZ,CAZf,qCAasBmB,KAAKF,IAAI,CAAJ,EAAOf,UAAZ,CAbtB,EAcXE,IAdW,CAcN,IAdM,CAAb;;AAgBAgB,UAAQC,GAAR,CACEnC,MAAMgC,IAAN,EAAY;AACVI,aAAS,CADC;AAEVC,iBAAa,QAFH;AAGVC,WAAO;AAHG,GAAZ,CADF;AAOD;;AAED,SAASR,YAAT,CAAsBpB,GAAtB,EAA2B;AACzB,MAAIA,OAAOA,IAAI6B,IAAJ,KAAa,QAAxB,EAAkC;AAChC,UAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD,GAFD,MAEO,IAAI9B,GAAJ,EAAS;AACd,UAAMA,GAAN;AACD;AACF;;AAED,SAASuB,IAAT,CAAcQ,KAAd,EAAqB;AACnB,MAAMC,QAAQD,QAAQ,OAAO,EAAf,GAAoB,KAApB,GAA4B,OAA1C;AACA,SAAOxC,MAAMyC,KAAN,EAAavC,YAAYsC,KAAZ,CAAb,CAAP;AACD","file":"print-bundle-size.js","sourcesContent":["/* eslint-disable no-console */\nconst fs = require('fs')\nconst path = require('path')\nconst boxen = require('boxen')\nconst chalk = require('chalk')\nconst gzipSize = require('gzip-size')\nconst prettyBytes = require('pretty-bytes')\n\nconst read = filePath =>\n  new Promise((resolve, reject) => {\n    fs.readFile(filePath, (err, content) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(content)\n      }\n    })\n  })\n\nconst zip = content =>\n  new Promise((resolve, reject) => {\n    gzipSize(content, (err, zipSize) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve({\n          uncompressed: content.length,\n          compressed: zipSize\n        })\n      }\n    })\n  })\n\nconst umdPath = path.join(__dirname, '..', '..', 'umd')\nconst bundlePath = path.join(umdPath, 'get-it.js')\nconst minPath = path.join(umdPath, 'get-it.min.js')\nconst allPath = path.join(umdPath, 'get-it-all.js')\nconst minAllPath = path.join(umdPath, 'get-it-all.min.js')\n\nPromise.all([bundlePath, minPath, allPath, minAllPath].map(read))\n  .then(files => Promise.all(files.map(zip)))\n  .then(output)\n  .catch(throwOnError)\n\nfunction output(res) {\n  const text = [\n    'UMD bundle size:',\n    '────────────────',\n    `Raw: ${size(res[0].uncompressed)}`,\n    `Raw + gzip: ${size(res[0].compressed)}`,\n    '',\n    `Minified: ${size(res[1].uncompressed)}`,\n    `Minified + gzip: ${size(res[1].compressed)}`,\n    '',\n    `Full bundle: ${size(res[2].uncompressed)}`,\n    `Full bundle + gzip: ${size(res[2].compressed)}`,\n    '',\n    `Full bundle, minified: ${size(res[3].uncompressed)}`,\n    `Full bundle, minified + gzip: ${size(res[3].compressed)}`\n  ].join('\\n')\n\n  console.log(\n    boxen(text, {\n      padding: 1,\n      borderColor: 'yellow',\n      align: 'right'\n    })\n  )\n}\n\nfunction throwOnError(err) {\n  if (err && err.code === 'ENOENT') {\n    throw new Error('File not found, did you run `npm run bundle` first?')\n  } else if (err) {\n    throw err\n  }\n}\n\nfunction size(bytes) {\n  const color = bytes > 1024 * 50 ? 'red' : 'green'\n  return chalk[color](prettyBytes(bytes))\n}\n"]}