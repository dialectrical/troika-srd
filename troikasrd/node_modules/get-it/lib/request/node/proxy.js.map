{"version":3,"sources":["../../../src/request/node/proxy.js"],"names":["url","require","objectAssign","formatHostname","hostname","replace","toLowerCase","parseNoProxyZone","zoneStr","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","isMatchedAt","noProxyZone","hostnameMatched","length","getProxyFromUri","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","getHostFromUri","host","getHostHeaderWithPort","rewriteUriForProxy","reqOpts","proxy","headers","options","href","path","format","getProxyOptions","hasOwnProperty","parse","exports"],"mappings":"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","file":"proxy.js","sourcesContent":["/**\n * Code borrowed from https://github.com/request/request\n * Apache License 2.0\n */\n\n/* eslint-disable no-process-env */\nconst url = require('url')\nconst objectAssign = require('object-assign')\n\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zoneStr) {\n  const zone = zoneStr.trim().toLowerCase()\n\n  const zoneParts = zone.split(':', 2)\n  const zoneHost = formatHostname(zoneParts[0])\n  const zonePort = zoneParts[1]\n  const hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri, noProxy) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  const hostname = formatHostname(uri.hostname)\n  const noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(noProxyZone => {\n    const isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    const hostnameMatched =\n      isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromUri(uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  const noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment, else default to null\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return (\n      process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy ||\n      null\n    )\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n  return null\n}\n\nfunction getHostFromUri(uri) {\n  let host = uri.host\n\n  // Drop :port suffix from Host header if known protocol.\n  if (uri.port) {\n    if (\n      (uri.port === '80' && uri.protocol === 'http:') ||\n      (uri.port === '443' && uri.protocol === 'https:')\n    ) {\n      host = uri.hostname\n    }\n  }\n\n  return host\n}\n\nfunction getHostHeaderWithPort(uri) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  return `${uri.hostname}:${port}`\n}\n\nfunction rewriteUriForProxy(reqOpts, uri, proxy) {\n  const headers = reqOpts.headers || {}\n  const options = objectAssign({}, reqOpts, {headers})\n  headers.host = headers.host || getHostHeaderWithPort(uri)\n  options.protocol = proxy.protocol || options.protocol\n  options.hostname = proxy.host.replace(/:\\d+/, '')\n  options.port = proxy.port\n  options.host = getHostFromUri(objectAssign({}, uri, proxy))\n  options.href = `${options.protocol}//${options.host}${options.path}`\n  options.path = url.format(uri)\n  return options\n}\n\nfunction getProxyOptions(options) {\n  let proxy\n  if (options.hasOwnProperty('proxy')) {\n    proxy = options.proxy\n  } else {\n    const uri = url.parse(options.url)\n    proxy = getProxyFromUri(uri)\n  }\n\n  return typeof proxy === 'string' ? url.parse(proxy) : proxy\n}\n\nexports.rewriteUriForProxy = rewriteUriForProxy\nexports.getProxyOptions = getProxyOptions\n"]}