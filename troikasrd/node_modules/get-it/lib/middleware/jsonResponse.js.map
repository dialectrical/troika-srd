{"version":3,"sources":["../../src/middleware/jsonResponse.js"],"names":["objectAssign","require","module","exports","onResponse","contentType","response","headers","shouldDecode","opts","force","indexOf","body","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"mappings":";;AAAA,IAAMA,eAAeC,QAAQ,eAAR,CAArB;;AAEAC,OAAOC,OAAP,GAAiB;AAAA,SAAS;AACxBC,gBAAY,8BAAY;AACtB,UAAMC,cAAcC,SAASC,OAAT,CAAiB,cAAjB,KAAoC,EAAxD;AACA,UAAMC,eAAgBC,QAAQA,KAAKC,KAAd,IAAwBL,YAAYM,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAA1F;AACA,UAAI,CAACL,SAASM,IAAV,IAAkB,CAACP,WAAnB,IAAkC,CAACG,YAAvC,EAAqD;AACnD,eAAOF,QAAP;AACD;;AAED,aAAON,aAAa,EAAb,EAAiBM,QAAjB,EAA2B,EAACM,MAAMC,SAASP,SAASM,IAAlB,CAAP,EAA3B,CAAP;AACD,KATuB;;AAWxBE,oBAAgB;AAAA,aACdd,aAAa,EAAb,EAAiBe,OAAjB,EAA0B;AACxBR,iBAASP,aAAa,EAACgB,QAAQ,kBAAT,EAAb,EAA2CD,QAAQR,OAAnD;AADe,OAA1B,CADc;AAAA;AAXQ,GAAT;AAAA,CAAjB;;AAiBA,SAASM,QAAT,CAAkBD,IAAlB,EAAwB;AACtB,MAAI;AACF,WAAOK,KAAKC,KAAL,CAAWN,IAAX,CAAP;AACD,GAFD,CAEE,OAAOO,GAAP,EAAY;AACZA,QAAIC,OAAJ,gDAAyDD,IAAIC,OAA7D;AACA,UAAMD,GAAN;AACD;AACF","file":"jsonResponse.js","sourcesContent":["const objectAssign = require('object-assign')\n\nmodule.exports = opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return objectAssign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    objectAssign({}, options, {\n      headers: objectAssign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]}