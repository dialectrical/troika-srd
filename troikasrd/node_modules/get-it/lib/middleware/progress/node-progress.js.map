{"version":3,"sources":["../../../src/middleware/progress/node-progress.js"],"names":["progressStream","require","normalizer","stage","percent","prog","percentage","total","length","loaded","transferred","lengthComputable","module","exports","onHeaders","response","evt","progress","time","normalize","contentLength","headers","Number","isNaN","setLength","on","context","channels","publish","pipe","onRequest"],"mappings":";;AAAA,IAAMA,iBAAiBC,QAAQ,iBAAR,CAAvB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAO;AAAA,WAAS;AACdA,kBADc;AAEdC,eAASC,KAAKC,UAFA;AAGdC,aAAOF,KAAKG,MAHE;AAIdC,cAAQJ,KAAKK,WAJC;AAKdC,wBAAkB,EAAEN,KAAKG,MAAL,KAAgB,CAAhB,IAAqBH,KAAKC,UAAL,KAAoB,CAA3C;AALJ,KAAT;AAAA,GAAP;AAOD;;AAEDM,OAAOC,OAAP,GAAiB;AAAA,SAAO;AACtBC,eAAW,mBAACC,QAAD,EAAWC,GAAX,EAAmB;AAC5B,UAAMC,WAAWjB,eAAe,EAACkB,MAAM,EAAP,EAAf,CAAjB;AACA,UAAMC,YAAYjB,WAAW,UAAX,CAAlB;;AAEA;AACA;AACA,UAAMkB,gBAAgBL,SAASM,OAAT,CAAiB,gBAAjB,CAAtB;AACA,UAAMb,SAASY,iBAAiBE,OAAOF,aAAP,CAAhC;AACA,UAAI,CAACG,MAAMf,MAAN,CAAD,IAAkBA,SAAS,CAA/B,EAAkC;AAChCS,iBAASO,SAAT,CAAmBhB,MAAnB;AACD;;AAEDS,eAASQ,EAAT,CAAY,UAAZ,EAAwB;AAAA,eAAQT,IAAIU,OAAJ,CAAYC,QAAZ,CAAqBV,QAArB,CAA8BW,OAA9B,CAAsCT,UAAUd,IAAV,CAAtC,CAAR;AAAA,OAAxB;AACA,aAAOU,SAASc,IAAT,CAAcZ,QAAd,CAAP;AACD,KAfqB;;AAiBtBa,eAAW,wBAAO;AAChB,UAAI,CAACd,IAAIC,QAAT,EAAmB;AACjB;AACD;;AAED,UAAME,YAAYjB,WAAW,QAAX,CAAlB;AACAc,UAAIC,QAAJ,CAAaQ,EAAb,CAAgB,UAAhB,EAA4B;AAAA,eAAQT,IAAIU,OAAJ,CAAYC,QAAZ,CAAqBV,QAArB,CAA8BW,OAA9B,CAAsCT,UAAUd,IAAV,CAAtC,CAAR;AAAA,OAA5B;AACD;AAxBqB,GAAP;AAAA,CAAjB","file":"node-progress.js","sourcesContent":["const progressStream = require('progress-stream')\n\nfunction normalizer(stage) {\n  return prog => ({\n    stage,\n    percent: prog.percentage,\n    total: prog.length,\n    loaded: prog.transferred,\n    lengthComputable: !(prog.length === 0 && prog.percentage === 0)\n  })\n}\n\nmodule.exports = () => ({\n  onHeaders: (response, evt) => {\n    const progress = progressStream({time: 16})\n    const normalize = normalizer('download')\n\n    // This is supposed to be handled automatically, but it has a bug,\n    // see https://github.com/freeall/progress-stream/pull/22\n    const contentLength = response.headers['content-length']\n    const length = contentLength && Number(contentLength)\n    if (!isNaN(length) && length > 0) {\n      progress.setLength(length)\n    }\n\n    progress.on('progress', prog => evt.context.channels.progress.publish(normalize(prog)))\n    return response.pipe(progress)\n  },\n\n  onRequest: evt => {\n    if (!evt.progress) {\n      return\n    }\n\n    const normalize = normalizer('upload')\n    evt.progress.on('progress', prog => evt.context.channels.progress.publish(normalize(prog)))\n  }\n})\n"]}