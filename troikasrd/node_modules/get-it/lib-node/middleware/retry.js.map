{"version":3,"sources":["../../src/middleware/retry.js"],"names":["objectAssign","require","defaultShouldRetry","isStream","stream","pipe","retry","opts","maxRetries","retryDelay","getRetryDelay","allowRetry","shouldRetry","onError","err","context","options","max","attemptNumber","body","newContext","setTimeout","channels","request","publish","module","exports","attemptNum","Math","pow","random"],"mappings":";;AAAA,MAAMA,eAAeC,QAAQ,eAAR,CAArB;AACA,MAAMC,qBAAqBD,QAAQ,0BAAR,CAA3B;;AAEA,MAAME,WAAWC,UACfA,WAAW,IAAX,IAAmB,OAAOA,MAAP,KAAkB,QAArC,IAAiD,OAAOA,OAAOC,IAAd,KAAuB,UAD1E;;AAGA,MAAMC,QAAQ,SAARA,KAAQ,GAAe;AAAA,MAAdC,IAAc,uEAAP,EAAO;;AAC3B,QAAMC,aAAaD,KAAKC,UAAL,IAAmB,CAAtC;AACA,QAAMC,aAAaF,KAAKE,UAAL,IAAmBC,aAAtC;AACA,QAAMC,aAAaJ,KAAKK,WAAL,IAAoBV,kBAAvC;;AAEA,SAAO;AACLW,aAAS,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACzB,YAAMC,UAAUD,QAAQC,OAAxB;AACA,YAAMC,MAAMD,QAAQR,UAAR,IAAsBA,UAAlC;AACA,YAAMI,cAAcI,QAAQJ,WAAR,IAAuBD,UAA3C;AACA,YAAMO,gBAAgBF,QAAQE,aAAR,IAAyB,CAA/C;;AAEA;AACA,UAAIf,SAASa,QAAQG,IAAjB,CAAJ,EAA4B;AAC1B,eAAOL,GAAP;AACD;;AAED;AACA,UAAI,CAACF,YAAYE,GAAZ,EAAiBI,aAAjB,EAAgCF,OAAhC,CAAD,IAA6CE,iBAAiBD,GAAlE,EAAuE;AACrE,eAAOH,GAAP;AACD;;AAED;AACA,YAAMM,aAAapB,aAAa,EAAb,EAAiBe,OAAjB,EAA0B;AAC3CC,iBAAShB,aAAa,EAAb,EAAiBgB,OAAjB,EAA0B,EAACE,eAAeA,gBAAgB,CAAhC,EAA1B;AADkC,OAA1B,CAAnB;;AAIA;AACAG,iBAAW,MAAMN,QAAQO,QAAR,CAAiBC,OAAjB,CAAyBC,OAAzB,CAAiCJ,UAAjC,CAAjB,EAA+DX,WAAWS,aAAX,CAA/D;;AAEA;AACA,aAAO,IAAP;AACD;AA3BI,GAAP;AA6BD,CAlCD;;AAoCAZ,MAAMM,WAAN,GAAoBV,kBAApB;;AAEAuB,OAAOC,OAAP,GAAiBpB,KAAjB;;AAEA,SAASI,aAAT,CAAuBiB,UAAvB,EAAmC;AACjC,SAAO,MAAMC,KAAKC,GAAL,CAAS,CAAT,EAAYF,UAAZ,CAAN,GAAgCC,KAAKE,MAAL,KAAgB,GAAvD;AACD","file":"retry.js","sourcesContent":["const objectAssign = require('object-assign')\nconst defaultShouldRetry = require('../util/node-shouldRetry')\n\nconst isStream = stream =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\nconst retry = (opts = {}) => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry || defaultShouldRetry\n\n  return {\n    onError: (err, context) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = objectAssign({}, context, {\n        options: objectAssign({}, options, {attemptNumber: attemptNumber + 1})\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    }\n  }\n}\n\nretry.shouldRetry = defaultShouldRetry\n\nmodule.exports = retry\n\nfunction getRetryDelay(attemptNum) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n"]}