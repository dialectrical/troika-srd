{"version":3,"sources":["../../src/middleware/jsonResponse.js"],"names":["objectAssign","require","module","exports","opts","onResponse","response","contentType","headers","shouldDecode","force","indexOf","body","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"mappings":";;AAAA,MAAMA,eAAeC,QAAQ,eAAR,CAArB;;AAEAC,OAAOC,OAAP,GAAiBC,SAAS;AACxBC,cAAYC,YAAY;AACtB,UAAMC,cAAcD,SAASE,OAAT,CAAiB,cAAjB,KAAoC,EAAxD;AACA,UAAMC,eAAgBL,QAAQA,KAAKM,KAAd,IAAwBH,YAAYI,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAA1F;AACA,QAAI,CAACL,SAASM,IAAV,IAAkB,CAACL,WAAnB,IAAkC,CAACE,YAAvC,EAAqD;AACnD,aAAOH,QAAP;AACD;;AAED,WAAON,aAAa,EAAb,EAAiBM,QAAjB,EAA2B,EAACM,MAAMC,SAASP,SAASM,IAAlB,CAAP,EAA3B,CAAP;AACD,GATuB;;AAWxBE,kBAAgBC,WACdf,aAAa,EAAb,EAAiBe,OAAjB,EAA0B;AACxBP,aAASR,aAAa,EAACgB,QAAQ,kBAAT,EAAb,EAA2CD,QAAQP,OAAnD;AADe,GAA1B;AAZsB,CAAT,CAAjB;;AAiBA,SAASK,QAAT,CAAkBD,IAAlB,EAAwB;AACtB,MAAI;AACF,WAAOK,KAAKC,KAAL,CAAWN,IAAX,CAAP;AACD,GAFD,CAEE,OAAOO,GAAP,EAAY;AACZA,QAAIC,OAAJ,GAAe,2CAA0CD,IAAIC,OAAQ,EAArE;AACA,UAAMD,GAAN;AACD;AACF","file":"jsonResponse.js","sourcesContent":["const objectAssign = require('object-assign')\n\nmodule.exports = opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return objectAssign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    objectAssign({}, options, {\n      headers: objectAssign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]}