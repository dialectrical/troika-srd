{"version":3,"sources":["../../src/middleware/rateLimit.js"],"names":["pRateLimit","require","assign","module","exports","rateLimit","options","rate","Error","limit","onReturn","channels","request","response","publish","ctx","Promise","resolve","reject","error","subscribe","catch","err","name","message","maxDelayError"],"mappings":";;AAAA,MAAM;AAACA,EAAAA;AAAD,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,OAAO,GAAG,EAA7B,EAAiC;AAChD,MAAI,CAACA,OAAO,CAACC,IAAT,IAAiBD,OAAO,CAACC,IAAR,GAAe,CAApC,EAAuC;AACrC,UAAM,IAAIC,KAAJ,CAAW,wEAAX,CAAN;AACD;;AAED,QAAMC,KAAK,GAAGT,UAAU,CAACM,OAAD,CAAxB;;AAEA,WAASI,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B,QAAI,CAACA,QAAQ,CAACC,OAAV,IAAqB,CAACD,QAAQ,CAACE,QAAnC,EAA6C;AAC3C,YAAM,IAAIL,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,UAAMM,OAAO,GAAIC,GAAD,IAAS;AACvB,aAAON,KAAK,CACV,MACE,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BP,QAAAA,QAAQ,CAACQ,KAAT,CAAeC,SAAf,CAAyBF,MAAzB;AACAP,QAAAA,QAAQ,CAACE,QAAT,CAAkBO,SAAlB,CAA4BH,OAA5B;AACAN,QAAAA,QAAQ,CAACC,OAAT,CAAiBE,OAAjB,CAAyBC,GAAzB;AACD,OAJD,CAFQ,CAAL,CAOLM,KAPK,CAOEC,GAAD,IAAS;AACf,YAAIA,GAAG,CAACC,IAAJ,KAAa,uBAAjB,EAA0C;AACxCD,UAAAA,GAAG,CAACE,OAAJ,GAAclB,OAAO,CAACmB,aAAR,IAAyB,8BAAvC;AACD;;AACDd,QAAAA,QAAQ,CAACQ,KAAT,CAAeL,OAAf,CAAuBQ,GAAvB;AACD,OAZM,CAAP;AAaD,KAdD;;AAgBA,UAAMV,OAAO,GAAG;AAACE,MAAAA,OAAD;AAAUM,MAAAA,SAAS,EAAET,QAAQ,CAACC,OAAT,CAAiBE;AAAtC,KAAhB;AACA,WAAOZ,MAAM,CAAC,EAAD,EAAKS,QAAL,EAAe;AAACC,MAAAA;AAAD,KAAf,CAAb;AACD;;AAED,SAAO;AAACF,IAAAA;AAAD,GAAP;AACD,CAjCD","sourcesContent":["const {pRateLimit} = require('@rexxars/p-ratelimit')\nconst assign = require('object-assign')\n\nmodule.exports = function rateLimit(options = {}) {\n  if (!options.rate || options.rate < 1) {\n    throw new Error(`'rate' options must be passed to rateLimit middleware, and must be > 0`)\n  }\n\n  const limit = pRateLimit(options)\n\n  function onReturn(channels) {\n    if (!channels.request || !channels.response) {\n      throw new Error('Rate limit middleware must be called before promise/observable middlewares')\n    }\n\n    const publish = (ctx) => {\n      return limit(\n        () =>\n          new Promise((resolve, reject) => {\n            channels.error.subscribe(reject)\n            channels.response.subscribe(resolve)\n            channels.request.publish(ctx)\n          })\n      ).catch((err) => {\n        if (err.name === 'RateLimitTimeoutError') {\n          err.message = options.maxDelayError || 'Rate limit max delay reached'\n        }\n        channels.error.publish(err)\n      })\n    }\n\n    const request = {publish, subscribe: channels.request.publish}\n    return assign({}, channels, {request})\n  }\n\n  return {onReturn}\n}\n"],"file":"rateLimit.js"}