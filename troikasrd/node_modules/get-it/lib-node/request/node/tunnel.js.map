{"version":3,"sources":["../../../src/request/node/tunnel.js"],"names":["url","require","tunnel","objectAssign","uriParts","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","exports","shouldEnable","options","tunnelOption","Boolean","uri","parse","protocol","applyAgent","opts","proxy","proxyHeaderWhiteList","concat","map","header","toLowerCase","proxyHeaderExclusiveList","proxyHeaders","getAllowedProxyHeaders","headers","host","constructProxyHost","Object","keys","reduce","isAllowed","indexOf","tunnelFn","getTunnelFn","tunnelOptions","constructTunnelOptions","agent","getUriParts","tunnelFnName","constructTunnelFnName","part","uriProtocol","proxyProtocol","join","port","proxyHost","hostname","whiteList","filter","set","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol"],"mappings":"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","file":"tunnel.js","sourcesContent":["/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nconst url = require('url')\nconst tunnel = require('tunnel-agent')\nconst objectAssign = require('object-assign')\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href'\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexports.shouldEnable = (options, tunnelOption) => {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexports.applyAgent = (opts = {}, proxy) => {\n  const options = objectAssign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map(header => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map(header => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {})\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options, proxy) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {})\n}\n\nfunction constructTunnelFnName(uri, proxy) {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction constructProxyHost(uri) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers, whiteList) {\n  return Object.keys(headers)\n    .filter(header => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set, header) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options, proxy, proxyHeaders) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol\n  }\n}\n"]}