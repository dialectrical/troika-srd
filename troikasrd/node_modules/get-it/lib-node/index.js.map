{"version":3,"sources":["../src/index.js"],"names":["pubsub","require","middlewareReducer","processOptions","validateOptions","httpRequest","channelNames","middlehooks","module","exports","createRequester","initMiddleware","loadedMiddleware","middleware","reduce","ware","name","request","opts","channels","target","applyMiddleware","options","context","ongoingRequest","unsubscribe","subscribe","ctx","err","res","onResponse","abort","returnValue","publish","reqErr","error","response","use","newMiddleware","Error","onReturn","length","forEach","key","push","clone"],"mappings":"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","file":"index.js","sourcesContent":["const pubsub = require('nano-pubsub')\nconst middlewareReducer = require('./util/middlewareReducer')\nconst processOptions = require('./middleware/defaultOptionsProcessor')\nconst validateOptions = require('./middleware/defaultOptionsValidator')\nconst httpRequest = require('./request') // node-request in node, browser-request in browsers\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders'\n]\n\nmodule.exports = function createRequester(initMiddleware = []) {\n  const loadedMiddleware = []\n  const middleware = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions]\n    }\n  )\n\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest = null\n    const unsubscribe = channels.request.subscribe(ctx => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"]}