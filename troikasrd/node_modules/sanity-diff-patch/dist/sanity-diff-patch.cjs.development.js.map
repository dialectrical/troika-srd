{"version":3,"file":"sanity-diff-patch.cjs.development.js","sources":["../src/paths.ts","../src/diffError.ts","../src/validate.ts","../src/diffPatch.ts"],"sourcesContent":["import {KeyedSanityObject} from './diffPatch'\n\nexport type PathSegment = string | number | {_key: string} | [number | '', number | '']\nexport type Path = PathSegment[]\n\nexport function pathToString(path: Path): string {\n  return path.reduce((target: string, segment: PathSegment, i: number) => {\n    if (Array.isArray(segment)) {\n      return `${target}[${segment.join(':')}]`\n    }\n\n    if (isKeyedObject(segment)) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (typeof segment === 'number') {\n      return `${target}[${segment}]`\n    } else if (/^\\d+$/.test(segment)) {\n      return `${target}[\"${segment}\"]`\n    }\n\n    if (typeof segment === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    throw new Error(`Unsupported path segment \"${segment}\"`)\n  }, '')\n}\n\nfunction isKeyedObject(obj: any): obj is KeyedSanityObject {\n  return typeof obj === 'object' && typeof obj._key === 'string'\n}\n","import {Path, pathToString} from './paths'\n\nexport class DiffError extends Error {\n  public path: Path\n  public value: any\n  public serializedPath: string\n\n  constructor(message: string, path: Path, value?: any) {\n    const serializedPath = pathToString(path)\n    super(`${message} (at '${serializedPath}')`)\n\n    this.path = path\n    this.serializedPath = serializedPath\n    this.value = value\n  }\n}\n","import {DiffError} from './diffError'\nimport {Path} from './paths'\n\nconst idPattern = /^[a-z0-9][a-z0-9_.-]+$/i\nconst keyPattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/\nconst keyStartPattern = /^[a-z_]/i\n\nexport function validateDocument(item: unknown, path: Path = []): boolean {\n  if (Array.isArray(item)) {\n    return item.every((child, i) => {\n      if (Array.isArray(child)) {\n        throw new DiffError('Multi-dimensional arrays not supported', path.concat(i))\n      }\n\n      return validateDocument(child, path.concat(i))\n    })\n  }\n\n  if (typeof item === 'object' && item !== null) {\n    const obj = item as {[key: string]: any}\n    return Object.keys(obj).every(\n      key => validateKey(key, obj[key], path) && validateDocument(obj[key], path.concat(key))\n    )\n  }\n\n  return true\n}\n\nexport function validateKey(key: string, value: any, path: Path): string {\n  if (!keyStartPattern.test(key)) {\n    throw new DiffError('Keys must start with a letter (a-z)', path.concat(key), value)\n  }\n\n  if (!keyPattern.test(key)) {\n    throw new DiffError(\n      'Keys can only contain letters, numbers and underscores',\n      path.concat(key),\n      value\n    )\n  }\n\n  if (key === '_key' || key === '_ref' || key === '_type') {\n    if (typeof value !== 'string') {\n      throw new DiffError('Keys must be strings', path.concat(key), value)\n    }\n\n    if (!idPattern.test(value)) {\n      throw new DiffError('Invalid key - use less exotic characters', path.concat(key), value)\n    }\n  }\n\n  return key\n}\n","import {diff_match_patch as DMP} from 'diff-match-patch'\nimport {DiffError} from './diffError'\nimport {Path, pathToString} from './paths'\nimport {validateKey} from './validate'\nimport {\n  Patch,\n  SetPatch,\n  UnsetPatch,\n  InsertPatch,\n  DiffMatchPatch,\n  SanityInsertPatch,\n  SanityPatch,\n  SanitySetPatch,\n  SanityUnsetPatch,\n  SanityDiffMatchPatch,\n  SanityPatchMutation\n} from './patches'\n\nconst ignoredKeys = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\ntype PrimitiveValue = string | number | boolean | null | undefined\n\nexport interface KeyedSanityObject {\n  [key: string]: unknown\n  _key: string\n}\n\nexport type SanityObject = KeyedSanityObject | Partial<KeyedSanityObject>\n\ninterface DocumentStub {\n  _id?: string\n  _type?: string\n  _rev?: string\n  _createdAt?: string\n  _updatedAt?: string\n  [key: string]: unknown\n}\n\ninterface DiffMatchPatchOptions {\n  enabled: boolean\n  lengthThresholdAbsolute: number\n  lengthThresholdRelative: number\n}\n\ninterface PatchOptions {\n  id?: string\n  basePath?: Path\n  ifRevisionID?: string | boolean\n  ifRevisionId?: string | boolean\n  hideWarnings?: boolean\n  diffMatchPatch: DiffMatchPatchOptions\n}\n\ntype InputOptions = {\n  id?: string\n  basePath?: Path\n  ifRevisionID?: string | boolean\n  ifRevisionId?: string | boolean\n  hideWarnings?: boolean\n  diffMatchPatch?: Partial<DiffMatchPatchOptions>\n}\n\nconst diff = new DMP()\n\nconst defaultOptions: PatchOptions = {\n  hideWarnings: false,\n  diffMatchPatch: {\n    enabled: true,\n\n    // Only use diff-match-patch if target string is longer than this threshold\n    lengthThresholdAbsolute: 30,\n\n    // Only use generated diff-match-patch if the patch length is less than or equal to\n    // (targetString * relative). Example: A 100 character target with a relative factor\n    // of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n    // it will fall back to a regular `set` patch.\n    lengthThresholdRelative: 1.2\n  }\n}\n\nfunction mergeOptions(options: InputOptions) {\n  return {\n    ...defaultOptions,\n    ...options,\n    diffMatchPatch: {...defaultOptions.diffMatchPatch, ...(options.diffMatchPatch || {})}\n  }\n}\n\nexport function diffPatch(itemA: DocumentStub, itemB: DocumentStub, opts?: InputOptions) {\n  const options = opts ? mergeOptions(opts) : defaultOptions\n  const id = options.id || (itemA._id === itemB._id && itemA._id)\n  const revisionLocked = options.ifRevisionID || options.ifRevisionId\n  const ifRevisionID = typeof revisionLocked === 'boolean' ? itemA._rev : revisionLocked\n  const basePath = options.basePath || []\n  if (!id) {\n    throw new Error(\n      '_id on itemA and itemB not present or differs, specify document id the mutations should be applied to'\n    )\n  }\n\n  if (revisionLocked === true && !ifRevisionID) {\n    throw new Error(\n      '`ifRevisionID` is set to `true`, but no `_rev` was passed in item A. Either explicitly set `ifRevisionID` to a revision, or pass `_rev` as part of item A.'\n    )\n  }\n\n  if (basePath.length === 0 && itemA._type !== itemB._type) {\n    throw new Error(`_type is immutable and cannot be changed (${itemA._type} => ${itemB._type})`)\n  }\n\n  const operations = diffItem(itemA, itemB, options, basePath, [])\n  return serializePatches(operations, {id, ifRevisionID: revisionLocked ? ifRevisionID : undefined})\n}\n\nexport function diffItem(\n  itemA: unknown,\n  itemB: unknown,\n  options: PatchOptions = defaultOptions,\n  path: Path = [],\n  patches: Patch[] = []\n) {\n  if (itemA === itemB) {\n    return patches\n  }\n\n  const aType = Array.isArray(itemA) ? 'array' : typeof itemA\n  const bType = Array.isArray(itemB) ? 'array' : typeof itemB\n\n  const aIsUndefined = aType === 'undefined'\n  const bIsUndefined = bType === 'undefined'\n\n  if (aIsUndefined && !bIsUndefined) {\n    patches.push({op: 'set', path, value: itemB})\n    return patches\n  }\n\n  if (!aIsUndefined && bIsUndefined) {\n    patches.push({op: 'unset', path})\n    return patches\n  }\n\n  const dataType = aIsUndefined ? bType : aType\n  const isContainer = dataType === 'object' || dataType === 'array'\n  if (!isContainer) {\n    return diffPrimitive(itemA as PrimitiveValue, itemB as PrimitiveValue, options, path, patches)\n  }\n\n  if (aType !== bType) {\n    // Array => Object / Object => Array\n    patches.push({op: 'set', path, value: itemB})\n    return patches\n  }\n\n  return dataType === 'array'\n    ? diffArray(itemA as unknown[], itemB as unknown[], options, path, patches)\n    : diffObject(itemA as object, itemB as object, options, path, patches)\n}\n\nfunction diffObject(\n  itemA: SanityObject,\n  itemB: SanityObject,\n  options: PatchOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  const atRoot = path.length === 0\n  const aKeys = Object.keys(itemA)\n    .filter(atRoot ? isNotIgnoredKey : yes)\n    .map(key => validateKey(key, itemA[key], path))\n\n  const aKeysLength = aKeys.length\n  const bKeys = Object.keys(itemB)\n    .filter(atRoot ? isNotIgnoredKey : yes)\n    .map(key => validateKey(key, itemB[key], path))\n\n  const bKeysLength = bKeys.length\n\n  // Check for deleted items\n  for (let i = 0; i < aKeysLength; i++) {\n    const key = aKeys[i]\n    if (!(key in itemB)) {\n      patches.push({op: 'unset', path: path.concat(key)})\n    }\n  }\n\n  // Check for changed items\n  for (let i = 0; i < bKeysLength; i++) {\n    const key = bKeys[i]\n    diffItem(itemA[key], itemB[key], options, path.concat([key]), patches)\n  }\n\n  return patches\n}\n\nfunction diffArray(\n  itemA: unknown[],\n  itemB: unknown[],\n  options: PatchOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  // Check for new items\n  if (itemB.length > itemA.length) {\n    patches.push({\n      op: 'insert',\n      after: path.concat([-1]),\n      items: itemB.slice(itemA.length).map((item, i) => nullifyUndefined(item, path, i, options))\n    })\n  }\n\n  // Check for deleted items\n  if (itemB.length < itemA.length) {\n    const isSingle = itemA.length - itemB.length === 1\n    const unsetItems = itemA.slice(itemB.length)\n\n    // If we're revision locked, we can safely unset ranges (eg 5:<end-of-array>).\n    // Also, if we don't have unique array keys, we can't use any better approach\n    // than array indexes. If we _do_ have unique array keys, we'll want to unset\n    // by key, as this is safer in a realtime, collaborative setting\n    if (isRevisionLocked(options) || !isUniquelyKeyed(unsetItems)) {\n      patches.push({\n        op: 'unset',\n        path: path.concat([isSingle ? itemB.length : [itemB.length, '']])\n      })\n    } else {\n      patches.push(\n        ...unsetItems.map(\n          (item): UnsetPatch => ({op: 'unset', path: path.concat({_key: item._key})})\n        )\n      )\n    }\n  }\n\n  // Check for illegal array contents\n  for (let i = 0; i < itemB.length; i++) {\n    if (Array.isArray(itemB[i])) {\n      throw new DiffError('Multi-dimensional arrays not supported', path.concat(i), itemB[i])\n    }\n  }\n\n  const overlapping = Math.min(itemA.length, itemB.length)\n  const segmentA = itemA.slice(0, overlapping)\n  const segmentB = itemB.slice(0, overlapping)\n\n  return isUniquelyKeyed(segmentA) && isUniquelyKeyed(segmentB)\n    ? diffArrayByKey(segmentA, segmentB, options, path, patches)\n    : diffArrayByIndex(segmentA, segmentB, options, path, patches)\n}\n\nfunction diffArrayByIndex(\n  itemA: unknown[],\n  itemB: unknown[],\n  options: PatchOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  for (let i = 0; i < itemA.length; i++) {\n    diffItem(\n      itemA[i],\n      nullifyUndefined(itemB[i], path, i, options),\n      options,\n      path.concat(i),\n      patches\n    )\n  }\n\n  return patches\n}\n\nfunction diffArrayByKey(\n  itemA: KeyedSanityObject[],\n  itemB: KeyedSanityObject[],\n  options: PatchOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  const keyedA = indexByKey(itemA)\n  const keyedB = indexByKey(itemB)\n\n  // There's a bunch of hard/semi-hard problems related to using keys\n  // Unless we have the exact same order, just use indexes for now\n  if (!arrayIsEqual(keyedA.keys, keyedB.keys)) {\n    return diffArrayByIndex(itemA, itemB, options, path, patches)\n  }\n\n  for (let i = 0; i < keyedB.keys.length; i++) {\n    const key = keyedB.keys[i]\n    const valueA = keyedA.index[key]\n    const valueB = nullifyUndefined(keyedB.index[key], path, i, options)\n    diffItem(valueA, valueB, options, path.concat({_key: key}), patches)\n  }\n\n  return patches\n}\n\nfunction getDiffMatchPatch(\n  itemA: PrimitiveValue,\n  itemB: PrimitiveValue,\n  options: PatchOptions,\n  path: Path\n): DiffMatchPatch | undefined {\n  const {enabled, lengthThresholdRelative, lengthThresholdAbsolute} = options.diffMatchPatch\n  const segment = path[path.length - 1]\n  if (\n    !enabled ||\n    // Don't use for anything but strings\n    typeof itemA !== 'string' ||\n    typeof itemB !== 'string' ||\n    // Don't use for `_key`, `_ref` etc\n    (typeof segment === 'string' && segment[0] === '_') ||\n    // Don't use on short strings\n    itemB.length < lengthThresholdAbsolute\n  ) {\n    return undefined\n  }\n\n  let strPatch = ''\n  try {\n    const patch = diff.diff_main(itemA, itemB)\n    diff.diff_cleanupEfficiency(patch)\n    strPatch = diff.patch_toText(diff.patch_make(patch))\n  } catch (err) {\n    // Fall back to using regular set patch\n    return undefined\n  }\n\n  // Don't use patch if it's longer than allowed relative threshold.\n  // Allow a 120 character patch for a 100 character string,\n  // but don't allow a 800 character patch for a 500 character value.\n  //console.log('%s:\\n patch is %d, string is %d', itemB, strPatch.length, itemB.length)\n  return strPatch.length > itemB.length * lengthThresholdRelative\n    ? undefined\n    : {op: 'diffMatchPatch', path, value: strPatch}\n}\n\nfunction diffPrimitive(\n  itemA: PrimitiveValue,\n  itemB: PrimitiveValue,\n  options: PatchOptions,\n  path: Path,\n  patches: Patch[]\n): Patch[] {\n  const dmp = getDiffMatchPatch(itemA, itemB, options, path)\n\n  patches.push(\n    dmp || {\n      op: 'set',\n      path,\n      value: itemB\n    }\n  )\n\n  return patches\n}\n\nfunction isNotIgnoredKey(key: string) {\n  return ignoredKeys.indexOf(key) === -1\n}\n\nfunction serializePatches(\n  patches: Patch[],\n  options: {id: string; ifRevisionID?: string}\n): SanityPatchMutation[] {\n  if (patches.length === 0) {\n    return []\n  }\n\n  const {id, ifRevisionID} = options\n  const set = patches.filter((patch): patch is SetPatch => patch.op === 'set')\n  const unset = patches.filter((patch): patch is UnsetPatch => patch.op === 'unset')\n  const insert = patches.filter((patch): patch is InsertPatch => patch.op === 'insert')\n  const dmp = patches.filter((patch): patch is DiffMatchPatch => patch.op === 'diffMatchPatch')\n\n  const withSet =\n    set.length > 0 &&\n    set.reduce(\n      (patch: SanitySetPatch, item: SetPatch) => {\n        const path = pathToString(item.path)\n        patch.set[path] = item.value\n        return patch\n      },\n      {id, set: {}}\n    )\n\n  const withUnset =\n    unset.length > 0 &&\n    unset.reduce(\n      (patch: SanityUnsetPatch, item: UnsetPatch) => {\n        const path = pathToString(item.path)\n        patch.unset.push(path)\n        return patch\n      },\n      {id, unset: []}\n    )\n\n  const withInsert = insert.reduce((acc: SanityInsertPatch[], item: InsertPatch) => {\n    const after = pathToString(item.after)\n    return acc.concat({id, insert: {after, items: item.items}})\n  }, [])\n\n  const withDmp =\n    dmp.length > 0 &&\n    dmp.reduce(\n      (patch: SanityDiffMatchPatch, item: DiffMatchPatch) => {\n        const path = pathToString(item.path)\n        patch.diffMatchPatch[path] = item.value\n        return patch\n      },\n      {id, diffMatchPatch: {}}\n    )\n\n  const patchSet: SanityPatch[] = [withSet, withUnset, withDmp, ...withInsert].filter(\n    (item): item is SanityPatch => item !== false\n  )\n\n  return patchSet.map((patch, i) => ({\n    patch: ifRevisionID && i === 0 ? {...patch, ifRevisionID} : patch\n  }))\n}\n\nfunction isUniquelyKeyed(arr: unknown[]): arr is KeyedSanityObject[] {\n  const keys = []\n\n  for (let i = 0; i < arr.length; i++) {\n    const key = getKey(arr[i])\n    if (!key || keys.indexOf(key) !== -1) {\n      return false\n    }\n\n    keys.push(key)\n  }\n\n  return true\n}\n\nfunction getKey(obj: unknown) {\n  return typeof obj === 'object' && obj !== null && (obj as KeyedSanityObject)._key\n}\n\nfunction indexByKey(arr: KeyedSanityObject[]) {\n  return arr.reduce(\n    (acc, item) => {\n      acc.keys.push(item._key)\n      acc.index[item._key] = item\n      return acc\n    },\n    {keys: [] as string[], index: {} as {[key: string]: KeyedSanityObject}}\n  )\n}\n\nfunction arrayIsEqual(itemA: unknown[], itemB: unknown[]) {\n  return itemA.length === itemB.length && itemA.every((item, i) => itemB[i] === item)\n}\n\nfunction nullifyUndefined(item: unknown, path: Path, index: number, options: PatchOptions) {\n  if (typeof item !== 'undefined') {\n    return item\n  }\n\n  if (!options.hideWarnings) {\n    const serializedPath = pathToString(path.concat(index))\n    console.warn(`undefined value in array converted to null (at '${serializedPath}')`)\n  }\n\n  return null\n}\n\nfunction isRevisionLocked(options: PatchOptions): boolean {\n  return Boolean(options.ifRevisionID || options.ifRevisionId)\n}\n\nfunction yes(_: unknown) {\n  return true\n}\n"],"names":["pathToString","path","reduce","target","segment","i","Array","isArray","join","isKeyedObject","_key","test","separator","Error","obj","DiffError","message","value","serializedPath","idPattern","keyPattern","keyStartPattern","validateDocument","item","every","child","concat","Object","keys","key","validateKey","ignoredKeys","diff","DMP","defaultOptions","hideWarnings","diffMatchPatch","enabled","lengthThresholdAbsolute","lengthThresholdRelative","mergeOptions","options","diffPatch","itemA","itemB","opts","id","_id","revisionLocked","ifRevisionID","ifRevisionId","_rev","basePath","length","_type","operations","diffItem","serializePatches","undefined","patches","aType","bType","aIsUndefined","bIsUndefined","push","op","dataType","isContainer","diffPrimitive","diffArray","diffObject","atRoot","aKeys","filter","isNotIgnoredKey","yes","map","aKeysLength","bKeys","bKeysLength","after","items","slice","nullifyUndefined","isSingle","unsetItems","isRevisionLocked","isUniquelyKeyed","overlapping","Math","min","segmentA","segmentB","diffArrayByKey","diffArrayByIndex","keyedA","indexByKey","keyedB","arrayIsEqual","valueA","index","valueB","getDiffMatchPatch","strPatch","patch","diff_main","diff_cleanupEfficiency","patch_toText","patch_make","err","dmp","indexOf","set","unset","insert","withSet","withUnset","withInsert","acc","withDmp","patchSet","arr","getKey","console","warn","Boolean","_"],"mappings":"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"}