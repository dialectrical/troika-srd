{"version":3,"file":"immer.umd.js","sources":["../src/types-internal.ts","../src/env.ts","../src/extends.ts","../src/common.ts","../src/scope.ts","../src/finalize.ts","../src/patches.ts","../src/proxy.ts","../src/es5.ts","../src/map.ts","../src/set.ts","../node_modules/tslib/tslib.es6.js","../src/immer.ts","../src/index.ts"],"sourcesContent":["import {\n\tSetState,\n\tImmerScope,\n\tProxyObjectState,\n\tProxyArrayState,\n\tES5ObjectState,\n\tES5ArrayState,\n\tMapState,\n\tDRAFT_STATE\n} from \"./internal\"\n\nexport type Objectish = AnyObject | AnyArray | AnyMap | AnySet\nexport type ObjectishNoSet = AnyObject | AnyArray | AnyMap\n\nexport type AnyObject = {[key: string]: any}\nexport type AnyArray = Array<any>\nexport type AnySet = Set<any>\nexport type AnyMap = Map<any, any>\nexport enum Archtype {\n\tObject,\n\tArray,\n\tMap,\n\tSet\n}\n\nexport enum ProxyType {\n\tProxyObject,\n\tProxyArray,\n\tES5Object,\n\tES5Array,\n\tMap,\n\tSet\n}\n\nexport interface ImmerBaseState {\n\tparent?: ImmerState\n\tscope: ImmerScope\n\tmodified: boolean\n\tfinalized: boolean\n\tisManual: boolean\n}\n\nexport type ImmerState =\n\t| ProxyObjectState\n\t| ProxyArrayState\n\t| ES5ObjectState\n\t| ES5ArrayState\n\t| MapState\n\t| SetState\n\n// The _internal_ type used for drafts (not to be confused with Draft, which is public facing)\nexport type Drafted<Base = any, T extends ImmerState = ImmerState> = {\n\t[DRAFT_STATE]: T\n} & Base\n","// Should be no imports here!\n\n// SOme things that should be evaluated before all else...\nconst hasSymbol = typeof Symbol !== \"undefined\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\nexport const iteratorSymbol: typeof Symbol.iterator = hasSymbol\n\t? Symbol.iterator\n\t: (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","/* istanbul ignore next */\nvar extendStatics = function(d: any, b: any): any {\n\textendStatics =\n\t\tObject.setPrototypeOf ||\n\t\t({__proto__: []} instanceof Array &&\n\t\t\tfunction(d, b) {\n\t\t\t\td.__proto__ = b\n\t\t\t}) ||\n\t\tfunction(d, b) {\n\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t}\n\treturn extendStatics(d, b)\n}\n\n// Ugly hack to resolve #502 and inherit built in Map / Set\nexport function __extends(d: any, b: any): any {\n\textendStatics(d, b)\n\tfunction __(this: any): any {\n\t\tthis.constructor = d\n\t}\n\td.prototype =\n\t\t// @ts-ignore\n\t\t((__.prototype = b.prototype), new __())\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tProxyType,\n\tArchtype,\n\thasMap\n} from \"./internal\"\n\n/** Returns true if the given value is an Immer draft */\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\n/** Get the underlying object that is represented by the given draft */\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (value && value[DRAFT_STATE]) {\n\t\treturn value[DRAFT_STATE].base as any\n\t}\n\t// otherwise return undefined\n}\n\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\townKeys(obj).forEach(key => iter(key, obj[key], obj))\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\nexport function isEnumerable(base: AnyObject, prop: PropertyKey): boolean {\n\tconst desc = Object.getOwnPropertyDescriptor(base, prop)\n\treturn desc && desc.enumerable ? true : false\n}\n\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tif (!thing) die()\n\tif (thing[DRAFT_STATE]) {\n\t\tswitch ((thing as Drafted)[DRAFT_STATE].type) {\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\t\treturn Archtype.Object\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn Archtype.Array\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn Archtype.Map\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn Archtype.Set\n\t\t}\n\t}\n\treturn Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tswitch (getArchtype(thing)) {\n\t\tcase Archtype.Map:\n\t\t\tthing.set(propOrOldValue, value)\n\t\t\tbreak\n\t\tcase Archtype.Set:\n\t\t\tthing.delete(propOrOldValue)\n\t\t\tthing.add(value)\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthing[propOrOldValue] = value\n\t}\n}\n\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n\nexport function latest(state: ImmerState): any {\n\treturn state.copy || state.base\n}\n\nexport function shallowCopy<T extends AnyObject | AnyArray>(\n\tbase: T,\n\tinvokeGetters?: boolean\n): T\nexport function shallowCopy(base: any, invokeGetters = false) {\n\tif (Array.isArray(base)) return base.slice()\n\tconst clone = Object.create(Object.getPrototypeOf(base))\n\townKeys(base).forEach(key => {\n\t\tif (key === DRAFT_STATE) {\n\t\t\treturn // Never copy over draft state.\n\t\t}\n\t\tconst desc = Object.getOwnPropertyDescriptor(base, key)!\n\t\tlet {value} = desc\n\t\tif (desc.get) {\n\t\t\tif (!invokeGetters) {\n\t\t\t\tthrow new Error(\"Immer drafts cannot have computed properties\")\n\t\t\t}\n\t\t\tvalue = desc.get.call(base)\n\t\t}\n\t\tif (desc.enumerable) {\n\t\t\tclone[key] = value\n\t\t} else {\n\t\t\tObject.defineProperty(clone, key, {\n\t\t\t\tvalue,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t})\n\t\t}\n\t})\n\treturn clone\n}\n\nexport function freeze(obj: any, deep: boolean): void {\n\tif (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) return\n\tconst type = getArchtype(obj)\n\tif (type === Archtype.Set) {\n\t\tobj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t} else if (type === Archtype.Map) {\n\t\tobj.set = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (_, value) => freeze(value, true))\n}\n\nfunction dontMutateFrozenCollections() {\n\tthrow new Error(\"This object has been frozen and should not be mutated\")\n}\n\nexport function createHiddenProperty(\n\ttarget: AnyObject,\n\tprop: PropertyKey,\n\tvalue: any\n) {\n\tObject.defineProperty(target, prop, {\n\t\tvalue: value,\n\t\tenumerable: false,\n\t\twritable: true\n\t})\n}\n\n/* istanbul ignore next */\nexport function die(): never {\n\tthrow new Error(\"Illegal state, please file a bug\")\n}\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tProxyType,\n\tImmer,\n\tDRAFT_STATE\n} from \"./internal\"\n\n/** Each scope represents a `produce` call. */\nexport class ImmerScope {\n\tstatic current?: ImmerScope\n\n\tpatches?: Patch[]\n\tinversePatches?: Patch[]\n\tcanAutoFreeze: boolean\n\tdrafts: any[]\n\tparent?: ImmerScope\n\tpatchListener?: PatchListener\n\timmer: Immer\n\n\tconstructor(parent: ImmerScope | undefined, immer: Immer) {\n\t\tthis.drafts = []\n\t\tthis.parent = parent\n\t\tthis.immer = immer\n\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tthis.canAutoFreeze = true\n\t}\n\n\tusePatches(patchListener?: PatchListener) {\n\t\tif (patchListener) {\n\t\t\tthis.patches = []\n\t\t\tthis.inversePatches = []\n\t\t\tthis.patchListener = patchListener\n\t\t}\n\t}\n\n\trevoke() {\n\t\tthis.leave()\n\t\tthis.drafts.forEach(revoke)\n\t\t// @ts-ignore\n\t\tthis.drafts = null\n\t}\n\n\tleave() {\n\t\tif (this === ImmerScope.current) {\n\t\t\tImmerScope.current = this.parent\n\t\t}\n\t}\n\n\tstatic enter(immer: Immer) {\n\t\tconst scope = new ImmerScope(ImmerScope.current, immer)\n\t\tImmerScope.current = scope\n\t\treturn scope\n\t}\n}\n\nfunction revoke(draft: Drafted) {\n\tconst state = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type === ProxyType.ProxyObject ||\n\t\tstate.type === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke()\n\telse state.revoked = true\n}\n","import {\n\tImmer,\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tDrafted,\n\tPatchPath,\n\tProxyType,\n\teach,\n\thas,\n\tfreeze,\n\tgeneratePatches,\n\tshallowCopy,\n\tImmerState,\n\tisSet,\n\tisDraft,\n\tSetState,\n\tset,\n\tis,\n\tget\n} from \"./internal\"\n\nexport function processResult(immer: Immer, result: any, scope: ImmerScope) {\n\tconst baseDraft = scope.drafts![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\timmer.willFinalize(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified) {\n\t\t\tscope.revoke()\n\t\t\tthrow new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(immer, result, scope)\n\t\t\tif (!scope.parent) maybeFreeze(immer, result)\n\t\t}\n\t\tif (scope.patches) {\n\t\t\tscope.patches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath: [],\n\t\t\t\tvalue: result\n\t\t\t})\n\t\t\tscope.inversePatches!.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath: [],\n\t\t\t\tvalue: baseDraft[DRAFT_STATE].base\n\t\t\t})\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(immer, baseDraft, scope, [])\n\t}\n\tscope.revoke()\n\tif (scope.patches) {\n\t\tscope.patchListener!(scope.patches, scope.inversePatches!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(\n\timmer: Immer,\n\tdraft: Drafted,\n\tscope: ImmerScope,\n\tpath?: PatchPath\n) {\n\tconst state = draft[DRAFT_STATE]\n\tif (!state) {\n\t\tif (Object.isFrozen(draft)) return draft\n\t\treturn finalizeTree(immer, draft, scope)\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope !== scope) {\n\t\treturn draft\n\t}\n\tif (!state.modified) {\n\t\tmaybeFreeze(immer, state.base, true)\n\t\treturn state.base\n\t}\n\tif (!state.finalized) {\n\t\tstate.finalized = true\n\t\tfinalizeTree(immer, state.draft, scope, path)\n\n\t\t// We cannot really delete anything inside of a Set. We can only replace the whole Set.\n\t\tif (immer.onDelete && state.type !== ProxyType.Set) {\n\t\t\t// The `assigned` object is unreliable with ES5 drafts.\n\t\t\tif (immer.useProxies) {\n\t\t\t\tconst {assigned} = state\n\t\t\t\teach(assigned, (prop, exists) => {\n\t\t\t\t\tif (!exists) immer.onDelete!(state, prop as any)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tconst {base, copy} = state\n\t\t\t\teach(base, prop => {\n\t\t\t\t\tif (!has(copy, prop)) immer.onDelete!(state, prop as any)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (immer.onCopy) {\n\t\t\timmer.onCopy(state)\n\t\t}\n\n\t\t// At this point, all descendants of `state.copy` have been finalized,\n\t\t// so we can be sure that `scope.canAutoFreeze` is accurate.\n\t\tif (immer.autoFreeze && scope.canAutoFreeze) {\n\t\t\tfreeze(state.copy, false)\n\t\t}\n\n\t\tif (path && scope.patches) {\n\t\t\tgeneratePatches(state, path, scope.patches, scope.inversePatches!)\n\t\t}\n\t}\n\treturn state.copy\n}\n\nfunction finalizeTree(\n\timmer: Immer,\n\troot: Drafted,\n\tscope: ImmerScope,\n\trootPath?: PatchPath\n) {\n\tconst state = root[DRAFT_STATE]\n\tif (state) {\n\t\tif (\n\t\t\tstate.type === ProxyType.ES5Object ||\n\t\t\tstate.type === ProxyType.ES5Array\n\t\t) {\n\t\t\t// Create the final copy, with added keys and without deleted keys.\n\t\t\tstate.copy = shallowCopy(state.draft, true)\n\t\t}\n\t\troot = state.copy\n\t}\n\teach(root, (key, value) =>\n\t\tfinalizeProperty(immer, scope, root, state, root, key, value, rootPath)\n\t)\n\treturn root\n}\n\nfunction finalizeProperty(\n\timmer: Immer,\n\tscope: ImmerScope,\n\troot: Drafted,\n\trootState: ImmerState,\n\tparentValue: Drafted,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (childValue === parentValue) {\n\t\tthrow Error(\"Immer forbids circular references\")\n\t}\n\n\t// In the `finalizeTree` method, only the `root` object may be a draft.\n\tconst isDraftProp = !!rootState && parentValue === root\n\tconst isSetMember = isSet(parentValue)\n\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tisDraftProp &&\n\t\t\t!isSetMember && // Set objects are atomic since they have no keys.\n\t\t\t!has((rootState as Exclude<ImmerState, SetState>).assigned!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tchildValue = finalize(immer, childValue, scope, path)\n\t\tset(parentValue, prop, childValue)\n\n\t\t// Drafts from another scope must prevent auto-freezing.\n\t\tif (isDraft(childValue)) {\n\t\t\tscope.canAutoFreeze = false\n\t\t}\n\t}\n\t// Unchanged draft properties are ignored.\n\telse if (isDraftProp && is(childValue, get(rootState.base, prop))) {\n\t\treturn\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\t// TODO: the recursion over here looks weird, shouldn't non-draft stuff have it's own recursion?\n\t// especially the passing on of root and rootState doesn't make sense...\n\telse if (isDraftable(childValue)) {\n\t\teach(childValue, (key, grandChild) =>\n\t\t\tfinalizeProperty(\n\t\t\t\timmer,\n\t\t\t\tscope,\n\t\t\t\troot,\n\t\t\t\trootState,\n\t\t\t\tchildValue,\n\t\t\t\tkey,\n\t\t\t\tgrandChild,\n\t\t\t\trootPath\n\t\t\t)\n\t\t)\n\t\tif (!scope.parent) maybeFreeze(immer, childValue)\n\t}\n\n\tif (isDraftProp && immer.onAssign && !isSetMember) {\n\t\timmer.onAssign(rootState, prop, childValue)\n\t}\n}\n\nexport function maybeFreeze(immer: Immer, value: any, deep = false) {\n\tif (immer.autoFreeze && !isDraft(value)) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\tget,\n\teach,\n\thas,\n\tdie,\n\tgetArchtype,\n\tImmerState,\n\tPatch,\n\tProxyType,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tArchtype,\n\tisMap,\n\tisSet\n} from \"./internal\"\n\nexport type PatchPath = (string | number)[]\n\nexport function generatePatches(\n\tstate: ImmerState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n): void {\n\tswitch (state.type) {\n\t\tcase ProxyType.ProxyObject:\n\t\tcase ProxyType.ES5Object:\n\t\tcase ProxyType.Map:\n\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\tstate,\n\t\t\t\tbasePath,\n\t\t\t\tpatches,\n\t\t\t\tinversePatches\n\t\t\t)\n\t\tcase ProxyType.ES5Array:\n\t\tcase ProxyType.ProxyArray:\n\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\tcase ProxyType.Set:\n\t\t\treturn generateSetPatches(\n\t\t\t\t(state as any) as SetState,\n\t\t\t\tbasePath,\n\t\t\t\tpatches,\n\t\t\t\tinversePatches\n\t\t\t)\n\t}\n}\n\nfunction generateArrayPatches(\n\tstate: ES5ArrayState | ProxyArrayState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n) {\n\tlet {base, assigned, copy} = state\n\t/* istanbul ignore next */\n\tif (!copy) die()\n\n\t// Reduce complexity by ensuring `base` is never longer.\n\tif (copy.length < base.length) {\n\t\t// @ts-ignore\n\t\t;[base, copy] = [copy, base]\n\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t}\n\n\tconst delta = copy.length - base.length\n\n\t// Find the first replaced index.\n\tlet start = 0\n\twhile (base[start] === copy[start] && start < base.length) {\n\t\t++start\n\t}\n\n\t// Find the last replaced index. Search from the end to optimize splice patches.\n\tlet end = base.length\n\twhile (end > start && base[end - 1] === copy[end + delta - 1]) {\n\t\t--end\n\t}\n\n\t// Process replaced indices.\n\tfor (let i = start; i < end; ++i) {\n\t\tif (assigned[i] && copy[i] !== base[i]) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: copy[i]\n\t\t\t})\n\t\t\tinversePatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: base[i]\n\t\t\t})\n\t\t}\n\t}\n\n\tconst replaceCount = patches.length\n\n\t// Process added indices.\n\tfor (let i = end + delta - 1; i >= end; --i) {\n\t\tconst path = basePath.concat([i])\n\t\tpatches[replaceCount + i - end] = {\n\t\t\top: \"add\",\n\t\t\tpath,\n\t\t\tvalue: copy[i]\n\t\t}\n\t\tinversePatches.push({\n\t\t\top: \"remove\",\n\t\t\tpath\n\t\t})\n\t}\n}\n\n// This is used for both Map objects and normal objects.\nfunction generatePatchesFromAssigned(\n\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n) {\n\tconst {base, copy} = state\n\teach(state.assigned!, (key, assignedValue) => {\n\t\tconst origValue = get(base, key)\n\t\tconst value = get(copy!, key)\n\t\tconst op = !assignedValue ? \"remove\" : has(base, key) ? \"replace\" : \"add\"\n\t\tif (origValue === value && op === \"replace\") return\n\t\tconst path = basePath.concat(key as any)\n\t\tpatches.push(op === \"remove\" ? {op, path} : {op, path, value})\n\t\tinversePatches.push(\n\t\t\top === \"add\"\n\t\t\t\t? {op: \"remove\", path}\n\t\t\t\t: op === \"remove\"\n\t\t\t\t? {op: \"add\", path, value: origValue}\n\t\t\t\t: {op: \"replace\", path, value: origValue}\n\t\t)\n\t})\n}\n\nfunction generateSetPatches(\n\tstate: SetState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n) {\n\tlet {base, copy} = state\n\n\tlet i = 0\n\tbase.forEach(value => {\n\t\tif (!copy!.has(value)) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"remove\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t\tinversePatches.unshift({\n\t\t\t\top: \"add\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t}\n\t\ti++\n\t})\n\ti = 0\n\tcopy!.forEach(value => {\n\t\tif (!base.has(value)) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"add\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t\tinversePatches.unshift({\n\t\t\t\top: \"remove\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t}\n\t\ti++\n\t})\n}\n\nexport function applyPatches<T>(draft: T, patches: Patch[]): T {\n\tpatches.forEach(patch => {\n\t\tconst {path, op} = patch\n\n\t\t/* istanbul ignore next */\n\t\tif (!path.length) die()\n\n\t\tlet base: any = draft\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tbase = get(base, path[i])\n\t\t\tif (!base || typeof base !== \"object\")\n\t\t\t\tthrow new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n\t\t}\n\n\t\tconst type = getArchtype(base)\n\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\tconst key = path[path.length - 1]\n\t\tswitch (op) {\n\t\t\tcase \"replace\":\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\tthrow new Error('Sets cannot have \"replace\" patches.')\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t}\n\t\t\tcase \"add\":\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\treturn base.splice(key as any, 0, value)\n\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t}\n\t\t\tcase \"remove\":\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unsupported patch operation: \" + op)\n\t\t}\n\t})\n\n\treturn draft\n}\n\n// TODO: optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n// E.g. auto-draft when new objects from outside are assigned and modified?\n// (See failing test when deepClone just returns obj)\nfunction deepClonePatchValue<T>(obj: T): T\nfunction deepClonePatchValue(obj: any) {\n\tif (!obj || typeof obj !== \"object\") return obj\n\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\tif (isMap(obj))\n\t\treturn new Map(\n\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t)\n\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\treturn cloned\n}\n","\"use strict\"\nimport {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tProxyType,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tImmerScope,\n\tDRAFT_STATE\n} from \"./internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned: {\n\t\t[property: string]: boolean\n\t}\n\tparent?: ImmerState\n\tdrafts?: {\n\t\t[property: string]: Drafted<any, any>\n\t}\n\trevoke(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype: ProxyType.ProxyObject\n\tbase: AnyObject\n\tcopy: AnyObject | null\n\tdraft: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype: ProxyType.ProxyArray\n\tbase: AnyArray\n\tcopy: AnyArray | null\n\tdraft: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified: false,\n\t\t// Used during finalization.\n\t\tfinalized: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned: {},\n\t\t// The parent draft state.\n\t\tparent,\n\t\t// The base state.\n\t\tbase,\n\t\t// The base proxy.\n\t\tdraft: null as any, // set below\n\t\t// Any property proxies.\n\t\tdrafts: {},\n\t\t// The base copy with any updated values.\n\t\tcopy: null,\n\t\t// Called by the `produce` function.\n\t\trevoke: null as any,\n\t\tisManual: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\t// TODO: optimization: might be faster, cheaper if we created a non-revocable proxy\n\t// and administrate revoking ourselves\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft = proxy as any\n\tstate.revoke = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nconst objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\t\tlet {drafts} = state\n\n\t\t// Check for existing draft in unmodified state.\n\t\tif (!state.modified && has(drafts, prop)) {\n\t\t\treturn drafts![prop as any]\n\t\t}\n\n\t\tconst value = latest(state)[prop]\n\t\tif (state.finalized || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\n\t\t// Check for existing draft in modified state.\n\t\tif (state.modified) {\n\t\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\t\tif (value !== peek(state.base, prop)) return value\n\t\t\t// Store drafts on the copy (when one exists).\n\t\t\t// @ts-ignore\n\t\t\tdrafts = state.copy\n\t\t}\n\n\t\treturn (drafts![prop as any] = state.scope.immer.createProxy(value, state))\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(state, prop: string /* strictly not, but helps TS */, value) {\n\t\tif (!state.modified) {\n\t\t\tconst baseValue = peek(state.base, prop)\n\t\t\t// Optimize based on value's truthiness. Truthy values are guaranteed to\n\t\t\t// never be undefined, so we can avoid the `in` operator. Lastly, truthy\n\t\t\t// values may be drafts, but falsy values are never drafts.\n\t\t\tconst isUnchanged = value\n\t\t\t\t? is(baseValue, value) || value === state.drafts![prop]\n\t\t\t\t: is(baseValue, value) && prop in state.base\n\t\t\tif (isUnchanged) return true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\t\tstate.assigned[prop] = true\n\t\t// @ts-ignore\n\t\tstate.copy![prop] = value\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base, prop) !== undefined || prop in state.base) {\n\t\t\tstate.assigned[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else if (state.assigned[prop]) {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy) delete state.copy[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (desc) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable =\n\t\t\t\tstate.type !== ProxyType.ProxyArray || prop !== \"length\"\n\t\t}\n\t\treturn desc\n\t},\n\tdefineProperty() {\n\t\tthrow new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base)\n\t},\n\tsetPrototypeOf() {\n\t\tthrow new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (isNaN(parseInt(prop as any))) {\n\t\tthrow new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n\t}\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (prop !== \"length\" && isNaN(parseInt(prop as any))) {\n\t\tthrow new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n\t}\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n/**\n * Map drafts\n */\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey): any {\n\tconst state = draft[DRAFT_STATE]\n\tconst desc = Reflect.getOwnPropertyDescriptor(\n\t\tstate ? latest(state) : draft,\n\t\tprop\n\t)\n\treturn desc && desc.value\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tif (\n\t\t\tstate.type === ProxyType.ProxyObject ||\n\t\t\tstate.type === ProxyType.ProxyArray\n\t\t) {\n\t\t\tconst copy = (state.copy = shallowCopy(state.base))\n\t\t\teach(state.drafts!, (key, value) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tcopy[key] = value\n\t\t\t})\n\t\t\tstate.drafts = undefined\n\t\t}\n\n\t\tif (state.parent) {\n\t\t\tmarkChanged(state.parent)\n\t\t}\n\t}\n}\n\nfunction prepareCopy(state: ProxyState) {\n\tif (!state.copy) {\n\t\tstate.copy = shallowCopy(state.base)\n\t}\n}\n","\"use strict\"\nimport {\n\teach,\n\thas,\n\tis,\n\tisDraft,\n\tisDraftable,\n\tisEnumerable,\n\tshallowCopy,\n\tlatest,\n\tcreateHiddenProperty,\n\tImmerScope,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tObjectish,\n\tImmerBaseState,\n\tAnyArray,\n\tProxyType,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE\n} from \"./internal\"\n\ninterface ES5BaseState extends ImmerBaseState {\n\tfinalizing: boolean\n\tassigned: {[key: string]: any}\n\tparent?: ImmerState\n\trevoked: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype: ProxyType.ES5Object\n\tdraft: Drafted<AnyObject, ES5ObjectState>\n\tbase: AnyObject\n\tcopy: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype: ProxyType.ES5Array\n\tdraft: Drafted<AnyObject, ES5ArrayState>\n\tbase: AnyArray\n\tcopy: AnyArray | null\n}\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function willFinalizeES5(\n\tscope: ImmerScope,\n\tresult: any,\n\tisReplaced: boolean\n) {\n\tscope.drafts!.forEach(draft => {\n\t\tdraft[DRAFT_STATE].finalizing = true\n\t})\n\tif (!isReplaced) {\n\t\tif (scope.patches) {\n\t\t\tmarkChangesRecursively(scope.drafts![0])\n\t\t}\n\t\t// This is faster when we don't care about which attributes changed.\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n\t// When a child draft is returned, look for changes.\n\telse if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n}\n\nexport function createES5Proxy<T>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\tconst isArray = Array.isArray(base)\n\tconst draft = clonePotentialDraft(base)\n\n\teach(draft, prop => {\n\t\tproxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n\t})\n\n\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\ttype: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\tmodified: false,\n\t\tfinalizing: false,\n\t\tfinalized: false,\n\t\tassigned: {},\n\t\tparent,\n\t\tbase,\n\t\tdraft,\n\t\tcopy: null,\n\t\trevoked: false,\n\t\tisManual: false\n\t}\n\n\tcreateHiddenProperty(draft, DRAFT_STATE, state)\n\treturn draft\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tif (state && !state.finalizing) {\n\t\tstate.finalizing = true\n\t\tconst value = draft[prop]\n\t\tstate.finalizing = false\n\t\treturn value\n\t}\n\treturn draft[prop]\n}\n\nfunction get(state: ES5State, prop: string | number) {\n\tassertUnrevoked(state)\n\tconst value = peek(latest(state), prop)\n\tif (state.finalizing) return value\n\t// Create a draft if the value is unmodified.\n\tif (value === peek(state.base, prop) && isDraftable(value)) {\n\t\tprepareCopy(state)\n\t\t// @ts-ignore\n\t\treturn (state.copy![prop] = state.scope.immer.createProxy(value, state))\n\t}\n\treturn value\n}\n\nfunction set(state: ES5State, prop: string | number, value: any) {\n\tassertUnrevoked(state)\n\tstate.assigned[prop] = true\n\tif (!state.modified) {\n\t\tif (is(value, peek(latest(state), prop))) return\n\t\tmarkChangedES5(state)\n\t\tprepareCopy(state)\n\t}\n\t// @ts-ignore\n\tstate.copy![prop] = value\n}\n\nexport function markChangedES5(state: ImmerState) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tif (state.parent) markChangedES5(state.parent)\n\t}\n}\n\nfunction prepareCopy(state: ES5State) {\n\tif (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base: Objectish) {\n\tconst state = base && (base as any)[DRAFT_STATE]\n\tif (state) {\n\t\tstate.finalizing = true\n\t\tconst draft = shallowCopy(state.draft, true)\n\t\tstate.finalizing = false\n\t\treturn draft\n\t}\n\treturn shallowCopy(base)\n}\n\n// property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\nconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\nfunction proxyProperty(\n\tdraft: Drafted<any, ES5State>,\n\tprop: string | number,\n\tenumerable: boolean\n) {\n\tlet desc = descriptors[prop]\n\tif (desc) {\n\t\tdesc.enumerable = enumerable\n\t} else {\n\t\tdescriptors[prop] = desc = {\n\t\t\tconfigurable: true,\n\t\t\tenumerable,\n\t\t\tget(this: any) {\n\t\t\t\treturn get(this[DRAFT_STATE], prop)\n\t\t\t},\n\t\t\tset(this: any, value) {\n\t\t\t\tset(this[DRAFT_STATE], prop, value)\n\t\t\t}\n\t\t}\n\t}\n\tObject.defineProperty(draft, prop, desc)\n}\n\nexport function assertUnrevoked(state: ES5State | MapState | SetState) {\n\tif (state.revoked === true)\n\t\tthrow new Error(\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\tJSON.stringify(latest(state))\n\t\t)\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t// The natural order of drafts in the `scope` array is based on when they\n\t// were accessed. By processing drafts in reverse natural order, we have a\n\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t// have changed, we can avoid any traversal of its ancestor nodes.\n\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\tconst state = drafts[i][DRAFT_STATE]\n\t\tif (!state.modified) {\n\t\t\tswitch (state.type) {\n\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\tif (hasArrayChanges(state)) markChangedES5(state)\n\t\t\t\t\tbreak\n\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\tif (hasObjectChanges(state)) markChangedES5(state)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction markChangesRecursively(object: any) {\n\tif (!object || typeof object !== \"object\") return\n\tconst state = object[DRAFT_STATE]\n\tif (!state) return\n\tconst {base, draft, assigned, type} = state\n\tif (type === ProxyType.ES5Object) {\n\t\t// Look for added keys.\n\t\t// TODO: looks quite duplicate to hasObjectChanges,\n\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t// unnecessary work.\n\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\teach(draft, key => {\n\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (base[key] === undefined && !has(base, key)) {\n\t\t\t\tassigned[key] = true\n\t\t\t\tmarkChangedES5(state)\n\t\t\t} else if (!assigned[key]) {\n\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\tmarkChangesRecursively(draft[key])\n\t\t\t}\n\t\t})\n\t\t// Look for removed keys.\n\t\teach(base, key => {\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (draft[key] === undefined && !has(draft, key)) {\n\t\t\t\tassigned[key] = false\n\t\t\t\tmarkChangedES5(state)\n\t\t\t}\n\t\t})\n\t} else if (type === ProxyType.ES5Array) {\n\t\tif (hasArrayChanges(state)) {\n\t\t\tmarkChangedES5(state)\n\t\t\tassigned.length = true\n\t\t}\n\n\t\tif (draft.length < base.length) {\n\t\t\tfor (let i = draft.length; i < base.length; i++) assigned[i] = false\n\t\t} else {\n\t\t\tfor (let i = base.length; i < draft.length; i++) assigned[i] = true\n\t\t}\n\n\t\t// Minimum count is enough, the other parts has been processed.\n\t\tconst min = Math.min(draft.length, base.length)\n\n\t\tfor (let i = 0; i < min; i++) {\n\t\t\t// Only untouched indices trigger recursion.\n\t\t\tif (assigned[i] === undefined) markChangesRecursively(draft[i])\n\t\t}\n\t}\n}\n\nfunction hasObjectChanges(state: ES5ObjectState) {\n\tconst {base, draft} = state\n\n\t// Search for added keys and changed keys. Start at the back, because\n\t// non-numeric keys are ordered by time of definition on the object.\n\tconst keys = Object.keys(draft)\n\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\tconst key = keys[i]\n\t\tconst baseValue = base[key]\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (baseValue === undefined && !has(base, key)) {\n\t\t\treturn true\n\t\t}\n\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t// descriptor is erased. This branch detects any missed changes.\n\t\telse {\n\t\t\tconst value = draft[key]\n\t\t\tconst state = value && value[DRAFT_STATE]\n\t\t\tif (state ? state.base !== baseValue : !is(value, baseValue)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\t// At this point, no keys were added or changed.\n\t// Compare key count to determine if keys were deleted.\n\treturn keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state: ES5ArrayState) {\n\tconst {draft} = state\n\tif (draft.length !== state.base.length) return true\n\t// See #116\n\t// If we first shorten the length, our array interceptors will be removed.\n\t// If after that new items are added, result in the same original length,\n\t// those last items will have no intercepting property.\n\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t// the last one\n\tconst descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\tif (descriptor && !descriptor.get) return true\n\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\treturn false\n}\n","import {\n\t__extends,\n\tImmerBaseState,\n\tProxyType,\n\tAnyMap,\n\tDrafted,\n\tImmerState,\n\tDRAFT_STATE,\n\tImmerScope,\n\tlatest,\n\tassertUnrevoked,\n\tisDraftable,\n\titeratorSymbol\n} from \"./internal\"\n\nexport interface MapState extends ImmerBaseState {\n\ttype: ProxyType.Map\n\tcopy: AnyMap | undefined\n\tassigned: Map<any, boolean> | undefined\n\tbase: AnyMap\n\trevoked: boolean\n\tdraft: Drafted<AnyMap, MapState>\n}\n\nconst DraftMap = (function(_super) {\n\tif (!_super) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Map is not polyfilled\")\n\t}\n\t__extends(DraftMap, _super)\n\t// Create class manually, cause #502\n\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\tthis[DRAFT_STATE] = {\n\t\t\ttype: ProxyType.Map,\n\t\t\tparent,\n\t\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\t\tmodified: false,\n\t\t\tfinalized: false,\n\t\t\tcopy: undefined,\n\t\t\tassigned: undefined,\n\t\t\tbase: target,\n\t\t\tdraft: this as any,\n\t\t\tisManual: false,\n\t\t\trevoked: false\n\t\t}\n\t\treturn this\n\t}\n\tconst p = DraftMap.prototype\n\n\t// TODO: smaller build size if we create a util for Object.defineProperty\n\tObject.defineProperty(p, \"size\", {\n\t\tget: function() {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t})\n\n\tp.has = function(key: any): boolean {\n\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t}\n\n\tp.set = function(key: any, value: any) {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tif (latest(state).get(key) !== value) {\n\t\t\tprepareCopy(state)\n\t\t\tstate.scope.immer.markChanged(state)\n\t\t\tstate.assigned!.set(key, true)\n\t\t\tstate.copy!.set(key, value)\n\t\t\tstate.assigned!.set(key, true)\n\t\t}\n\t\treturn this\n\t}\n\n\tp.delete = function(key: any): boolean {\n\t\tif (!this.has(key)) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\tstate.assigned!.set(key, false)\n\t\tstate.copy!.delete(key)\n\t\treturn true\n\t}\n\n\tp.clear = function() {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\tstate.assigned = new Map()\n\t\treturn state.copy!.clear()\n\t}\n\n\tp.forEach = function(\n\t\tcb: (value: any, key: any, self: any) => void,\n\t\tthisArg?: any\n\t) {\n\t\tconst state = this[DRAFT_STATE]\n\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t})\n\t}\n\n\tp.get = function(key: any): any {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tconst value = latest(state).get(key)\n\t\tif (state.finalized || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\tif (value !== state.base.get(key)) {\n\t\t\treturn value // either already drafted or reassigned\n\t\t}\n\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\tconst draft = state.scope.immer.createProxy(value, state)\n\t\tprepareCopy(state)\n\t\tstate.copy!.set(key, draft)\n\t\treturn draft\n\t}\n\n\tp.keys = function(): IterableIterator<any> {\n\t\treturn latest(this[DRAFT_STATE]).keys()\n\t}\n\n\tp.values = function(): IterableIterator<any> {\n\t\tconst iterator = this.keys()\n\t\treturn {\n\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\tnext: () => {\n\t\t\t\tconst r = iterator.next()\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (r.done) return r\n\t\t\t\tconst value = this.get(r.value)\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t} as any\n\t}\n\n\tp.entries = function(): IterableIterator<[any, any]> {\n\t\tconst iterator = this.keys()\n\t\treturn {\n\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\tnext: () => {\n\t\t\t\tconst r = iterator.next()\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (r.done) return r\n\t\t\t\tconst value = this.get(r.value)\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t}\n\t\t\t}\n\t\t} as any\n\t}\n\n\tp[iteratorSymbol] = function() {\n\t\treturn this.entries()\n\t}\n\n\treturn DraftMap\n})(Map)\n\nexport function proxyMap<T extends AnyMap>(\n\ttarget: T,\n\tparent?: ImmerState\n): T & {[DRAFT_STATE]: MapState} {\n\t// @ts-ignore\n\treturn new DraftMap(target, parent)\n}\n\nfunction prepareCopy(state: MapState) {\n\tif (!state.copy) {\n\t\tstate.assigned = new Map()\n\t\tstate.copy = new Map(state.base)\n\t}\n}\n","import {\n\t__extends,\n\tImmerBaseState,\n\tProxyType,\n\tAnySet,\n\tDrafted,\n\tImmerState,\n\tDRAFT_STATE,\n\tImmerScope,\n\tlatest,\n\tassertUnrevoked,\n\titeratorSymbol,\n\tisDraftable\n} from \"./internal\"\n\nexport interface SetState extends ImmerBaseState {\n\ttype: ProxyType.Set\n\tcopy: AnySet | undefined\n\tbase: AnySet\n\tdrafts: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked: boolean\n\tdraft: Drafted<AnySet, SetState>\n}\n\nconst DraftSet = (function(_super) {\n\tif (!_super) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Set is not polyfilled\")\n\t}\n\t__extends(DraftSet, _super)\n\t// Create class manually, cause #502\n\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\tthis[DRAFT_STATE] = {\n\t\t\ttype: ProxyType.Set,\n\t\t\tparent,\n\t\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\t\tmodified: false,\n\t\t\tfinalized: false,\n\t\t\tcopy: undefined,\n\t\t\tbase: target,\n\t\t\tdraft: this,\n\t\t\tdrafts: new Map(),\n\t\t\trevoked: false,\n\t\t\tisManual: false\n\t\t}\n\t\treturn this\n\t}\n\tconst p = DraftSet.prototype\n\n\tObject.defineProperty(p, \"size\", {\n\t\tget: function() {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t})\n\n\tp.has = function(value: any): boolean {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\tif (!state.copy) {\n\t\t\treturn state.base.has(value)\n\t\t}\n\t\tif (state.copy.has(value)) return true\n\t\tif (state.drafts.has(value) && state.copy.has(state.drafts.get(value)))\n\t\t\treturn true\n\t\treturn false\n\t}\n\n\tp.add = function(value: any): any {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tif (state.copy) {\n\t\t\tstate.copy.add(value)\n\t\t} else if (!state.base.has(value)) {\n\t\t\tprepareCopy(state)\n\t\t\tstate.scope.immer.markChanged(state)\n\t\t\tstate.copy!.add(value)\n\t\t}\n\t\treturn this\n\t}\n\n\tp.delete = function(value: any): any {\n\t\tif (!this.has(value)) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\treturn (\n\t\t\tstate.copy!.delete(value) ||\n\t\t\t(state.drafts.has(value)\n\t\t\t\t? state.copy!.delete(state.drafts.get(value))\n\t\t\t\t: /* istanbul ignore next */ false)\n\t\t)\n\t}\n\n\tp.clear = function() {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\treturn state.copy!.clear()\n\t}\n\n\tp.values = function(): IterableIterator<any> {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\treturn state.copy!.values()\n\t}\n\n\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\treturn state.copy!.entries()\n\t}\n\n\tp.keys = function(): IterableIterator<any> {\n\t\treturn this.values()\n\t}\n\n\tp[iteratorSymbol] = function() {\n\t\treturn this.values()\n\t}\n\n\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\tconst iterator = this.values()\n\t\tlet result = iterator.next()\n\t\twhile (!result.done) {\n\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\tresult = iterator.next()\n\t\t}\n\t}\n\n\treturn DraftSet\n})(Set)\n\nexport function proxySet<T extends AnySet>(\n\ttarget: T,\n\tparent?: ImmerState\n): T & {[DRAFT_STATE]: SetState} {\n\t// @ts-ignore\n\treturn new DraftSet(target, parent)\n}\n\nfunction prepareCopy(state: SetState) {\n\tif (!state.copy) {\n\t\t// create drafts for all entries to preserve insertion order\n\t\tstate.copy = new Set()\n\t\tstate.base.forEach(value => {\n\t\t\tif (isDraftable(value)) {\n\t\t\t\tconst draft = state.scope.immer.createProxy(value, state)\n\t\t\t\tstate.drafts.set(value, draft)\n\t\t\t\tstate.copy!.add(draft)\n\t\t\t} else {\n\t\t\t\tstate.copy!.add(value)\n\t\t\t}\n\t\t})\n\t}\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n\tcreateES5Proxy,\n\twillFinalizeES5,\n\tmarkChangedES5,\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\teach,\n\tDrafted,\n\tisDraftable,\n\tImmerScope,\n\tprocessResult,\n\tNOTHING,\n\tmaybeFreeze,\n\tdie,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tapplyPatches,\n\tisMap,\n\tproxyMap,\n\tisSet,\n\tproxySet,\n\tcreateProxy,\n\tmarkChanged\n} from \"./internal\"\n\n/* istanbul ignore next */\nfunction verifyMinified() {}\n\nconst configDefaults = {\n\tuseProxies:\n\t\ttypeof Proxy !== \"undefined\" &&\n\t\ttypeof Proxy.revocable !== \"undefined\" &&\n\t\ttypeof Reflect !== \"undefined\",\n\tautoFreeze:\n\t\ttypeof process !== \"undefined\"\n\t\t\t? process.env.NODE_ENV !== \"production\"\n\t\t\t: /* istanbul ignore next */\n\t\t\t  verifyMinified.name === \"verifyMinified\",\n\tonAssign: null,\n\tonDelete: null,\n\tonCopy: null\n} as const\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies: boolean = false\n\tautoFreeze: boolean = false\n\tonAssign?: (state: ImmerState, prop: string | number, value: unknown) => void\n\tonDelete?: (state: ImmerState, prop: string | number) => void\n\tonCopy?: (state: ImmerState) => void\n\n\tconstructor(config?: {\n\t\tuseProxies?: boolean\n\t\tautoFreeze?: boolean\n\t\tonAssign?: (\n\t\t\tstate: ImmerState,\n\t\t\tprop: string | number,\n\t\t\tvalue: unknown\n\t\t) => void\n\t\tonDelete?: (state: ImmerState, prop: string | number) => void\n\t\tonCopy?: (state: ImmerState) => void\n\t}) {\n\t\teach(configDefaults, (key, value) => {\n\t\t\t// @ts-ignore\n\t\t\tthis[key] = config?.[key] ?? value\n\t\t})\n\t\tthis.setUseProxies(this.useProxies)\n\t\tthis.produce = this.produce.bind(this)\n\t\tthis.produceWithPatches = this.produceWithPatches.bind(this)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce(base: any, recipe?: any, patchListener?: any) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\t// prettier-ignore\n\t\t{\n\t\t\tif (typeof recipe !== \"function\") {\n\t\t\t\tthrow new Error(\"The first or second argument to `produce` must be a function\")\n\t\t\t}\n\t\t\tif (patchListener !== undefined && typeof patchListener !== \"function\") {\n\t\t\t\tthrow new Error(\"The third argument to `produce` must be a function or undefined\")\n\t\t\t}\n\t\t}\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = ImmerScope.enter(this)\n\t\t\tconst proxy = this.createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) scope.revoke()\n\t\t\t\telse scope.leave()\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tscope.usePatches(patchListener)\n\t\t\t\t\t\treturn processResult(this, result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tscope.revoke()\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tscope.usePatches(patchListener)\n\t\t\treturn processResult(this, result, scope)\n\t\t} else {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tmaybeFreeze(this, result, true)\n\t\t\treturn result\n\t\t}\n\t}\n\n\tproduceWithPatches(arg1: any, arg2?: any, arg3?: any): any {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\t\t// non-curried form\n\t\t/* istanbul ignore next */\n\t\tif (arg3) die()\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) {\n\t\t\tthrow new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\") // prettier-ignore\n\t\t}\n\t\tconst scope = ImmerScope.enter(this)\n\t\tconst proxy = this.createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual = true\n\t\tscope.leave()\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && draft[DRAFT_STATE]\n\t\tif (!state || !state.isManual) {\n\t\t\tthrow new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\") // prettier-ignore\n\t\t}\n\t\tif (state.finalized) {\n\t\t\tthrow new Error(\"The given draft is already finalized\") // prettier-ignore\n\t\t}\n\t\tconst {scope} = state\n\t\tscope.usePatches(patchListener)\n\t\treturn processResult(this, undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is disabled in production.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tthis.useProxies = value\n\t}\n\n\tapplyPatches(base: Objectish, patches: Patch[]) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatches(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatches(draft, patches.slice(i + 1))\n\t\t)\n\t}\n\n\tcreateProxy<T extends Objectish>(\n\t\tvalue: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ImmerState> {\n\t\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\t\tconst draft: Drafted = isMap(value)\n\t\t\t? proxyMap(value, parent)\n\t\t\t: isSet(value)\n\t\t\t? proxySet(value, parent)\n\t\t\t: this.useProxies\n\t\t\t? createProxy(value, parent)\n\t\t\t: createES5Proxy(value, parent)\n\n\t\tconst scope = parent ? parent.scope : ImmerScope.current!\n\t\tscope.drafts.push(draft)\n\t\treturn draft\n\t}\n\n\twillFinalize(scope: ImmerScope, thing: any, isReplaced: boolean) {\n\t\tif (!this.useProxies) willFinalizeES5(scope, thing, isReplaced)\n\t}\n\n\tmarkChanged(state: ImmerState) {\n\t\tif (this.useProxies) {\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\tmarkChangedES5(state)\n\t\t}\n\t}\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n"],"names":["Archtype","ProxyType","hasSymbol","Symbol","hasMap","Map","hasSet","Set","NOTHING","_a","DRAFTABLE","DRAFT_STATE","iteratorSymbol","iterator","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","isDraft","value","isDraftable","proto","getPrototypeOf","isPlainObject","isArray","isMap","isSet","ownKeys","Reflect","getOwnPropertySymbols","obj","getOwnPropertyNames","concat","each","iter","getArchtype","forEach","key","entry","index","thing","die","type","ES5Object","ProxyObject","ES5Array","ProxyArray","has","prop","call","get","is","x","y","target","latest","state","copy","base","shallowCopy","invokeGetters","slice","clone","create","desc","getOwnPropertyDescriptor","Error","enumerable","defineProperty","writable","configurable","freeze","deep","isFrozen","add","clear","delete","dontMutateFrozenCollections","set","_","parent","immer","drafts","canAutoFreeze","ImmerScope","patchListener","patches","inversePatches","leave","revoke","this","current","scope","draft","revoked","processResult","result","baseDraft","isReplaced","undefined","willFinalize","modified","finalize","maybeFreeze","push","op","path","finalizeTree","finalized","onDelete","useProxies","exists","copy_1","onCopy","autoFreeze","basePath","assigned","assignedValue","origValue","generatePatchesFromAssigned","length","_b","delta","start","end","i","replaceCount","generateArrayPatches","unshift","generateSetPatches","generatePatches","root","rootPath","finalizeProperty","rootState","parentValue","childValue","isDraftProp","isSetMember","propOrOldValue","grandChild","onAssign","objectTraps","peek","createProxy","baseValue","prepareCopy","markChanged","deleteProperty","owner","arrayTraps","willFinalizeES5","finalizing","markChangesSweep","markChangesRecursively","object","markChangedES5","hasArrayChanges","min","Math","createES5Proxy","clonePotentialDraft","descriptors","assertUnrevoked","proxyProperty","isEnumerable","isManual","fn","arguments","apply","isNaN","parseInt","JSON","stringify","hasObjectChanges","keys","state_1","descriptor","DraftMap","_super","size","cb","thisArg","_value","_map","_this","values","r","next","done","entries","DraftSet","applyPatches","patch","join","deepClonePatchValue","splice","map","from","cloned","__spreadArrays","s","il","k","a","j","jl","configDefaults","Proxy","revocable","process","env","NODE_ENV","name","config","setUseProxies","produce","bind","produceWithPatches","Immer","recipe","defaultBase_1","self_1","_i","args","scope_1","enter","proxy","hasError","Promise","then","usePatches","error","arg1","arg2","arg3","ip","proxyMap","proxySet","traps","setAutoFreeze","createDraft","finishDraft"],"mappings":"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"}