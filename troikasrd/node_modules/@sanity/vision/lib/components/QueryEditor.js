"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactCodemirror = require("react-codemirror2");

var _codemirror = _interopRequireDefault(require("codemirror"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable @typescript-eslint/no-var-requires */

/* eslint-disable import/no-unassigned-import */
require('codemirror/mode/javascript/javascript');

require('codemirror/addon/hint/show-hint');

require('codemirror/addon/edit/closebrackets');

class QueryEditor extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.getHint = this.getHint.bind(this);
  }

  getHint(cm, option) {
    var schema = this.props.schema;
    var cursor = cm.getCursor(); // const line = cm.getLine(cursor.line)

    var start = cursor.ch;
    var end = cursor.ch;
    var suggestions = [{
      text: '...',
      displayText: '... (Includes everything)'
    }];

    if (schema) {
      schema._original.types.forEach(type => {
        suggestions.push({
          text: type.name,
          displayText: "".concat(type.name, " (").concat(type.type, ") - ").concat(type.title)
        });
      });
    }

    return {
      list: suggestions,
      from: _codemirror.default.Pos(cursor.line, start),
      to: _codemirror.default.Pos(cursor.line, end)
    };
  }

  handleChange(editor, metadata, value) {
    this.props.onChange({
      query: value
    });
  }

  render() {
    var options = {
      lineNumbers: true,
      tabSize: 2,
      mode: {
        name: 'javascript',
        json: true
      },
      hintOptions: {
        hint: this.getHint
      },
      extraKeys: {
        'Ctrl-Space': 'autocomplete',
        'Ctrl-Enter': this.props.onExecute
      },
      autoCloseBrackets: true
    };
    return /*#__PURE__*/_react.default.createElement(_reactCodemirror.UnControlled, {
      value: this.props.value,
      onChange: this.handleChange,
      options: options,
      className: this.props.className,
      onHeightChange: this.props.onHeightChange,
      autoCursor: false,
      autoScroll: true
    });
  }

}

QueryEditor.propTypes = {
  onExecute: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.string,
  schema: _propTypes.default.object,
  className: _propTypes.default.string,
  onHeightChange: _propTypes.default.func,
  height: _propTypes.default.number
};
QueryEditor.defaultProps = {
  className: 'vision_query-editor'
};
var _default = QueryEditor;
exports.default = _default;