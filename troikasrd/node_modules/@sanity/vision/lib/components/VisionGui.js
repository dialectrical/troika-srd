"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _queryString = _interopRequireDefault(require("query-string"));

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _localState = require("../util/localState");

var _parseApiQueryString = _interopRequireDefault(require("../util/parseApiQueryString"));

var _tryParseParams = _interopRequireDefault(require("../util/tryParseParams"));

var _encodeQueryString = _interopRequireDefault(require("../util/encodeQueryString"));

var _apiVersions = require("../apiVersions");

var _DelayedSpinner = _interopRequireDefault(require("./DelayedSpinner"));

var _QueryEditor = _interopRequireDefault(require("./QueryEditor"));

var _ParamsEditor = _interopRequireDefault(require("./ParamsEditor"));

var _ResultView = _interopRequireDefault(require("./ResultView"));

var _NoResultsDialog = _interopRequireDefault(require("./NoResultsDialog"));

var _QueryErrorDialog = _interopRequireDefault(require("./QueryErrorDialog"));

require("codemirror/lib/codemirror.css?raw");

require("codemirror/theme/material.css?raw");

require("codemirror/addon/hint/show-hint.css?raw");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* eslint-enable import/no-unassigned-import, import/no-unresolved */
var NO_POINTER_EVENTS = {
  pointerEvents: 'none'
};
var sanityUrl = /\.api\.sanity\.io\/(vx|v1|v\d{4}-\d\d-\d\d)\/.*?(?:query|listen)\/(.*?)\?(.*)/;

var handleCopyUrl = () => {
  var emailLink = document.querySelector('#vision-query-url');
  emailLink.select();

  try {
    document.execCommand('copy');
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error('Unable to copy to clipboard :(');
  }
};

class VisionGui extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    var lastQuery = (0, _localState.getState)('lastQuery');
    var lastParams = (0, _localState.getState)('lastParams');
    var firstDataset = this.props.datasets[0] && this.props.datasets[0].name;
    var defaultDataset = _client.default.config().dataset || firstDataset;
    var defaultApiVersion = "v".concat(_client.default.config().apiVersion || '1');
    var dataset = (0, _localState.getState)('dataset', defaultDataset);
    var apiVersion = (0, _localState.getState)('apiVersion', defaultApiVersion);

    if (!this.props.datasets.some(_ref => {
      var name = _ref.name;
      return name === dataset;
    })) {
      dataset = defaultDataset;
    }

    if (!_apiVersions.apiVersions.includes(apiVersion)) {
      apiVersion = _apiVersions.apiVersions[0];
    }

    this._queryEditorContainer = /*#__PURE__*/_react.default.createRef();
    this._paramsEditorContainer = /*#__PURE__*/_react.default.createRef();
    this.client = _client.default.withConfig({
      apiVersion,
      dataset
    });
    this.subscribers = {};
    this.state = {
      query: lastQuery,
      params: lastParams && (0, _tryParseParams.default)(lastParams),
      rawParams: lastParams,
      queryInProgress: false,
      dataset,
      apiVersion
    };
    this.handleChangeDataset = this.handleChangeDataset.bind(this);
    this.handleChangeApiVersion = this.handleChangeApiVersion.bind(this);
    this.handleCustomApiVersionChange = this.handleCustomApiVersionChange.bind(this);
    this.handleListenExecution = this.handleListenExecution.bind(this);
    this.handleListenerCancellation = this.handleListenerCancellation.bind(this);
    this.handleListenerMutation = this.handleListenerMutation.bind(this);
    this.handleQueryExecution = this.handleQueryExecution.bind(this);
    this.handleQueryChange = this.handleQueryChange.bind(this);
    this.handleParamsChange = this.handleParamsChange.bind(this);
    this.handlePaste = this.handlePaste.bind(this);
  }

  componentDidMount() {
    window.document.addEventListener('paste', this.handlePaste);
  }

  componentWillUnmount() {
    this.cancelQuery();
    this.cancelListener();
  }

  handlePaste(evt) {
    var data = evt.clipboardData.getData('text/plain');
    var match = data.match(sanityUrl);

    if (!match) {
      return;
    }

    var _match = _slicedToArray(match, 4),
        apiVersion = _match[1],
        dataset = _match[2],
        urlQuery = _match[3];

    var qs = _queryString.default.parse(urlQuery);

    var parts;

    try {
      parts = (0, _parseApiQueryString.default)(qs);
    } catch (err) {
      console.warn('Error while trying to parse API URL: ', err.message); // eslint-disable-line no-console

      return; // Give up on error
    }

    if (this.state.data !== dataset) {
      (0, _localState.storeState)('dataset', dataset);
    }

    if (this.state.apiVersion !== apiVersion) {
      (0, _localState.storeState)('apiVersion', apiVersion);
    }

    evt.preventDefault();
    this.client.config({
      dataset,
      apiVersion
    });
    this.setState({
      dataset,
      apiVersion,
      query: parts.query,
      params: parts.params,
      rawParams: JSON.stringify(parts.params, null, 2)
    }, () => {
      this.handleQueryExecution();
    });
  }

  cancelQuery() {
    if (!this.subscribers.query) {
      return;
    }

    this.subscribers.query.unsubscribe();
    this.subscribers.query = null;
  }

  cancelListener() {
    if (!this.subscribers.listen) {
      return;
    }

    this.subscribers.listen.unsubscribe();
    this.subscribers.listen = null;
  }

  handleChangeDataset(evt) {
    var dataset = evt.target.value;
    (0, _localState.storeState)('dataset', dataset);
    this.setState({
      dataset
    });
    this.client.config({
      dataset
    });
    this.handleQueryExecution();
  }

  handleChangeApiVersion(evt) {
    var apiVersion = evt.target.value;

    if (apiVersion === 'other') {
      this.setState({
        customApiVersion: true
      });
      return;
    }

    (0, _localState.storeState)('apiVersion', apiVersion);
    this.setState({
      apiVersion,
      customApiVersion: undefined
    });
    this.client.config({
      apiVersion
    });
    this.handleQueryExecution();
  }

  handleCustomApiVersionChange(evt) {
    var customApiVersion = evt.target.value;
    var parseableApiVersion = customApiVersion.replace(/^v/, '').trim().match(/^\d{4}-\d{2}-\d{2}$/);
    var isValidApiVersion = !isNaN(Date.parse(parseableApiVersion));
    this.setState(prevState => ({
      apiVersion: isValidApiVersion ? customApiVersion : prevState.apiVersion,
      customApiVersion: customApiVersion || true,
      isValidApiVersion
    }), () => {
      if (!this.state.isValidApiVersion) {
        return;
      }

      this.client.config({
        apiVersion: this.state.customApiVersion
      });
    });
  }

  handleListenerMutation(mut) {
    // eslint-disable-next-line react/no-access-state-in-setstate
    var listenMutations = [mut].concat(this.state.listenMutations);

    if (listenMutations.length > 50) {
      listenMutations.pop();
    }

    this.setState({
      listenMutations
    });
  }

  handleListenerCancellation() {
    if (!this.state.listenInProgress) {
      return;
    }

    this.cancelListener();
    this.setState({
      listenInProgress: false
    });
  }

  handleListenExecution() {
    var _this$state = this.state,
        query = _this$state.query,
        params = _this$state.params,
        rawParams = _this$state.rawParams,
        listenInProgress = _this$state.listenInProgress;

    if (listenInProgress) {
      this.cancelListener();
      this.setState({
        listenInProgress: false
      });
      return;
    }

    var paramsError = params instanceof Error && params;
    var url = this.client.getUrl(this.client.getDataUrl('listen', (0, _encodeQueryString.default)(query, params)));
    (0, _localState.storeState)('lastQuery', query);
    (0, _localState.storeState)('lastParams', rawParams);
    this.cancelQuery();
    this.setState({
      url,
      listenMutations: [],
      queryInProgress: false,
      listenInProgress: !paramsError && Boolean(query),
      error: paramsError || undefined,
      result: undefined,
      queryTime: null,
      e2eTime: null
    });

    if (!query || paramsError) {
      return;
    }

    this.subscribers.listen = this.client.listen(query, params, {}).subscribe({
      next: this.handleListenerMutation,
      error: _error => this.setState({
        error: _error,
        query,
        listenInProgress: false
      })
    });
  }

  handleQueryExecution() {
    var _this$state2 = this.state,
        query = _this$state2.query,
        params = _this$state2.params,
        rawParams = _this$state2.rawParams;
    var paramsError = params instanceof Error && params;
    (0, _localState.storeState)('lastQuery', query);
    (0, _localState.storeState)('lastParams', rawParams);
    this.cancelListener();
    this.setState({
      queryInProgress: !paramsError && Boolean(query),
      listenInProgress: false,
      listenMutations: [],
      error: paramsError || undefined,
      result: undefined,
      queryTime: null,
      e2eTime: null
    });

    if (!query || paramsError) {
      return;
    }

    var url = this.client.getUrl(this.client.getDataUrl('query', (0, _encodeQueryString.default)(query, params)));
    this.setState({
      url
    });
    var queryStart = Date.now();
    this.subscribers.query = this.client.observable.fetch(query, params, {
      filterResponse: false,
      tag: 'vision'
    }).subscribe({
      next: res => this.setState({
        executedQuery: query,
        queryTime: res.ms,
        e2eTime: Date.now() - queryStart,
        result: res.result,
        queryInProgress: false,
        error: null
      }),
      error: _error2 => this.setState({
        error: _error2,
        query,
        queryInProgress: false
      })
    });
  }

  handleQueryChange(data) {
    this.setState({
      query: data.query
    });
  }

  handleParamsChange(data) {
    this.setState({
      rawParams: data.raw,
      params: data.parsed
    });
  }

  render() {
    var datasets = this.props.datasets;
    var _this$state3 = this.state,
        error = _this$state3.error,
        result = _this$state3.result,
        url = _this$state3.url,
        query = _this$state3.query,
        queryInProgress = _this$state3.queryInProgress,
        executedQuery = _this$state3.executedQuery,
        listenInProgress = _this$state3.listenInProgress,
        queryTime = _this$state3.queryTime,
        e2eTime = _this$state3.e2eTime,
        listenMutations = _this$state3.listenMutations,
        apiVersion = _this$state3.apiVersion,
        dataset = _this$state3.dataset,
        customApiVersion = _this$state3.customApiVersion,
        isValidApiVersion = _this$state3.isValidApiVersion;
    var styles = this.context.styles.visionGui;
    var hasResult = !error && !queryInProgress && typeof result !== 'undefined';
    var hasEmptyResult = hasResult && Array.isArray(result) && result.length === 0; // Note that because of react-json-inspector, we need at least one
    // addressable, non-generated class name. Therefore;
    // leave `sanity-vision` untouched!

    var visionClass = ['sanity-vision', this.context.styles.visionGui.root].filter(Boolean).join(' ');
    return /*#__PURE__*/_react.default.createElement("div", {
      className: visionClass
    }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      className: styles.header
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, null, "Dataset")), /*#__PURE__*/_react.default.createElement(_ui.Select, {
      value: dataset,
      onChange: this.handleChangeDataset
    }, datasets.map(ds => /*#__PURE__*/_react.default.createElement("option", {
      key: ds.name
    }, ds.name))))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, null, "API version")), /*#__PURE__*/_react.default.createElement(_ui.Select, {
      value: customApiVersion ? 'other' : apiVersion,
      onChange: this.handleChangeApiVersion
    }, _apiVersions.apiVersions.map(version => /*#__PURE__*/_react.default.createElement("option", {
      key: version
    }, version)), /*#__PURE__*/_react.default.createElement("option", {
      key: "other",
      value: "other"
    }, "Other")))), customApiVersion && /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, null, "Custom API version")), /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
      value: typeof customApiVersion === 'string' ? customApiVersion : '',
      onChange: this.handleCustomApiVersionChange,
      customValidity: isValidApiVersion ? undefined : 'Invalid API version'
    }))), typeof url === 'string' ? /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 1,
      flex: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, null, "Query URL\xA0", /*#__PURE__*/_react.default.createElement("a", {
      onClick: handleCopyUrl,
      className: styles.queryUrlCopy
    }, "[copy]"))), /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
      readOnly: true,
      id: "vision-query-url",
      value: url
    }))) : /*#__PURE__*/_react.default.createElement(_ui.Box, {
      flex: 1
    }), typeof queryTime === 'number' && /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, null, "Timings")), /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 2
    }, "Execution: ", queryTime, "ms"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 2
    }, "End-to-end: ", e2eTime, "ms")))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
      align: "right"
    }, "Controls")), /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      onClick: this.handleListenerCancellation
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      style: listenInProgress ? NO_POINTER_EVENTS : undefined,
      onClick: this.handleListenExecution,
      loading: listenInProgress,
      type: "button",
      text: "Listen",
      mode: "ghost"
    })), /*#__PURE__*/_react.default.createElement(_ui.Card, {
      marginLeft: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      onClick: this.handleQueryExecution,
      icon: _icons.PlayIcon,
      loading: queryInProgress,
      tone: "primary",
      text: "Run query"
    }))))))), /*#__PURE__*/_react.default.createElement("div", {
      className: styles.splitContainer
    }, /*#__PURE__*/_react.default.createElement(_reactSplitPane.default, {
      split: "vertical",
      minSize: 150,
      defaultSize: 400
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.edit
    }, /*#__PURE__*/_react.default.createElement(_reactSplitPane.default, {
      split: "horizontal",
      defaultSize: '80%'
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.inputContainer,
      ref: this._queryEditorContainer
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: styles.inputLabelQuery || 'query'
    }, "Query"), /*#__PURE__*/_react.default.createElement(_QueryEditor.default, {
      className: styles.queryEditor,
      value: this.state.query,
      onExecute: this.handleQueryExecution,
      onChange: this.handleQueryChange,
      schema: this.props.schema
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: styles.inputContainer,
      ref: this._paramsEditorContainer
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: styles.inputLabelQuery || 'query'
    }, "Params"), /*#__PURE__*/_react.default.createElement(_ParamsEditor.default, {
      className: styles.paramsEditor,
      classNameInvalid: styles.paramsEditorInvalid,
      value: this.state.rawParams,
      onExecute: this.handleQueryExecution,
      onChange: this.handleParamsChange
    })))), /*#__PURE__*/_react.default.createElement("div", {
      className: styles.resultContainer
    }, /*#__PURE__*/_react.default.createElement("h3", {
      className: styles.inputLabelQuery || 'resultLabel'
    }, "Result"), /*#__PURE__*/_react.default.createElement("div", {
      className: styles.result
    }, queryInProgress && /*#__PURE__*/_react.default.createElement(_DelayedSpinner.default, null), error && /*#__PURE__*/_react.default.createElement(_QueryErrorDialog.default, {
      error: error
    }), hasResult && !hasEmptyResult && /*#__PURE__*/_react.default.createElement(_ResultView.default, {
      data: result,
      query: query
    }), hasEmptyResult && /*#__PURE__*/_react.default.createElement("div", {
      className: styles.noResult
    }, /*#__PURE__*/_react.default.createElement(_NoResultsDialog.default, {
      query: executedQuery,
      dataset: dataset
    })), listenMutations && listenMutations.length > 0 && /*#__PURE__*/_react.default.createElement(_ResultView.default, {
      data: listenMutations
    }))))));
  }

}

VisionGui.propTypes = {
  schema: _propTypes.default.object,
  datasets: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string
  }))
};
VisionGui.contextTypes = {
  styles: _propTypes.default.object,
  components: _propTypes.default.object
};
var _default = VisionGui;
exports.default = _default;