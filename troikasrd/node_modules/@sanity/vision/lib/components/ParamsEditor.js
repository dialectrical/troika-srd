"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactCodemirror = require("react-codemirror2");

var _isPlainObject = _interopRequireDefault(require("../util/isPlainObject"));

var _tryParseParams = _interopRequireDefault(require("../util/tryParseParams"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable @typescript-eslint/no-var-requires */

/* eslint-disable import/no-unassigned-import */
require('codemirror/mode/javascript/javascript');

require('codemirror/addon/hint/show-hint');

require('codemirror/addon/edit/closebrackets');

var ENTER_KEY = 13;

class ParamsEditor extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      valid: true
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleKeyUp = this.handleKeyUp.bind(this);
  }

  handleKeyUp(evt) {
    if ((evt.ctrlKey || evt.metaKey) && evt.which === ENTER_KEY) {
      this.props.onExecute();
    }
  }

  handleChange(editor, metadata, value) {
    var params = (0, _tryParseParams.default)(value);
    this.setState({
      valid: (0, _isPlainObject.default)(params)
    });
    this.props.onChange({
      parsed: params,
      raw: value
    });
  }

  render() {
    var _this$props = this.props,
        className = _this$props.className,
        classNameInvalid = _this$props.classNameInvalid;
    var options = {
      lineNumbers: true,
      tabSize: 2,
      mode: {
        name: 'javascript',
        json: true
      },
      autoCloseBrackets: true
    };
    return /*#__PURE__*/_react.default.createElement(_reactCodemirror.UnControlled, {
      className: (0, _classnames.default)(className, {
        [classNameInvalid]: !this.state.valid
      }),
      value: this.props.value,
      onChange: this.handleChange,
      options: options,
      autoCursor: false,
      autoScroll: true
    });
  }

}

ParamsEditor.propTypes = {
  className: _propTypes.default.string,
  classNameInvalid: _propTypes.default.string,
  onExecute: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.string,
  height: _propTypes.default.number
};
ParamsEditor.defaultProps = {
  value: '{\n  \n}',
  className: 'vision_params-editor',
  classNameInvalid: 'vision_params-editor-invalid',
  height: 100
};
var _default = ParamsEditor;
exports.default = _default;