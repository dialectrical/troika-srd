import PropTypes from 'prop-types';
import React from 'react';
import { Subject } from 'rxjs';
import SearchField from './SearchField';
import SearchResults from './SearchResults';
import { ResultItem } from './types';
interface Props {
    onClose: () => void;
    onOpen: () => void;
    shouldBeFocused: boolean;
}
interface State {
    activeIndex: number;
    error: Error | null;
    isBleeding: boolean;
    isFocused: boolean;
    isLoading: boolean;
    isPressing: boolean;
    results: ResultItem[];
    value: string;
    isDebug: boolean;
}
declare class SearchContainer extends React.PureComponent<Props, State> {
    static propTypes: {
        onOpen: PropTypes.Validator<(...args: any[]) => any>;
        onClose: PropTypes.Validator<(...args: any[]) => any>;
        shouldBeFocused: PropTypes.Validator<boolean>;
    };
    fieldRef: React.RefObject<SearchField>;
    resultsRef: React.RefObject<SearchResults>;
    searchTerm$: Subject<string>;
    componentWillUnmount$: Subject<any>;
    state: {
        activeIndex: number;
        error: any;
        isBleeding: boolean;
        isFocused: boolean;
        isLoading: boolean;
        isPressing: boolean;
        results: any[];
        value: string;
        isDebug: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    handleInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    handleBlur: () => void;
    handleFocus: () => void;
    handleHitMouseDown: (event: React.MouseEvent<HTMLElement>) => void;
    handleHitClick: () => void;
    handleClear: () => void;
    handleKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
    handleMouseDown: () => void;
    handleWindowKeyDown: (event: any) => void;
    handleWindowResize: () => void;
    handleWindowMouseUp: () => void;
    wrapWithDebug: (item: ResultItem, children: React.ReactNode) => React.ReactNode;
    renderItem: (item: ResultItem, index: number, className: string) => React.ReactNode;
    renderResults(): React.ReactNode;
    render(): JSX.Element;
}
export default SearchContainer;
//# sourceMappingURL=SearchContainer.d.ts.map