"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PresenceMenu = PresenceMenu;

var _components = require("@sanity/base/components");

var _hooks = require("@sanity/base/hooks");

var _ui = require("@sanity/ui");

var _cogIcon = _interopRequireDefault(require("part:@sanity/base/cog-icon"));

var _usersIcon = _interopRequireDefault(require("part:@sanity/base/users-icon"));

var _avatar = require("part:@sanity/components/avatar");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _clickOutside = require("part:@sanity/components/click-outside");

var _popover = require("part:@sanity/components/popover");

var _escapable = _interopRequireDefault(require("part:@sanity/components/utilities/escapable"));

var _react = _interopRequireWildcard(require("react"));

var _versionedClient = require("../../versionedClient");

var _PresenceListRow = require("./PresenceListRow");

var _PresenceMenu = _interopRequireDefault(require("./PresenceMenu.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MAX_AVATARS_GLOBAL = 4;

function PresenceMenu() {
  var _versionedClient$conf = _versionedClient.versionedClient.config(),
      projectId = _versionedClient$conf.projectId;

  var presence = (0, _hooks.useGlobalPresence)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var handleToggle = (0, _react.useCallback)(() => setOpen(!open), [open]);
  var handleClose = (0, _react.useCallback)(() => setOpen(false), []);

  var popoverContent = /*#__PURE__*/_react.default.createElement(_ui.Card, {
    className: _PresenceMenu.default.popoverContent,
    scheme: "light"
  }, presence.length === 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _PresenceMenu.default.header
  }, /*#__PURE__*/_react.default.createElement("h2", {
    className: _PresenceMenu.default.title
  }, "No one else is here"), /*#__PURE__*/_react.default.createElement("p", {
    className: _PresenceMenu.default.subtitle
  }, "Invite people to the project to see their online status.")), presence.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _PresenceMenu.default.avatarList
  }, presence.map(item => /*#__PURE__*/_react.default.createElement(_PresenceListRow.PresenceListRow, {
    key: item.user.id,
    presence: item,
    onClose: handleClose
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: _PresenceMenu.default.manageMembers
  }, /*#__PURE__*/_react.default.createElement("a", {
    href: "https://manage.sanity.io/projects/".concat(projectId, "/team"),
    className: _PresenceMenu.default.manageLink,
    target: "_blank",
    rel: "noopener noreferrer",
    onClick: handleClose
  }, /*#__PURE__*/_react.default.createElement("span", null, "Manage members"), /*#__PURE__*/_react.default.createElement(_cogIcon.default, null))));

  return /*#__PURE__*/_react.default.createElement(_clickOutside.ClickOutside, {
    onClickOutside: handleClose
  }, ref => /*#__PURE__*/_react.default.createElement("div", {
    className: _PresenceMenu.default.root,
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
    zOffset: "navbarPopover"
  }, /*#__PURE__*/_react.default.createElement(_popover.Popover, {
    content: popoverContent,
    open: open
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_default.default, {
    className: _PresenceMenu.default.narrowButton,
    icon: _usersIcon.default,
    iconStatus: presence.length > 0 ? 'success' : undefined,
    kind: "simple",
    onClick: handleToggle,
    padding: "small",
    selected: open,
    tone: "navbar"
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    className: _PresenceMenu.default.wideButton,
    kind: "simple",
    onClick: handleToggle,
    padding: "small",
    selected: open,
    tone: "navbar"
  }, /*#__PURE__*/_react.default.createElement(_avatar.AvatarStack, {
    className: _PresenceMenu.default.avatarStack,
    maxLength: MAX_AVATARS_GLOBAL,
    tone: "navbar"
  }, presence.map(item => /*#__PURE__*/_react.default.createElement(_components.UserAvatar, {
    key: item.user.id,
    user: item.user
  }))))))), open && /*#__PURE__*/_react.default.createElement(_escapable.default, {
    onEscape: handleClose
  })));
}