"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Navbar = _interopRequireDefault(require("./Navbar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getNextState(state, mostRight, winWidth) {
  var showLabel = state.showLabel,
      showLabelMinWidth = state.showLabelMinWidth,
      showToolMenu = state.showToolMenu,
      showToolMenuMinWidth = state.showToolMenuMinWidth;
  var mostRightIsVisible = mostRight && mostRight <= winWidth;
  var nextState = {
    winWidth
  };

  if (mostRightIsVisible) {
    // most-right element is within viewport
    if (showLabel) {
      if (showLabelMinWidth === -1 || winWidth < showLabelMinWidth) {
        nextState.showLabelMinWidth = winWidth;
      }
    } else if (showLabelMinWidth < winWidth) {
      nextState.showLabel = true;
    }

    if (showToolMenu) {
      if (showToolMenuMinWidth === -1 || winWidth < showToolMenuMinWidth) {
        nextState.showToolMenuMinWidth = winWidth;
      }
    } else if (showToolMenuMinWidth < winWidth) {
      nextState.showToolMenu = true;
    }

    return nextState;
  } // most-right element is NOT within viewport


  if (showLabel) {
    nextState.showLabel = false;
  } else if (showToolMenu) {
    nextState.showToolMenu = false;
  }

  return nextState;
}

class NavbarContainer extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      showLabel: false,
      showLabelMinWidth: -1,
      showToolMenu: false,
      showToolMenuMinWidth: -1,
      winWidth: -1
    });

    _defineProperty(this, "loginStatusElement", null);

    _defineProperty(this, "searchElement", null);

    _defineProperty(this, "tickAnimFrameId", null);

    _defineProperty(this, "io", null);

    _defineProperty(this, "tick", () => {
      this.handleFrame();
      this.tickAnimFrameId = window.requestAnimationFrame(this.tick);
    });

    _defineProperty(this, "handleSetLoginStatusElement", element => {
      this.loginStatusElement = element;
    });

    _defineProperty(this, "handleSetSearchElement", element => {
      this.searchElement = element;
    });
  }

  componentDidMount() {
    // Start an animation frame loop to check whether elements within the Navbar
    // exits the viewport at any time.
    this.tick();
  }

  componentDidUpdate(prevProps, prevState) {
    var _this$state = this.state,
        showLabel = _this$state.showLabel,
        showLabelMinWidth = _this$state.showLabelMinWidth,
        showToolMenu = _this$state.showToolMenu,
        showToolMenuMinWidth = _this$state.showToolMenuMinWidth;
    var didShowLabel = showLabelMinWidth === -1 && !prevState.showLabel && showLabel;
    var didShowToolMenu = showToolMenuMinWidth === -1 && !prevState.showToolMenu && showToolMenu;
    var didHideLabel = showToolMenuMinWidth === -1 && prevState.showLabel && !showLabel;

    if (didShowLabel || didShowToolMenu || didHideLabel) {
      this.handleCustomResize(window.innerWidth);
    }
  }

  componentWillUnmount() {
    if (this.io) {
      this.io.disconnect();
      this.io = null;
    }

    if (this.tickAnimFrameId) {
      window.cancelAnimationFrame(this.tickAnimFrameId);
      this.tickAnimFrameId = null;
    }
  }

  handleFrame() {
    var winWidth = window.innerWidth;

    if (winWidth !== this.state.winWidth) {
      this.handleCustomResize(winWidth);
    }
  }

  handleCustomResize(winWidth) {
    if (this.loginStatusElement) {
      var showToolMenu = this.state.showToolMenu;
      var mostRightRect = showToolMenu ? this.loginStatusElement.getBoundingClientRect() : this.searchElement.getBoundingClientRect();
      this.setState(prevState => getNextState(prevState, mostRightRect.left + mostRightRect.width, winWidth));
    }
  }

  render() {
    var _this$props = this.props,
        createMenuIsOpen = _this$props.createMenuIsOpen,
        onCreateButtonClick = _this$props.onCreateButtonClick,
        onSearchClose = _this$props.onSearchClose,
        onSearchOpen = _this$props.onSearchOpen,
        onSwitchTool = _this$props.onSwitchTool,
        onToggleMenu = _this$props.onToggleMenu,
        onUserLogout = _this$props.onUserLogout,
        router = _this$props.router,
        documentTypes = _this$props.documentTypes,
        searchIsOpen = _this$props.searchIsOpen,
        tools = _this$props.tools;
    var _this$state2 = this.state,
        showLabel = _this$state2.showLabel,
        showToolMenu = _this$state2.showToolMenu;
    return /*#__PURE__*/_react.default.createElement(_Navbar.default, {
      createMenuIsOpen: createMenuIsOpen,
      onCreateButtonClick: onCreateButtonClick,
      onSearchClose: onSearchClose,
      onSearchOpen: onSearchOpen,
      onSetLoginStatusElement: this.handleSetLoginStatusElement,
      onSetSearchElement: this.handleSetSearchElement,
      onSwitchTool: onSwitchTool,
      onToggleMenu: onToggleMenu,
      onUserLogout: onUserLogout,
      router: router,
      documentTypes: documentTypes,
      searchIsOpen: searchIsOpen,
      showLabel: showLabel,
      showToolMenu: showToolMenu,
      tools: tools
    });
  }

}

var _default = NavbarContainer;
exports.default = _default;