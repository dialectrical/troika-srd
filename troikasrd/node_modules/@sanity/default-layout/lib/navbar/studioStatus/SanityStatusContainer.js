"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

var _reactPropsStream = require("react-props-stream");

var _versionChecker = _interopRequireDefault(require("part:@sanity/base/version-checker"));

var _sanityVersions = _interopRequireDefault(require("sanity:versions"));

var _SanityStatus = _interopRequireDefault(require("../studioStatus/SanityStatus"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var levels = ['low', 'medium', 'high'];

var getHighestLevel = outdated => outdated.reduce((acc, pkg) => Math.max(acc, levels.indexOf(pkg.severity)), 0);

class SanityStatusContainer extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      showDialog: false
    });

    _defineProperty(this, "handleHideDialog", () => {
      this.setState({
        showDialog: false
      });
    });

    _defineProperty(this, "handleShowDialog", () => {
      this.setState({
        showDialog: true
      });
    });
  }

  render() {
    if (!this.props.showStatus) {
      return null;
    }

    var _this$props$versionRe = this.props.versionReply,
        outdated = _this$props$versionRe.outdated,
        isSupported = _this$props$versionRe.isSupported,
        isUpToDate = _this$props$versionRe.isUpToDate;
    var level = levels[getHighestLevel(outdated || [])];
    return /*#__PURE__*/_react.default.createElement(_SanityStatus.default, {
      isSupported: isSupported,
      isUpToDate: isUpToDate,
      level: level,
      showDialog: this.state.showDialog,
      onHideDialog: this.handleHideDialog,
      onShowDialog: this.handleShowDialog,
      outdated: outdated,
      versions: _sanityVersions.default
    });
  }

}

var _default = (0, _reactPropsStream.withPropsStream)(_user.default.me.pipe((0, _operators.flatMap)(user => {
  if (user && user.role === 'administrator') {
    return _versionChecker.default.checkVersions().then(_ref => {
      var result = _ref.result;
      return {
        versionReply: result,
        showStatus: true
      };
    });
  }

  return {
    showStatus: false
  };
}), (0, _operators.catchError)(err => (0, _rxjs.of)({
  error: err,
  showStatus: false
}))), SanityStatusContainer);

exports.default = _default;