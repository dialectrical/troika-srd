"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _components = require("@sanity/base/components");

var _state = _interopRequireDefault(require("part:@sanity/components/buttons/state"));

var _tooltip = require("part:@sanity/components/tooltip");

var _react = _interopRequireDefault(require("react"));

var _ToolMenu = _interopRequireDefault(require("./ToolMenu.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TOUCH_DEVICE = ('ontouchstart' in document.documentElement);

function ToolMenu(props) {
  var activeToolName = props.activeToolName,
      direction = props.direction,
      isVisible = props.isVisible,
      onSwitchTool = props.onSwitchTool,
      router = props.router,
      tools = props.tools,
      showLabelProp = props.showLabel,
      tone = props.tone;
  var isVertical = direction === 'horizontal';
  var showLabel = TOUCH_DEVICE && !isVertical || showLabelProp;
  return /*#__PURE__*/_react.default.createElement("ul", {
    className: _ToolMenu.default.root,
    "data-direction": direction,
    "data-tone": "navbar"
  }, tools.map(tool => {
    var title = tool.title || tool.name || undefined;

    var tooltipContent = /*#__PURE__*/_react.default.createElement("span", {
      className: _ToolMenu.default.tooltipContent
    }, title);

    return /*#__PURE__*/_react.default.createElement("li", {
      key: tool.name
    }, /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
      zOffset: "navbarPopover"
    }, /*#__PURE__*/_react.default.createElement(_tooltip.Tooltip, {
      content: tooltipContent,
      disabled: showLabel,
      placement: "bottom",
      title: showLabel ? '' : title,
      tone: tone
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_state.default, {
      icon: tool.icon,
      key: tool.name,
      kind: "simple",
      onClick: onSwitchTool,
      padding: direction === 'horizontal' ? 'small' : 'medium',
      selected: activeToolName === tool.name,
      state: _objectSpread(_objectSpread({}, router.state), {}, {
        tool: tool.name,
        [tool.name]: undefined
      }),
      title: title,
      tabIndex: isVisible ? 0 : -1,
      tone: tone
    }, tool.title)))));
  }));
}

var _default = ToolMenu;
exports.default = _default;