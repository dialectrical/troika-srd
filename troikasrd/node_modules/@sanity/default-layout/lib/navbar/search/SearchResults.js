"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _react = _interopRequireDefault(require("react"));

var _SearchResults = _interopRequireDefault(require("./SearchResults.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SearchResults extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "element", null);

    _defineProperty(this, "setElement", ref => {
      this.element = ref;
    });
  }

  // NOTE: Disabled because `{block: 'nearest'}` is not supported by all browsers
  // // eslint-disable-next-line class-methods-use-this
  // componentDidUpdate(prevProps: Props) {
  //   const {isBleeding} = this.props
  //   // Scroll active element into view (when user uses arrow keys)
  //   if (!isBleeding && this.element && prevProps.activeIndex !== this.props.activeIndex) {
  //     const activeItemElement = this.element.childNodes[this.props.activeIndex]
  //     if (activeItemElement) {
  //       // Use try/catch to avoid crashing unsupported browsers
  //       // eslint-disable-next-line max-depth
  //       try {
  //         activeItemElement.scrollIntoView({block: 'nearest'})
  //       } catch (__) {
  //         // ignore
  //       }
  //     }
  //   }
  // }
  render() {
    var _this$props = this.props,
        activeIndex = _this$props.activeIndex,
        error = _this$props.error,
        isLoading = _this$props.isLoading,
        items = _this$props.items,
        query = _this$props.query,
        renderItem = _this$props.renderItem;
    var noResults = !isLoading && query.length > 0 && items.length === 0;

    if (error) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(_SearchResults.default.root, " ").concat(_SearchResults.default.noResults)
      }, error.message);
    }

    if (noResults) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(_SearchResults.default.root, " ").concat(_SearchResults.default.noResults)
      }, /*#__PURE__*/_react.default.createElement("div", null, "Could not find", ' ', /*#__PURE__*/_react.default.createElement("strong", null, "\u201C", query, "\u201D")));
    }

    if (isLoading) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(_SearchResults.default.root, " ").concat(_SearchResults.default.isLoading)
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        center: true,
        message: 'Searchingâ€¦'
      }));
    }

    return /*#__PURE__*/_react.default.createElement("ul", {
      className: _SearchResults.default.root,
      ref: this.setElement
    }, items.map((item, index) => {
      return /*#__PURE__*/_react.default.createElement("li", {
        key: item.hit._id,
        className: _SearchResults.default.listItem
      }, renderItem(item, index, activeIndex === index ? _SearchResults.default.activeItem : _SearchResults.default.item));
    }));
  }

}

_defineProperty(SearchResults, "defaultProps", {
  error: null
});

var _default = SearchResults;
exports.default = _default;