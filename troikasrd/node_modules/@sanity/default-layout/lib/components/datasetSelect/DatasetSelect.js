"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _router = require("part:@sanity/base/router");

var _operators = require("rxjs/operators");

var _urlState = require("../../datastores/urlState");

var _spaces = require("../../util/spaces");

var _DatasetSelect = _interopRequireDefault(require("./DatasetSelect.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var currentSpace$ = _urlState.state.pipe((0, _operators.map)(event => event.state && event.state.space), (0, _operators.map)(spaceName => _spaces.CONFIGURED_SPACES.find(sp => sp.name === spaceName)));

class DatasetSelect extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "currentSpaceSubscription", void 0);

    _defineProperty(this, "state", {
      menuOpen: false,
      currentSpace: null
    });

    _defineProperty(this, "handleClickOutside", () => {
      if (this.state.menuOpen) {
        this.setState({
          menuOpen: false
        });
      }
    });

    _defineProperty(this, "handleMenuToggle", () => {
      this.setState(prev => ({
        menuOpen: !prev.menuOpen
      }));
    });

    _defineProperty(this, "handleChange", event => {
      this.props.router.navigate({
        space: event.target.value
      });
      this.setState({
        menuOpen: false
      }, () => {
        window.location.reload();
      });
    });
  }

  componentDidMount() {
    this.currentSpaceSubscription = currentSpace$.subscribe(space => {
      this.setState({
        currentSpace: space
      });
    });
  }

  componentWillUnmount() {
    this.currentSpaceSubscription.unsubscribe();
  }

  render() {
    var _this$props = this.props,
        isVisible = _this$props.isVisible,
        tone = _this$props.tone;
    var currentSpace = this.state.currentSpace;
    var tabIndex = isVisible ? 0 : -1;
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-hidden": !isVisible,
      className: _DatasetSelect.default.root,
      "data-tone": tone
    }, /*#__PURE__*/_react.default.createElement("select", {
      onChange: this.handleChange,
      tabIndex: tabIndex,
      value: currentSpace && currentSpace.name || undefined
    }, _spaces.CONFIGURED_SPACES.map(space => /*#__PURE__*/_react.default.createElement("option", {
      key: space.name,
      value: space.name
    }, space.title))), /*#__PURE__*/_react.default.createElement("div", {
      className: _DatasetSelect.default.iconContainer
    }, /*#__PURE__*/_react.default.createElement(_chevronDownIcon.default, null)));
  }

}

var _default = (0, _router.withRouterHOC)((0, _reactClickOutside.default)(DatasetSelect));

exports.default = _default;