"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ui = require("@sanity/ui");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _appLoadingScreen = _interopRequireDefault(require("part:@sanity/base/app-loading-screen"));

var _router = require("part:@sanity/base/router");

var _absolutes = _interopRequireDefault(require("all:part:@sanity/base/absolutes"));

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

var _components = require("@sanity/base/components");

var _Sidecar = _interopRequireDefault(require("./addons/Sidecar"));

var _RenderTool = _interopRequireDefault(require("./main/RenderTool"));

var _ActionModal = _interopRequireDefault(require("./actionModal/ActionModal"));

var _NavbarContainer = _interopRequireDefault(require("./navbar/NavbarContainer"));

var _SchemaErrorReporter = require("./schemaErrors/SchemaErrorReporter");

var _sideMenu = require("./sideMenu");

var _getNewDocumentModalActions = _interopRequireDefault(require("./util/getNewDocumentModalActions"));

var _DefaultLayout = _interopRequireDefault(require("./DefaultLayout.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DefaultLayout extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      createMenuIsOpen: false,
      menuIsOpen: false,
      showLoadingScreen: true,
      searchIsOpen: false,
      loaded: false
    });

    _defineProperty(this, "userSubscription", null);

    _defineProperty(this, "_loadingScreenElement", null);

    _defineProperty(this, "handleClickCapture", event => {
      // Do not handle click if the event is not within DefaultLayout (portals)
      var rootTarget = event.target.closest(".".concat(_DefaultLayout.default.root));
      if (!rootTarget) return;

      if (this.state.menuIsOpen) {
        // Close SideMenu if the user clicks outside
        var menuTarget = event.target.closest(".".concat(_DefaultLayout.default.sideMenuContainer));

        if (!menuTarget) {
          event.preventDefault();
          event.stopPropagation();
          this.handleToggleMenu();
        }
      }
    });

    _defineProperty(this, "handleAnimationEnd", () => {
      this.setState({
        showLoadingScreen: false
      });
    });

    _defineProperty(this, "handleCreateButtonClick", () => {
      this.setState(prevState => ({
        createMenuIsOpen: !prevState.createMenuIsOpen
      }));
    });

    _defineProperty(this, "handleActionModalClose", () => {
      this.setState({
        createMenuIsOpen: false
      });
    });

    _defineProperty(this, "handleToggleMenu", () => {
      this.setState(prevState => ({
        menuIsOpen: !prevState.menuIsOpen
      }));
    });

    _defineProperty(this, "handleSwitchTool", () => {
      this.setState({
        menuIsOpen: false
      });
    });

    _defineProperty(this, "handleSearchOpen", () => {
      this.setState({
        searchIsOpen: true
      });
    });

    _defineProperty(this, "handleSearchClose", () => {
      this.setState({
        searchIsOpen: false
      });
    });

    _defineProperty(this, "setLoadingScreenElement", element => {
      this._loadingScreenElement = element;
    });

    _defineProperty(this, "renderContent", () => {
      var _router$state;

      var _this$props = this.props,
          tools = _this$props.tools,
          router = _this$props.router;
      var _this$state = this.state,
          createMenuIsOpen = _this$state.createMenuIsOpen,
          menuIsOpen = _this$state.menuIsOpen,
          searchIsOpen = _this$state.searchIsOpen;
      var isOverlayVisible = menuIsOpen || searchIsOpen;
      var tool = ((_router$state = router.state) === null || _router$state === void 0 ? void 0 : _router$state.tool) || '';
      var documentTypes = (0, _getNewDocumentModalActions.default)().map(action => action.schemaType);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(_DefaultLayout.default.root, isOverlayVisible && _DefaultLayout.default.isOverlayVisible),
        onClickCapture: this.handleClickCapture
      }, this.state.showLoadingScreen && /*#__PURE__*/_react.default.createElement(_ui.Layer, {
        className: this.state.loaded || document.visibilityState == 'hidden' ? _DefaultLayout.default.loadingScreenLoaded : _DefaultLayout.default.loadingScreen,
        zOffset: 600000,
        ref: this.setLoadingScreenElement
      }, /*#__PURE__*/_react.default.createElement(_appLoadingScreen.default, {
        text: "Restoring Sanity"
      })), /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
        zOffset: "navbar"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _DefaultLayout.default.navbar
      }, /*#__PURE__*/_react.default.createElement(_NavbarContainer.default, {
        tools: tools,
        createMenuIsOpen: createMenuIsOpen,
        onCreateButtonClick: this.handleCreateButtonClick,
        onToggleMenu: this.handleToggleMenu,
        onSwitchTool: this.handleSwitchTool,
        router: router,
        documentTypes: documentTypes,
        searchIsOpen: searchIsOpen
        /* eslint-disable-next-line react/jsx-handler-names */
        ,
        onUserLogout: _user.default.actions.logout,
        onSearchOpen: this.handleSearchOpen,
        onSearchClose: this.handleSearchClose
      }))), /*#__PURE__*/_react.default.createElement("div", {
        className: _DefaultLayout.default.sideMenuContainer
      }, /*#__PURE__*/_react.default.createElement(_sideMenu.SideMenu, {
        activeToolName: tool,
        isOpen: menuIsOpen,
        onClose: this.handleToggleMenu
        /* eslint-disable-next-line react/jsx-handler-names */
        ,
        onSignOut: _user.default.actions.logout,
        onSwitchTool: this.handleSwitchTool,
        router: router,
        tools: this.props.tools,
        user: this.state.user
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: _DefaultLayout.default.mainArea
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _DefaultLayout.default.toolContainer
      }, /*#__PURE__*/_react.default.createElement(_router.RouteScope, {
        scope: tool
      }, /*#__PURE__*/_react.default.createElement(_RenderTool.default, {
        tool: tool
      }))), /*#__PURE__*/_react.default.createElement("div", {
        className: _DefaultLayout.default.sidecarContainer
      }, /*#__PURE__*/_react.default.createElement(_Sidecar.default, null))), createMenuIsOpen && /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
        zOffset: "navbar"
      }, /*#__PURE__*/_react.default.createElement(_ActionModal.default, {
        onClose: this.handleActionModalClose,
        actions: (0, _getNewDocumentModalActions.default)()
      })), _absolutes.default.map((Abs, i) => /*#__PURE__*/_react.default.createElement(Abs, {
        key: String(i)
      })));
    });
  }

  // eslint-disable-next-line camelcase
  UNSAFE_componentWillMount() {
    this.userSubscription = _user.default.me.subscribe(user => this.setState({
      user
    }));
  }

  componentDidMount() {
    if (this._loadingScreenElement && this.state.showLoadingScreen) {
      this._loadingScreenElement.addEventListener('animationend', this.handleAnimationEnd, false);
    }
  }

  componentWillUnmount() {
    this.userSubscription.unsubscribe();

    if (this._loadingScreenElement) {
      this._loadingScreenElement.removeEventListener('animationend', this.handleAnimationEnd, false);
    }
  }

  componentDidUpdate() {
    if (!this.state.loaded) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        loaded: true
      });
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_SchemaErrorReporter.SchemaErrorReporter, null, this.renderContent);
  }

}

var _default = (0, _router.withRouterHOC)(DefaultLayout);

exports.default = _default;