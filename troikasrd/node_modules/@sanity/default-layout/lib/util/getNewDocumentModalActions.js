"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getNewDocumentModalActions;

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _newDocumentStructure = _interopRequireDefault(require("part:@sanity/base/new-document-structure?"));

var _initialValueTemplates = require("@sanity/base/initial-value-templates");

var _structureBuilder = _interopRequireDefault(require("@sanity/base/structure-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getNewDocumentModalActions() {
  var structure = _newDocumentStructure.default;

  if (structure && !Array.isArray(structure)) {
    // eslint-disable-next-line no-console
    console.error("Invalid \"new document\" configuration: \"part:@sanity/base/new-document-structure\" should return an array of items. Falling back to default structure.");
    structure = _structureBuilder.default.defaultInitialValueTemplateItems();
  } else if (structure) {
    try {
      validateNewDocumentStructure(structure);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error("Invalid \"new document\" configuration: ".concat(err.message, ". Falling back to default structure."));
      structure = _structureBuilder.default.defaultInitialValueTemplateItems();
    }
  } else {
    // No structure defined, use default
    structure = _structureBuilder.default.defaultInitialValueTemplateItems();
  }

  return createModalActions(structure);
}

function createModalActions(structure) {
  return structure.map(createModalAction).filter(canCreateTemplateItem).filter(hasRequiredParameters);
}

function createModalAction(templateItem) {
  // Make sure we're working with serialized definitions
  var item = templateItem;

  if (item && typeof item.serialize === 'function') {
    item = item.serialize();
  } // We currently only allow initial value template items in the "new document" dialog


  if (item.type !== 'initialValueTemplateItem') {
    throw new Error('Only initial value template items are currently allowed in the new document structure');
  } // Make sure the template actually exists


  var tpl = (0, _initialValueTemplates.getTemplateById)(item.templateId);

  if (!tpl) {
    throw new Error("Template \"".concat(item.templateId, "\" not declared"));
  } // Build up an item suited for the "action modal" dialog


  var type = _schema.default.get(tpl.schemaType);

  var title = item.title || tpl.title;
  var description = item.description || tpl.description;
  return _objectSpread(_objectSpread({}, tpl), {}, {
    title,
    description,
    // Don't show the type name as subtitle if it's the same as the template name
    subtitle: type.title === title ? undefined : type.title,
    key: item.id,
    // Prioritize icon from initial value template item
    icon: item.icon || tpl.icon || type.icon,
    template: tpl,
    params: {
      template: item.templateId,
      type: tpl.schemaType
    },
    templateParams: item.parameters
  });
} // Don't include templates for schema types we cannot actually create


function canCreateTemplateItem(item) {
  var _item$params = item.params,
      template = _item$params.template,
      type = _item$params.type;
  var canCreate = (0, _documentActionUtils.isActionEnabled)(_schema.default.get(type), 'create');

  if (!canCreate) {
    // eslint-disable-next-line no-console
    console.error("Template with ID \"".concat(template, "\" has schema type \"").concat(type, "\", where the \"create\" action is disabled and will not be included in the \"new document\"-dialog."));
  }

  return canCreate;
} // Don't include templates that have defined parameters but no parameters are provided for the template item


function hasRequiredParameters(item) {
  var template = item.template,
      templateParams = item.templateParams;
  var hasMissingParams = !templateParams && template.parameters && template.parameters.length > 0;

  if (hasMissingParams) {
    // eslint-disable-next-line no-console
    console.error("Template with ID \"".concat(template.id, "\" requires a set of parameters, but none were given. Skipping."));
  }

  return !hasMissingParams;
}

function validateNewDocumentStructure(structureItems) {
  var items = structureItems.map(item => item && typeof item.serialize === 'function' ? item.serialize() : item);
  var idMap = new Map();
  items.forEach((templateItem, i) => {
    // Make sure we're working with serialized definitions
    var item = templateItem;

    if (item && typeof item.serialize === 'function') {
      item = item.serialize();
    }

    if (idMap.has(item.id)) {
      var dupeIndex = idMap.get(item.id);
      var dupe = "".concat(quote(items[dupeIndex].title), " at index ").concat(dupeIndex);
      throw new Error("Template item \"".concat(item.title, "\" at index ").concat(i, " has the same ID (\"").concat(item.id, "\") as template ").concat(dupe));
    }

    idMap.set(item.id, i);
  });
}

function quote(str) {
  return str && str.length > 0 ? "\"".concat(str, "\"") : str;
}