"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _loginWrapper = _interopRequireDefault(require("part:@sanity/base/login-wrapper?"));

var _router = require("part:@sanity/base/router");

var _appLoadingScreen = _interopRequireDefault(require("part:@sanity/base/app-loading-screen"));

var urlStateStore = _interopRequireWildcard(require("./datastores/urlState"));

var _getOrderedTools = _interopRequireDefault(require("./util/getOrderedTools"));

var _router2 = _interopRequireWildcard(require("./router"));

var _DefaultLayout = _interopRequireDefault(require("./DefaultLayout"));

var _NotFound = _interopRequireDefault(require("./main/NotFound"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var handleNavigate = urlStateStore.navigate;

class DefaultLayoutRoot extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {});

    _defineProperty(this, "urlStateSubscription", null);
  }

  // eslint-disable-next-line camelcase
  UNSAFE_componentWillMount() {
    (0, _router2.maybeRedirectToBase)();
    this.urlStateSubscription = urlStateStore.state.subscribe({
      next: event => this.setState({
        urlState: event.state,
        isNotFound: event.isNotFound,
        intent: event.intent
      })
    });
  }

  componentWillUnmount() {
    this.urlStateSubscription.unsubscribe();
  }

  render() {
    var _this$state = this.state,
        intent = _this$state.intent,
        urlState = _this$state.urlState,
        isNotFound = _this$state.isNotFound;
    var tools = (0, _getOrderedTools.default)();
    var content = isNotFound ? /*#__PURE__*/_react.default.createElement(_NotFound.default, null, intent && /*#__PURE__*/_react.default.createElement("div", null, "No tool can handle the intent: ", /*#__PURE__*/_react.default.createElement("strong", null, intent.name), " with parameters", ' ', /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify(intent.params)))) : /*#__PURE__*/_react.default.createElement(_DefaultLayout.default, {
      tools: tools
    });

    var router = /*#__PURE__*/_react.default.createElement(_router.RouterProvider, {
      router: _router2.default,
      state: urlState,
      onNavigate: handleNavigate
    }, content);

    return _loginWrapper.default ? /*#__PURE__*/_react.default.createElement(_loginWrapper.default, {
      LoadingScreen: /*#__PURE__*/_react.default.createElement(_appLoadingScreen.default, {
        text: "Logging in"
      })
    }, router) : router;
  }

}

var _default = DefaultLayoutRoot;
exports.default = _default;