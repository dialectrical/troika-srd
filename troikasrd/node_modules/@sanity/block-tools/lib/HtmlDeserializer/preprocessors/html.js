"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = require("./index");

// Remove this cruft from the document
var unwantedWordDocumentPaths = ['/html/text()', '/html/head/text()', '/html/body/text()', '/html/body/ul/text()', '/html/body/ol/text()', '//comment()', '//style', '//xml', '//script', '//meta', '//link'];

var _default = (html, doc) => {
  // Make sure text directly on the body is wrapped in spans.
  // This mimics what the browser does before putting html on the clipboard,
  // when used in a script context with JSDOM
  var bodyTextNodes = doc.evaluate('/html/body/text()', doc, null, _index._XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

  for (var i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {
    var node = bodyTextNodes.snapshotItem(i);
    var text = node.textContent;

    if (text.replace(/[^\S\n]+$/g, '')) {
      var newNode = doc.createElement('span');
      newNode.appendChild(doc.createTextNode(text));
      node.parentNode.replaceChild(newNode, node);
    } else {
      node.parentNode.removeChild(node);
    }
  }

  var unwantedNodes = doc.evaluate(unwantedWordDocumentPaths.join('|'), doc, null, _index._XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

  for (var _i = unwantedNodes.snapshotLength - 1; _i >= 0; _i--) {
    var unwanted = unwantedNodes.snapshotItem(_i);
    unwanted.parentNode.removeChild(unwanted);
  }

  return doc;
};

exports.default = _default;