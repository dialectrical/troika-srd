"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = require("./index");

function isWordHtml(html) {
  return /(class="?Mso|style=(?:"|')[^"]*?\bmso-|w:WordDocument|<o:\w+>|<\/font>)/.test(html);
}

var _default = (html, doc) => {
  if (!isWordHtml(html)) {
    return doc;
  } // xPaths for elements that will be removed from the document


  var unwantedPaths = ['//o:p', "//span[@style='mso-list:Ignore']", "//span[@style='mso-list: Ignore']"]; // xPaths for elements that needs to be remapped into other tags

  var mappedPaths = ["//p[@class='MsoTocHeading']", "//p[@class='MsoTitle']", "//p[@class='MsoToaHeading']", "//p[@class='MsoSubtitle']", "//span[@class='MsoSubtleEmphasis']", "//span[@class='MsoIntenseEmphasis']"]; // Which HTML element(s) to map the elements matching mappedPaths into

  var elementMap = {
    MsoTocHeading: ['h3'],
    MsoTitle: ['h1'],
    MsoToaHeading: ['h2'],
    MsoSubtitle: ['h5'],
    MsoSubtleEmphasis: ['span', 'em'],
    MsoIntenseEmphasis: ['span', 'em', 'strong'] // Remove cruft

  };
  var unwantedNodes = doc.evaluate(unwantedPaths.join('|'), doc, prefix => {
    if (prefix === 'o') {
      return 'urn:schemas-microsoft-com:office:office';
    }

    return null;
  }, _index._XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

  for (var i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {
    var unwanted = unwantedNodes.snapshotItem(i);
    unwanted.parentNode.removeChild(unwanted);
  } // Transform mapped elements into what they should be mapped to


  var mappedElements = doc.evaluate(mappedPaths.join('|'), doc, null, _index._XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

  var _loop = function _loop(_i) {
    var mappedElm = mappedElements.snapshotItem(_i);
    var tags = elementMap[mappedElm.className];
    var text = new Text(mappedElm.textContent);
    var parentElement = document.createElement(tags[0]);
    var parent = parentElement;
    var child = parentElement;
    tags.slice(1).forEach(tag => {
      child = document.createElement(tag);
      parent.appendChild(child);
      parent = child;
    });
    child.appendChild(text);
    mappedElm.parentNode.replaceChild(parentElement, mappedElm);
  };

  for (var _i = mappedElements.snapshotLength - 1; _i >= 0; _i--) {
    _loop(_i);
  }

  return doc;
};

exports.default = _default;