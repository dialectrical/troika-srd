"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRuleOptions = createRuleOptions;
exports.tagName = tagName;
exports.preprocess = preprocess;
exports.defaultParseHtml = defaultParseHtml;
exports.flattenNestedBlocks = flattenNestedBlocks;
exports.trimWhitespace = trimWhitespace;
exports.ensureRootIsBlocks = ensureRootIsBlocks;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _constants = require("../constants");

var _blockContentTypeFeatures = _interopRequireDefault(require("../util/blockContentTypeFeatures"));

var _resolveJsType = _interopRequireDefault(require("../util/resolveJsType"));

var _preprocessors = _interopRequireDefault(require("./preprocessors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * A utility function to create the options needed for the various rule sets,
 * based on the structure of the blockContentType
 *
 * @param {Object} The compiled schema type for the block content
 * @return {Object}
 */
function createRuleOptions(blockContentType) {
  var features = (0, _blockContentTypeFeatures.default)(blockContentType);

  var mapItem = item => item.value;

  var enabledBlockStyles = features.styles.map(mapItem);
  var enabledSpanDecorators = features.decorators.map(mapItem);
  var enabledBlockAnnotations = features.annotations.map(mapItem);
  return {
    enabledBlockStyles,
    enabledSpanDecorators,
    enabledBlockAnnotations
  };
}
/**
 * A utility function that always return a lowerCase version of the element.tagName
 *
 * @param {Object} DOMParser element
 * @return {String} Lowercase tagName for that element
 */


function tagName(el) {
  if (!el || el.nodeType !== 1) {
    return undefined;
  }

  return el.tagName.toLowerCase();
} // TODO: make this plugin-style


function preprocess(html, parseHtml) {
  var compactHtml = html.trim() // Trim whitespace
  .replace(/\s\s+/g, ' ') // Remove multiple whitespace
  .replace(/[\r\n]/g, ' '); // Remove newlines / carriage returns

  var doc = parseHtml(compactHtml);

  _preprocessors.default.forEach(processor => {
    processor(html, doc);
  });

  return doc;
}
/**
 * A default `parseHtml` function that returns the html using `DOMParser`.
 *
 * @param {String} html
 * @return {Object}
 */


function defaultParseHtml() {
  if ((0, _resolveJsType.default)(DOMParser) === 'undefined') {
    throw new Error('The native `DOMParser` global which the `Html` deserializer uses by ' + 'default is not present in this environment. ' + 'You must supply the `options.parseHtml` function instead.');
  }

  return html => {
    return new DOMParser().parseFromString(html, 'text/html');
  };
}

function flattenNestedBlocks(blocks) {
  var depth = 0;
  var flattened = [];

  var traverse = _nodes => {
    var toRemove = [];

    _nodes.forEach((node, i) => {
      if (depth === 0) {
        flattened.push(node);
      }

      if (node._type === 'block') {
        if (depth > 0) {
          toRemove.push(node);
          flattened.push(node);
        }

        depth++;
        traverse(node.children);
      }

      if (node._type === '__block') {
        toRemove.push(node);
        flattened.push(node.block);
      }
    });

    toRemove.forEach(node => {
      _nodes.splice(_nodes.indexOf(node), 1);
    });
    depth--;
  };

  traverse(blocks);
  return flattened;
}

function nextSpan(block, child, index) {
  var next = block.children[index + 1];
  return next && next._type === 'span' ? next : null;
}

function prevSpan(block, child, index) {
  var prev = block.children[index - 1];
  return prev && prev._type === 'span' ? prev : null;
}

function isWhiteSpaceChar(text) {
  return ['\xa0', ' '].includes(text);
}

function trimWhitespace(blocks) {
  blocks.forEach(block => {
    if (!block.children) {
      return;
    } // eslint-disable-next-line complexity


    block.children.forEach((child, index) => {
      if (child._type !== 'span') {
        return;
      }

      var nextChild = nextSpan(block, child, index);
      var prevChild = prevSpan(block, child, index);

      if (index === 0) {
        child.text = child.text.replace(/^[^\S\n]+/g, '');
      }

      if (index === block.children.length - 1) {
        child.text = child.text.replace(/[^\S\n]+$/g, '');
      }

      if (/\s/.test(child.text.substring(child.text.length - 1)) && nextChild && /\s/.test(nextChild.text.substring(0, 1))) {
        child.text = child.text.replace(/[^\S\n]+$/g, '');
      }

      if (/\s/.test(child.text.substring(0, 1)) && prevChild && /\s/.test(prevChild.text.substring(prevChild.text.length - 1))) {
        child.text = child.text.replace(/^[^\S\n]+/g, '');
      }

      if (!child.text) {
        block.children.splice(index, 1);
      }

      if (prevChild && (0, _isEqual2.default)(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text)) {
        prevChild.text += ' ';
        block.children.splice(index, 1);
      } else if (nextChild && (0, _isEqual2.default)(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text)) {
        nextChild.text = " ".concat(nextChild.text);
        block.children.splice(index, 1);
      }
    });
  });
  return blocks;
}

function ensureRootIsBlocks(blocks) {
  return blocks.reduce((memo, node, i, original) => {
    if (node._type === 'block') {
      memo.push(node);
      return memo;
    }

    if (node._type === '__block') {
      memo.push(node.block);
      return memo;
    }

    if (i > 0 && original[i - 1]._type !== 'block' && memo[memo.length - 1]._type === 'block') {
      var _block = memo[memo.length - 1];

      _block.children.push(node);

      return memo;
    }

    var block = _objectSpread(_objectSpread({}, _constants.DEFAULT_BLOCK), {}, {
      children: [node]
    });

    memo.push(block);
    return memo;
  }, []);
}