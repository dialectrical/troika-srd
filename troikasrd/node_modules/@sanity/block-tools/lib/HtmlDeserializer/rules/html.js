"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveListItem = resolveListItem;
exports.default = createHTMLRules;

var _randomKey = _interopRequireDefault(require("../../util/randomKey"));

var _constants = require("../../constants");

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function resolveListItem(listNodeTagName) {
  var listStyle;

  switch (listNodeTagName) {
    case 'ul':
      listStyle = 'bullet';
      break;

    case 'ol':
      listStyle = 'number';
      break;

    default:
      listStyle = 'bullet';
  }

  return listStyle;
}

function createHTMLRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [// Text nodes
  {
    // eslint-disable-next-line complexity
    deserialize(el) {
      var isValidWhiteSpace = el.nodeType === 3 && el.textContent.replace(/[\r\n]/g, ' ').replace(/\s\s+/g, ' ') === ' ' && el.nextSibling && el.nextSibling.nodeType !== 3 && el.previousSibling && el.previousSibling.nodeType !== 3;
      var isValidText = (isValidWhiteSpace || el.textContent !== ' ') && (0, _helpers.tagName)(el.parentNode) !== 'body';

      if (el.nodeName === '#text' && isValidText) {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_SPAN), {}, {
          marks: [],
          text: el.textContent.replace(/\s\s+/g, ' ')
        });
      }

      return undefined;
    }

  }, // Blockquote element
  {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) !== 'blockquote') {
        return undefined;
      }

      var blocks = _objectSpread(_objectSpread({}, _constants.HTML_BLOCK_TAGS), _constants.HTML_HEADER_TAGS);

      delete blocks.blockquote;
      var children = [];
      el.childNodes.forEach((node, index) => {
        if (node.nodeType === 1 && Object.keys(blocks).includes(node.localName.toLowerCase())) {
          var span = el.ownerDocument.createElement('span');
          span.appendChild(el.ownerDocument.createTextNode('\r'));
          node.childNodes.forEach(cn => {
            span.appendChild(cn.cloneNode(true));
          });

          if (index !== el.childNodes.length) {
            span.appendChild(el.ownerDocument.createTextNode('\r'));
          }

          children.push(span);
        } else {
          children.push(node);
        }
      });
      return {
        _type: 'block',
        style: 'blockquote',
        markDefs: [],
        children: next(children)
      };
    }

  }, // Block elements
  {
    deserialize(el, next) {
      var blocks = _objectSpread(_objectSpread({}, _constants.HTML_BLOCK_TAGS), _constants.HTML_HEADER_TAGS);

      var block = blocks[(0, _helpers.tagName)(el)];

      if (!block) {
        return undefined;
      } // Don't add blocks into list items


      if (el.parentNode && (0, _helpers.tagName)(el) === 'li') {
        return next(el.childNodes);
      } // If style is not supported, return a defaultBlockType


      if (!options.enabledBlockStyles.includes(block.style)) {
        block = _constants.DEFAULT_BLOCK;
      }

      return _objectSpread(_objectSpread({}, block), {}, {
        children: next(el.childNodes)
      });
    }

  }, // Ignore span tags
  {
    deserialize(el, next) {
      var span = _constants.HTML_SPAN_TAGS[(0, _helpers.tagName)(el)];

      if (!span) {
        return undefined;
      }

      return next(el.childNodes);
    }

  }, // Ignore div tags
  {
    deserialize(el, next) {
      var div = (0, _helpers.tagName)(el) === 'div';

      if (!div) {
        return undefined;
      }

      return next(el.childNodes);
    }

  }, // Ignore list containers
  {
    deserialize(el, next) {
      var listContainer = _constants.HTML_LIST_CONTAINER_TAGS[(0, _helpers.tagName)(el)];

      if (!listContainer) {
        return undefined;
      }

      return next(el.childNodes);
    }

  }, // Deal with br's
  {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'br') {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_SPAN), {}, {
          text: '\n'
        });
      }

      return undefined;
    }

  }, // Deal with list items
  {
    deserialize(el, next) {
      var listItem = _constants.HTML_LIST_ITEM_TAGS[(0, _helpers.tagName)(el)];

      if (!listItem || !el.parentNode || !_constants.HTML_LIST_CONTAINER_TAGS[(0, _helpers.tagName)(el.parentNode)]) {
        return undefined;
      }

      listItem.listItem = resolveListItem((0, _helpers.tagName)(el.parentNode));
      return _objectSpread(_objectSpread({}, listItem), {}, {
        children: next(el.childNodes)
      });
    }

  }, // Deal with decorators
  {
    deserialize(el, next) {
      var decorator = _constants.HTML_DECORATOR_TAGS[(0, _helpers.tagName)(el)];

      if (!decorator || !options.enabledSpanDecorators.includes(decorator)) {
        return undefined;
      }

      return {
        _type: '__decorator',
        name: decorator,
        children: next(el.childNodes)
      };
    }

  }, // Special case for hyperlinks, add annotation (if allowed by schema),
  // If not supported just write out the link text and href in plain text.
  {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) != 'a') {
        return undefined;
      }

      var linkEnabled = options.enabledBlockAnnotations.includes('link');
      var href = el.getAttribute('href');

      if (!href) {
        return next(el.childNodes);
      }

      var markDef;

      if (linkEnabled) {
        markDef = {
          _key: (0, _randomKey.default)(12),
          _type: 'link',
          href: href
        };
        return {
          _type: '__annotation',
          markDef: markDef,
          children: next(el.childNodes)
        };
      }

      return el.appendChild(el.ownerDocument.createTextNode(" (".concat(href, ")"))) && next(el.childNodes);
    }

  }];
}