"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createWordRules;

var _constants = require("../../constants");

var _helpers = require("../helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getListItemStyle(el) {
  var style;

  if (style = el.getAttribute('style')) {
    if (!style.match(/lfo\d+/)) {
      return undefined;
    }

    return style.match('lfo1') ? 'bullet' : 'number';
  }

  return undefined;
}

function getListItemLevel(el) {
  var style;

  if (style = el.getAttribute('style')) {
    var levelMatch = style.match(/level\d+/);

    if (!levelMatch) {
      return undefined;
    }

    var level = levelMatch[0].match(/\d/)[0];
    return parseInt(level, 10) || 1;
  }

  return undefined;
}

function isWordListElement(el) {
  if (el.className) {
    return el.className === 'MsoListParagraphCxSpFirst' || el.className === 'MsoListParagraphCxSpMiddle' || el.className === 'MsoListParagraphCxSpLast';
  }

  return undefined;
}

function createWordRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [{
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'p' && isWordListElement(el)) {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_BLOCK), {}, {
          listItem: getListItemStyle(el),
          level: getListItemLevel(el),
          style: _constants.BLOCK_DEFAULT_STYLE,
          children: next(el.childNodes)
        });
      }

      return undefined;
    }

  }];
}