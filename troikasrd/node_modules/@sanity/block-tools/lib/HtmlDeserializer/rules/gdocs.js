"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createGDocsRules;

var _constants = require("../../constants");

var _helpers = require("../helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LIST_CONTAINER_TAGS = Object.keys(_constants.HTML_LIST_CONTAINER_TAGS); // font-style:italic seems like the most important rule for italic / emphasis in their html

function isEmphasis(el) {
  var style = el.getAttribute('style');
  return !!style.match(/font-style:italic/);
} // font-weight:700 seems like the most important rule for bold in their html


function isStrong(el) {
  var style = el.getAttribute('style');
  return !!style.match(/font-weight:700/);
} // Check for attribute given by the gdocs preprocessor


function isGoogleDocs(el) {
  return el.getAttribute('data-is-google-docs');
}

function getListItemStyle(el) {
  if (!LIST_CONTAINER_TAGS.includes((0, _helpers.tagName)(el.parentNode))) {
    return undefined;
  }

  return (0, _helpers.tagName)(el.parentNode) === 'ul' ? 'bullet' : 'number';
}

function getListItemLevel(el) {
  var level = 0;

  if ((0, _helpers.tagName)(el) === 'li') {
    var parentNode = el.parentNode;

    while (parentNode) {
      // eslint-disable-next-line max-depth
      if (LIST_CONTAINER_TAGS.includes((0, _helpers.tagName)(parentNode))) {
        level++;
      }

      parentNode = parentNode.parentNode;
    }
  } else {
    level = 1;
  }

  return level;
}

var blocks = _objectSpread(_objectSpread({}, _constants.HTML_BLOCK_TAGS), _constants.HTML_HEADER_TAGS);

function getBlockStyle(el, enabledBlockStyles) {
  var block = blocks[(0, _helpers.tagName)(el.firstChild)];

  if (!block) {
    return _constants.BLOCK_DEFAULT_STYLE;
  }

  if (!enabledBlockStyles.includes(block.style)) {
    return _constants.BLOCK_DEFAULT_STYLE;
  }

  return block.style;
}

function createGDocsRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [{
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'span' && isGoogleDocs(el)) {
        var span = _objectSpread(_objectSpread({}, _constants.DEFAULT_SPAN), {}, {
          marks: [],
          text: el.innerText
        });

        if (isStrong(el)) {
          span.marks.push('strong');
        }

        if (isEmphasis(el)) {
          span.marks.push('em');
        }

        return span;
      }

      return undefined;
    }

  }, {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'li' && isGoogleDocs(el)) {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_BLOCK), {}, {
          listItem: getListItemStyle(el),
          level: getListItemLevel(el),
          style: getBlockStyle(el, options.enabledBlockStyles),
          children: next(el.firstChild.childNodes)
        });
      }

      return undefined;
    }

  }];
}