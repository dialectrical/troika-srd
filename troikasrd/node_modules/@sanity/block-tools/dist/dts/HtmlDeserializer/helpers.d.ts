/**
 * A utility function to create the options needed for the various rule sets,
 * based on the structure of the blockContentType
 *
 * @param {Object} The compiled schema type for the block content
 * @return {Object}
 */
export declare function createRuleOptions(blockContentType: any): {
    enabledBlockStyles: any;
    enabledSpanDecorators: any;
    enabledBlockAnnotations: any;
};
/**
 * A utility function that always return a lowerCase version of the element.tagName
 *
 * @param {Object} DOMParser element
 * @return {String} Lowercase tagName for that element
 */
export declare function tagName(el: any): any;
export declare function preprocess(html: any, parseHtml: any): any;
/**
 * A default `parseHtml` function that returns the html using `DOMParser`.
 *
 * @param {String} html
 * @return {Object}
 */
export declare function defaultParseHtml(): (html: any) => Document;
export declare function flattenNestedBlocks(blocks: any): any[];
export declare function trimWhitespace(blocks: any): any;
export declare function ensureRootIsBlocks(blocks: any): any;
//# sourceMappingURL=helpers.d.ts.map