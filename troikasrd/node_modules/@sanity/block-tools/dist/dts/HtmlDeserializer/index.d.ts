/**
 * A internal variable to keep track of annotation mark definitions
 *
 */
/**
 * HTML Deserializer
 *
 */
export default class HtmlDeserializer {
    blockContentType: any;
    rules: any[];
    parseHtml: (html: string) => any;
    _markDefs: any[];
    /**
     * Create a new serializer respecting a Sanity block content type's schema
     *
     * @param {Object} options
     *   @property {Object} blockContentType
     *      A compiled version of the block content schema type
     *   @property {Array} rules
     *      Optional rules working on the HTML (will be ruled first)
     *   @property {Function} parseHtml
     *      API compatible model as returned from DOMParser for using server side.
     */
    constructor(blockContentType: any, options?: any);
    /**
     * Deserialize HTML.
     *
     * @param {String} html
     * @return {Array}
     */
    deserialize: (html: any) => any;
    /**
     * Deserialize an array of DOM elements.
     *
     * @param {Array} elements
     * @return {Array}
     */
    deserializeElements: (elements?: any[]) => any[];
    /**
     * Deserialize a DOM element.
     *
     * @param {Object} element
     * @return {Any}
     */
    deserializeElement: (element: any) => any;
    /**
     * Deserialize a `__decorator` type
     * (an internal made up type to process decorators exclusively)
     *
     * @param {Object} decorator
     * @return {Array}
     */
    deserializeDecorator: (decorator: any) => any;
    /**
     * Deserialize a `__annotation` object.
     * (an internal made up type to process annotations exclusively)
     *
     * @param {Object} annotation
     * @return {Array}
     */
    deserializeAnnotation: (annotation: any) => any;
}
//# sourceMappingURL=index.d.ts.map