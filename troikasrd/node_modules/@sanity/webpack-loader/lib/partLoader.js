"use strict";

var path = require('path');

var loaderUtils = require('loader-utils');

var sanityUtil = require('@sanity/util');

var multiImplementationHandler = require('./multiImplementationHandler');

var reduceConfig = sanityUtil.reduceConfig;
var getSanityVersions = sanityUtil.getSanityVersions;
/* eslint-disable no-process-env */

var sanityEnv = process.env.SANITY_INTERNAL_ENV;
var env = typeof sanityEnv === 'undefined' ? process.env.NODE_ENV : sanityEnv;
/* eslint-enable no-process-env */
// eslint-disable-next-line complexity

function sanityPartLoader(input) {
  this.cacheable();
  var buildEnv = sanityEnv;

  if (!buildEnv) {
    buildEnv = this.options.devtool ? env : 'production';
  }

  var qs = this.resourceQuery.substring(this.resourceQuery.indexOf('?'));
  var request = (loaderUtils.parseQuery(qs) || {}).sanityPart;
  var loadAll = request.indexOf('all:') === 0;
  var partName = loadAll ? request.substr(4) : request; // In certain cases (CSS when building statically),
  // a separate compiler instance is triggered

  if (!this._compiler.sanity) {
    return input;
  }

  var basePath = this._compiler.sanity.basePath;

  if (request.indexOf('config:') === 0) {
    var config = JSON.parse(input);
    var indent = buildEnv === 'production' ? 0 : 2;
    var reduced = reduceConfig(config, buildEnv, {
      studioRootPath: basePath
    });
    return "module.exports = ".concat(JSON.stringify(reduced, null, indent), "\n");
  }

  if (request === 'sanity:css-custom-properties') {
    var cssCustomProperties = this._compiler.sanity.cssCustomProperties;

    var _indent = buildEnv === 'production' ? 0 : 2;

    return "module.exports = ".concat(JSON.stringify(cssCustomProperties, null, _indent), "\n");
  }

  if (request === 'sanity:versions') {
    var versions = getSanityVersions(basePath);

    var _indent2 = buildEnv === 'production' ? 0 : 2;

    return "module.exports = ".concat(JSON.stringify(versions, null, _indent2), "\n");
  }

  var parts = this._compiler.sanity.parts;
  var dependencies = parts.plugins.map(plugin => path.join(plugin.path, 'sanity.json'));
  var implementations = (parts.implementations[partName] || []).map(impl => impl.path);
  this.addDependency(path.join(basePath, 'sanity.json'));
  dependencies.forEach(this.addDependency); // The debug role needs to return the whole parts tree

  if (partName === 'sanity:debug') {
    var debug = Object.assign({}, parts, {
      basePath
    });
    return "module.exports = ".concat(JSON.stringify(debug, null, 2), "\n");
  }

  return loadAll ? multiImplementationHandler(partName, implementations) : input;
}

module.exports = sanityPartLoader;