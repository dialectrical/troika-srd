"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withPatchSubscriber;

var _find2 = _interopRequireDefault(require("lodash/find"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isSegmentEqual(segment1, segment2) {
  var segment1Type = typeof segment1;

  if (segment1Type !== typeof segment2) {
    return false;
  }

  if (segment1Type === 'object') {
    return (0, _shallowEquals.default)(segment1, segment2);
  }

  return segment1 === segment2;
}

function startsWith(subjectPath, checkPath) {
  if (subjectPath === checkPath) {
    return true;
  }

  if (!Array.isArray(subjectPath) || !Array.isArray(checkPath)) {
    return false;
  }

  if (subjectPath.length < checkPath.length) {
    return false;
  }

  for (var i = 0, len = checkPath.length; i < len; i++) {
    if (!isSegmentEqual(checkPath[i], subjectPath[i])) {
      return false;
    }
  }

  return true;
}

function isAncestor(path1, path2) {
  return path1.length === 0 || startsWith(path2, path1) && !startsWith(path1, path2);
}

function shouldReset(path, patches) {
  return patches.some(patch => isAncestor(patch.path, path) && (patch.type === 'set' || patch.type === 'unset'));
}

function getValueAtPath(value, path) {
  return path.reduce((result, segment) => {
    if (typeof segment === 'object') {
      return (0, _find2.default)(result, segment);
    }

    return (0, _get2.default)(result, segment);
  }, value);
}

function withPatchSubscriber(ComposedComponent) {
  var _class, _temp;

  return _temp = _class = class SubscribePatch extends _react.default.Component {
    constructor() {
      super(...arguments);

      _defineProperty(this, "_input", void 0);

      _defineProperty(this, "subscribe", subscriber => {
        return this.context.formBuilder.onPatch(_ref => {
          var snapshot = _ref.snapshot,
              patches = _ref.patches;
          var selfPath = this.context.getValuePath();
          var filtered = patches.filter(patch => startsWith(patch.path, selfPath)).map(patch => _objectSpread(_objectSpread({}, patch), {}, {
            path: patch.path.slice(selfPath.length)
          }));
          subscriber({
            shouldReset: shouldReset(selfPath, patches),
            snapshot: getValueAtPath(snapshot, selfPath),
            patches: filtered
          });
        });
      });

      _defineProperty(this, "setInput", input => {
        this._input = input;
      });
    }

    focus() {
      if (this._input && this._input.focus) {
        this._input.focus();
      }
    }

    render() {
      return /*#__PURE__*/_react.default.createElement(ComposedComponent, _extends({
        ref: this.setInput
      }, this.props, {
        subscribe: this.subscribe
      }));
    }

  }, _defineProperty(_class, "displayName", "withPatches(".concat(ComposedComponent.displayName || ComposedComponent.name, ")")), _defineProperty(_class, "contextTypes", {
    getValuePath: _propTypes.default.func,
    formBuilder: _propTypes.default.any
  }), _temp;
}