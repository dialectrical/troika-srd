"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultSource = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _versionedClient = require("../versionedClient");

var _AssetThumb = _interopRequireDefault(require("./AssetThumb"));

var _TableList = _interopRequireDefault(require("./TableList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PER_PAGE = 200;
var ASSET_TYPE_IMAGE = 'sanity.imageAsset';
var ASSET_TYPE_FILE = 'sanity.fileAsset';

var buildQuery = function buildQuery() {
  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PER_PAGE;
  var assetType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ASSET_TYPE_IMAGE;
  return "\n  *[_type == \"".concat(assetType, "\"] | order(_updatedAt desc) [").concat(start, "...").concat(end, "] {\n    _id,\n    _updatedAt,\n    _createdAt,\n    url,\n    originalFilename,\n    mimeType,\n    extension,\n    size,\n    metadata {dimensions}\n  }\n");
};

var STYLES_THUMB_GRID = {
  gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))'
};
var STYLES_LOAD_MORE_BUTTON = {
  borderTop: '1px solid var(--card-border-color)'
};

class DefaultSource extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      assets: [],
      isLastPage: false,
      isLoading: true
    });

    _defineProperty(this, "_elementId", "default-asset-source-".concat((0, _uniqueId2.default)()));

    _defineProperty(this, "pageNo", 0);

    _defineProperty(this, "fetch$", void 0);

    _defineProperty(this, "handleDeleteFinished", id => {
      this.setState(prevState => ({
        assets: prevState.assets.filter(asset => asset._id !== id)
      }));
    });

    _defineProperty(this, "handleItemClick", event => {
      event.preventDefault();
      this.select(event.currentTarget.getAttribute('data-id'));
    });

    _defineProperty(this, "handleItemKeyPress", event => {
      if (event.key === 'Enter') {
        event.preventDefault();
        this.select(event.currentTarget.getAttribute('data-id'));
      }
    });

    _defineProperty(this, "handleClose", () => {
      if (this.props.onClose) {
        this.props.onClose();
      }
    });

    _defineProperty(this, "handleFetchNextPage", () => {
      this.fetchPage(++this.pageNo);
    });
  }

  fetchPage(pageNo) {
    var _this$props$assetType = this.props.assetType,
        assetType = _this$props$assetType === void 0 ? 'image' : _this$props$assetType;
    var start = pageNo * PER_PAGE;
    var end = start + PER_PAGE;
    var isImageAssetType = assetType === 'image';
    var tag = isImageAssetType ? 'asset.image-list' : 'asset.file-list';
    var assetTypeParam = isImageAssetType ? ASSET_TYPE_IMAGE : ASSET_TYPE_FILE;
    this.setState({
      isLoading: true
    });
    this.fetch$ = _versionedClient.versionedClient.observable.fetch(buildQuery(start, end, assetTypeParam), {}, {
      tag
    }).subscribe(result => {
      this.setState(prevState => ({
        isLastPage: result.length < PER_PAGE,
        assets: prevState.assets.concat(result),
        isLoading: false
      }));
    });
  }

  componentDidMount() {
    this.fetchPage(this.pageNo);
  }

  componentWillUnmount() {
    if (this.fetch$) {
      this.fetch$.unsubscribe();
    }
  }

  select(id) {
    var selected = this.state.assets.find(doc => doc._id === id);

    if (selected) {
      this.props.onSelect([{
        kind: 'assetDocumentId',
        value: id
      }]);
    }
  }

  renderThumbView() {
    var selectedAssets = this.props.selectedAssets;
    var _this$state = this.state,
        assets = _this$state.assets,
        isLoading = _this$state.isLoading;
    return /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      gap: 2,
      style: STYLES_THUMB_GRID
    }, assets.map(asset => /*#__PURE__*/_react.default.createElement(_AssetThumb.default, {
      key: asset._id,
      asset: asset,
      isSelected: selectedAssets.some(selected => selected._id === asset._id),
      onClick: this.handleItemClick,
      onKeyPress: this.handleItemKeyPress,
      onDeleteFinished: this.handleDeleteFinished
    }))), isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      justify: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
      muted: true
    })), !isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true
    }, "No images"));
  }

  renderTableView() {
    var selectedAssets = this.props.selectedAssets;
    var _this$state2 = this.state,
        assets = _this$state2.assets,
        isLoading = _this$state2.isLoading;
    return /*#__PURE__*/_react.default.createElement(_TableList.default, {
      isLoading: isLoading,
      assets: assets,
      selectedAssets: selectedAssets,
      onClick: this.handleItemClick,
      onKeyPress: this.handleItemKeyPress,
      onDeleteFinished: this.handleDeleteFinished
    });
  }

  render() {
    var _this$props = this.props,
        _this$props$assetType2 = _this$props.assetType,
        assetType = _this$props$assetType2 === void 0 ? 'image' : _this$props$assetType2,
        _this$props$dialogHea = _this$props.dialogHeaderTitle,
        dialogHeaderTitle = _this$props$dialogHea === void 0 ? 'Select image' : _this$props$dialogHea;
    var _this$state3 = this.state,
        assets = _this$state3.assets,
        isLastPage = _this$state3.isLastPage,
        isLoading = _this$state3.isLoading;
    return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      id: this._elementId,
      header: dialogHeaderTitle,
      width: 2,
      onClose: this.handleClose,
      __unstable_autoFocus: !isLoading
    }, assetType === 'image' && this.renderThumbView(), assetType === 'file' && this.renderTableView(), assets.length > 0 && !isLastPage && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 4,
      style: STYLES_LOAD_MORE_BUTTON
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.DownloadIcon,
      loading: isLoading,
      onClick: this.handleFetchNextPage,
      text: "Load more",
      tone: "primary"
    })));
  }

}

exports.DefaultSource = DefaultSource;