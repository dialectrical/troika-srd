"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ui = require("@sanity/ui");

var _FullscreenSpinner = require("../../components/FullscreenSpinner");

var _versionedClient = require("../versionedClient");

var _Checkerboard = require("../../components/Checkerboard");

var _AssetUsageDialog = require("./AssetUsageDialog");

var _AssetMenu = require("./AssetMenu");

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

// Get pixel density of the current device
var DPI = typeof window === 'undefined' || !window.devicePixelRatio ? 1 : Math.round(window.devicePixelRatio);

var Image = _styledComponents.default.img(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: block;\n  object-fit: contain;\n"])));

var Container = (0, _styledComponents.default)(_Checkerboard.Checkerboard)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 1;\n  padding-bottom: 100%;\n"])));

var Root = _styledComponents.default.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  display: inherit;\n"])));

var MenuContainer = _styledComponents.default.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 2;\n  display: none;\n  top: 3px;\n  right: 3px;\n\n  ", ":hover & {\n    display: block;\n  }\n"])), Root);

var AssetThumb = props => {
  var toast = (0, _ui.useToast)();
  var deleteRef$ = (0, _react.useRef)();
  var asset = props.asset,
      onClick = props.onClick,
      onKeyPress = props.onKeyPress,
      onDeleteFinished = props.onDeleteFinished,
      isSelected = props.isSelected;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      showUsageDialog = _useState2[0],
      setShowUsageDialog = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showDeleteDialog = _useState4[0],
      setShowDeleteDialog = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isDeleting = _useState6[0],
      setIsDeleting = _useState6[1];

  (0, _react.useEffect)(() => {
    return () => {
      if (deleteRef$.current) {
        deleteRef$.current.unsubscribe();
      }
    };
  }, []);

  var handleConfirmDelete = () => {
    setShowDeleteDialog(true);
  };

  var handleDialogClose = () => {
    setShowUsageDialog(false);
    setShowDeleteDialog(false);
  };

  var handleToggleUsageDialog = () => {
    setShowUsageDialog(true);
  };

  var handleDeleteError = error => {
    toast.push({
      closable: true,
      status: 'error',
      title: 'Image could not be deleted',
      description: error.message
    });
  };

  var handleDeleteSuccess = () => {
    toast.push({
      status: 'success',
      title: 'Image was deleted'
    });
  };

  var handleDeleteAsset = () => {
    setIsDeleting(true);
    deleteRef$.current = _versionedClient.versionedClient.observable.delete(asset._id).subscribe({
      next: () => {
        setIsDeleting(false);
        onDeleteFinished(asset._id);
        setShowDeleteDialog(false);
        handleDeleteSuccess();
      },
      error: err => {
        setIsDeleting(false);
        handleDeleteError(err); // eslint-disable-next-line no-console

        console.error('Could not delete asset', err);
      }
    });
  };

  var handleMenuAction = action => {
    if (action.type === 'delete') {
      handleConfirmDelete();
    }

    if (action.type === 'showUsage') {
      handleToggleUsageDialog();
    }
  }; // const {asset, onClick, onKeyPress, isSelected} = props


  var originalFilename = asset.originalFilename,
      _id = asset._id,
      url = asset.url;
  var imgH = 200 * Math.max(1, DPI);
  return /*#__PURE__*/_react.default.createElement(Root, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    tone: "primary",
    selected: isSelected,
    tabIndex: 0,
    "data-id": _id,
    mode: "ghost",
    onKeyPress: onKeyPress,
    padding: 0,
    style: {
      padding: 2
    }
  }, /*#__PURE__*/_react.default.createElement(Container, null, /*#__PURE__*/_react.default.createElement(Image, {
    alt: originalFilename,
    src: "".concat(url, "?h=").concat(imgH, "&fit=max"),
    onClick: onClick,
    "data-id": _id
  }), isDeleting && /*#__PURE__*/_react.default.createElement(_FullscreenSpinner.FullscreenSpinner, null))), /*#__PURE__*/_react.default.createElement(MenuContainer, null, /*#__PURE__*/_react.default.createElement(_AssetMenu.AssetMenu, {
    isSelected: isSelected,
    onAction: handleMenuAction
  })), (showUsageDialog || showDeleteDialog) && /*#__PURE__*/_react.default.createElement(_AssetUsageDialog.AssetUsageDialog, {
    asset: asset,
    mode: showDeleteDialog ? 'confirmDelete' : 'listUsage',
    onClose: handleDialogClose,
    onDelete: handleDeleteAsset,
    isDeleting: isDeleting
  }));
};

var _default = AssetThumb;
exports.default = _default;