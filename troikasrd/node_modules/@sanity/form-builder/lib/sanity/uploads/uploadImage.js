"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = uploadImage;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _patches = require("../../patch/patches");

var _assets = require("../inputs/client-adapters/assets");

var _readExif = _interopRequireDefault(require("./image/readExif"));

var _rotateImage = _interopRequireDefault(require("./image/rotateImage"));

var _orient = require("./image/orient");

var _constants = require("./constants");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function uploadImage(file, options) {
  var upload$ = (0, _assets.uploadImageAsset)(file, options).pipe((0, _operators.filter)(event => event.stage !== 'download'), (0, _operators.map)(event => _objectSpread(_objectSpread({}, event), {}, {
    progress: 2 + event.percent / 100 * 98
  })), (0, _operators.map)(event => {
    if (event.type === 'complete') {
      return (0, _utils.createUploadEvent)([(0, _patches.set)({
        _type: 'reference',
        _ref: event.asset._id
      }, ['asset']), (0, _patches.set)(100, [_constants.UPLOAD_STATUS_KEY, 'progress']), (0, _patches.set)(new Date().toISOString(), [_constants.UPLOAD_STATUS_KEY, 'updated'])]);
    }

    return (0, _utils.createUploadEvent)([(0, _patches.set)(event.percent, [_constants.UPLOAD_STATUS_KEY, 'progress']), (0, _patches.set)(new Date().toISOString(), [_constants.UPLOAD_STATUS_KEY, 'updated'])]);
  }));
  var setPreviewUrl$ = (0, _readExif.default)(file).pipe((0, _operators.mergeMap)(exifData => (0, _rotateImage.default)(file, exifData.orientation || _orient.DEFAULT_ORIENTATION)), (0, _operators.catchError)(error => {
    // eslint-disable-next-line no-console
    console.warn('Image preprocessing failed for "%s" with the error: %s', file.name, error.message); // something went wrong, but continue still

    return (0, _rxjs.of)(null);
  }), (0, _operators.filter)(Boolean), (0, _operators.map)(imageUrl => (0, _utils.createUploadEvent)([(0, _patches.set)(imageUrl, [_constants.UPLOAD_STATUS_KEY, 'previewImage'])])));
  return (0, _rxjs.of)((0, _utils.createInitialUploadEvent)(file)).pipe((0, _operators.concat)((0, _rxjs.from)(upload$).pipe((0, _operators.merge)(setPreviewUrl$))), (0, _operators.concat)((0, _rxjs.of)(_utils.CLEANUP_EVENT)));
}