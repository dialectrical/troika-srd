"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkoutPair = checkoutPair;

var _operators = require("rxjs/operators");

var _legacyParts = require("../legacyParts");

var gradientPatchAdapter = _interopRequireWildcard(require("./utils/gradientPatchAdapter"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function prepareMutationEvent(event) {
  var patches = event.mutations.map(mut => mut.patch).filter(Boolean);
  return _objectSpread(_objectSpread({}, event), {}, {
    patches: gradientPatchAdapter.toFormBuilder(event.origin, patches)
  });
}

function prepareRebaseEvent(event) {
  var patches = [{
    id: event.document._id,
    set: event.document
  }];
  return {
    type: 'mutation',
    document: event.document,
    mutations: patches.map(patch => ({
      patch
    })),
    patches: gradientPatchAdapter.toFormBuilder('internal', patches)
  };
}

function wrap(document) {
  var events$ = document.events.pipe((0, _operators.map)(event => {
    if (event.type === 'mutation') {
      return prepareMutationEvent(event);
    } else if (event.type === 'rebase') {
      return prepareRebaseEvent(event);
    }

    return event;
  }), (0, _operators.scan)((prevEvent, currentEvent) => {
    var deletedSnapshot = prevEvent && currentEvent.type === 'mutation' && prevEvent.document !== null && currentEvent.document === null ? prevEvent.document : null;
    return _objectSpread(_objectSpread({}, currentEvent), {}, {
      deletedSnapshot
    });
  }, null));
  return _objectSpread(_objectSpread({}, document), {}, {
    events: events$,

    patch(patches) {
      document.patch(gradientPatchAdapter.toGradient(patches));
    }

  });
}

var hasWarned = false;

function checkoutPair(idPair) {
  if (!hasWarned) {
    // eslint-disable-next-line no-console
    console.warn('[deprecation] The checkout() function has been deprecated in favor of checkoutPair()');
    hasWarned = true;
  }

  var _documentStore$checko = _legacyParts.documentStore.checkoutPair(idPair),
      draft = _documentStore$checko.draft,
      published = _documentStore$checko.published;

  return {
    draft: wrap(draft),
    published: wrap(published)
  };
}