"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _paths = require("@sanity/util/paths");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _ReferenceInput = require("../../inputs/ReferenceInput");

var _withValuePath = _interopRequireDefault(require("../../utils/withValuePath"));

var _withDocument = _interopRequireDefault(require("../../utils/withDocument"));

var adapter = _interopRequireWildcard(require("./client-adapters/reference"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// eslint-disable-next-line require-await
function resolveUserDefinedFilter(_x, _x2, _x3) {
  return _resolveUserDefinedFilter.apply(this, arguments);
}

function _resolveUserDefinedFilter() {
  _resolveUserDefinedFilter = _asyncToGenerator(function* (options, document, valuePath) {
    if (!options) {
      return {};
    }

    if (typeof options.filter === 'function') {
      var parentPath = valuePath.slice(0, -1);
      var parent = (0, _paths.get)(document, parentPath);
      return options.filter({
        document,
        parentPath,
        parent
      });
    }

    return {
      filter: options.filter,
      params: 'filterParams' in options ? options.filterParams : undefined
    };
  });
  return _resolveUserDefinedFilter.apply(this, arguments);
}

function useValueRef(value) {
  var ref = (0, _react.useRef)(value);
  ref.current = value;
  return ref;
}

var SanityReferenceInput = /*#__PURE__*/(0, _react.forwardRef)(function SanityReferenceInput(props, ref) {
  var getValuePath = props.getValuePath,
      type = props.type,
      document = props.document;
  var documentRef = useValueRef(document);
  var handleSearch = (0, _react.useCallback)(searchString => (0, _rxjs.from)(resolveUserDefinedFilter(type.options, documentRef.current, getValuePath())).pipe((0, _operators.mergeMap)(_ref => {
    var filter = _ref.filter,
        params = _ref.params;
    return adapter.search(searchString, type, _objectSpread(_objectSpread({}, type.options), {}, {
      filter,
      params,
      tag: 'search.reference'
    }));
  }), (0, _operators.catchError)(err => {
    var _type$options;

    var isQueryError = err.details && err.details.type === 'queryParseError';

    if ((_type$options = type.options) !== null && _type$options !== void 0 && _type$options.filter && isQueryError) {
      err.message = "Invalid reference filter, please check the custom \"filter\" option";
    }

    return (0, _rxjs.throwError)(err);
  })), [documentRef, getValuePath, type]);
  var getPreviewSnapshot = (0, _react.useCallback)(value => adapter.getPreviewSnapshot(value, type), [type]);
  return /*#__PURE__*/_react.default.createElement(_ReferenceInput.ReferenceInput, _extends({}, props, {
    onSearch: handleSearch,
    getPreviewSnapshot: getPreviewSnapshot,
    ref: ref
  }));
});

var _default = (0, _withValuePath.default)((0, _withDocument.default)(SanityReferenceInput));

exports.default = _default;