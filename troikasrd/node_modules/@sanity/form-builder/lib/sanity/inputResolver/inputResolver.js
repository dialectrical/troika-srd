"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveInputComponent;

var _defaultInputs = _interopRequireDefault(require("./defaultInputs"));

var is = _interopRequireWildcard(require("../../utils/is"));

var _resolveReferenceInput = _interopRequireDefault(require("./resolveReferenceInput"));

var _resolveArrayInput = _interopRequireDefault(require("./resolveArrayInput"));

var _resolveStringInput = _interopRequireDefault(require("./resolveStringInput"));

var _resolveNumberInput = _interopRequireDefault(require("./resolveNumberInput"));

var _legacyParts = require("../../legacyParts");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CUSTOM_INPUT_MAP = {
  object: _legacyParts.ObjectInput,
  boolean: _legacyParts.BooleanInput,
  number: _legacyParts.NumberInput,
  string: _legacyParts.StringInput,
  text: _legacyParts.TextInput,
  reference: _legacyParts.ReferenceInput,
  datetime: _legacyParts.DateTimeInput,
  email: _legacyParts.EmailInput,
  geopoint: _legacyParts.GeoPointInput,
  url: _legacyParts.UrlInput
};

function getExport(obj) {
  return obj && obj.__esModule ? obj.default : obj;
} // this is needed to avoid errors due to circular imports
// this can happen if a custom input component imports and tries
// to access something from the form-builder immediately (top-level)


var getCustomResolver = () => {
  // TODO(@benedicteb, 2021-01-18) How can we move this to legacyParts.ts?
  var resolver = getExport(require('part:@sanity/form-builder/input-resolver?'));

  getCustomResolver = () => resolver;

  return resolver;
};

function resolveTypeVariants(type) {
  if (is.type('array', type)) {
    return (0, _resolveArrayInput.default)(type);
  }

  if (is.type('reference', type)) {
    return (0, _resolveReferenceInput.default)(type);
  } // String input with a select


  if (is.type('string', type)) {
    return (0, _resolveStringInput.default)(type);
  }

  if (is.type('number', type)) {
    return (0, _resolveNumberInput.default)(type);
  }

  return null;
}

function resolveInputComponent(type) {
  var customResolver = getCustomResolver();
  var custom = customResolver && customResolver(type);

  if (custom) {
    return custom;
  }

  if (type.inputComponent) {
    return type.inputComponent;
  }

  return resolveTypeVariants(type) || CUSTOM_INPUT_MAP[type.name] || _defaultInputs.default[type.name];
}