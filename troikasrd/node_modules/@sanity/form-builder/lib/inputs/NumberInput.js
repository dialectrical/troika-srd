"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _autoId = require("@reach/auto-id");

var _components = require("@sanity/base/components");

var _getValidationRule = require("../utils/getValidationRule");

var _PatchEvent = _interopRequireWildcard(require("../PatchEvent"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var NumberInput = /*#__PURE__*/_react.default.forwardRef(function NumberInput(props, forwardedRef) {
  var _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      readOnly = props.readOnly,
      markers = props.markers,
      type = props.type,
      level = props.level,
      onFocus = props.onFocus,
      onChange = props.onChange,
      presence = props.presence;
  var errors = (0, _react.useMemo)(() => markers.filter(marker => marker.type === 'validation' && marker.level === 'error'), [markers]);
  var id = (0, _autoId.useId)(); // Show numpad on mobile if only positive numbers is preferred

  var minRule = (0, _getValidationRule.getValidationRule)(type, 'min');
  var onlyPositiveNumber = (minRule === null || minRule === void 0 ? void 0 : minRule.constraint) >= 0;

  var handleChange = _react.default.useCallback(event => {
    var nextValue = event.currentTarget.value;
    onChange(_PatchEvent.default.from(nextValue === '' ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(Number(nextValue))));
  }, [onChange]);

  return /*#__PURE__*/_react.default.createElement(_components.FormField, {
    level: level,
    __unstable_markers: markers,
    title: type.title,
    description: type.description,
    inputId: id,
    __unstable_presence: presence
  }, /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
    type: "number",
    inputMode: onlyPositiveNumber ? 'numeric' : 'text',
    id: id,
    customValidity: errors && errors.length > 0 ? errors[0].item.message : '',
    value: value,
    readOnly: Boolean(readOnly),
    placeholder: type.placeholder,
    onChange: handleChange,
    onFocus: onFocus,
    ref: forwardedRef,
    pattern: onlyPositiveNumber ? '[d]*' : undefined
  }));
});

var _default = NumberInput;
exports.default = _default;