"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarDay = CalendarDay;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function CalendarDay(props) {
  var date = props.date,
      focused = props.focused,
      isCurrentMonth = props.isCurrentMonth,
      isToday = props.isToday,
      onSelect = props.onSelect,
      selected = props.selected;
  var handleClick = (0, _react.useCallback)(() => {
    onSelect(date);
  }, [date, onSelect]);
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-selected": selected,
    "data-ui": "CalendarDay"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    "aria-label": date.toDateString(),
    "aria-pressed": selected,
    as: "button",
    __unstable_focusRing: true,
    "data-weekday": true,
    "data-focused": focused ? 'true' : '',
    role: "button",
    tabIndex: -1,
    onClick: handleClick,
    padding: 3,
    radius: 2,
    selected: selected,
    tone: isToday || selected ? 'primary' : 'default'
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: !selected && !isCurrentMonth,
    style: {
      textAlign: 'center'
    },
    weight: isCurrentMonth ? 'medium' : 'regular'
  }, date.getDate())));
}