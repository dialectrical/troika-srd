"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommonDateTimeInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _autoId = require("@reach/auto-id");

var _ui = require("@sanity/ui");

var _DateTimeInput = require("./base/DateTimeInput");

var _excluded = ["value", "markers", "title", "description", "placeholder", "parseInputValue", "formatInputValue", "deserialize", "serialize", "selectTime", "timeStep", "readOnly", "level", "presence", "onChange"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DEFAULT_PLACEHOLDER_TIME = new Date();

var CommonDateTimeInput = /*#__PURE__*/_react.default.forwardRef(function CommonDateTimeInput(props, forwardedRef) {
  var value = props.value,
      markers = props.markers,
      title = props.title,
      description = props.description,
      placeholder = props.placeholder,
      parseInputValue = props.parseInputValue,
      formatInputValue = props.formatInputValue,
      deserialize = props.deserialize,
      serialize = props.serialize,
      selectTime = props.selectTime,
      timeStep = props.timeStep,
      readOnly = props.readOnly,
      level = props.level,
      presence = props.presence,
      onChange = props.onChange,
      rest = _objectWithoutProperties(props, _excluded);

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      localValue = _React$useState2[0],
      setLocalValue = _React$useState2[1];

  (0, _react.useEffect)(() => {
    setLocalValue(null);
  }, [value]);

  var handleDatePickerInputChange = _react.default.useCallback(event => {
    var nextInputValue = event.currentTarget.value;
    var result = nextInputValue === '' ? null : parseInputValue(nextInputValue);

    if (result === null) {
      onChange(null);
    } else if (result.isValid) {
      onChange(serialize(result.date));
    } else {
      setLocalValue(nextInputValue);
    }
  }, [serialize, onChange, parseInputValue]);

  var handleDatePickerChange = _react.default.useCallback(nextDate => {
    onChange(nextDate ? serialize(nextDate) : null);
  }, [serialize, onChange]);

  var inputRef = (0, _ui.useForwardedRef)(forwardedRef);
  var id = (0, _autoId.useId)();
  var parseResult = localValue ? parseInputValue(localValue) : value ? deserialize(value) : null;
  var inputValue = localValue ? localValue : parseResult !== null && parseResult !== void 0 && parseResult.isValid ? formatInputValue(parseResult.date) : value;
  return /*#__PURE__*/_react.default.createElement(_components.FormField, {
    __unstable_markers: parseResult !== null && parseResult !== void 0 && parseResult.error ? [...markers, {
      type: 'validation',
      level: 'error',
      item: {
        message: parseResult.error,
        paths: []
      }
    } // casting to marker to avoid having to implement cloneWithMessage on item
    ] : markers,
    title: title,
    level: level,
    description: description,
    __unstable_presence: presence,
    inputId: id
  }, readOnly ? /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
    value: inputValue,
    readOnly: true
  }) : /*#__PURE__*/_react.default.createElement(_DateTimeInput.DateTimeInput, _extends({}, rest, {
    id: id,
    selectTime: selectTime,
    timeStep: timeStep,
    placeholder: placeholder || "e.g. ".concat(formatInputValue(DEFAULT_PLACEHOLDER_TIME)),
    ref: inputRef,
    value: parseResult === null || parseResult === void 0 ? void 0 : parseResult.date,
    inputValue: inputValue || '',
    readOnly: Boolean(readOnly),
    onInputChange: handleDatePickerInputChange,
    onChange: handleDatePickerChange,
    customValidity: parseResult === null || parseResult === void 0 ? void 0 : parseResult.error
  })));
});

exports.CommonDateTimeInput = CommonDateTimeInput;