"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageToolInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _imagetool = _interopRequireDefault(require("@sanity/imagetool"));

var _HotspotImage = _interopRequireDefault(require("@sanity/imagetool/HotspotImage"));

var _constants = require("@sanity/imagetool/constants");

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _changeIndicators = require("@sanity/base/change-indicators");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _PatchEvent = _interopRequireWildcard(require("../../../PatchEvent"));

var _Checkerboard = require("../../../components/Checkerboard");

var _withFocusRing = require("../../../components/withFocusRing");

var _RatioBox = require("../common/RatioBox");

var _useDidUpdate = require("../../../hooks/useDidUpdate");

var _useLoadImage2 = require("./useLoadImage");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var HOTSPOT_PATH = ['hotspot'];
var PREVIEW_ASPECT_RATIOS = [['3:4', 3 / 4], ['Square', 1 / 1], ['16:9', 16 / 9], ['Panorama', 4 / 1]];
var DEFAULT_VALUE = {
  crop: _constants.DEFAULT_CROP,
  hotspot: _constants.DEFAULT_HOTSPOT
};
var CheckerboardWithFocusRing = (0, _withFocusRing.withFocusRing)(_Checkerboard.Checkerboard);

var Placeholder = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: 6em;\n"])));

function LoadStatus(props) {
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 4,
    style: {
      overflowWrap: 'break-word'
    }
  }, props.children);
}

var ImageToolInput = /*#__PURE__*/(0, _react.forwardRef)(function ImageToolInput(props, ref) {
  var imageUrl = props.imageUrl,
      value = props.value,
      compareValue = props.compareValue,
      level = props.level,
      readOnly = props.readOnly,
      focusPath = props.focusPath,
      onFocus = props.onFocus,
      presence = props.presence,
      onChange = props.onChange,
      type = props.type;

  var _useState = (0, _react.useState)(value || DEFAULT_VALUE),
      _useState2 = _slicedToArray(_useState, 2),
      localValue = _useState2[0],
      setLocalValue = _useState2[1];

  var _useLoadImage = (0, _useLoadImage2.useLoadImage)(imageUrl),
      image = _useLoadImage.image,
      isImageLoading = _useLoadImage.isLoading,
      imageLoadError = _useLoadImage.error;

  var forwardedRef = (0, _ui.useForwardedRef)(ref);
  var handleFocus = (0, _react.useCallback)(() => {
    onFocus(HOTSPOT_PATH);
  }, [onFocus]);
  (0, _react.useEffect)(() => {
    setLocalValue(value || DEFAULT_VALUE);
  }, [value]);
  var hasFocus = focusPath[0] === 'hotspot';
  (0, _useDidUpdate.useDidUpdate)(hasFocus, hadFocus => {
    if (!hadFocus && hasFocus) {
      var _forwardedRef$current;

      (_forwardedRef$current = forwardedRef.current) === null || _forwardedRef$current === void 0 ? void 0 : _forwardedRef$current.focus();
    }
  });
  var handleChangeEnd = (0, _react.useCallback)(finalValue => {
    if (readOnly) {
      return;
    } // For backwards compatibility, where hotspot/crop might not have a named type yet


    var cropField = type.fields.find(field => field.name === 'crop' && field.type.name !== 'object');
    var hotspotField = type.fields.find(field => field.type.name !== 'object' && field.name === 'hotspot'); // Note: when either hotspot or crop change we fill in the default if the other is missing
    // (we can't have one without the other)

    var crop = cropField ? _objectSpread({
      _type: cropField.type.name
    }, finalValue.crop || _constants.DEFAULT_CROP) : finalValue.crop;
    var hotspot = hotspotField ? _objectSpread({
      _type: hotspotField.type.name
    }, finalValue.hotspot || _constants.DEFAULT_HOTSPOT) : finalValue.hotspot;
    onChange(_PatchEvent.default.from([(0, _PatchEvent.set)(crop, ['crop']), (0, _PatchEvent.set)(hotspot, ['hotspot'])]));
  }, [onChange, readOnly, type.fields]);
  return /*#__PURE__*/_react.default.createElement(_components.FormField, {
    title: "Hotspot & crop",
    level: level,
    description: "Adjust the rectangle to crop image. Adjust the circle to specify the area that should always be visible.",
    __unstable_changeIndicator: false,
    __unstable_presence: presence
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(CheckerboardWithFocusRing, {
    tabIndex: 0,
    ref: forwardedRef,
    onFocus: handleFocus
  }, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorForFieldPath, {
    path: HOTSPOT_PATH,
    hasFocus: focusPath[0] === 'hotspot',
    isChanged: !(0, _shallowEquals.default)(value === null || value === void 0 ? void 0 : value.crop, compareValue === null || compareValue === void 0 ? void 0 : compareValue.crop) || !(0, _shallowEquals.default)(compareValue === null || compareValue === void 0 ? void 0 : compareValue.hotspot, value === null || value === void 0 ? void 0 : value.hotspot)
  }, /*#__PURE__*/_react.default.createElement(_RatioBox.RatioBox, {
    ratio: 3 / 2
  }, (isImageLoading || imageLoadError) && /*#__PURE__*/_react.default.createElement(LoadStatus, null, imageLoadError ? /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 4,
    radius: 2,
    tone: "critical",
    border: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Error: ", imageLoadError.message)) : /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true
  }, "Loading image\u2026 ")), !isImageLoading && image && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    margin: 1
  }, /*#__PURE__*/_react.default.createElement(_imagetool.default, {
    value: localValue,
    src: image.src,
    readOnly: Boolean(readOnly),
    onChangeEnd: handleChangeEnd,
    onChange: setLocalValue
  }))))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: PREVIEW_ASPECT_RATIOS.length,
    gap: 1
  }, PREVIEW_ASPECT_RATIOS.map(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        title = _ref2[0],
        ratio = _ref2[1];

    return /*#__PURE__*/_react.default.createElement("div", {
      key: ratio
    }, /*#__PURE__*/_react.default.createElement(_ui.Heading, {
      as: "h4",
      size: 0
    }, title), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_RatioBox.RatioBox, {
      ratio: ratio
    }, /*#__PURE__*/_react.default.createElement(_Checkerboard.Checkerboard, null, !isImageLoading && image ? /*#__PURE__*/_react.default.createElement(_HotspotImage.default, {
      aspectRatio: ratio,
      src: image.src,
      srcAspectRatio: image.width / image.height,
      hotspot: localValue.hotspot || _constants.DEFAULT_HOTSPOT,
      crop: localValue.crop || _constants.DEFAULT_CROP
    }) : /*#__PURE__*/_react.default.createElement(Placeholder, null)))));
  })))));
});
exports.ImageToolInput = ImageToolInput;