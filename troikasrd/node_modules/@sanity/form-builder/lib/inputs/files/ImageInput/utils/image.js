"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.urlToFile = urlToFile;
exports.base64ToFile = base64ToFile;

var _uuid = require("@sanity/uuid");

function urlToFile(url, filename) {
  return new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();

    xhr.onload = () => {
      var reader = new FileReader();

      reader.onloadend = () => {
        var string = reader.result.toString();
        var ext = string.substring('data:image/'.length, string.indexOf(';base64'));

        if (!ext && !filename) {
          reject(new Error('Could not find mime type for image'));
          return;
        }

        resolve(dataURLtoFile(reader.result, filename || "".concat((0, _uuid.uuid)(), ".").concat(ext)));
      };

      reader.readAsDataURL(xhr.response);
    };

    xhr.onerror = error => {
      reject(error);
    };

    xhr.open('GET', url);
    xhr.responseType = 'blob';
    xhr.send();
  });
}

function base64ToFile(base64Data, filename) {
  return new Promise((resolve, reject) => {
    var string = base64Data.toString();
    var ext = string.substring('data:image/'.length, string.indexOf(';base64'));

    if (!ext && !filename) {
      reject(new Error('Could not find mime type for image'));
      return;
    }

    resolve(dataURLtoFile(base64Data, filename || "".concat((0, _uuid.uuid)(), ".").concat(ext)));
  });
}

function dataURLtoFile(dataurl, filename) {
  var arr = dataurl.split(',');
  var mime = arr[0].match(/:(.*?);/)[1];
  var bstr = atob(arr[1]);
  var n = bstr.length;
  var u8arr = new Uint8Array(n);

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }

  return new File([u8arr], filename, {
    type: mime
  });
}