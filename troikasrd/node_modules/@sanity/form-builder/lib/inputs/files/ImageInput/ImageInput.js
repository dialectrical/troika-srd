"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _changeIndicators = require("@sanity/base/change-indicators");

var _icons = require("@sanity/icons");

var _HotspotImage = _interopRequireDefault(require("@sanity/imagetool/HotspotImage"));

var _imagetool = _interopRequireDefault(require("@sanity/imagetool"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _presence = require("@sanity/base/presence");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var _ImageToolInput = require("../ImageToolInput");

var _PatchEvent = _interopRequireWildcard(require("../../../PatchEvent"));

var _UploadPlaceholder = _interopRequireDefault(require("../common/UploadPlaceholder"));

var _WithMaterializedReference = _interopRequireDefault(require("../../../utils/WithMaterializedReference"));

var _FileInputButton = require("../common/FileInputButton/FileInputButton");

var _styles = require("../common/styles");

var _UploadProgress = require("../common/UploadProgress");

var _RatioBox = require("../common/RatioBox");

var _empty = require("../../../utils/empty");

var _DropMessage = require("../common/DropMessage");

var _assetSource = require("../common/assetSource");

var _ImageInputField = require("./ImageInputField");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getDevicePixelRatio = () => {
  if (typeof window === 'undefined' || !window.devicePixelRatio) {
    return 1;
  }

  return Math.round(Math.max(1, window.devicePixelRatio));
};

var EMPTY_FIELD_GROUPS = {
  asset: [],
  imagetool: [],
  highlighted: [],
  dialog: [],
  imageToolAndDialog: []
};
var ASSET_FIELD_PATH = ['asset'];

class ImageInput extends _react.default.PureComponent {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    _defineProperty(this, "_inputId", (0, _uniqueId2.default)('ImageInput'));

    _defineProperty(this, "_assetElementRef", null);

    _defineProperty(this, "_fieldGroupsMemo", null);

    _defineProperty(this, "uploadSubscription", null);

    _defineProperty(this, "state", {
      isUploading: false,
      selectedAssetSource: null,
      hoveringFiles: []
    });

    _defineProperty(this, "toast", null);

    _defineProperty(this, "setFocusElement", el => {
      this._assetElementRef = el;
    });

    _defineProperty(this, "getConstrainedImageSrc", assetDocument => {
      var materializedSize = _imagetool.default.maxWidth || 1000;
      var maxSize = materializedSize * getDevicePixelRatio();
      var constrainedSrc = "".concat(assetDocument.url, "?w=").concat(maxSize, "&h=").concat(maxSize, "&fit=max");
      return constrainedSrc;
    });

    _defineProperty(this, "getUploadOptions", file => {
      var _this$props = this.props,
          type = _this$props.type,
          resolveUploader = _this$props.resolveUploader;
      var uploader = resolveUploader && resolveUploader(type, file);
      return uploader ? [{
        type: type,
        uploader
      }] : [];
    });

    _defineProperty(this, "uploadWith", function (uploader, file) {
      var assetDocumentProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _this$props2 = _this.props,
          type = _this$props2.type,
          onChange = _this$props2.onChange;
      var label = assetDocumentProps.label,
          title = assetDocumentProps.title,
          description = assetDocumentProps.description,
          creditLine = assetDocumentProps.creditLine,
          source = assetDocumentProps.source;
      var options = {
        metadata: (0, _get2.default)(type, 'options.metadata'),
        storeOriginalFilename: (0, _get2.default)(type, 'options.storeOriginalFilename'),
        label,
        title,
        description,
        creditLine,
        source
      };

      _this.cancelUpload();

      _this.setState({
        isUploading: true
      });

      onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
        _type: type.name
      })]));
      _this.uploadSubscription = uploader.upload(file, type, options).subscribe({
        next: uploadEvent => {
          if (uploadEvent.patches) {
            onChange(_PatchEvent.default.from(uploadEvent.patches));
          }
        },
        error: err => {
          var _this$toast;

          // eslint-disable-next-line no-console
          console.error(err);
          (_this$toast = _this.toast) === null || _this$toast === void 0 ? void 0 : _this$toast.push({
            status: 'error',
            description: 'The upload could not be completed at this time.',
            title: 'Upload failed'
          });

          _this.clearUploadStatus();
        },
        complete: () => {
          onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop'])]));

          _this.setState({
            isUploading: false
          }); // this.toast.push({
          //   status: 'success',
          //   title: 'Upload completed',
          // })

        }
      });
    });

    _defineProperty(this, "handleRemoveButtonClick", () => {
      var getValuePath = this.context.getValuePath;
      var value = this.props.value;
      var parentPathSegment = getValuePath().slice(-1)[0]; // String path segment mean an object path, while a number or a
      // keyed segment means we're a direct child of an array

      var isArrayElement = typeof parentPathSegment !== 'string'; // When removing the image, we should also remove any crop and hotspot
      // _type and _key are "meta"-properties and are not significant unless
      // other properties are present. Thus, we want to remove the entire
      // "container" object if these are the only properties present, BUT
      // only if we're not an array element, as removing the array element
      // will close the selection dialog. Instead, when closing the dialog,
      // the array logic will check for an "empty" value and remove it for us

      var allKeys = Object.keys(value || {});
      var remainingKeys = allKeys.filter(key => !['_type', '_key', '_upload', 'asset', 'crop', 'hotspot'].includes(key));
      var isEmpty = remainingKeys.length === 0;
      var removeKeys = ['asset'].concat(allKeys.filter(key => ['crop', 'hotspot', '_upload'].includes(key))).map(key => (0, _PatchEvent.unset)([key]));
      this.props.onChange(_PatchEvent.default.from(isEmpty && !isArrayElement ? (0, _PatchEvent.unset)() : removeKeys));
    });

    _defineProperty(this, "handleFieldChange", event => {
      var _this$props3 = this.props,
          onChange = _this$props3.onChange,
          type = _this$props3.type;
      onChange(event.prepend((0, _PatchEvent.setIfMissing)({
        _type: type.name
      })));
    });

    _defineProperty(this, "handleOpenDialog", () => {
      var _this$props4 = this.props,
          type = _this$props4.type,
          onFocus = _this$props4.onFocus;
      var groups = this.getGroupedFields(type);
      var firstDialogField = this.isImageToolEnabled() ? groups.imagetool[0] : groups.dialog[0];

      if (firstDialogField) {
        onFocus([firstDialogField.name]);
      }
    });

    _defineProperty(this, "handleCloseDialog", () => {
      this.props.onFocus([]);
    });

    _defineProperty(this, "handleSelectAssetFromSource", assetFromSource => {
      var _this$props5 = this.props,
          onChange = _this$props5.onChange,
          type = _this$props5.type,
          resolveUploader = _this$props5.resolveUploader;
      (0, _assetSource.handleSelectAssetFromSource)({
        assetFromSource,
        onChange,
        type,
        resolveUploader,
        uploadWith: this.uploadWith,
        isImage: true
      });
      this.setState({
        selectedAssetSource: null
      });
    });

    _defineProperty(this, "handleFileTargetFocus", () => {
      this.props.onFocus(['asset']);
    });

    _defineProperty(this, "handleFileTargetBlur", () => {
      this.props.onBlur();
    });

    _defineProperty(this, "handleFilesOver", hoveringFiles => {
      this.setState({
        hoveringFiles
      });
    });

    _defineProperty(this, "handleFilesOut", () => {
      this.setState({
        hoveringFiles: []
      });
    });

    _defineProperty(this, "handleCancelUpload", () => {
      this.cancelUpload();
    });

    _defineProperty(this, "handleClearUploadState", () => {
      this.clearUploadStatus();
    });

    _defineProperty(this, "handleSelectFiles", files => this.uploadFirstAccepted(files));

    _defineProperty(this, "handleSelectImageFromAssetSource", source => {
      this.setState({
        selectedAssetSource: source
      });
    });

    _defineProperty(this, "handleAssetSourceClosed", () => {
      this.setState({
        selectedAssetSource: null
      });
    });

    _defineProperty(this, "renderMaterializedAsset", assetDocument => {
      var _this$props$value = this.props.value,
          value = _this$props$value === void 0 ? {} : _this$props$value;
      var constrainedSrc = this.getConstrainedImageSrc(assetDocument);
      var srcAspectRatio = (0, _get2.default)(assetDocument, 'metadata.dimensions.aspectRatio');
      return typeof srcAspectRatio === 'undefined' ? null : /*#__PURE__*/_react.default.createElement(_HotspotImage.default, {
        aspectRatio: "auto",
        src: constrainedSrc,
        srcAspectRatio: srcAspectRatio,
        hotspot: value.hotspot,
        crop: value.crop
      });
    });

    _defineProperty(this, "setToast", toast => {
      this.toast = toast;
    });
  }

  focus() {
    if (this._assetElementRef) {
      this._assetElementRef.focus();
    }
  }

  isImageToolEnabled() {
    return (0, _get2.default)(this.props.type, 'options.hotspot') === true;
  }

  clearUploadStatus() {
    // todo: this is kind of hackish
    this.props.onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['_upload'])]));
  }

  cancelUpload() {
    if (this.uploadSubscription) {
      this.uploadSubscription.unsubscribe();
      this.clearUploadStatus();
    }
  }

  uploadFirstAccepted(files) {
    var _this$props6 = this.props,
        resolveUploader = _this$props6.resolveUploader,
        type = _this$props6.type;
    var match = files.map(file => ({
      file,
      uploader: resolveUploader(type, file)
    })).find(result => result.uploader);

    if (match) {
      this.uploadWith(match.uploader, match.file);
    }
  }

  hasFileTargetFocus() {
    var _this$props$focusPath;

    return ((_this$props$focusPath = this.props.focusPath) === null || _this$props$focusPath === void 0 ? void 0 : _this$props$focusPath[0]) === 'asset';
  }

  renderDialogFields(fields) {
    var _this$props7 = this.props,
        value = _this$props7.value,
        compareValue = _this$props7.compareValue,
        focusPath = _this$props7.focusPath,
        onFocus = _this$props7.onFocus,
        level = _this$props7.level,
        type = _this$props7.type,
        onChange = _this$props7.onChange,
        readOnly = _this$props7.readOnly,
        presence = _this$props7.presence,
        materialize = _this$props7.materialize;
    var withImageTool = this.isImageToolEnabled() && value && value.asset;
    var imageToolPresence = withImageTool ? presence.filter(item => item.path[0] === 'hotspot') : _empty.EMPTY_ARRAY;
    return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      header: "Edit details",
      id: "".concat(this._inputId, "_dialog"),
      onClose: this.handleCloseDialog,
      width: 1,
      __unstable_autoFocus: false
    }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 5
    }, withImageTool && /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
      materialize: materialize,
      reference: value === null || value === void 0 ? void 0 : value.asset
    }, imageAsset => /*#__PURE__*/_react.default.createElement(_ImageToolInput.ImageToolInput, {
      type: type,
      level: level,
      readOnly: Boolean(readOnly),
      imageUrl: this.getConstrainedImageSrc(imageAsset),
      value: value,
      focusPath: focusPath,
      presence: imageToolPresence,
      onFocus: onFocus,
      compareValue: compareValue,
      onChange: onChange
    })), this.renderFields(fields)))));
  }

  renderFields(fields) {
    return fields.map(field => this.renderField(field));
  }

  renderField(field) {
    var _this$props8 = this.props,
        value = _this$props8.value,
        level = _this$props8.level,
        focusPath = _this$props8.focusPath,
        onFocus = _this$props8.onFocus,
        readOnly = _this$props8.readOnly,
        onBlur = _this$props8.onBlur,
        compareValue = _this$props8.compareValue,
        presence = _this$props8.presence,
        markers = _this$props8.markers;
    var fieldValue = value === null || value === void 0 ? void 0 : value[field.name];
    var fieldMarkers = markers.filter(marker => marker.path[0] === field.name);
    return /*#__PURE__*/_react.default.createElement(_ImageInputField.ImageInputField, {
      key: field.name,
      field: field,
      parentValue: value,
      value: fieldValue,
      onChange: this.handleFieldChange,
      onFocus: onFocus,
      compareValue: compareValue,
      onBlur: onBlur,
      readOnly: Boolean(readOnly || field.type.readOnly),
      focusPath: focusPath,
      level: level,
      presence: presence,
      markers: fieldMarkers
    });
  }

  renderAsset() {
    var _this$props9 = this.props,
        value = _this$props9.value,
        materialize = _this$props9.materialize;
    return /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
      reference: value.asset,
      materialize: materialize
    }, this.renderMaterializedAsset);
  }

  renderUploadPlaceholder() {
    var readOnly = this.props.readOnly;
    return readOnly ? /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true
    }, "This field is read-only") : /*#__PURE__*/_react.default.createElement(_UploadPlaceholder.default, {
      fileType: "image"
    });
  }

  renderUploadState(uploadState) {
    var isUploading = this.state.isUploading;
    return /*#__PURE__*/_react.default.createElement(_UploadProgress.UploadProgress, {
      uploadState: uploadState,
      onCancel: isUploading ? this.handleCancelUpload : undefined,
      onClearStale: this.handleClearUploadState
    });
  }

  renderSelectImageButton() {
    var assetSources = this.props.assetSources;

    if (!(assetSources !== null && assetSources !== void 0 && assetSources.length)) {
      return null;
    } // If multiple asset sources render a dropdown


    if (assetSources.length > 1) {
      return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
        id: "".concat(this._inputId, "_assetImageButton"),
        button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
          mode: "ghost",
          text: "Select\u2026",
          icon: _icons.SearchIcon
        }),
        menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, assetSources.map(assetSource => {
          return /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
            key: assetSource.name,
            text: assetSource.title,
            onClick: () => this.handleSelectImageFromAssetSource(assetSource),
            icon: assetSource.icon || _icons.ImageIcon
          });
        }))
      });
    } // Single asset source (just a normal button)


    return /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.SearchIcon,
      onClick: () => this.handleSelectImageFromAssetSource(assetSources[0]),
      mode: "ghost",
      text: "Select"
    });
  }

  renderAssetSource() {
    var selectedAssetSource = this.state.selectedAssetSource;
    var _this$props10 = this.props,
        value = _this$props10.value,
        materialize = _this$props10.materialize;

    if (!selectedAssetSource) {
      return null;
    }

    var Component = selectedAssetSource.component;

    if (value && value.asset) {
      return /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
        materialize: materialize,
        reference: value.asset
      }, imageAsset => {
        return /*#__PURE__*/_react.default.createElement(Component, {
          selectedAssets: [imageAsset],
          assetType: "image",
          selectionType: "single",
          onClose: this.handleAssetSourceClosed,
          onSelect: this.handleSelectAssetFromSource
        });
      });
    }

    return /*#__PURE__*/_react.default.createElement(Component, {
      selectedAssets: [],
      selectionType: "single",
      assetType: "image",
      onClose: this.handleAssetSourceClosed,
      onSelect: this.handleSelectAssetFromSource
    });
  }

  getGroupedFields(type) {
    if (!this._fieldGroupsMemo) {
      var fieldGroups = (0, _groupBy2.default)(type.fields, field => {
        var _field$type, _field$type$options;

        if (field.name === 'asset') {
          return 'asset';
        }

        if (field.name === 'hotspot' || field.name === 'crop') {
          return 'imagetool';
        }

        return (_field$type = field.type) !== null && _field$type !== void 0 && (_field$type$options = _field$type.options) !== null && _field$type$options !== void 0 && _field$type$options.isHighlighted ? 'highlighted' : 'dialog';
      });
      this._fieldGroupsMemo = _objectSpread(_objectSpread(_objectSpread({}, EMPTY_FIELD_GROUPS), fieldGroups), {}, {
        imageToolAndDialog: [...(fieldGroups.imagetool || []), ...(fieldGroups.dialog || [])]
      });
    }

    return this._fieldGroupsMemo;
  }

  componentDidUpdate(prevProps) {
    var _prevProps$focusPath = prevProps.focusPath,
        prevFocusPath = _prevProps$focusPath === void 0 ? [] : _prevProps$focusPath;
    var _this$props$focusPath2 = this.props.focusPath,
        currentFocusPath = _this$props$focusPath2 === void 0 ? [] : _this$props$focusPath2;

    if (prevFocusPath[0] !== 'asset' && currentFocusPath[0] === 'asset') {
      var _this$_assetElementRe;

      (_this$_assetElementRe = this._assetElementRef) === null || _this$_assetElementRe === void 0 ? void 0 : _this$_assetElementRe.focus();
    }
  }

  hasChangeInFields(fields) {
    var _this$props11 = this.props,
        value = _this$props11.value,
        compareValue = _this$props11.compareValue;
    return fields.some(field => !(0, _reactFastCompare.default)(value === null || value === void 0 ? void 0 : value[field.name], compareValue === null || compareValue === void 0 ? void 0 : compareValue[field.name]));
  }

  render() {
    var _value$asset, _compareValue$asset;

    var _this$props12 = this.props,
        type = _this$props12.type,
        value = _this$props12.value,
        compareValue = _this$props12.compareValue,
        level = _this$props12.level,
        markers = _this$props12.markers,
        readOnly = _this$props12.readOnly,
        presence = _this$props12.presence,
        _this$props12$focusPa = _this$props12.focusPath,
        focusPath = _this$props12$focusPa === void 0 ? _empty.EMPTY_ARRAY : _this$props12$focusPa,
        directUploads = _this$props12.directUploads,
        resolveUploader = _this$props12.resolveUploader;
    var _this$state = this.state,
        hoveringFiles = _this$state.hoveringFiles,
        selectedAssetSource = _this$state.selectedAssetSource;
    var accept = (0, _get2.default)(type, 'options.accept', 'image/*');
    var fieldGroups = this.getGroupedFields(type); // Get presence items for people who are either at the asset field, or at fields shown behind the dialog

    var fieldPresence = presence.filter(item => item.path[0] === 'asset' || fieldGroups.imageToolAndDialog.some(field => item.path[0] === field.name));
    var showAdvancedEditButton = value && (fieldGroups.dialog.length > 0 || (value === null || value === void 0 ? void 0 : value.asset) && this.isImageToolEnabled());
    var isDialogOpen = focusPath.length > 0 && fieldGroups.dialog.concat(fieldGroups.imagetool).some(field => focusPath[0] === field.name);
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_components.ImperativeToast, {
      ref: this.setToast
    }), /*#__PURE__*/_react.default.createElement(_components.FormFieldSet, {
      __unstable_markers: markers,
      __unstable_presence: isDialogOpen ? _empty.EMPTY_ARRAY : fieldPresence,
      title: type.title,
      description: type.description,
      level: fieldGroups.highlighted.length > 0 ? level : 0,
      __unstable_changeIndicator: false
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorForFieldPath, {
      path: ASSET_FIELD_PATH,
      hasFocus: this.hasFileTargetFocus(),
      isChanged: (value === null || value === void 0 ? void 0 : (_value$asset = value.asset) === null || _value$asset === void 0 ? void 0 : _value$asset._ref) !== (compareValue === null || compareValue === void 0 ? void 0 : (_compareValue$asset = compareValue.asset) === null || _compareValue$asset === void 0 ? void 0 : _compareValue$asset._ref) || this.hasChangeInFields(fieldGroups.imageToolAndDialog)
    }, /*#__PURE__*/_react.default.createElement(_styles.FileTarget, {
      tabIndex: readOnly ? undefined : 0,
      shadow: 1,
      disabled: readOnly === true,
      ref: this.setFocusElement,
      onFiles: this.handleSelectFiles,
      onFilesOver: this.handleFilesOver,
      onFilesOut: this.handleFilesOut,
      onFocus: this.handleFileTargetFocus,
      onBlur: this.handleFileTargetBlur,
      tone: "transparent"
    }, /*#__PURE__*/_react.default.createElement(_RatioBox.RatioBox, {
      ratio: 3 / 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center",
      justify: "center"
    }, (value === null || value === void 0 ? void 0 : value._upload) && this.renderUploadState(value._upload), !(value !== null && value !== void 0 && value._upload) && (value === null || value === void 0 ? void 0 : value.asset) && this.renderAsset(), !(value !== null && value !== void 0 && value._upload) && !(value !== null && value !== void 0 && value.asset) && this.renderUploadPlaceholder(), !(value !== null && value !== void 0 && value._upload) && !readOnly && hoveringFiles.length > 0 && /*#__PURE__*/_react.default.createElement(_styles.Overlay, null, /*#__PURE__*/_react.default.createElement(_DropMessage.DropMessage, {
      hoveringFiles: hoveringFiles,
      resolveUploader: resolveUploader,
      types: [type]
    })))))), /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      gap: 1,
      marginTop: 3,
      style: {
        gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))'
      }
    }, !readOnly && directUploads && /*#__PURE__*/_react.default.createElement(_FileInputButton.FileInputButton, {
      icon: _icons.UploadIcon,
      mode: "ghost",
      onSelect: this.handleSelectFiles,
      accept: accept,
      text: "Upload"
    }), !readOnly && this.renderSelectImageButton(), showAdvancedEditButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: readOnly ? _icons.EyeOpenIcon : _icons.EditIcon,
      mode: "ghost",
      onClick: this.handleOpenDialog,
      text: readOnly ? 'View details' : 'Edit details'
    }), (value === null || value === void 0 ? void 0 : value.asset) && !readOnly && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      tone: "critical",
      mode: "ghost",
      icon: _icons.TrashIcon,
      onClick: this.handleRemoveButtonClick,
      text: "Remove"
    }))), this.renderFields(fieldGroups.highlighted), isDialogOpen && this.renderDialogFields(fieldGroups.dialog), selectedAssetSource && this.renderAssetSource()));
  }

}

exports.default = ImageInput;

_defineProperty(ImageInput, "contextTypes", {
  getValuePath: _propTypes.default.func
});