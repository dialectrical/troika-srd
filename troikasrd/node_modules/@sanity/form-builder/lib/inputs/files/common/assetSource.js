"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleSelectAssetFromSource = handleSelectAssetFromSource;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _PatchEvent = _interopRequireWildcard(require("../../../PatchEvent"));

var _image = require("../ImageInput/utils/image");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function handleSelectAssetFromSource(_ref) {
  var assetFromSource = _ref.assetFromSource,
      onChange = _ref.onChange,
      type = _ref.type,
      resolveUploader = _ref.resolveUploader,
      uploadWith = _ref.uploadWith,
      isImage = _ref.isImage;

  // const {onChange, type, resolveUploader} = this.props
  if (!assetFromSource) {
    throw new Error('No asset given');
  }

  if (!Array.isArray(assetFromSource) || assetFromSource.length === 0) {
    throw new Error('Returned value must be an array with at least one item (asset)');
  }

  var firstAsset = assetFromSource[0];
  var originalFilename = (0, _get2.default)(firstAsset, 'assetDocumentProps.originalFilename');
  var label = (0, _get2.default)(firstAsset, 'assetDocumentProps.label');
  var title = (0, _get2.default)(firstAsset, 'assetDocumentProps.title');
  var description = (0, _get2.default)(firstAsset, 'assetDocumentProps.description');
  var creditLine = (0, _get2.default)(firstAsset, 'assetDocumentProps.creditLine');
  var source = (0, _get2.default)(firstAsset, 'assetDocumentProps.source');
  var imagePatches = isImage ? [(0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop'])] : [];

  switch (firstAsset.kind) {
    case 'assetDocumentId':
      onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
        _type: type.name
      }), ...imagePatches, (0, _PatchEvent.set)({
        _type: 'reference',
        _ref: firstAsset.value
      }, ['asset'])]));
      break;

    case 'file':
      {
        var _uploader = resolveUploader(type, firstAsset.value);

        if (_uploader) {
          uploadWith(_uploader, firstAsset.value, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }

        break;
      }

    case 'base64':
      (0, _image.base64ToFile)(firstAsset.value, originalFilename).then(file => {
        var uploader = resolveUploader(type, file);

        if (uploader) {
          uploadWith(uploader, file, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }
      });
      break;

    case 'url':
      (0, _image.urlToFile)(firstAsset.value, originalFilename).then(file => {
        var uploader = resolveUploader(type, file);

        if (uploader) {
          uploadWith(uploader, file, {
            label,
            title,
            description,
            creditLine,
            source
          });
        }
      });
      break;

    default:
      {
        throw new Error('Invalid value returned from asset source plugin');
      }
  }
}