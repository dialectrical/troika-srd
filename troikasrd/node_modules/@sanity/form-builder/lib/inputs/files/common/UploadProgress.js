"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadProgress = UploadProgress;

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _progress = require("../../../components/progress");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// If it's more than this amount of milliseconds since last time upload state was reported,
// the upload will be marked as stale/interrupted.
var STALE_UPLOAD_MS = 1000 * 60 * 2; // 2 minutes

var elapsedMs = date => new Date().getTime() - new Date(date).getTime();

function UploadProgress(_ref) {
  var uploadState = _ref.uploadState,
      onCancel = _ref.onCancel,
      onClearStale = _ref.onClearStale;
  var completed = uploadState.progress === 100;
  var filename = uploadState.file.name;
  var isStale = elapsedMs(uploadState.updated) > STALE_UPLOAD_MS;
  var shouldShowCancelButton = Boolean(onCancel);
  var shouldShowRemoveButton = Boolean(isStale && onClearStale);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 2
  }, isStale && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    justify: "center",
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, /*#__PURE__*/_react.default.createElement(_icons.WarningOutlineIcon, null)), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "medium"
  }, "Incomplete upload"))), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    align: "center",
    muted: true,
    size: 1
  }, "This upload made no progress in the last", ' ', (0, _prettyMs.default)(elapsedMs(uploadState.updated), {
    compact: true
  }), " and likely got interrupted.")), !isStale && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_progress.CircularProgress, {
    value: completed ? 100 : uploadState.progress
  })), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    align: "center",
    muted: true,
    size: 1
  }, completed && !isStale && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Complete"), !completed && !isStale && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Uploading", filename ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, ' ', /*#__PURE__*/_react.default.createElement("code", null, filename)) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\u2026"))))), (shouldShowCancelButton || shouldShowRemoveButton) && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    marginTop: 4,
    space: 1
  }, shouldShowCancelButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
    fontSize: 1,
    mode: "ghost",
    color: "danger",
    onClick: onCancel,
    text: "Cancel"
  }), shouldShowRemoveButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
    fontSize: 1,
    mode: "ghost",
    onClick: onClearStale,
    icon: _icons.TrashIcon,
    text: "Remove incomplete file",
    tone: "critical"
  })));
}