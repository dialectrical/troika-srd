"use strict";

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _react2 = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _schema = _interopRequireDefault(require("@sanity/schema"));

var _ObjectInput = require("../ObjectInput");

var _FormBuilderContext = _interopRequireDefault(require("../../../FormBuilderContext"));

var _is = _interopRequireDefault(require("../../../utils/is"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var schema = _schema.default.compile({
  name: 'test',
  types: [{
    title: 'Fieldsets test',
    name: 'fieldsetsTest',
    type: 'document',
    fieldsets: [{
      name: 'withDefaults',
      title: 'Fieldset with defaults'
    }, {
      name: 'collapsibleWithDefaults',
      title: 'Collapsible fieldset with defaults',
      options: {
        collapsible: true
      }
    }],
    fields: [{
      name: 'withDefaults1',
      type: 'string',
      fieldset: 'withDefaults'
    }, {
      name: 'collapsibleWithDefaults1',
      type: 'string',
      fieldset: 'collapsibleWithDefaults'
    }]
  }]
});

var GenericInput = /*#__PURE__*/(0, _react2.forwardRef)(function GenericInput(props, ref) {
  return /*#__PURE__*/_react2.default.createElement("input", {
    type: "string",
    ref: ref,
    onFocus: props.onFocus
  });
});

var GenericPreview = function GenericPreview(props) {
  return /*#__PURE__*/_react2.default.createElement("div", null);
};

function inputResolver(type) {
  if ((0, _is.default)('object', type)) {
    return _ObjectInput.ObjectInput;
  }

  return GenericInput;
}

var DEFAULT_PROPS = {
  onFocus: jest.fn(),
  onBlur: jest.fn(),
  onChange: jest.fn(),
  markers: [],
  level: 0,
  presence: []
}; // eslint-disable-next-line no-empty-function,@typescript-eslint/no-empty-function

var noop = () => {};

var ObjectInputTester = /*#__PURE__*/(0, _react2.forwardRef)(function ObjectInputTester(props, ref) {
  return /*#__PURE__*/_react2.default.createElement(_ui.ThemeProvider, {
    scheme: "light",
    theme: _ui.studioTheme
  }, /*#__PURE__*/_react2.default.createElement(_ui.LayerProvider, null, /*#__PURE__*/_react2.default.createElement(_FormBuilderContext.default, {
    value: undefined,
    patchChannel: {
      onPatch: noop
    },
    schema: schema,
    filterField: () => true,
    resolveInputComponent: inputResolver,
    resolvePreviewComponent: type => GenericPreview
  }, /*#__PURE__*/_react2.default.createElement(_ObjectInput.ObjectInput, _extends({}, DEFAULT_PROPS, props, {
    ref: ref
  })))));
});
describe('fieldset with default options', () => {
  it('renders fields in a <fieldset element and includes a <legend', () => {
    var _render = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render.queryByTestId;

    var fieldset = queryByTestId('fieldset-withDefaults');
    expect(fieldset).toBeVisible();
    expect(fieldset.tagName).toBe('FIELDSET');
    var legend = fieldset.querySelector('legend');
    expect(legend).toBeVisible();
    expect(legend).toContainHTML('Fieldset with defaults');
    var field1 = queryByTestId('input-withDefaults1');
    expect(field1).toBeVisible();
    expect(fieldset).toContainElement(field1);
  });
  it('does not render a toggle button for the fieldset legend ', () => {
    var _render2 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      type: schema.get('fieldsetsTest')
    })),
        container = _render2.container;

    var fieldset = container.querySelector('fieldset');
    expect(fieldset).toBeVisible();
    var legend = fieldset.querySelector('legend');
    expect(legend).toBeVisible();
    expect(legend.querySelector('button')).toBeNull();
  });
});
describe('collapsible fieldset with default options', () => {
  it('renders fields in a <fieldset element and includes a <legend', () => {
    var _render3 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render3.queryByTestId;

    var fieldset = queryByTestId('fieldset-collapsibleWithDefaults');
    expect(fieldset).toBeVisible();
    expect(fieldset.tagName).toBe('FIELDSET');
    var legend = fieldset.querySelector('legend');
    expect(legend).toBeVisible();
    expect(legend).toContainHTML('Collapsible fieldset with defaults');
  });
  it('renders a button for the fieldset legend ', () => {
    var _render4 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render4.queryByTestId;

    var fieldset = queryByTestId('fieldset-collapsibleWithDefaults');
    expect(fieldset).toBeVisible();
    var toggleButton = fieldset.querySelector('legend button');
    expect(toggleButton).toBeVisible();
  });
  it('renders collapsed initially', () => {
    var _render5 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render5.queryByTestId;

    var fieldset = queryByTestId('fieldset-collapsibleWithDefaults');
    expect(fieldset).toBeVisible();
    var field1 = queryByTestId('input-collapsibleWithDefaults1');
    expect(field1).toBeNull();
  });
  it('expands if focus path targets a field inside the fieldset', () => {
    var _render6 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      focusPath: ['collapsibleWithDefaults1'],
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render6.queryByTestId;

    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeVisible();
  });
  it('emits a focus path targeting the field when clicking toggle button', () => {
    var onFocus = jest.fn();

    var _render7 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      onFocus: onFocus,
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render7.queryByTestId;

    var fieldset = queryByTestId('fieldset-collapsibleWithDefaults');
    expect(fieldset).toBeVisible();
    var toggleButton = fieldset.querySelector('legend button');
    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeNull();
    expect(toggleButton).toBeDefined();

    _userEvent.default.click(toggleButton);

    expect(onFocus).toHaveBeenCalledTimes(1);
    expect(onFocus).toHaveBeenCalledWith(['collapsibleWithDefaults1']);
  });
  it('toggles collapse/expand despite focus path targeting field inside', () => {
    var innerFieldPath = ['collapsibleWithDefaults1'];

    var _render8 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      focusPath: innerFieldPath,
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render8.queryByTestId,
        rerender = _render8.rerender;

    var fieldset = queryByTestId('fieldset-collapsibleWithDefaults'); // visible because of focus path

    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeVisible();
    var toggleButton = fieldset.querySelector('legend button');
    expect(toggleButton).toBeDefined();

    _userEvent.default.click(toggleButton);

    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeNull(); // click to expand again

    _userEvent.default.click(toggleButton);

    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeVisible(); // move focus to another field should keep it open

    rerender( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      focusPath: [],
      type: schema.get('fieldsetsTest')
    }));
    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeVisible(); // collapse again

    _userEvent.default.click(toggleButton); // move focus to a field inside again should make it expand


    rerender( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      focusPath: innerFieldPath,
      type: schema.get('fieldsetsTest')
    }));
    expect(queryByTestId('input-collapsibleWithDefaults1')).toBeVisible();
  });
  it('does not emit a new focus path when being collapsed', () => {
    // Note: this is important because ObjectFieldsets are "virtual", e.g. they are UI only and does not represent a location in the document
    // and putting focus on the parent document node will in some cases create "focus jumps"
    var onFocus = jest.fn();

    var _render9 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(ObjectInputTester, {
      onFocus: onFocus,
      focusPath: ['collapsibleWithDefaults1'],
      type: schema.get('fieldsetsTest')
    })),
        queryByTestId = _render9.queryByTestId;

    var fieldset = queryByTestId('fieldset-collapsibleWithDefaults');
    var toggleButton = fieldset.querySelector('legend button');
    expect(toggleButton).toBeDefined();

    _userEvent.default.click(toggleButton);

    expect(onFocus).not.toHaveBeenCalled();
  });
});