"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectFieldSet = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _empty = require("../../utils/empty");

var _utils = require("./utils");

var _excluded = ["fieldset", "focusPath", "children", "level", "presence", "markers", "onFocus"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A specialized component for object "fieldsets", e.g. a group of object fields as defined by the fieldsets option
 * on the object type https://www.sanity.io/docs/object-type#fieldsets-b8b5507db1d3
 */
var ObjectFieldSet = /*#__PURE__*/(0, _react.forwardRef)(function ObjectFieldSet(props, forwardedRef) {
  var fieldset = props.fieldset,
      focusPath = props.focusPath,
      children = props.children,
      level = props.level,
      presence = props.presence,
      markers = props.markers,
      onFocus = props.onFocus,
      rest = _objectWithoutProperties(props, _excluded);

  var columns = fieldset.options && fieldset.options.columns;
  var collapsibleOpts = (0, _utils.getCollapsedWithDefaults)(fieldset.options, level);
  var fieldNames = (0, _react.useMemo)(() => fieldset.fields.map(f => f.name), [fieldset.fields]);

  var _React$useState = _react.default.useState(collapsibleOpts.collapsed),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isCollapsed = _React$useState2[0],
      setCollapsed = _React$useState2[1];

  var childPresence = (0, _react.useMemo)(() => {
    return isCollapsed && presence.length > 0 ? presence.filter(item => typeof item.path[0] === 'string' && fieldNames.includes(item.path[0])) : _empty.EMPTY_ARRAY;
  }, [fieldNames, isCollapsed, presence]);
  var childMarkers = (0, _react.useMemo)(() => {
    return markers.length === 0 ? markers : markers.filter(item => typeof item.path[0] === 'string' && fieldNames.includes(item.path[0]));
  }, [fieldNames, markers]);

  var handleToggleFieldset = _react.default.useCallback(nextCollapsed => {
    if (nextCollapsed) {
      // note: technically, when collapsing this fieldset we remove focus from whatever field (if any) inside
      // it that currently has focus, so it might be tempting to emit a new focus path for the "parent object",
      // e.g. onFocus([]), but this can in some cases have the unintended consequence of creating page jumps, since it
      // will put focus in the the first field of the parent object input, which may be rendered far away from the current fieldset.
      // For this reason, keep the focus path where it is, and just "locally" collapse this fieldset
      setCollapsed(true);
    } else {
      onFocus([fieldNames[0]]);
      setCollapsed(false);
    }
  }, [onFocus, fieldNames]);

  _react.default.useEffect(() => {
    var hasFocusWithin = focusPath.length > 0 && fieldNames.some(fieldName => focusPath[0] === fieldName);

    if (hasFocusWithin) {
      setCollapsed(false);
    }
  }, [fieldNames, focusPath]);

  return /*#__PURE__*/_react.default.createElement(_components.FormFieldSet, _extends({}, rest, {
    key: fieldset.name,
    title: fieldset.title,
    description: fieldset.description,
    level: level + 1,
    columns: columns,
    collapsible: collapsibleOpts.collapsible,
    collapsed: isCollapsed,
    onToggle: handleToggleFieldset,
    __unstable_presence: isCollapsed ? childPresence : _empty.EMPTY_ARRAY,
    __unstable_changeIndicator: false,
    __unstable_markers: childMarkers,
    ref: isCollapsed ? forwardedRef : null
  }), children);
});
exports.ObjectFieldSet = ObjectFieldSet;