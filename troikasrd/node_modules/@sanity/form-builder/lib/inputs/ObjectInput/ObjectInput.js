"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _PatchEvent = require("../../PatchEvent");

var _empty = require("../../utils/empty");

var _ObjectInputField = require("./ObjectInputField");

var _UnknownFields = require("./UnknownFields");

var _ObjectFieldSet = require("./ObjectFieldSet");

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var EMPTY_MARKERS = _empty.EMPTY_ARRAY;
var EMPTY_PRESENCE = _empty.EMPTY_ARRAY;
var EMPTY_PATH = _empty.EMPTY_ARRAY;

function isSingleFieldset(fieldset) {
  return Boolean(fieldset.single);
}

var DEFAULT_FILTER_FIELD = () => true;
/**
 * Please read this about collapsible fields
 * To support deep linking, the received focusPath must always takes precedence over internal collapsed/expanded state.
 * If a field has been expanded (either manually by the user, or because the focus path has caused it to expand) it
 * should then stay open and *not* collapse when the field loses focus (e.g. no autocollapse!)
 * If a field has been actively collapsed by the user, it must still expand again if it receives focus on a path within later on.
 */
// disable eslint false positive
// eslint-disable-next-line react/display-name


var ObjectInput = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function ObjectInput(props, forwardedRef) {
  var type = props.type,
      _props$presence = props.presence,
      presence = _props$presence === void 0 ? EMPTY_PRESENCE : _props$presence,
      _props$markers = props.markers,
      markers = _props$markers === void 0 ? EMPTY_MARKERS : _props$markers,
      onChange = props.onChange,
      readOnly = props.readOnly,
      _props$level = props.level,
      level = _props$level === void 0 ? 0 : _props$level,
      _props$focusPath = props.focusPath,
      focusPath = _props$focusPath === void 0 ? EMPTY_PATH : _props$focusPath,
      _props$isRoot = props.isRoot,
      isRoot = _props$isRoot === void 0 ? false : _props$isRoot,
      value = props.value,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      compareValue = props.compareValue,
      _props$filterField = props.filterField,
      filterField = _props$filterField === void 0 ? DEFAULT_FILTER_FIELD : _props$filterField;

  var handleFieldChange = _react.default.useCallback((fieldEvent, field) => {
    var event = fieldEvent.prefixAll(field.name);

    if (!isRoot) {
      event = event.prepend((0, _PatchEvent.setIfMissing)(type.name === 'object' ? {} : {
        _type: type.name
      }));

      if (value) {
        var valueTypeName = value && value._type;
        var schemaTypeName = type.name;

        if (valueTypeName && schemaTypeName === 'object') {
          // The value has a _type key, but the type name from schema is 'object',
          // but _type: 'object' is implicit so we should fix it by removing it
          event = event.prepend((0, _PatchEvent.unset)(['_type']));
        } else if (schemaTypeName !== 'object' && valueTypeName !== schemaTypeName) {
          // There's a mismatch between schema type and the value _type
          // fix it by setting _type to type name defined in schema
          event = event.prepend((0, _PatchEvent.set)(schemaTypeName, ['_type']));
        }
      }
    }

    onChange === null || onChange === void 0 ? void 0 : onChange(event);
  }, [isRoot, onChange, type.name, value]);

  var renderField = _react.default.useCallback((field, fieldLevel, index) => {
    var fieldValue = value === null || value === void 0 ? void 0 : value[field.name];

    if (!filterField(type, field)) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_ObjectInputField.ObjectInputField, {
      parent: value,
      key: "field-".concat(field.name),
      field: field,
      value: fieldValue,
      onChange: handleFieldChange,
      onFocus: onFocus,
      onBlur: onBlur,
      compareValue: compareValue,
      markers: markers,
      focusPath: focusPath,
      level: fieldLevel,
      presence: presence,
      readOnly: readOnly,
      filterField: filterField,
      ref: index === 0 ? forwardedRef : null
    });
  }, [compareValue, filterField, focusPath, forwardedRef, handleFieldChange, markers, onBlur, onFocus, presence, readOnly, type, value]);

  var renderFields = (0, _react.useCallback)(() => {
    if (!type.fieldsets) {
      // this is a fallback for schema types that are not parsed to be objects, but still has jsonType == 'object'
      return (type.fields || []).map((field, index) => renderField(field, level + 1, index));
    }

    return type.fieldsets.map((fieldset, fieldsetIndex) => {
      return isSingleFieldset(fieldset) ? renderField(fieldset.field, level + 1, fieldsetIndex) : /*#__PURE__*/_react.default.createElement(_ObjectFieldSet.ObjectFieldSet, {
        key: "fieldset-".concat(fieldset.name),
        "data-testid": "fieldset-".concat(fieldset.name),
        fieldset: fieldset,
        focusPath: focusPath,
        onFocus: onFocus,
        level: level + 1,
        presence: presence,
        markers: markers
      }, () => // lazy render children
      // eslint-disable-next-line max-nested-callbacks
      fieldset.fields.map((field, fieldIndex) => renderField(field, level + 2, fieldsetIndex + fieldIndex)));
    });
  }, [focusPath, level, markers, onFocus, presence, renderField, type.fields, type.fieldsets]);
  var renderUnknownFields = (0, _react.useCallback)(() => {
    if (!type.fields) {
      return null;
    }

    var knownFieldNames = type.fields.map(field => field.name);
    var unknownFields = Object.keys(value || {}).filter(key => !key.startsWith('_') && !knownFieldNames.includes(key));

    if (unknownFields.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_UnknownFields.UnknownFields, {
      readOnly: readOnly,
      fieldNames: unknownFields,
      value: value,
      onChange: onChange
    });
  }, [onChange, readOnly, type.fields, value]);
  var renderAllFields = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderFields(), renderUnknownFields());
  }, [renderFields, renderUnknownFields]);
  var collapsibleOpts = (0, _utils.getCollapsedWithDefaults)(type.options, level);

  var _React$useState = _react.default.useState(collapsibleOpts.collapsed),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isCollapsed = _React$useState2[0],
      setCollapsed = _React$useState2[1];

  var handleToggleFieldset = _react.default.useCallback(nextCollapsed => {
    if (nextCollapsed) {
      setCollapsed(true); // We can now put focus on the object value itself since it's collapsed

      onFocus([]);
    } else {
      onFocus([type.fields[0].name]);
    }
  }, [onFocus, type.fields]);

  _react.default.useEffect(() => {
    var hasFocusWithin = focusPath.length > 0;

    if (hasFocusWithin) {
      setCollapsed(false);
    }
  }, [focusPath]);

  var columns = type.options && type.options.columns;

  if (level === 0) {
    // We don't want to render the fields wrapped in a fieldset if nesting level is 0
    // (e.g. when the object input is used as the root element in a form or a dialog)
    return /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      columns: columns,
      gapX: 4,
      gapY: 5
    }, renderAllFields());
  }

  return /*#__PURE__*/_react.default.createElement(_components.FormFieldSet, {
    ref: isCollapsed ? forwardedRef : null,
    level: level,
    title: type.title,
    description: type.description,
    columns: columns,
    collapsible: collapsibleOpts.collapsible,
    collapsed: isCollapsed,
    onToggle: handleToggleFieldset,
    __unstable_presence: isCollapsed ? presence : _empty.EMPTY_ARRAY,
    __unstable_markers: isCollapsed ? markers : _empty.EMPTY_ARRAY,
    __unstable_changeIndicator: false
  }, renderAllFields);
}));
exports.ObjectInput = ObjectInput;