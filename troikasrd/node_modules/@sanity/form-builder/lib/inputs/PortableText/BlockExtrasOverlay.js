"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockExtrasOverlay;

var _react = _interopRequireDefault(require("react"));

var _blockExtras = _interopRequireDefault(require("part:@sanity/form-builder/input/block-editor/block-extras"));

var _types = require("@sanity/types");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _createBlockActionPatchFn = _interopRequireDefault(require("./utils/createBlockActionPatchFn"));

var _BlockExtrasOverlay = _interopRequireDefault(require("./BlockExtrasOverlay.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var findBlockMarkers = (block, markers) => markers.filter(marker => (0, _types.isKeySegment)(marker.path[0]) && marker.path[0]._key === block._key);

function BlockExtrasOverlay(props) {
  var value = props.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();

  var ptFeatures = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor); // Render overlay for each block


  return /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockExtrasOverlay.default.root
  }, (value || []).map(blk => /*#__PURE__*/_react.default.createElement(BlockExtrasWithBlockActionsAndHeight, _extends({}, props, {
    block: blk,
    ptFeatures: ptFeatures,
    key: "blockExtras-".concat(blk._key)
  }))));
}

function BlockExtrasWithBlockActionsAndHeight(props) {
  var block = props.block,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onChange = props.onChange,
      onFocus = props.onFocus,
      ptFeatures = props.ptFeatures,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      value = props.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var blockMarkers = findBlockMarkers(block, markers);

  var element = _portableTextEditor.PortableTextEditor.findDOMNode(editor, block);

  if (!element) {
    return null;
  }

  var rect = element.getBoundingClientRect();
  var actions = null;

  if (renderBlockActions) {
    var RenderComponent = renderBlockActions;

    if (block) {
      actions = /*#__PURE__*/_react.default.createElement(RenderComponent, {
        block: block,
        value: value,
        set: (0, _createBlockActionPatchFn.default)('set', block, onChange, ptFeatures),
        unset: (0, _createBlockActionPatchFn.default)('unset', block, onChange, ptFeatures),
        insert: (0, _createBlockActionPatchFn.default)('insert', block, onChange, ptFeatures)
      });
    }
  }

  var top = element.scrollTop + element.offsetTop;
  var height = rect.height;
  return /*#__PURE__*/_react.default.createElement("div", {
    key: "blockExtras-".concat(block._key),
    className: _BlockExtrasOverlay.default.block,
    style: {
      height: "".concat(height, "px"),
      top: "".concat(top, "px")
    }
  }, /*#__PURE__*/_react.default.createElement(_blockExtras.default, {
    block: block,
    height: height,
    isFullscreen: isFullscreen,
    blockActions: actions,
    markers: blockMarkers,
    onFocus: onFocus,
    renderCustomMarkers: renderCustomMarkers,
    value: value
  }));
}