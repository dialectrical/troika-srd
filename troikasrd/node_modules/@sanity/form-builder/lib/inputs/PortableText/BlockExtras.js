"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockExtras;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _changeIndicators = require("@sanity/base/change-indicators");

var _blockMarkers = _interopRequireDefault(require("part:@sanity/form-builder/input/block-editor/block-markers"));

var _types = require("@sanity/types");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _BlockExtras = _interopRequireDefault(require("./BlockExtras.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function BlockExtras(props) {
  var _PortableTextEditor$g;

  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var block = props.block,
      blockActions = props.blockActions,
      height = props.height,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onFocus = props.onFocus,
      renderCustomMarkers = props.renderCustomMarkers;
  var blockValidation = getValidationMarkers(markers);
  var errors = blockValidation.filter(mrkr => mrkr.level === 'error');
  var warnings = blockValidation.filter(mrkr => mrkr.level === 'warning');
  var empty = markers.length === 0 && !blockActions;

  var content = /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockExtras.default.content,
    style: {
      height: "".concat(height, "px")
    }
  }, markers.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockExtras.default.markers
  }, /*#__PURE__*/_react.default.createElement(_blockMarkers.default, {
    className: _BlockExtras.default.markers,
    markers: markers,
    scopedValidation: blockValidation,
    onFocus: onFocus,
    renderCustomMarkers: renderCustomMarkers
  })), blockActions && /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockExtras.default.blockActions
  }, blockActions), empty && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\u200B"));

  var path = (_PortableTextEditor$g = _portableTextEditor.PortableTextEditor.getSelection(editor)) === null || _PortableTextEditor$g === void 0 ? void 0 : _PortableTextEditor$g.focus.path;
  var hasFocus = path && (0, _types.isKeySegment)(path[0]) ? path[0]._key === block._key : false;
  var returned = isFullscreen && path && (0, _types.isKeySegment)(path[0]) ? /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorWithProvidedFullPath, {
    className: _BlockExtras.default.changeIndicator,
    compareDeep: true,
    value: block,
    hasFocus: hasFocus,
    path: [{
      _key: block._key
    }]
  }, content) : content;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)([_BlockExtras.default.root, hasFocus && _BlockExtras.default.hasFocus, isFullscreen && _BlockExtras.default.hasFullScreen, errors.length > 0 && _BlockExtras.default.withError, warnings.length > 0 && !errors.length && _BlockExtras.default.withWarning])
  }, returned);
}

function getValidationMarkers(markers) {
  var validation = markers.filter(mrkr => mrkr.type === 'validation');
  return validation.map(mrkr => {
    if (mrkr.path.length <= 1) {
      return mrkr;
    }

    var level = mrkr.level === 'error' ? 'errors' : 'warnings';
    return _objectSpread(_objectSpread({}, mrkr), {}, {
      item: mrkr.item.cloneWithMessage("Contains ".concat(level))
    });
  });
}