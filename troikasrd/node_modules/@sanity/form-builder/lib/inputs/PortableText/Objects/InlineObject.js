"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineObject = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _types = require("@sanity/types");

var _paths = require("@sanity/util/paths");

var _Preview = _interopRequireDefault(require("../../../Preview"));

var _InlineObject = _interopRequireDefault(require("./InlineObject.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/prop-types */
var InlineObject = _ref => {
  var value = _ref.value,
      type = _ref.type,
      markers = _ref.markers,
      _ref$attributes = _ref.attributes,
      focused = _ref$attributes.focused,
      selected = _ref$attributes.selected,
      path = _ref$attributes.path,
      onFocus = _ref.onFocus,
      readOnly = _ref.readOnly;
  var errors = markers.filter(_types.isValidationErrorMarker);
  var classnames = (0, _classnames.default)([_InlineObject.default.root, focused && _InlineObject.default.focused, selected && _InlineObject.default.selected, errors.length > 0 && _InlineObject.default.hasErrors]);

  var handleOpen = event => {
    if (focused) {
      onFocus(path.concat(_paths.FOCUS_TERMINATOR));
    }
  };

  var isEmpty = !value || (0, _isEqual2.default)(Object.keys(value), ['_key', '_type']);
  return /*#__PURE__*/_react.default.createElement("span", {
    className: classnames,
    onClick: handleOpen
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: _InlineObject.default.previewContainer,
    style: readOnly ? {
      cursor: 'default'
    } : {} // TODO: Probably move to styles aka. className?

  }, !isEmpty && /*#__PURE__*/_react.default.createElement(_Preview.default, {
    type: type,
    value: value,
    layout: "inline"
  }), isEmpty && !readOnly && /*#__PURE__*/_react.default.createElement("span", null, "Click to edit")));
};

exports.InlineObject = InlineObject;