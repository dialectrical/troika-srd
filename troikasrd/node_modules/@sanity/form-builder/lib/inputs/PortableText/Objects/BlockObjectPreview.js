"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockObjectPreview = void 0;

var _react = _interopRequireDefault(require("react"));

var _dropdown = _interopRequireDefault(require("part:@sanity/components/buttons/dropdown"));

var _editIcon = _interopRequireDefault(require("part:@sanity/base/edit-icon"));

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _visibilityIcon = _interopRequireDefault(require("part:@sanity/base/visibility-icon"));

var _Preview = _interopRequireDefault(require("../../../Preview"));

var _BlockObjectMenuItem = require("./BlockObjectMenuItem");

var _BlockObject = _interopRequireDefault(require("./BlockObject.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />

/* eslint-disable react/prop-types */
var BlockObjectPreview = _ref => {
  var value = _ref.value,
      type = _ref.type,
      readOnly = _ref.readOnly,
      onClickingEdit = _ref.onClickingEdit,
      onClickingDelete = _ref.onClickingDelete;
  var menuItems = [];

  if (value._ref) {
    menuItems.push({
      title: 'Go to reference',
      icon: _linkIcon.default,
      intent: 'edit',
      params: {
        id: value._ref
      }
    });
  }

  if (readOnly) {
    menuItems.push({
      title: 'View',
      icon: _visibilityIcon.default,
      name: 'view'
    });
  } else {
    menuItems.push({
      title: 'Edit',
      icon: _editIcon.default,
      name: 'edit'
    });
    menuItems.push({
      title: 'Delete',
      icon: _trashIcon.default,
      name: 'delete',
      color: 'danger'
    });
  }

  var handleHeaderMenuAction = item => {
    if (item.name === 'delete') {
      onClickingDelete();
    }

    if (item.name === 'edit') {
      onClickingEdit();
    }

    if (item.name === 'view') {
      onClickingEdit();
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockObject.default.preview
  }, /*#__PURE__*/_react.default.createElement(_Preview.default, {
    type: type,
    value: value,
    layout: "block"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockObject.default.header
  }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    items: menuItems,
    kind: "simple",
    onAction: handleHeaderMenuAction,
    padding: "small",
    placement: "bottom-end",
    renderItem: _BlockObjectMenuItem.MenuItem
  }, type ? type.title || type.name : 'Unknown')));
};

exports.BlockObjectPreview = BlockObjectPreview;