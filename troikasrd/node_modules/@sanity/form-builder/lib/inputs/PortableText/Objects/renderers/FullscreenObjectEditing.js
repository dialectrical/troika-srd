"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FullscreenObjectEditing = FullscreenObjectEditing;

var _presence = require("@sanity/base/presence");

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _react = _interopRequireWildcard(require("react"));

var _FormBuilderInput = require("../../../../FormBuilderInput");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />

/* eslint-disable react/prop-types */
function FullscreenObjectEditing(_ref) {
  var focusPath = _ref.focusPath,
      markers = _ref.markers,
      object = _ref.object,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onClose = _ref.onClose,
      onFocus = _ref.onFocus,
      path = _ref.path,
      presence = _ref.presence,
      readOnly = _ref.readOnly,
      type = _ref.type;
  var handleChange = (0, _react.useCallback)(patchEvent => onChange(patchEvent, path), [onChange, path]);
  var handleEscape = (0, _react.useCallback)(event => onClose(event), [onClose]);
  return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
    isOpen: true,
    onClose: onClose,
    onEscape: handleEscape,
    title: type.title
  }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    focusPath: focusPath,
    level: 0,
    markers: markers,
    onBlur: onBlur,
    onChange: handleChange,
    onFocus: onFocus,
    path: path,
    presence: presence,
    readOnly: readOnly || type.readOnly,
    type: type,
    value: object
  })));
}