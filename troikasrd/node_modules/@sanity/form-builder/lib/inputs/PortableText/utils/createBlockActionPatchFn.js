"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createBlockActionPatchFn;

var _blockTools = require("@sanity/block-tools");

var _PatchEvent = _interopRequireWildcard(require("../../../PatchEvent"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function createBlockActionPatchFn(type, block, onPatch, portableTextFeatures) {
  var toInsert;
  var allowedDecorators = portableTextFeatures.decorators.map(item => item.value);

  switch (type) {
    case 'set':
      return givenBlock => {
        return onPatch(_PatchEvent.default.from((0, _PatchEvent.set)((0, _blockTools.normalizeBlock)(givenBlock, {
          allowedDecorators
        }), [{
          _key: block._key
        }])));
      };

    case 'unset':
      return () => {
        return onPatch(_PatchEvent.default.from((0, _PatchEvent.unset)([{
          _key: block._key
        }])));
      };

    case 'insert':
      return givenBlock => {
        toInsert = Array.isArray(givenBlock) ? givenBlock : [givenBlock];
        toInsert = toInsert.map(blk => (0, _blockTools.normalizeBlock)(blk, {
          allowedDecorators
        }));
        return onPatch(_PatchEvent.default.from((0, _PatchEvent.insert)(toInsert, 'after', [{
          _key: block._key
        }])));
      };

    default:
      throw new Error("Patch type ".concat(type, " not supported"));
  }
}