"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPTEToolbarActionGroups = getPTEToolbarActionGroups;
exports.getBlockStyleSelectProps = getBlockStyleSelectProps;
exports.getInsertMenuItems = getInsertMenuItems;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _formatBoldIcon = _interopRequireDefault(require("part:@sanity/base/format-bold-icon"));

var _formatItalicIcon = _interopRequireDefault(require("part:@sanity/base/format-italic-icon"));

var _formatStrikethroughIcon = _interopRequireDefault(require("part:@sanity/base/format-strikethrough-icon"));

var _formatUnderlinedIcon = _interopRequireDefault(require("part:@sanity/base/format-underlined-icon"));

var _formatCodeIcon = _interopRequireDefault(require("part:@sanity/base/format-code-icon"));

var _sanityLogoIcon = _interopRequireDefault(require("part:@sanity/base/sanity-logo-icon"));

var _formatListBulletedIcon = _interopRequireDefault(require("part:@sanity/base/format-list-bulleted-icon"));

var _formatListNumberedIcon = _interopRequireDefault(require("part:@sanity/base/format-list-numbered-icon"));

var _blockObjectIcon = _interopRequireDefault(require("part:@sanity/base/block-object-icon"));

var _inlineObjectIcon = _interopRequireDefault(require("part:@sanity/base/inline-object-icon"));

var _react = _interopRequireDefault(require("react"));

var _CustomIcon = _interopRequireDefault(require("./CustomIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />

/* eslint-disable react/no-multi-comp */
function getFormatIcon(type, schemaIcon) {
  if (schemaIcon) {
    return schemaIcon;
  }

  switch (type) {
    case 'strong':
      return _formatBoldIcon.default;

    case 'em':
      return _formatItalicIcon.default;

    case 'underline':
      return _formatUnderlinedIcon.default;

    case 'strike-through':
      return _formatStrikethroughIcon.default;

    case 'code':
      return _formatCodeIcon.default;

    default:
      return _sanityLogoIcon.default;
  }
}

function getPTEFormatActions(editor, selection, hotkeyOpts) {
  var features = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(editor);

  return features.decorators.map(decorator => {
    var shortCutKey = Object.keys(hotkeyOpts.marks).find(key => hotkeyOpts.marks[key] === decorator.value);
    var hotkeys;

    if (shortCutKey) {
      hotkeys = [shortCutKey];
    }

    return {
      active: _portableTextEditor.PortableTextEditor.isMarkActive(editor, decorator.value),
      disabled: !selection || (focusBlock ? features.types.block.name !== focusBlock._type : false),
      icon: getFormatIcon(decorator.value, decorator.blockEditor && decorator.blockEditor.icon),
      key: decorator.value,
      handle: () => _portableTextEditor.PortableTextEditor.toggleMark(editor, decorator.value),
      hotkeys,
      title: decorator.title
    };
  });
}

function getListIcon(item, active) {
  var Icon;
  var icon = item.blockEditor ? item.blockEditor.icon : null;

  if (icon) {
    if (typeof icon === 'string') {
      // eslint-disable-next-line react/display-name
      Icon = () => /*#__PURE__*/_react.default.createElement(_CustomIcon.default, {
        icon: icon,
        active: !!active
      });
    } else if (typeof icon === 'function') {
      Icon = icon;
    }
  }

  if (Icon) return Icon;

  switch (item.value) {
    case 'number':
      return _formatListNumberedIcon.default;

    case 'bullet':
      return _formatListBulletedIcon.default;

    default:
      return _sanityLogoIcon.default;
  }
}

function getPTEListActions(editor, selection) {
  var features = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(editor);

  return features.lists.map(listItem => {
    var active = _portableTextEditor.PortableTextEditor.hasListStyle(editor, listItem.value);

    return {
      active,
      key: listItem.value,
      disabled: !selection || (focusBlock ? features.types.block.name !== focusBlock._type : false),
      icon: getListIcon(listItem, active),
      handle: () => _portableTextEditor.PortableTextEditor.toggleList(editor, listItem.value),
      title: listItem.title
    };
  });
} // eslint-disable-next-line complexity


function getAnnotationIcon(item, active) {
  var Icon;
  var icon = // @todo: Can this be removed?
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  item.icon || (0, _get2.default)(item, 'blockEditor.icon') || (0, _get2.default)(item, 'type.icon') || (0, _get2.default)(item, 'type.to.icon') || (0, _get2.default)(item, 'type.to[0].icon');

  if (icon) {
    if (typeof icon === 'string') {
      // eslint-disable-next-line react/display-name
      Icon = () => /*#__PURE__*/_react.default.createElement(_CustomIcon.default, {
        icon: icon,
        active: !!active
      });
    } else if (typeof icon === 'function') {
      Icon = icon;
    }
  }

  if (Icon) return Icon;

  switch (item.value) {
    case 'link':
      return _linkIcon.default;

    default:
      return _sanityLogoIcon.default;
  }
}

function getPTEAnnotationActions(editor, onInsert) {
  var features = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var activeAnnotations = _portableTextEditor.PortableTextEditor.activeAnnotations(editor);

  var focusChild = _portableTextEditor.PortableTextEditor.focusChild(editor);

  var hasText = focusChild && focusChild.text;
  return features.annotations.map(item => {
    var active = !!activeAnnotations.find(an => an._type === item.type.name);
    return {
      active,
      disabled: !hasText || !focusChild || _portableTextEditor.PortableTextEditor.isVoid(editor, focusChild),
      icon: getAnnotationIcon(item, active),
      key: item.value,
      handle: () => {
        if (active) {
          _portableTextEditor.PortableTextEditor.removeAnnotation(editor, item.type);

          _portableTextEditor.PortableTextEditor.focus(editor);
        } else {
          onInsert(item.type);
        }
      },
      title: item.title
    };
  });
}

function getPTEToolbarActionGroups(editor, selection, onInsertAnnotation, hotkeyOpts) {
  return [{
    name: 'format',
    actions: getPTEFormatActions(editor, selection, hotkeyOpts)
  }, {
    name: 'list',
    actions: getPTEListActions(editor, selection)
  }, {
    name: 'annotation',
    actions: getPTEAnnotationActions(editor, onInsertAnnotation)
  }];
}

function getBlockStyleSelectProps(editor) {
  var features = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var items = features.styles.map(style => {
    return {
      active: _portableTextEditor.PortableTextEditor.hasBlockStyle(editor, style.value),
      key: "style-".concat(style.value),
      style: style.value,
      styleComponent: style && style.blockEditor && style.blockEditor.render,
      title: style.title
    };
  });
  var value = items.filter(item => item.active);

  if (value.length === 0 && items.length > 1) {
    items.push({
      key: 'style-none',
      style: null,
      styleComponent: null,
      title: ' No style',
      active: true
    });
    value = items.slice(-1);
  }

  return {
    items,
    value
  };
}

function getInsertMenuIcon(type, fallbackIcon) {
  var referenceIcon = (0, _get2.default)(type, 'to[0].icon');
  return type.icon || type.type && type.type.icon || referenceIcon || fallbackIcon;
}

function getInsertMenuItems(editor, selection, onInsertBlock, onInsertInline) {
  var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(editor);

  var features = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var blockItems = features.types.blockObjects.map((type, index) => ({
    disabled: !selection,
    handle: () => onInsertBlock(type),
    icon: getInsertMenuIcon(type, _blockObjectIcon.default),
    inline: false,
    key: "block-".concat(index),
    type
  }));
  var inlineItems = features.types.inlineObjects.map((type, index) => ({
    disabled: !selection || (focusBlock ? focusBlock._type !== features.types.block.name : true),
    handle: () => onInsertInline(type),
    icon: getInsertMenuIcon(type, _inlineObjectIcon.default),
    inline: true,
    key: "inline-".concat(index),
    type
  })); // Do not include items that are supposed to be hidden

  var filteredBlockItems = blockItems.concat(inlineItems).filter(item => {
    var _item$type;

    return !((_item$type = item.type) !== null && _item$type !== void 0 && _item$type.hidden);
  });
  return filteredBlockItems;
}