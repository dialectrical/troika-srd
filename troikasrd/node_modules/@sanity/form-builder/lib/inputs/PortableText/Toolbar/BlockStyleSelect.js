"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockStyleSelect;

var _react = _interopRequireWildcard(require("react"));

var _style = _interopRequireDefault(require("part:@sanity/components/selects/style"));

var _portableTextEditor = require("@sanity/portable-text-editor");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function BlockStyleSelect(props) {
  var className = props.className,
      disabled = props.disabled,
      items = props.items,
      padding = props.padding,
      readOnly = props.readOnly,
      renderBlock = props.renderBlock,
      value = props.value,
      selection = props.selection;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      changed = _useState2[0],
      setChanged = _useState2[1];

  var features = _react.default.useMemo(() => _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor), [editor]); // Use this effect to set focus back into the editor when the new value get's in.


  (0, _react.useEffect)(() => {
    if (changed) {
      _portableTextEditor.PortableTextEditor.focus(editor);

      setChanged(false);
    }
  }, [value, changed]);

  var handleChange = item => {
    var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(editor);

    if (focusBlock && item.style !== focusBlock.style) {
      _portableTextEditor.PortableTextEditor.toggleBlockStyle(editor, item.style);
    }

    setChanged(true);
  };

  var renderItem = _react.default.useCallback(item => {
    if (item.style) {
      var StyleComponent = item.styleComponent;
      return renderBlock({
        _key: '1',
        _type: features.types.block.name,
        children: [{
          _key: '2',
          _type: features.types.span.name,
          text: item.title
        }],
        style: item.style
      }, features.types.block, {
        focused: false,
        selected: false,
        path: []
      }, () => StyleComponent ? /*#__PURE__*/_react.default.createElement(StyleComponent, null, item.title) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, item.title),
      /*#__PURE__*/
      // @todo: remove this:
      _react.default.createRef());
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      key: item.key
    }, "No style");
  }, [selection]);

  var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(editor); // @todo: Document what's going on here


  var _disabled = focusBlock ? features.types.block.name !== focusBlock._type : false;

  return /*#__PURE__*/_react.default.createElement("label", {
    className: className
  }, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      display: 'none'
    }
  }, "Text"), /*#__PURE__*/_react.default.createElement(_style.default, {
    onClick: event => event.preventDefault(),
    disabled: readOnly || disabled || _disabled,
    items: items,
    onChange: handleChange,
    padding: padding,
    renderItem: renderItem,
    transparent: true,
    value: value
  }));
}