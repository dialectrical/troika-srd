"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InsertMenu;

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _menuButton = require("part:@sanity/components/menu-button");

var _react = _interopRequireWildcard(require("react"));

var _InsertMenu = _interopRequireDefault(require("./InsertMenu.css"));

var _excluded = ["item", "onClick"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function InsertMenu(props) {
  var disabled = props.disabled,
      items = props.items,
      readOnly = props.readOnly;

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      open = _React$useState2[0],
      setOpen = _React$useState2[1];

  var handleClose = (0, _react.useCallback)(() => {
    setOpen(false);
  }, []);

  var menu = /*#__PURE__*/_react.default.createElement("div", {
    className: _InsertMenu.default.menu
  }, items.map(item => /*#__PURE__*/_react.default.createElement(InsertMenuItem, {
    item: item,
    onClick: handleClose,
    key: item.key
  })));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _InsertMenu.default.root
  }, /*#__PURE__*/_react.default.createElement(_menuButton.MenuButton, {
    buttonProps: {
      'aria-label': 'Insert elements',
      'aria-haspopup': 'menu',
      'aria-expanded': open,
      'aria-controls': 'insertmenu',
      disabled: disabled || readOnly,
      icon: _plusIcon.default,
      kind: 'simple',
      padding: 'small',
      selected: open,
      title: 'Insert elements'
    },
    menu: menu,
    open: open,
    placement: "bottom",
    portal: true,
    setOpen: setOpen
  }));
}

function InsertMenuItem(_ref) {
  var item = _ref.item,
      onClick = _ref.onClick,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var handleClick = (0, _react.useCallback)(event => {
    item.handle();
    if (onClick) onClick(event);
  }, [item, onClick]);
  var title = item.type.title || item.type.type.name;
  return /*#__PURE__*/_react.default.createElement(_default.default, _extends({}, restProps, {
    "aria-label": "Insert ".concat(title).concat(item.inline ? ' (inline)' : ' (block)'),
    bleed: true,
    className: _InsertMenu.default.menuItem,
    disabled: item.disabled,
    icon: item.icon,
    kind: "simple",
    onClick: handleClick,
    title: "Insert ".concat(title).concat(item.inline ? ' (inline)' : ' (block)')
  }), title);
}