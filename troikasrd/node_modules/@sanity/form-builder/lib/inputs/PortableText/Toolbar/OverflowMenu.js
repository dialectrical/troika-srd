"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverflowMenu = OverflowMenu;

var _classnames = _interopRequireDefault(require("classnames"));

var _ellipsisIcon = _interopRequireDefault(require("part:@sanity/base/ellipsis-icon"));

var _menuButton = require("part:@sanity/components/menu-button");

var _react = _interopRequireWildcard(require("react"));

var _OverflowMenu = _interopRequireDefault(require("./OverflowMenu.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var preventDefault = event => {
  event.preventDefault();
  event.stopPropagation();
};

function OverflowMenu(props) {
  var ActionButton = props.actionButtonComponent,
      ActionMenuItem = props.actionMenuItemComponent,
      actions = props.actions,
      disabled = props.disabled;
  var actionBarRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(actions.map((__, index) => ({
    index,
    visible: false
  }))),
      _useState2 = _slicedToArray(_useState, 2),
      actionStates = _useState2[0],
      setActionStates = _useState2[1];

  var actionStatesRef = (0, _react.useRef)(actionStates);
  var showOverflowButton = (0, _react.useMemo)(() => actionStates.filter(a => !a.visible).length > 0, [actionStates]);
  var hiddenActions = (0, _react.useMemo)(() => actionStates.filter(a => !a.visible), [actionStates]);
  var lastHidden = hiddenActions.length === 1;
  var ioRef = (0, _react.useRef)(null);

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      open = _useState4[0],
      setOpen = _useState4[1];

  var handleClose = () => setOpen(false);

  (0, _react.useEffect)(() => {
    var actionBar = actionBarRef.current;

    if (actionBar) {
      var actionContainerEls = Array.from(actionBar.childNodes);

      var handleEntries = entries => {
        var newActionStates = actionStatesRef.current.slice(0);
        entries.forEach(entry => {
          var element = entry.target;
          var actionIndex = Array.from(actionBar.childNodes).indexOf(element);
          var visible = entry.intersectionRatio === 1;
          newActionStates[actionIndex] = {
            index: actionIndex,
            visible
          };
        });
        setActionStates(() => newActionStates);
        actionStatesRef.current = newActionStates;
      }; // @todo: Improve this to show the last item if there's enough space


      var marginRight = 0;
      var io = new window.IntersectionObserver(handleEntries, {
        root: actionBar,
        rootMargin: "0px ".concat(marginRight, "px 0px 0px"),
        threshold: [0, 0.1, 0.9, 1]
      });
      actionContainerEls.forEach(actionContainerEl => io.observe(actionContainerEl));
      ioRef.current = io;
    }

    return () => {
      if (ioRef.current) ioRef.current.disconnect();
    };
  }, [lastHidden]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _OverflowMenu.default.root
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _OverflowMenu.default.actionBar,
    ref: actionBarRef
  }, actions.map((action, actionIndex) => /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_OverflowMenu.default.actionButton, action.firstInGroup && _OverflowMenu.default.firstInGroup),
    "data-index": actionIndex,
    "data-visible": actionStates[actionIndex].visible,
    key: String(actionIndex)
  }, /*#__PURE__*/_react.default.createElement(ActionButton, {
    action: action,
    disabled: disabled,
    visible: actionStates[actionIndex].visible
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: _OverflowMenu.default.overflowButton,
    hidden: !showOverflowButton
  }, /*#__PURE__*/_react.default.createElement(_menuButton.MenuButton, {
    buttonProps: {
      'aria-label': 'Menu',
      'aria-haspopup': 'menu',
      'aria-expanded': open,
      'aria-controls': 'insertmenu',
      icon: _ellipsisIcon.default,
      kind: 'simple',
      padding: 'small',
      selected: open,
      title: 'More actions'
    },
    menu: /*#__PURE__*/_react.default.createElement("div", {
      className: _OverflowMenu.default.overflowMenu
    }, hiddenActions.map((hiddenAction, hiddenActionIndex) => {
      var action = actions[hiddenAction.index];
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(_OverflowMenu.default.menuItem, action.firstInGroup && _OverflowMenu.default.firstInGroup),
        key: String(hiddenActionIndex),
        onMouseDown: preventDefault // Needed so the editor doesn't reset selection

      }, /*#__PURE__*/_react.default.createElement(ActionMenuItem, {
        action: action,
        disabled: disabled,
        onClose: handleClose
      }));
    })),
    open: open,
    placement: "bottom",
    portal: true,
    setOpen: setOpen
  })));
}