"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditDialog = EditDialog;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _presence2 = require("@sanity/base/presence");

var _FormBuilderInput = require("../../../../FormBuilderInput");

var _PopoverDialog = require("../../../../transitional/PopoverDialog");

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function EditDialog(props) {
  var type = props.type,
      value = props.value,
      markers = props.markers,
      focusPath = props.focusPath,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onClose = props.onClose,
      onChange = props.onChange,
      readOnly = props.readOnly,
      filterField = props.filterField,
      referenceElement = props.referenceElement,
      presence = props.presence,
      dialogType = props.dialogType,
      compareValue = props.compareValue;
  var title = readOnly ? "View ".concat(type.title || '') : "Edit ".concat(type.title || '');
  var childMarkers = (0, _react.useMemo)(() => markers.filter(marker => marker.path.length > 1), [markers]);
  var childPresence = (0, _react.useMemo)(() => presence.filter(_presence => _presence.path.length > 1), [presence]);

  var content = /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    type: type,
    level: 0,
    value: (0, _helpers.isEmpty)(value) ? undefined : value,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    compareValue: compareValue,
    focusPath: focusPath,
    readOnly: readOnly || type.readOnly || false,
    markers: childMarkers,
    path: [{
      _key: value._key
    }],
    filterField: filterField,
    presence: childPresence
  });

  if (dialogType === 'fullscreen') {
    return /*#__PURE__*/_react.default.createElement(_ui.Layer, null, /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      width: "auto",
      id: value._key,
      onClose: onClose,
      key: value._key,
      header: title
    }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
      margins: [0, 0, 1, 0]
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, content))));
  }

  if (dialogType === 'popover' || dialogType === 'fold') {
    if (dialogType === 'fold') {
      console.warn("The option named `editItem: \"fold\"` is no longer supported");
    }

    return /*#__PURE__*/_react.default.createElement(_PopoverDialog.PopoverDialog, {
      onClose: onClose,
      referenceElement: referenceElement,
      placement: "auto",
      title: title
    }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
      margins: [0, 0, 1, 0]
    }, content));
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    width: 1,
    id: value._key,
    onClose: onClose,
    key: value._key,
    header: title
  }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, content)));
}