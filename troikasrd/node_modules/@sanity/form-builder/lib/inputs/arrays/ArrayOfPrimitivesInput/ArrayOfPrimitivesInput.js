"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayOfPrimitivesInput = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _paths = require("@sanity/util/paths");

var _ui = require("@sanity/ui");

var _components = require("@sanity/base/components");

var _content = require("@sanity/util/content");

var _PatchEvent = require("../../../PatchEvent");

var _list = require("../common/list");

var _getEmptyValue = _interopRequireDefault(require("./getEmptyValue"));

var _ItemRow = require("./ItemRow");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NO_MARKERS = [];

function move(arr, from, to) {
  var copy = arr.slice();
  var val = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, val);
  return copy;
}

function insertAt(arr, index, item) {
  var copy = arr.slice();
  copy.splice(index + 1, 0, item);
  return copy;
}

class ArrayOfPrimitivesInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_element", null);

    _defineProperty(this, "_lastAddedIndex", -1);

    _defineProperty(this, "handleAppend", itemValue => {
      var _this$props = this.props,
          _this$props$value = _this$props.value,
          value = _this$props$value === void 0 ? [] : _this$props$value,
          onFocus = _this$props.onFocus;
      this.set(value.concat(itemValue));
      onFocus([value.length]);
    });

    _defineProperty(this, "handlePrepend", itemValue => {
      var _this$props2 = this.props,
          _this$props2$value = _this$props2.value,
          value = _this$props2$value === void 0 ? [] : _this$props2$value,
          onFocus = _this$props2.onFocus;
      this.set([itemValue].concat(value));
      onFocus([value.length]);
    });

    _defineProperty(this, "handleRemoveItem", index => {
      this.removeAt(index);
    });

    _defineProperty(this, "handleItemChange", event => {
      this._lastAddedIndex = -1;
      this.props.onChange(event);
    });

    _defineProperty(this, "handleItemEnterKey", index => {
      var _this$props$type;

      var firstType = (_this$props$type = this.props.type) === null || _this$props$type === void 0 ? void 0 : _this$props$type.of[0];

      if (firstType) {
        this.insertAt(index, firstType);
        this._lastAddedIndex = index + 1;
      }
    });

    _defineProperty(this, "handleItemEscapeKey", index => {
      var value = this.props.value;

      if (index === this._lastAddedIndex && value[index] === '') {
        this.removeAt(index);
      }
    });

    _defineProperty(this, "handleSortEnd", event => {
      var value = this.props.value;
      var oldIndex = event.oldIndex,
          newIndex = event.newIndex;
      this.set(move(value, oldIndex, newIndex));
    });

    _defineProperty(this, "setElement", el => {
      this._element = el;
    });

    _defineProperty(this, "handleFocusRoot", () => {
      this.props.onFocus([]);
    });

    _defineProperty(this, "handleFocusItem", (item, index) => {
      this.props.onFocus([index]);
    });
  }

  set(nextValue) {
    this._lastAddedIndex = -1;
    var patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
    this.props.onChange(_PatchEvent.PatchEvent.from(patch));
  }

  removeAt(index) {
    var _this$props$value2 = this.props.value,
        value = _this$props$value2 === void 0 ? [] : _this$props$value2;
    this.set(value.filter((_, i) => i !== index));
    this.props.onFocus([Math.max(0, index - 1)]);
  }

  insertAt(index, type) {
    var _this$props3 = this.props,
        _this$props3$value = _this$props3.value,
        value = _this$props3$value === void 0 ? [] : _this$props3$value,
        onFocus = _this$props3.onFocus;
    var emptyValue = (0, _getEmptyValue.default)(type);

    if (emptyValue === undefined) {
      throw new Error("Cannot create empty primitive value from ".concat(type.name));
    }

    this.set(insertAt(value, index, emptyValue));
    onFocus([index + 1]);
  }

  getMemberType(typeName) {
    var type = this.props.type;
    return type === null || type === void 0 ? void 0 : type.of.find(memberType => memberType.name === typeName || memberType.jsonType === typeName);
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    var _this$props4 = this.props,
        type = _this$props4.type,
        value = _this$props4.value,
        _this$props4$level = _this$props4.level,
        level = _this$props4$level === void 0 ? 1 : _this$props4$level,
        markers = _this$props4.markers,
        readOnly = _this$props4.readOnly,
        onChange = _this$props4.onChange,
        onFocus = _this$props4.onFocus,
        presence = _this$props4.presence,
        compareValue = _this$props4.compareValue,
        focusPath = _this$props4.focusPath,
        ArrayFunctionsImpl = _this$props4.ArrayFunctionsImpl,
        onBlur = _this$props4.onBlur;
    var isSortable = !readOnly && (0, _get2.default)(type, 'options.sortable') !== false;
    return /*#__PURE__*/_react.default.createElement(_components.FormFieldSet, {
      title: type === null || type === void 0 ? void 0 : type.title,
      description: type === null || type === void 0 ? void 0 : type.description,
      level: level - 1,
      tabIndex: 0,
      onFocus: this.handleFocusRoot,
      ref: this.setElement,
      __unstable_presence: presence.filter(item => item.path[0] === '$' || item.path.length === 0),
      __unstable_changeIndicator: false,
      __unstable_markers: markers
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 3
    }, value && value.length > 0 && /*#__PURE__*/_react.default.createElement(_list.List, {
      onSortEnd: this.handleSortEnd,
      isSortable: isSortable
    }, value.map((item, index) => {
      var filteredMarkers = markers.filter(marker => (0, _paths.startsWith)([index], marker.path));
      var childPresence = presence.filter(pItem => (0, _paths.startsWith)([index], pItem.path));
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/no-array-index-key
        _react.default.createElement(_list.Item, {
          key: index,
          index: index,
          isSortable: isSortable
        }, /*#__PURE__*/_react.default.createElement(_ItemRow.ItemRow, {
          level: level + 1,
          index: index,
          value: item,
          compareValue: compareValue,
          readOnly: readOnly,
          markers: filteredMarkers.length === 0 ? NO_MARKERS : filteredMarkers,
          isSortable: isSortable,
          type: this.getMemberType((0, _content.resolveTypeName)(item)),
          focusPath: focusPath,
          onFocus: onFocus,
          onBlur: onBlur,
          onEnterKey: this.handleItemEnterKey,
          onEscapeKey: this.handleItemEscapeKey,
          onChange: this.handleItemChange,
          onRemove: this.handleRemoveItem,
          presence: childPresence
        }))
      );
    })), /*#__PURE__*/_react.default.createElement(ArrayFunctionsImpl, {
      type: type,
      value: value,
      readOnly: readOnly,
      onAppendItem: this.handleAppend,
      onPrependItem: this.handlePrepend,
      onFocusItem: this.handleFocusItem,
      onCreateValue: _getEmptyValue.default,
      onChange: onChange
    })));
  }

}

exports.ArrayOfPrimitivesInput = ArrayOfPrimitivesInput;