"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withFocusRing = withFocusRing;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ui = require("@sanity/ui");

var _helpers = require("./helpers");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function withFocusRing(component) {
  return (0, _styledComponents.default)(component)(_ref => {
    var theme = _ref.theme;
    var border = {
      width: 1,
      color: 'var(--card-border-color)'
    };
    return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      --card-focus-box-shadow: ", ";\n\n      border-radius: ", ";\n      outline: none;\n      box-shadow: var(--card-focus-box-shadow);\n\n      &:focus {\n        --card-focus-box-shadow: ", ";\n      }\n    "])), (0, _helpers.focusRingBorderStyle)(border), (0, _ui.rem)(theme.sanity.radius[1]), (0, _helpers.focusRingStyle)({
      base: theme.sanity.color.base,
      border,
      focusRing: theme.sanity.focusRing
    }));
  });
}