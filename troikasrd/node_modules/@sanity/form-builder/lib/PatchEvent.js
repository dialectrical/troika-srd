"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function get() {
    return _patches.set;
  }
});
Object.defineProperty(exports, "unset", {
  enumerable: true,
  get: function get() {
    return _patches.unset;
  }
});
Object.defineProperty(exports, "setIfMissing", {
  enumerable: true,
  get: function get() {
    return _patches.setIfMissing;
  }
});
Object.defineProperty(exports, "insert", {
  enumerable: true,
  get: function get() {
    return _patches.insert;
  }
});
Object.defineProperty(exports, "inc", {
  enumerable: true,
  get: function get() {
    return _patches.inc;
  }
});
Object.defineProperty(exports, "dec", {
  enumerable: true,
  get: function get() {
    return _patches.dec;
  }
});
exports.PatchEvent = exports.default = void 0;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _patches = require("./patch/patches");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PatchEvent {
  static from() {
    for (var _len = arguments.length, patches = new Array(_len), _key = 0; _key < _len; _key++) {
      patches[_key] = arguments[_key];
    }

    return new PatchEvent((0, _flatten2.default)(patches));
  }

  constructor(patches) {
    _defineProperty(this, "patches", void 0);

    this.patches = patches;
  }

  prepend() {
    for (var _len2 = arguments.length, patches = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      patches[_key2] = arguments[_key2];
    }

    return PatchEvent.from([...(0, _flatten2.default)(patches), ...this.patches]);
  }

  append() {
    for (var _len3 = arguments.length, patches = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      patches[_key3] = arguments[_key3];
    }

    return PatchEvent.from([...this.patches, ...(0, _flatten2.default)(patches)]);
  }

  prefixAll(segment) {
    return PatchEvent.from(this.patches.map(patch => (0, _patches.prefixPath)(patch, segment)));
  }

}

exports.PatchEvent = exports.default = PatchEvent;