"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setIfMissing = setIfMissing;
exports.insert = insert;
exports.set = set;
exports.unset = unset;
exports.inc = inc;
exports.dec = dec;
exports.prefixPath = prefixPath;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function setIfMissing(value) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    type: 'setIfMissing',
    path,
    value
  };
}

function insert(items, position) {
  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return {
    type: 'insert',
    path,
    position,
    items
  };
}

function set(value) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    type: 'set',
    path,
    value
  };
}

function unset() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return {
    type: 'unset',
    path
  };
}

function inc() {
  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    type: 'inc',
    path,
    value: amount
  };
}

function dec() {
  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    type: 'dec',
    path,
    value: amount
  };
}

function prefixPath(patch, segment) {
  return _objectSpread(_objectSpread({}, patch), {}, {
    path: [segment, ...patch.path]
  });
}