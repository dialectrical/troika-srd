import React from 'react';
import { ArraySchemaType, Marker, Path, SchemaType } from '@sanity/types';
import { FormFieldPresence } from '@sanity/base/presence';
import { PatchEvent } from '../../../PatchEvent';
import ArrayFunctions from '../common/ArrayFunctions';
declare type Primitive = string | number | boolean;
export interface Props {
    type: ArraySchemaType<Primitive>;
    value: Primitive[];
    compareValue?: Primitive[];
    level: number;
    onChange: (event: PatchEvent) => void;
    onFocus: (path: Path) => void;
    onBlur: () => void;
    focusPath: Path;
    ArrayFunctionsImpl: typeof ArrayFunctions;
    readOnly: boolean | null;
    markers: Marker[];
    presence: FormFieldPresence[];
}
declare type Focusable = {
    focus: () => void;
};
export declare class ArrayOfPrimitivesInput extends React.PureComponent<Props> {
    _element: Focusable | null;
    _lastAddedIndex: number;
    set(nextValue: Primitive[]): void;
    removeAt(index: number): void;
    handleAppend: (itemValue: Primitive) => void;
    handlePrepend: (itemValue: Primitive) => void;
    insertAt(index: number, type: SchemaType): void;
    handleRemoveItem: (index: number) => void;
    handleItemChange: (event: PatchEvent) => void;
    handleItemEnterKey: (index: number) => void;
    handleItemEscapeKey: (index: number) => void;
    handleSortEnd: (event: {
        oldIndex: number;
        newIndex: number;
    }) => void;
    getMemberType(typeName: string): import("@sanity/types").BooleanSchemaType | import("@sanity/types").NumberSchemaType | import("@sanity/types").ObjectSchemaType | import("@sanity/types").StringSchemaType | import("@sanity/types").ReferenceSchemaType;
    setElement: (el: Focusable | null) => void;
    focus(): void;
    handleFocusRoot: () => void;
    handleFocusItem: (item: Primitive, index: number) => void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ArrayOfPrimitivesInput.d.ts.map