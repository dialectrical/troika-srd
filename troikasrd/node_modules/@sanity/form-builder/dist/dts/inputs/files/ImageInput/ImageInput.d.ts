import { ToastParams } from '@sanity/ui';
import { Observable, Subscription } from 'rxjs';
import { AssetFromSource, Image as BaseImage, ImageAsset, ImageSchemaType, Marker, ObjectField, Path, SanityDocument } from '@sanity/types';
import React from 'react';
import PropTypes from 'prop-types';
import { FormFieldPresence } from '@sanity/base/presence';
import { ResolvedUploader, Uploader, UploaderResolver, UploadOptions } from '../../../sanity/uploads/types';
import PatchEvent from '../../../PatchEvent';
import { InternalAssetSource, UploadState } from '../types';
export interface Image extends Partial<BaseImage> {
    _upload?: UploadState;
}
export declare type Props = {
    value?: Image;
    compareValue?: Image;
    type: ImageSchemaType;
    level: number;
    onChange: (event: PatchEvent) => void;
    resolveUploader: UploaderResolver;
    materialize: (documentId: string) => Observable<SanityDocument>;
    onBlur: () => void;
    onFocus: (path: Path) => void;
    readOnly: boolean | null;
    focusPath: Path;
    directUploads?: boolean;
    assetSources?: InternalAssetSource[];
    markers: Marker[];
    presence: FormFieldPresence[];
};
declare type FileInfo = {
    type: string;
    kind: string;
};
declare type ImageInputState = {
    isUploading: boolean;
    selectedAssetSource: InternalAssetSource | null;
    hoveringFiles: FileInfo[];
};
declare type Focusable = {
    focus: () => void;
};
interface FieldGroups {
    asset: ObjectField[];
    imagetool: ObjectField[];
    highlighted: ObjectField[];
    dialog: ObjectField[];
    imageToolAndDialog: ObjectField[];
}
export default class ImageInput extends React.PureComponent<Props, ImageInputState> {
    static contextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
    };
    _inputId: string;
    _assetElementRef: null | Focusable;
    _fieldGroupsMemo: null | FieldGroups;
    uploadSubscription: null | Subscription;
    state: ImageInputState;
    toast: {
        push: (params: ToastParams) => void;
    } | null;
    focus(): void;
    setFocusElement: (el: HTMLElement | null) => void;
    isImageToolEnabled(): boolean;
    getConstrainedImageSrc: (assetDocument: ImageAsset) => string;
    clearUploadStatus(): void;
    cancelUpload(): void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    uploadFirstAccepted(files: File[]): void;
    uploadWith: (uploader: Uploader, file: File, assetDocumentProps?: UploadOptions) => void;
    handleRemoveButtonClick: () => void;
    handleFieldChange: (event: PatchEvent) => void;
    handleOpenDialog: () => void;
    handleCloseDialog: () => void;
    handleSelectAssetFromSource: (assetFromSource: AssetFromSource) => void;
    hasFileTargetFocus(): boolean;
    handleFileTargetFocus: () => void;
    handleFileTargetBlur: () => void;
    handleFilesOver: (hoveringFiles: FileInfo[]) => void;
    handleFilesOut: () => void;
    handleCancelUpload: () => void;
    handleClearUploadState: () => void;
    handleSelectFiles: (files: File[]) => void;
    handleSelectImageFromAssetSource: (source: InternalAssetSource) => void;
    handleAssetSourceClosed: () => void;
    renderDialogFields(fields: ObjectField[]): JSX.Element;
    renderMaterializedAsset: (assetDocument: ImageAsset) => JSX.Element;
    renderFields(fields: ObjectField[]): JSX.Element[];
    renderField(field: ObjectField): JSX.Element;
    renderAsset(): JSX.Element;
    renderUploadPlaceholder(): JSX.Element;
    renderUploadState(uploadState: UploadState): JSX.Element;
    renderSelectImageButton(): JSX.Element;
    renderAssetSource(): JSX.Element;
    setToast: (toast: {
        push: (params: ToastParams) => void;
    }) => void;
    getGroupedFields(type: ImageSchemaType): FieldGroups;
    componentDidUpdate(prevProps: Props): void;
    hasChangeInFields(fields: ObjectField[]): boolean;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ImageInput.d.ts.map