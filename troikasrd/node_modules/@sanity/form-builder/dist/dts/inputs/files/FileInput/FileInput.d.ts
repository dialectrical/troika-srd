import React from 'react';
import PropTypes from 'prop-types';
import { Observable, Subscription } from 'rxjs';
import { AssetFromSource, File as BaseFile, FileAsset, FileSchemaType, Marker, Path, SchemaType } from '@sanity/types';
import { ToastParams } from '@sanity/ui';
import { FormFieldPresence } from '@sanity/base/presence';
import { Uploader, UploaderResolver, UploadOptions } from '../../../sanity/uploads/types';
import PatchEvent from '../../../PatchEvent';
import { FileInfo } from '../common/styles';
import { InternalAssetSource, UploadState } from '../types';
declare type Field = {
    name: string;
    type: SchemaType;
};
declare type DOMFile = globalThis.File;
export interface File extends Partial<BaseFile> {
    _upload?: UploadState;
}
export declare type Props = {
    value?: File;
    compareValue?: File;
    type: FileSchemaType;
    level: number;
    onChange: (event: PatchEvent) => void;
    resolveUploader: UploaderResolver;
    materialize: (documentId: string) => Observable<FileAsset>;
    onBlur: () => void;
    onFocus: (path: Path) => void;
    readOnly: boolean | null;
    focusPath: Path;
    directUploads?: boolean;
    assetSources?: InternalAssetSource[];
    markers: Marker[];
    presence: FormFieldPresence[];
};
declare type FileInputState = {
    isUploading: boolean;
    selectedAssetSource: InternalAssetSource | null;
    isAdvancedEditOpen: boolean;
    hoveringFiles: FileInfo[];
};
declare type Focusable = {
    focus: () => void;
};
export default class FileInput extends React.PureComponent<Props, FileInputState> {
    static contextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
    };
    _inputId: string;
    dialogId: string;
    _focusRef: Focusable | null;
    uploadSubscription: Subscription | null;
    state: FileInputState;
    toast: {
        push: (params: ToastParams) => void;
    } | null;
    handleRemoveButtonClick: () => void;
    clearUploadStatus(): void;
    cancelUpload(): void;
    handleCancelUpload: () => void;
    handleClearUploadState: () => void;
    handleSelectFiles: (files: DOMFile[]) => void;
    handleSelectFileFromAssetSource: (source: InternalAssetSource) => void;
    handleAssetSourceClosed: () => void;
    uploadFirstAccepted(files: DOMFile[]): void;
    uploadWith: (uploader: Uploader, file: DOMFile, assetDocumentProps?: UploadOptions) => void;
    renderMaterializedAsset: (assetDocument: FileAsset) => JSX.Element;
    renderUploadState(uploadState: UploadState): JSX.Element;
    renderSelectFileButton(): JSX.Element;
    renderAssetSource(): JSX.Element;
    handleFieldChange: (event: PatchEvent) => void;
    handleStartAdvancedEdit: () => void;
    handleStopAdvancedEdit: () => void;
    renderAdvancedEdit(fields: Field[]): JSX.Element;
    renderFields(fields: Field[]): JSX.Element[];
    handleSelectAssetFromSource: (assetFromSource: AssetFromSource) => void;
    hasFileTargetFocus(): boolean;
    handleFileTargetFocus: () => void;
    handleFileTargetBlur: () => void;
    handleFilesOver: (fileInfo: FileInfo[]) => void;
    handleFilesOut: () => void;
    renderField(field: Field): JSX.Element;
    renderAsset(): JSX.Element;
    renderUploadPlaceholder(): JSX.Element;
    focus(): void;
    setFocusInput: (ref: Focusable | null) => void;
    handleUpload: ({ file, uploader }: {
        file: DOMFile;
        uploader: Uploader;
    }) => void;
    setToast: (toast: {
        push: (params: ToastParams) => void;
    }) => void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=FileInput.d.ts.map