import React from 'react';
import { Marker, Path, SchemaType } from '@sanity/types';
import { FormFieldPresence } from '@sanity/base/presence';
import PatchEvent from './PatchEvent';
interface Props {
    value: unknown;
    type: SchemaType;
    onChange: (event: PatchEvent) => void;
    onFocus: (path: Path) => void;
    onBlur: () => void;
    readOnly?: boolean;
    presence?: FormFieldPresence[];
    focusPath: Path;
    markers: Marker[];
    compareValue?: any;
    level: number;
    isRoot?: boolean;
    path: Path;
    filterField?: (...args: any[]) => any;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
    onKeyPress?: (ev: React.KeyboardEvent) => void;
}
export declare class FormBuilderInput extends React.Component<Props> {
    scrollTimeout: number;
    _element: HTMLDivElement | null;
    static contextTypes: {
        presence: () => void;
        formBuilder: () => void;
        getValuePath: () => void;
    };
    static childContextTypes: {
        getValuePath: () => void;
    };
    static defaultProps: {
        focusPath: Path;
        path: Path;
        markers: import("@sanity/types").ValidationMarker[];
    };
    _input: FormBuilderInput | HTMLDivElement | null;
    getValuePath: () => any;
    getChildContext(): {
        getValuePath: () => any;
    };
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any): boolean;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    resolveInputComponent(type: SchemaType): any;
    setInput: (component: FormBuilderInput | HTMLDivElement | null) => void;
    focus(): void;
    handleChange: (patchEvent: any) => void;
    handleFocus: (nextPath: any) => void;
    handleBlur: () => void;
    getChildFocusPath(): Path;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=FormBuilderInput.d.ts.map