import type { Subscription } from 'rxjs';
import React from 'react';
import { AssetFromSource, Asset as AssetType } from '@sanity/types';
interface Props {
    onSelect: (arg0: AssetFromSource[]) => void;
    onClose: () => void;
    selectedAssets: AssetType[];
    assetType: 'file' | 'image';
    selectionType: boolean;
    dialogHeaderTitle?: string;
}
declare type State = {
    assets: AssetType[];
    isLastPage: boolean;
    isLoading: boolean;
};
export declare class DefaultSource extends React.PureComponent<Props, State> {
    state: {
        assets: any[];
        isLastPage: boolean;
        isLoading: boolean;
    };
    _elementId: string;
    pageNo: number;
    fetch$: Subscription;
    fetchPage(pageNo: number): void;
    handleDeleteFinished: (id: any) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    select(id: any): void;
    handleItemClick: (event: React.MouseEvent) => void;
    handleItemKeyPress: (event: React.KeyboardEvent) => void;
    handleClose: () => void;
    handleFetchNextPage: () => void;
    renderThumbView(): JSX.Element;
    renderTableView(): JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=DefaultSource.d.ts.map