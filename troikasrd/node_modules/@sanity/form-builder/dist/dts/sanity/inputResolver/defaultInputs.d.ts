/// <reference types="react" />
declare const _default: {
    object: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<import("../../inputs/ObjectInput/ObjectInput").Props & import("react").RefAttributes<HTMLDivElement>>>;
    array: import("react").ForwardRefExoticComponent<import("../../inputs/arrays/ArrayOfObjectsInput").Props & import("react").RefAttributes<import("../../inputs/arrays/ArrayOfObjectsInput").default>>;
    boolean: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<boolean, import("@sanity/types/dist/dts").BooleanSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    number: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<number, import("@sanity/types/dist/dts").NumberSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    text: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/dist/dts").TextSchemaType> & import("react").RefAttributes<HTMLTextAreaElement>>;
    email: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/dist/dts").StringSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    datetime: import("react").ForwardRefExoticComponent<import("../../inputs/DateInputs/types").CommonProps & {
        onChange: (event: import("../../PatchEvent").default) => void;
        type: {
            name: string;
            title: string;
            description?: string;
            options?: {
                dateFormat?: string;
                timeFormat?: string;
                timeStep?: number;
                calendarTodayLabel?: string;
            };
            placeholder?: string;
        };
    } & import("react").RefAttributes<HTMLInputElement>>;
    date: import("react").ForwardRefExoticComponent<import("../../inputs/DateInputs/types").CommonProps & {
        onChange: (event: import("../../PatchEvent").default) => void;
        type: {
            name: string;
            title: string;
            description?: string;
            options?: {
                dateFormat?: string;
                calendarTodayLabel?: string;
            };
            placeholder?: string;
        };
    } & import("react").RefAttributes<HTMLInputElement>>;
    url: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/dist/dts").StringSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    image: import("react").ForwardRefExoticComponent<{
        value?: import("../../inputs/files/ImageInput").Image;
        type: import("@sanity/types/dist/dts").ImageSchemaType;
        onChange: (event: import("../../PatchEvent").default) => void;
        onFocus: (path: import("@sanity/types/dist/dts").Path) => void;
        onBlur: () => void;
        readOnly: boolean;
        presence: import("@sanity/base/presence").FormFieldPresence[];
        focusPath: import("@sanity/types/dist/dts").Path;
        markers: import("@sanity/types/dist/dts").ValidationMarker[];
        compareValue?: import("../../inputs/files/ImageInput").Image;
        level: number;
        resolveUploader: import("../uploads/types").UploaderResolver;
        materialize: (documentId: string) => import("rxjs").Observable<import("@sanity/types/dist/dts").SanityDocument>;
        directUploads?: boolean;
    } & import("react").RefAttributes<unknown>>;
    file: import("react").ForwardRefExoticComponent<{
        value?: import("../../inputs/files/FileInput").File;
        type: import("@sanity/types/dist/dts").FileSchemaType;
        onChange: (event: import("../../PatchEvent").default) => void;
        onFocus: (path: import("@sanity/types/dist/dts").Path) => void;
        onBlur: () => void;
        readOnly: boolean;
        presence: import("@sanity/base/presence").FormFieldPresence[];
        focusPath: import("@sanity/types/dist/dts").Path;
        markers: import("@sanity/types/dist/dts").ValidationMarker[];
        compareValue?: import("../../inputs/files/FileInput").File;
        level: number;
        resolveUploader: import("../uploads/types").UploaderResolver;
        materialize: (documentId: string) => import("rxjs").Observable<import("@sanity/types/dist/dts").FileAsset>;
        directUploads?: boolean;
    } & import("react").RefAttributes<unknown>>;
    string: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/dist/dts").StringSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    slug: {
        new <P>(props: P | Readonly<P>): {
            _input: any;
            focus(): void;
            setInput: (input: any) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
            forceUpdate(callback?: () => void): void;
            readonly props: Readonly<P> & Readonly<{
                children?: import("react").ReactNode;
            }>;
            state: Readonly<{}>;
            refs: {
                [key: string]: import("react").ReactInstance;
            };
            componentDidMount?(): void;
            shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
        };
        new <P>(props: P, context: any): {
            _input: any;
            focus(): void;
            setInput: (input: any) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
            forceUpdate(callback?: () => void): void;
            readonly props: Readonly<P> & Readonly<{
                children?: import("react").ReactNode;
            }>;
            state: Readonly<{}>;
            refs: {
                [key: string]: import("react").ReactInstance;
            };
            componentDidMount?(): void;
            shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
        };
        displayName: string;
        contextTypes: {
            getValuePath: import("prop-types").Requireable<(...args: any[]) => any>;
            formBuilder: import("prop-types").Requireable<any>;
        };
        contextType?: import("react").Context<any>;
    };
};
export default _default;
//# sourceMappingURL=defaultInputs.d.ts.map