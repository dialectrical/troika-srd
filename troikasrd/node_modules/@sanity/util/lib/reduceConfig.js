"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _mergeWith2 = _interopRequireDefault(require("lodash/mergeWith"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _dotenv = _interopRequireDefault(require("dotenv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var readEnvFile = (0, _memoize2.default)(tryReadEnvFile);
var sanityEnv = process.env.SANITY_INTERNAL_ENV || 'production';
var basePath = process.env.SANITY_STUDIO_PROJECT_BASEPATH || process.env.STUDIO_BASEPATH;
var apiHosts = {
  staging: 'https://api.sanity.work',
  development: 'http://api.sanity.wtf'
};
var processEnvConfig = {
  project: basePath ? {
    basePath
  } : {}
};

function clean(obj) {
  return Object.keys(obj).reduce((acc, key) => obj[key] ? _objectSpread(_objectSpread({}, acc), {}, {
    [key]: obj[key]
  }) : acc, {});
}

function merge(objValue, srcValue, key) {
  if (Array.isArray(objValue)) {
    return objValue.concat(srcValue);
  } // Pass on to default merging strategy


  return undefined;
}

function tryReadEnvFile(pathName) {
  var parsed = {};

  try {
    // eslint-disable-next-line no-sync
    parsed = _dotenv.default.parse(_fs.default.readFileSync(pathName, {
      encoding: 'utf8'
    }));
  } catch (err) {
    if (err.code !== 'ENOENT') {
      // eslint-disable-next-line no-console
      console.error("There was a problem processing the .env file (".concat(pathName, ")"), err);
    }
  }

  return parsed;
}

function tryReadDotEnv(studioRootPath, fallbackEnv) {
  var configEnv = process.env.SANITY_ACTIVE_ENV || fallbackEnv || 'development';

  var envFile = _path.default.join(studioRootPath, ".env.".concat(configEnv));

  return readEnvFile(envFile);
}

var _default = function _default(rawConfig) {
  var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'development';
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var studioRootPath = options.studioRootPath;

  var envVars = _objectSpread({}, process.env);

  if (studioRootPath) {
    envVars = _objectSpread(_objectSpread({}, envVars), tryReadDotEnv(studioRootPath, env));
  }

  var projectId = envVars.SANITY_STUDIO_API_PROJECT_ID;
  var dataset = envVars.SANITY_STUDIO_API_DATASET;
  var apiHost = apiHosts[sanityEnv];
  var api = clean({
    apiHost,
    projectId,
    dataset
  });
  var sanityConf = {
    api
  };
  var envConfig = (rawConfig.env || {})[env] || {};
  var config = (0, _mergeWith2.default)({}, rawConfig, envConfig, sanityConf, processEnvConfig, merge);
  delete config.env;
  return config;
};

exports.default = _default;