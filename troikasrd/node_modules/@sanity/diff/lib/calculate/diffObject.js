"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffObject = diffObject;
exports.removedObject = removedObject;
exports.addedObject = addedObject;

var _helpers = require("../helpers");

var _diffInput = require("./diffInput");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ignoredFields = new Set(['_id', '_type', '_createdAt', '_updatedAt', '_rev', '_weak']);

function diffObject(fromInput, toInput, options) {
  var fields = {};
  var isChanged = false;

  var _iterator = _createForOfIteratorHelper(fromInput.keys),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      if (ignoredFields.has(key)) continue;
      var fromField = fromInput.get(key);
      var toField = toInput.get(key);

      if (toField) {
        var fieldDiff = (0, _diffInput.diffInput)(fromField, toField, options);
        fields[key] = fieldDiff;
        if (fieldDiff.isChanged) isChanged = true;
      } else {
        fields[key] = (0, _diffInput.removedInput)(fromField, undefined, options);
        isChanged = true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper(toInput.keys),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _key = _step2.value;
      if (ignoredFields.has(_key)) continue; // Already handled above

      if (fromInput.get(_key)) continue;

      var _toField = toInput.get(_key);

      fields[_key] = (0, _diffInput.addedInput)(_toField, undefined, options);
      isChanged = true;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var fromValue = fromInput.value;
  var toValue = toInput.value;

  if (!isChanged) {
    return {
      type: 'object',
      action: 'unchanged',
      isChanged: false,
      fromValue,
      toValue,
      fields
    };
  }

  return {
    type: 'object',
    action: 'changed',
    isChanged: true,
    fromValue,
    toValue,
    fields,
    annotation: toInput.annotation
  };
}

function removedObject(input, toValue, options) {
  return {
    type: 'object',
    action: 'removed',
    isChanged: true,
    fromValue: input.value,
    toValue,
    annotation: input.annotation,

    get fields() {
      var fields = {};

      var _iterator3 = _createForOfIteratorHelper(input.keys),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var key = _step3.value;
          var value = input.get(key);
          fields[key] = (0, _diffInput.removedInput)(value, undefined, options);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return (0, _helpers.replaceProperty)(this, 'fields', fields);
    }

  };
}

function addedObject(input, fromValue, options) {
  return {
    type: 'object',
    action: 'added',
    isChanged: true,
    fromValue,
    toValue: input.value,
    annotation: input.annotation,

    get fields() {
      var fields = {};

      var _iterator4 = _createForOfIteratorHelper(input.keys),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var key = _step4.value;
          var value = input.get(key);
          fields[key] = (0, _diffInput.addedInput)(value, undefined, options);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return (0, _helpers.replaceProperty)(this, 'fields', fields);
    }

  };
}