"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffInput = diffInput;
exports.removedInput = removedInput;
exports.addedInput = addedInput;

var _diffArray = require("./diffArray");

var _diffString = require("./diffString");

var _diffTypeChange = require("./diffTypeChange");

var _diffObject = require("./diffObject");

var _diffSimple = require("./diffSimple");

function diffInput(fromInput, toInput) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (fromInput.type !== toInput.type) {
    if (fromInput.type === 'null') {
      return addedInput(toInput, null, options);
    }

    if (toInput.type === 'null') {
      return removedInput(fromInput, null, options);
    }

    return (0, _diffTypeChange.diffTypeChange)(fromInput, toInput, options);
  }

  return diffWithType(fromInput.type, fromInput, toInput, options);
}

function diffWithType(type, fromInput, toInput, options) {
  switch (type) {
    case 'null':
      return {
        type: 'null',
        action: 'unchanged',
        isChanged: false,
        toValue: null,
        fromValue: null
      };

    case 'boolean':
      return (0, _diffSimple.diffBoolean)(fromInput, toInput, options);

    case 'number':
      return (0, _diffSimple.diffNumber)(fromInput, toInput, options);

    case 'string':
      return (0, _diffString.diffString)(fromInput, toInput, options);

    case 'array':
      return (0, _diffArray.diffArray)(fromInput, toInput, options);

    case 'object':
      return (0, _diffObject.diffObject)(fromInput, toInput, options);

    default:
      throw new Error("Unhandled diff type \"".concat(type, "\""));
  }
}

function removedInput(input, toValue, options) {
  switch (input.type) {
    case 'null':
      return {
        type: 'null',
        action: 'removed',
        isChanged: true,
        fromValue: null,
        toValue,
        annotation: input.annotation
      };

    case 'boolean':
      return {
        type: 'boolean',
        action: 'removed',
        isChanged: true,
        fromValue: input.value,
        toValue,
        annotation: input.annotation
      };

    case 'number':
      return {
        type: 'number',
        action: 'removed',
        isChanged: true,
        fromValue: input.value,
        toValue,
        annotation: input.annotation
      };

    case 'string':
      return (0, _diffString.removedString)(input, toValue, options);

    case 'array':
      return (0, _diffArray.removedArray)(input, toValue, options);

    case 'object':
      return (0, _diffObject.removedObject)(input, toValue, options);

    default:
      throw new Error('Unhandled diff type');
  }
}

function addedInput(input, fromValue, options) {
  switch (input.type) {
    case 'null':
      return {
        type: 'null',
        action: 'added',
        isChanged: true,
        fromValue,
        toValue: null,
        annotation: input.annotation
      };

    case 'boolean':
      return {
        type: 'boolean',
        action: 'added',
        isChanged: true,
        fromValue,
        toValue: input.value,
        annotation: input.annotation
      };

    case 'number':
      return {
        type: 'number',
        action: 'added',
        isChanged: true,
        fromValue,
        toValue: input.value,
        annotation: input.annotation
      };

    case 'string':
      return (0, _diffString.addedString)(input, fromValue, options);

    case 'array':
      return (0, _diffArray.addedArray)(input, fromValue, options);

    case 'object':
      return (0, _diffObject.addedObject)(input, fromValue, options);

    default:
      throw new Error('Unhandled diff type');
  }
}