"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffString = diffString;
exports.removedString = removedString;
exports.addedString = addedString;

var _diffMatchPatch = require("diff-match-patch");

var _helpers = require("../helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var dmp = new _diffMatchPatch.diff_match_patch();

function diffString(fromInput, toInput, options) {
  var fromValue = fromInput.value;
  var toValue = toInput.value;

  if (fromValue === toValue) {
    return {
      type: 'string',
      action: 'unchanged',
      isChanged: false,
      fromValue,
      toValue,
      segments: [{
        type: 'stringSegment',
        action: 'unchanged',
        text: fromValue
      }]
    };
  }

  return {
    type: 'string',
    action: 'changed',
    isChanged: true,
    fromValue,
    toValue,
    annotation: toInput.annotation,

    // Compute and memoize string segments only when accessed
    get segments() {
      var segments = buildSegments(fromInput, toInput);
      return (0, _helpers.replaceProperty)(this, 'segments', segments);
    }

  };
}

function buildSegments(fromInput, toInput) {
  var segments = [];
  var dmpDiffs = dmp.diff_main(fromInput.value, toInput.value);
  dmp.diff_cleanupSemantic(dmpDiffs);
  var fromIdx = 0;
  var toIdx = 0;

  var _iterator = _createForOfIteratorHelper(dmpDiffs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          op = _step$value[0],
          text = _step$value[1];

      switch (op) {
        case _diffMatchPatch.DIFF_EQUAL:
          segments.push({
            type: 'stringSegment',
            action: 'unchanged',
            text
          });
          fromIdx += text.length;
          toIdx += text.length;
          break;

        case _diffMatchPatch.DIFF_DELETE:
          var _iterator2 = _createForOfIteratorHelper(fromInput.sliceAnnotation(fromIdx, fromIdx + text.length)),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var segment = _step2.value;
              segments.push({
                type: 'stringSegment',
                action: 'removed',
                text: segment.text,
                annotation: segment.annotation
              });
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          fromIdx += text.length;
          break;

        case _diffMatchPatch.DIFF_INSERT:
          var _iterator3 = _createForOfIteratorHelper(toInput.sliceAnnotation(toIdx, toIdx + text.length)),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _segment = _step3.value;
              segments.push({
                type: 'stringSegment',
                action: 'added',
                text: _segment.text,
                annotation: _segment.annotation
              });
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          toIdx += text.length;
          break;

        default:
          throw new Error("Unhandled diff-match-patch operation \"".concat(op, "\""));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return segments;
}

function removedString(input, toValue, options) {
  return {
    type: 'string',
    action: 'removed',
    isChanged: true,
    fromValue: input.value,
    toValue,
    annotation: input.annotation,

    get segments() {
      var segments = input.sliceAnnotation(0, input.value.length).map(segment => _objectSpread({
        type: 'stringSegment',
        action: 'removed'
      }, segment));
      return (0, _helpers.replaceProperty)(this, 'segments', segments);
    }

  };
}

function addedString(input, fromValue, options) {
  return {
    type: 'string',
    action: 'added',
    isChanged: true,
    fromValue,
    toValue: input.value,
    annotation: input.annotation,

    get segments() {
      var segments = input.sliceAnnotation(0, input.value.length).map(segment => _objectSpread({
        type: 'stringSegment',
        action: 'added'
      }, segment));
      return (0, _helpers.replaceProperty)(this, 'segments', segments);
    }

  };
}