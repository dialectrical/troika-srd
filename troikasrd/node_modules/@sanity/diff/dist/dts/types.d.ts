export declare type DiffOptions = Record<string, never>;
export declare type ValueType = 'array' | 'boolean' | 'null' | 'number' | 'object' | 'string' | 'undefined';
export declare type Input<T> = NumberInput<T> | BooleanInput<T> | StringInput<T> | NullInput<T> | ObjectInput<T> | ArrayInput<T>;
interface BaseInput<A> {
    annotation: A;
}
export interface StringInput<A> extends BaseInput<A> {
    type: 'string';
    value: string;
    sliceAnnotation(start: number, end: number): {
        text: string;
        annotation: A;
    }[];
}
export interface NumberInput<A> extends BaseInput<A> {
    type: 'number';
    value: number;
}
export interface BooleanInput<A> extends BaseInput<A> {
    type: 'boolean';
    value: boolean;
}
export interface NullInput<A> extends BaseInput<A> {
    type: 'null';
    value: null;
}
export interface ObjectInput<A> extends BaseInput<A> {
    type: 'object';
    value: Record<string, unknown>;
    keys: string[];
    get(key: string): Input<A> | undefined;
}
export interface ArrayInput<A> extends BaseInput<A> {
    type: 'array';
    value: unknown[];
    length: number;
    at(idx: number): Input<A>;
    annotationAt(idx: number): A;
}
declare type AddedDiff<A, V> = {
    action: 'added';
    isChanged: true;
    fromValue: null | undefined;
    toValue: V;
    annotation: A;
};
declare type RemovedDiff<A, V> = {
    action: 'removed';
    isChanged: true;
    fromValue: V;
    toValue: null | undefined;
    annotation: A;
};
declare type ChangedDiff<A, V> = {
    action: 'changed';
    isChanged: true;
    fromValue: V;
    toValue: V;
    annotation: A;
};
declare type UnchangedDiff<A, V> = {
    action: 'unchanged';
    isChanged: false;
    fromValue: V;
    toValue: V;
};
declare type FullDiff<A, V, P> = (AddedDiff<A, V> | RemovedDiff<A, V> | ChangedDiff<A, V> | UnchangedDiff<A, V>) & P;
export declare type StringDiff<A> = FullDiff<A, string, {
    type: 'string';
    segments: StringDiffSegment<A>[];
}>;
export declare type NumberDiff<A> = FullDiff<A, number, {
    type: 'number';
}>;
export declare type BooleanDiff<A> = FullDiff<A, boolean, {
    type: 'boolean';
}>;
export declare type TypeChangeDiff<A> = {
    type: 'typeChange';
    action: 'changed';
    isChanged: true;
    fromType: string;
    fromValue: unknown;
    fromDiff: Diff<A> & {
        action: 'removed';
    };
    toType: string;
    toValue: unknown;
    toDiff: Diff<A> & {
        action: 'added';
    };
    annotation: A;
};
export declare type ObjectDiff<A, T extends object = Record<string, any>> = FullDiff<A, T, {
    type: 'object';
    fields: Record<keyof T, Diff<A>>;
}>;
export declare type ArrayDiff<A, V = unknown> = FullDiff<A, V[], {
    type: 'array';
    items: ItemDiff<A>[];
}>;
export declare type NullDiff<A> = FullDiff<A, null, {
    type: 'null';
}>;
export declare type Diff<A> = NullDiff<A> | StringDiff<A> | NumberDiff<A> | BooleanDiff<A> | ObjectDiff<A> | ArrayDiff<A> | TypeChangeDiff<A>;
export declare type StringDiffSegment<A> = StringSegmentChanged<A> | StringSegmentUnchanged;
export declare type StringSegmentChanged<A> = {
    type: 'stringSegment';
    action: 'added' | 'removed';
    text: string;
    annotation: A;
};
export declare type StringSegmentUnchanged = {
    type: 'stringSegment';
    action: 'unchanged';
    text: string;
};
export declare type ItemDiff<A> = {
    fromIndex: number | undefined;
    toIndex: number | undefined;
    hasMoved: boolean;
    diff: Diff<A>;
    annotation: A;
};
export {};
//# sourceMappingURL=types.d.ts.map