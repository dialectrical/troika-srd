"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBuilder = isBuilder;
exports.resolveInitialValue = resolveInitialValue;

var _validate = require("./validate");

var _deepAssign = _interopRequireDefault(require("./util/deepAssign"));

var _resolveInitialValueForType = require("./resolveInitialValueForType");

var _resolveValue = require("./util/resolveValue");

var _isRecord = require("./util/isRecord");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function isBuilder(template) {
  return typeof template.serialize === 'function';
}

function resolveInitialValue(_x, _x2) {
  return _resolveInitialValue.apply(this, arguments);
}

function _resolveInitialValue() {
  _resolveInitialValue = _asyncToGenerator(function* (schema, template) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // Template builder?
    if (isBuilder(template)) {
      return resolveInitialValue(schema, template.serialize(), params);
    }

    var id = template.id,
        schemaType = template.schemaType,
        value = template.value;

    if (!value) {
      throw new Error("Template \"".concat(id, "\" has invalid \"value\" property"));
    }

    var resolvedValue = yield (0, _resolveValue.resolveValue)(value, params);

    if (!(0, _isRecord.isRecord)(resolvedValue)) {
      throw new Error("Template \"".concat(id, "\" has invalid \"value\" property - must be a plain object or a resolver function returning a plain object"));
    } // validate default document initial values


    resolvedValue = (0, _validate.validateInitialObjectValue)(resolvedValue, template); // Get deep initial values from schema types (note: the initial value from template overrides the types)

    var newValue = (0, _deepAssign.default)((yield (0, _resolveInitialValueForType.resolveInitialValueForType)(schema.get(schemaType), params)) || {}, resolvedValue); // revalidate and return new initial values
    // todo: would be better to do validation as part of type resolution

    return (0, _validate.validateInitialObjectValue)(newValue, template);
  });
  return _resolveInitialValue.apply(this, arguments);
}