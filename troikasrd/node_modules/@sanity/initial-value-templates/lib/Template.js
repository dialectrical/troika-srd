"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemplateBuilder = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TemplateBuilder {
  constructor(spec) {
    _defineProperty(this, "spec", void 0);

    this.spec = spec || {};
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title
    });
  }

  description(description) {
    return this.clone({
      description
    });
  }

  getDescription() {
    return this.spec.description;
  }

  getTitle() {
    return this.spec.title;
  }

  schemaType(typeName) {
    return this.clone({
      schemaType: typeName
    });
  }

  getSchemaType() {
    return this.spec.schemaType;
  }

  icon(icon) {
    return this.clone({
      icon
    });
  }

  getIcon() {
    return this.spec.icon;
  }

  value(value) {
    return this.clone({
      value
    });
  }

  getValue() {
    return this.spec.value;
  }

  parameters(parameters) {
    return this.clone({
      parameters
    });
  }

  getParameters() {
    return this.spec.parameters;
  }

  serialize() {
    var _this$spec = this.spec,
        id = _this$spec.id,
        title = _this$spec.title,
        description = _this$spec.description,
        schemaType = _this$spec.schemaType,
        value = _this$spec.value,
        icon = _this$spec.icon,
        parameters = _this$spec.parameters;

    if (!id) {
      throw new Error('Template is missing required "id"');
    }

    if (!title) {
      throw new Error("Template with ID \"".concat(id, "\" is missing required \"title\""));
    }

    if (!schemaType) {
      throw new Error("Template with ID \"".concat(id, "\" is missing required \"schemaType\""));
    }

    if (!value) {
      throw new Error("Template with ID \"".concat(id, "\" is missing required \"value\""));
    }

    return {
      id,
      title,
      description,
      schemaType,
      value,
      icon,
      parameters
    };
  }

  clone(withSpec) {
    var builder = new TemplateBuilder();
    builder.spec = _objectSpread(_objectSpread({}, this.spec), withSpec || {});
    return builder;
  }

}

exports.TemplateBuilder = TemplateBuilder;