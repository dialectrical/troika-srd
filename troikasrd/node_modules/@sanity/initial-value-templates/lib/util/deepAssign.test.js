"use strict";

var _deepAssign = _interopRequireDefault(require("./deepAssign"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

it('ignores undefined values', () => {
  expect((0, _deepAssign.default)({
    foo: undefined
  }, {
    bar: undefined
  })).toStrictEqual({
    foo: undefined,
    bar: undefined
  });
});
it('assigns undefined values from source', () => {
  expect((0, _deepAssign.default)({
    foo: 'bar',
    bar: 'hello'
  }, {
    foo: undefined
  })).toStrictEqual({
    foo: undefined,
    bar: 'hello'
  });
});
it('assigns non-undefined values from source', () => {
  expect((0, _deepAssign.default)({
    foo: undefined
  }, {
    bar: 'hello'
  })).toStrictEqual({
    foo: undefined,
    bar: 'hello'
  });
});
it('merges non-undefined values', () => {
  expect((0, _deepAssign.default)({
    foo: 'foo'
  }, {
    bar: 'bar'
  })).toStrictEqual({
    foo: 'foo',
    bar: 'bar'
  });
});
it("doesn't merge arrays", () => {
  expect((0, _deepAssign.default)({
    arr: ['foo']
  }, {
    arr: ['bar']
  })).toStrictEqual({
    arr: ['bar']
  });
});
it('merges deep', () => {
  expect((0, _deepAssign.default)({
    some: {
      deep: {
        object: true
      }
    }
  }, {
    some: {
      deep: {
        array: ['foo']
      }
    }
  })).toStrictEqual({
    some: {
      deep: {
        array: ['foo'],
        object: true
      }
    }
  });
});