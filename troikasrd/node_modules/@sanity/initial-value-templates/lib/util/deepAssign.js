"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deepAssign;

var _isRecord = require("./isRecord");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// deep object assign for objects
// note: doesn't mutate target
function deepAssign(target, source) {
  var result = _objectSpread(_objectSpread({}, target), source);

  Object.keys(result).forEach(key => {
    var sourceVal = source[key];
    var targetVal = target[key];

    if ((0, _isRecord.isRecord)(sourceVal) && (0, _isRecord.isRecord)(targetVal)) {
      result[key] = deepAssign(targetVal, sourceVal);
    }
  });
  return result;
}