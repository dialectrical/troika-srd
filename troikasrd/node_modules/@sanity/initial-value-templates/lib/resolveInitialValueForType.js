"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getItemType = getItemType;
exports.resolveInitialValueForType = resolveInitialValueForType;
exports.resolveInitialObjectValue = resolveInitialObjectValue;

var _content = require("@sanity/util/content");

var _types = require("@sanity/types");

var _paths = require("@sanity/util/paths");

var _deepAssign = _interopRequireDefault(require("./util/deepAssign"));

var _resolveValue = require("./util/resolveValue");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getItemType(arrayType, item) {
  var itemTypeName = (0, _content.resolveTypeName)(item);
  return itemTypeName === 'object' && arrayType.of.length === 1 ? arrayType.of[0] : arrayType.of.find(memberType => memberType.name === itemTypeName);
}

var MAX_RECURSION_DEPTH = 10;
/**
 * Resolve initial value for the given schema type (recursively)
 *
 * @param type {SchemaType} this is the name of the document
 * @param params {Record<string, unknown>} params is a sanity context object passed to every initial value function
 * @param maxDepth {Record<string, unknown>} maximum recursion depth (default 9)
 */

function resolveInitialValueForType(type) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_RECURSION_DEPTH;

  if (maxDepth <= 0) {
    return undefined;
  }

  if ((0, _types.isObjectSchemaType)(type)) {
    return resolveInitialObjectValue(type, params, maxDepth);
  }

  if ((0, _types.isArraySchemaType)(type)) {
    return resolveInitialArrayValue(type, params, maxDepth);
  }

  return (0, _resolveValue.resolveValue)(type.initialValue, params);
}

function resolveInitialArrayValue(_x, _x2, _x3) {
  return _resolveInitialArrayValue.apply(this, arguments);
}

function _resolveInitialArrayValue() {
  _resolveInitialArrayValue = _asyncToGenerator(function* (type, params, maxDepth) {
    var initialArray = yield (0, _resolveValue.resolveValue)(type.initialValue);
    return Array.isArray(initialArray) ? Promise.all(initialArray.map( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (initialItem) {
        var itemType = getItemType(type, initialItem);
        return (0, _types.isObjectSchemaType)(itemType) ? _objectSpread(_objectSpread(_objectSpread({}, initialItem), yield resolveInitialValueForType(itemType, params, maxDepth - 1)), {}, {
          _key: (0, _paths.randomKey)()
        }) : initialItem;
      });

      return function (_x7) {
        return _ref.apply(this, arguments);
      };
    }())) : undefined;
  });
  return _resolveInitialArrayValue.apply(this, arguments);
}

function resolveInitialObjectValue(_x4, _x5, _x6) {
  return _resolveInitialObjectValue.apply(this, arguments);
}

function _resolveInitialObjectValue() {
  _resolveInitialObjectValue = _asyncToGenerator(function* (type, params, maxDepth) {
    var initialObject = _objectSpread({}, (yield (0, _resolveValue.resolveValue)(type.initialValue, params)) || {});

    var fieldValues = {};
    yield Promise.all(type.fields.map( /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(function* (field) {
        var initialFieldValue = yield resolveInitialValueForType(field.type, params, maxDepth - 1);

        if (initialFieldValue !== undefined && initialFieldValue !== null) {
          fieldValues[field.name] = initialFieldValue;
        }
      });

      return function (_x8) {
        return _ref2.apply(this, arguments);
      };
    }()));
    var merged = (0, _deepAssign.default)(fieldValues, initialObject);

    if ((0, _content.isEmpty)(merged)) {
      return undefined;
    }

    if (type.name !== 'object') {
      merged._type = type.name;
    }

    return merged;
  });
  return _resolveInitialObjectValue.apply(this, arguments);
}