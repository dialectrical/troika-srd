"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTemplateErrors = getTemplateErrors;
exports.getTemplates = getTemplates;
exports.getParameterlessTemplatesBySchemaType = getParameterlessTemplatesBySchemaType;
exports.getTemplatesBySchemaType = getTemplatesBySchemaType;
exports.getTemplateById = getTemplateById;
exports.templateExists = templateExists;

var _builder = _interopRequireDefault(require("./builder"));

var _validate = require("./validate");

var _resolve = require("./resolve");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/prefer-default-export */
function isCommonJsEsStub(mod) {
  var stub = mod;
  return stub.__esModule && 'default' in stub;
}

function loadDefinedTemplatesFromPart() {
  try {
    var templates = require('part:@sanity/base/initial-value-templates?');

    if (typeof templates === 'undefined') {
      return undefined;
    }

    if (!templates) {
      return null;
    }

    if (isCommonJsEsStub(templates)) {
      return templates.default;
    }

    return templates;
  } catch (err) {
    return undefined;
  }
}

function loadDefinedTemplates(schema) {
  var templates = loadDefinedTemplatesFromPart(); // Templates is `null` if the part was implemented but the export doesn't make sense,
  // if it is not found (require failed), the value will be `undefined`

  if (templates === null || templates && !Array.isArray(templates)) {
    var type = templates === null ? "null" : typeof templates;
    throw new Error("'part:@sanity/base/initial-value-templates' should be an array of templates, got ".concat(type));
  }

  if (!templates) {
    templates = _builder.default.defaults(schema);
  }

  return prepareTemplates(templates);
}

function prepareTemplates(templates) {
  var serialized = templates.map(maybeSerialize);
  return (0, _validate.validateTemplates)(serialized);
}

function getDefaultTemplates(schema) {
  return prepareTemplates(_builder.default.defaults(schema));
}

function maybeSerialize(template) {
  return (0, _resolve.isBuilder)(template) ? template.serialize() : template;
}

function getTemplateErrors(schema) {
  try {
    loadDefinedTemplates(schema);
    return [];
  } catch (err) {
    return [err];
  }
}

function getTemplates(schema) {
  try {
    return loadDefinedTemplates(schema);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn('Failed to load defined templates, falling back to defaults:\n%s', err.message);
    return getDefaultTemplates(schema);
  }
}

function getParameterlessTemplatesBySchemaType(schemaType) {
  return getTemplatesBySchemaType(schemaType).filter(tpl => !tpl.parameters || !tpl.parameters.length);
}

function getTemplatesBySchemaType(schemaType) {
  return getTemplates().filter(tpl => tpl.schemaType === schemaType);
}

function getTemplateById(id) {
  return getTemplates().find(tpl => tpl.id === id);
}

function templateExists(id) {
  return Boolean(getTemplateById(id));
}