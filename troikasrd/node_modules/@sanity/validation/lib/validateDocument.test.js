"use strict";

var _schemaCreator = _interopRequireDefault(require("part:@sanity/base/schema-creator"));

var _validateDocument = _interopRequireWildcard(require("./validateDocument"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('validateDocument', () => {
  it('takes in a document + a compiled schema and returns a list of validation markers', /*#__PURE__*/_asyncToGenerator(function* () {
    var schema = (0, _schemaCreator.default)({
      types: [{
        name: 'simpleDoc',
        type: 'document',
        title: 'Simple Document',
        fields: [{
          name: 'title',
          type: 'string',
          validation: rule => rule.required()
        }]
      }]
    });
    var document = {
      _id: 'testId',
      _createdAt: '2021-08-27T14:48:51.650Z',
      _rev: 'exampleRev',
      _type: 'simpleDoc',
      _updatedAt: '2021-08-27T14:48:51.650Z',
      title: null
    };
    var result = yield (0, _validateDocument.default)(document, schema);
    expect(result).toMatchObject([{
      type: 'validation',
      level: 'error',
      item: {
        message: 'Expected type "String", got "null"',
        paths: []
      },
      path: ['title']
    }, {
      type: 'validation',
      level: 'error',
      item: {
        message: 'Required',
        paths: []
      },
      path: ['title']
    }]);
  }));
  it('should be able to resolve an array item type if there is just one type', /*#__PURE__*/_asyncToGenerator(function* () {
    var schema = (0, _schemaCreator.default)({
      types: [{
        name: 'testDoc',
        type: 'document',
        title: 'Test Document',
        fields: [{
          name: 'values',
          type: 'array',
          // note that there is only one type available
          of: [{
            type: 'arrayItem'
          }],
          validation: rule => rule.required()
        }]
      }, {
        name: 'arrayItem',
        type: 'object',
        fields: [{
          name: 'title',
          type: 'string'
        }]
      }]
    });
    var document = {
      _id: 'testId',
      _createdAt: '2021-08-27T14:48:51.650Z',
      _rev: 'exampleRev',
      _type: 'testDoc',
      _updatedAt: '2021-08-27T14:48:51.650Z',
      values: [{
        // note how this doesn't have a _type
        title: 5,
        _key: 'exampleKey'
      }]
    };
    yield expect((0, _validateDocument.default)(document, schema)).resolves.toEqual([{
      type: 'validation',
      level: 'error',
      item: {
        message: 'Expected type "String", got "Number"',
        paths: []
      },
      path: ['values', {
        _key: 'exampleKey'
      }, 'title']
    }]);
  }));
});
describe('resolveTypeForArrayItem', () => {
  var schema = (0, _schemaCreator.default)({
    types: [{
      name: 'foo',
      type: 'object',
      fields: [{
        name: 'title',
        type: 'number'
      }]
    }, {
      name: 'bar',
      type: 'object',
      fields: [{
        name: 'title',
        type: 'string'
      }]
    }]
  });
  var fooType = schema.get('foo');
  var barType = schema.get('bar');
  it('finds a matching schema type for an array item value given a list of candidate types', () => {
    var resolved = (0, _validateDocument.resolveTypeForArrayItem)({
      _type: 'bar',
      _key: 'exampleKey',
      title: 5
    }, [fooType, barType]);
    expect(resolved).toBe(barType);
  });
  it('assumes the type if there is only one possible candidate', () => {
    var resolved = (0, _validateDocument.resolveTypeForArrayItem)({
      // notice no _type
      _key: 'exampleKey',
      title: 5
    }, [fooType]);
    expect(resolved).toBe(fooType);
  });
});