"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeString = _interopRequireDefault(require("../util/typeString"));

var _deepEquals = _interopRequireDefault(require("../util/deepEquals"));

var _pathToString = _interopRequireDefault(require("../util/pathToString"));

var _ValidationError = _interopRequireDefault(require("../ValidationError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var SLOW_VALIDATOR_TIMEOUT = 5000;

var formatValidationErrors = options => {
  var message;

  if (options.message) {
    message = options.message;
  } else if (options.results.length === 1) {
    var _options$results$;

    message = (_options$results$ = options.results[0]) === null || _options$results$ === void 0 ? void 0 : _options$results$.item.message;
  } else {
    message = "[".concat(options.results.map(err => err.item.message).join(" - ".concat(options.operation, " - ")), "]");
  }

  return new _ValidationError.default(message, {
    children: options.results.length > 1 ? options.results : undefined,
    operation: options.operation
  });
};

var genericValidators = {
  type: (expected, value, message) => {
    var actualType = (0, _typeString.default)(value);

    if (actualType !== expected && actualType !== 'undefined') {
      return message || "Expected type \"".concat(expected, "\", got \"").concat(actualType, "\"");
    }

    return true;
  },
  presence: (expected, value, message) => {
    if (value === undefined && expected === 'required') {
      return message || 'Value is required';
    }

    return true;
  },
  all: function () {
    var _all = _asyncToGenerator(function* (children, value, message, context) {
      var resolved = yield Promise.all(children.map(child => child.validate(value, context)));
      var results = resolved.flat();
      if (!results.length) return true;
      return formatValidationErrors({
        message,
        results,
        operation: 'AND'
      });
    });

    function all(_x, _x2, _x3, _x4) {
      return _all.apply(this, arguments);
    }

    return all;
  }(),
  either: function () {
    var _either = _asyncToGenerator(function* (children, value, message, context) {
      var resolved = yield Promise.all(children.map(child => child.validate(value, context)));
      var results = resolved.flat(); // Read: There is at least one rule that matched

      if (results.length < children.length) return true;
      return formatValidationErrors({
        message,
        results,
        operation: 'OR'
      });
    });

    function either(_x5, _x6, _x7, _x8) {
      return _either.apply(this, arguments);
    }

    return either;
  }(),
  valid: (allowedValues, actual, message) => {
    var valueType = typeof actual;

    if (valueType === 'undefined') {
      return true;
    }

    var value = (valueType === 'number' || valueType === 'string') && "".concat(actual);
    var strValue = value && value.length > 30 ? "".concat(value.slice(0, 30), "\u2026") : value;
    var defaultMessage = value ? "Value \"".concat(strValue, "\" did not match any allowed values") : 'Value did not match any allowed values';
    return allowedValues.some(expected => (0, _deepEquals.default)(expected, actual)) ? true : message || defaultMessage;
  },
  custom: function () {
    var _custom = _asyncToGenerator(function* (fn, value, message, context) {
      var slowTimer = setTimeout(() => {
        // eslint-disable-next-line no-console
        console.warn("Custom validator at ".concat((0, _pathToString.default)(context.path), " has taken more than ").concat(SLOW_VALIDATOR_TIMEOUT, "ms to respond"));
      }, SLOW_VALIDATOR_TIMEOUT);
      var result;

      try {
        result = yield fn(value, context);
      } finally {
        clearTimeout(slowTimer);
      }

      if (typeof result === 'string') return message || result;
      return result;
    });

    function custom(_x9, _x10, _x11, _x12) {
      return _custom.apply(this, arguments);
    }

    return custom;
  }()
};
var _default = genericValidators;
exports.default = _default;