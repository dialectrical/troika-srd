"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deepEquals = _interopRequireDefault(require("../util/deepEquals"));

var _ValidationError = _interopRequireDefault(require("../ValidationError"));

var _genericValidator = _interopRequireDefault(require("./genericValidator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var arrayValidators = _objectSpread(_objectSpread({}, _genericValidator.default), {}, {
  min: (minLength, value, message) => {
    if (!value || value.length >= minLength) {
      return true;
    }

    return message || "Must have at least ".concat(minLength, " items");
  },
  max: (maxLength, value, message) => {
    if (!value || value.length <= maxLength) {
      return true;
    }

    return message || "Must have at most ".concat(maxLength, " items");
  },
  length: (wantedLength, value, message) => {
    if (!value || value.length === wantedLength) {
      return true;
    }

    return message || "Must have exactly ".concat(wantedLength, " items");
  },
  presence: (flag, value, message) => {
    if (flag === 'required' && !value) {
      return message || 'Required';
    }

    return true;
  },
  valid: (allowedValues, values, message) => {
    var valueType = typeof values;

    if (valueType === 'undefined') {
      return true;
    }

    var paths = [];

    var _loop = function _loop(i) {
      var value = values[i];

      if (allowedValues.some(expected => (0, _deepEquals.default)(expected, value))) {
        return "continue";
      }

      var pathSegment = value && value._key ? {
        _key: value._key
      } : i;
      paths.push([pathSegment]);
    };

    for (var i = 0; i < values.length; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return paths.length === 0 ? true : new _ValidationError.default(message || 'Value did not match any allowed values', {
      paths
    });
  },
  unique: (_unused, value, message) => {
    var dupeIndices = [];

    if (!value) {
      return true;
    }

    for (var x = 0; x < value.length; x++) {
      for (var y = x + 1; y < value.length; y++) {
        var itemA = value[x];
        var itemB = value[y];

        if (!(0, _deepEquals.default)(itemA, itemB)) {
          continue;
        }

        if (dupeIndices.indexOf(x) === -1) {
          dupeIndices.push(x);
        }

        if (dupeIndices.indexOf(y) === -1) {
          dupeIndices.push(y);
        }
      }
    }

    var paths = dupeIndices.map(idx => {
      var item = value[idx];
      var pathSegment = item && item._key ? {
        _key: item._key
      } : idx;
      return [pathSegment];
    });
    return dupeIndices.length > 0 ? new _ValidationError.default(message || "Can't be a duplicate", {
      paths
    }) : true;
  }
});

var _default = arrayValidators;
exports.default = _default;