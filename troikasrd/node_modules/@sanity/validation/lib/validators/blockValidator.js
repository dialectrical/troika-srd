"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockValidator = void 0;

var _validateDocument = require("../validateDocument");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var blockValidator = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (value, context) {
    var _type$fields, _type$fields$find;

    if (value.markDefs.length === 0) return [];
    var type = context.type;

    if (!type) {
      throw new Error("Schema `type` was not provided in validation context");
    }

    if (type.jsonType !== 'object') {
      throw new Error("Expected schema type with jsonType `object` but found `".concat(type.jsonType, "` instead."));
    }

    var childrenType = (_type$fields = type.fields) === null || _type$fields === void 0 ? void 0 : (_type$fields$find = _type$fields.find(field => field.name === 'children')) === null || _type$fields$find === void 0 ? void 0 : _type$fields$find.type;
    var spanType = (childrenType === null || childrenType === void 0 ? void 0 : childrenType.jsonType) === 'array' ? childrenType === null || childrenType === void 0 ? void 0 : childrenType.of.find(ofType => ofType.name === 'span') : null; // Validate every markDef (annotation) value
    // eslint-disable-next-line no-warning-comments
    // @ts-expect-error TODO (eventually): fix these types

    var activeAnnotationTypes = spanType === null || spanType === void 0 ? void 0 : spanType.annotations.filter(annotation => // eslint-disable-next-line no-warning-comments
    // @ts-expect-error TODO (eventually): fix these types
    value.markDefs.map(def => def._type).includes(annotation.name));
    var annotationValidations = [];
    value.markDefs.forEach(markDef => {
      var annotationType = activeAnnotationTypes.find(aType => aType.name === markDef._type);
      var validations = (0, _validateDocument.validateItem)(markDef, annotationType, ['markDefs', {
        _key: markDef._key
      }], {
        parent: value,
        document: context.document
      });
      annotationValidations.push(validations);
    });
    var results = yield Promise.all(annotationValidations);
    var flattened = results.flat();
    if (!flattened.length) return [];
    return flattened.map(res => {
      res.item.paths = [res.path];
      return res.item;
    });
  });

  return function blockValidator(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.blockValidator = blockValidator;