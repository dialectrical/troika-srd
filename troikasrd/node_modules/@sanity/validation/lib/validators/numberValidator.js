"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _genericValidator = _interopRequireDefault(require("./genericValidator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var precisionRx = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/;

var numberValidators = _objectSpread(_objectSpread({}, _genericValidator.default), {}, {
  integer: (_unused, value, message) => {
    if (!Number.isInteger(value)) {
      return message || 'Must be an integer';
    }

    return true;
  },
  precision: (limit, value, message) => {
    if (value === undefined) return true;
    var places = value.toString().match(precisionRx);
    var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);

    if (decimals > limit) {
      return message || "Max precision is ".concat(limit);
    }

    return true;
  },
  min: (minNum, value, message) => {
    if (value >= minNum) {
      return true;
    }

    return message || "Must be greater than or equal ".concat(minNum);
  },
  max: (maxNum, value, message) => {
    if (value <= maxNum) {
      return true;
    }

    return message || "Must be less than or equal ".concat(maxNum);
  },
  greaterThan: (num, value, message) => {
    if (value > num) {
      return true;
    }

    return message || "Must be greater than ".concat(num);
  },
  lessThan: (maxNum, value, message) => {
    if (value < maxNum) {
      return true;
    }

    return message || "Must be less than ".concat(maxNum);
  }
});

var _default = numberValidators;
exports.default = _default;