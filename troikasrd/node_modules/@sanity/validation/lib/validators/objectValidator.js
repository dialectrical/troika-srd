"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _genericValidator = _interopRequireDefault(require("./genericValidator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var metaKeys = ['_key', '_type', '_weak'];

var objectValidators = _objectSpread(_objectSpread({}, _genericValidator.default), {}, {
  presence: (expected, value, message) => {
    if (expected !== 'required') {
      return true;
    }

    var keys = value && Object.keys(value).filter(key => !metaKeys.includes(key));

    if (value === undefined || keys && keys.length === 0) {
      return message || 'Required';
    }

    return true;
  },
  reference: (_unused, value, message) => {
    if (!value) {
      return true;
    }

    if (typeof value._ref !== 'string') {
      return message || 'Must be a reference to a document';
    }

    return true;
  },
  block: function () {
    var _block = _asyncToGenerator(function* (validateBlock, value, message, context) {
      var result = yield validateBlock(value, context);

      if (typeof result === 'string') {
        return message || result;
      }

      return result;
    });

    function block(_x, _x2, _x3, _x4) {
      return _block.apply(this, arguments);
    }

    return block;
  }(),
  assetRequired: (flag, value, message) => {
    if (!value || !value.asset || !value.asset._ref) {
      var assetType = flag.assetType || 'Asset';
      return message || "".concat(assetType, " required");
    }

    return true;
  }
});

var _default = objectValidators;
exports.default = _default;