import { ResolvedSanityFile, ResolvedSanityImage, SanityAssetSource, SanityFileAsset, SanityFileSource, SanityImageAsset, SanityImageDimensions, SanityImageSource, SanityProjectDetails } from './types';
/**
 * Returns the width, height and aspect ratio of a passed image asset, from any
 * inferrable structure (id, url, path, asset document, image object etc)
 *
 * @param src - Input source (image object, asset, reference, id, url, path)
 * @returns Object with width, height and aspect ratio properties
 *
 * @throws {@link UnresolvableError}
 * Throws if passed image source could not be resolved to an asset ID
 */
export declare function getImageDimensions(src: SanityImageSource): SanityImageDimensions;
/**
 * See {@link getImageDimensions}
 *
 * @inheritFrom {@link getImageDimensions}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetImageDimensions: (src: SanityImageSource) => any;
/**
 * Returns the file extension for a given asset
 *
 * @param src - Input source (file/image object, asset, reference, id, url, path)
 * @returns The file extension, if resolvable (no `.` included)
 *
 * @throws {@link UnresolvableError}
 * Throws if passed asset source could not be resolved to an asset ID
 */
export declare function getExtension(src: SanityAssetSource): string;
/**
 * See {@link getExtension}
 *
 * @inheritFrom {@link getExtension}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetExtension: (src: SanityAssetSource) => any;
/**
 * Tries to resolve an image object with as much information as possible,
 * from any inferrable structure (id, url, path, image object etc)
 *
 * @param src - Input source (image object, asset, reference, id, url, path)
 * @param project Project ID and dataset the image belongs to
 * @returns Image object
 *
 * @throws {@link UnresolvableError}
 * Throws if passed image source could not be resolved to an asset ID
 */
export declare function getImage(src: SanityImageSource, project?: SanityProjectDetails): ResolvedSanityImage;
/**
 * See {@link getImage}
 *
 * @inheritFrom {@link getImage}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetImage: (src: SanityImageSource, project?: SanityProjectDetails | undefined) => any;
/**
 * Tries to resolve a (partial) image asset document with as much information as possible,
 * from any inferrable structure (id, url, path, image object etc)
 *
 * @param src - Input source (image object, asset, reference, id, url, path)
 * @param project - Project ID and dataset the image belongs to
 * @returns Image asset document
 *
 * @throws {@link UnresolvableError}
 * Throws if passed image source could not be resolved to an asset ID
 */
export declare function getImageAsset(src: SanityImageSource, project?: SanityProjectDetails): SanityImageAsset;
/**
 * See {@link getImageAsset}
 *
 * @inheritFrom {@link getImageAsset}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetImageAsset: (src: SanityImageSource, project?: SanityProjectDetails | undefined) => any;
/**
 * Tries to resolve an file object with as much information as possible,
 * from any inferrable structure (id, url, path, file object etc)
 *
 * @param src - Input source (file object, asset, reference, id, url, path)
 * @param project Project ID and dataset the file belongs to
 * @returns File object
 *
 * @throws {@link UnresolvableError}
 * Throws if passed file source could not be resolved to an asset ID
 */
export declare function getFile(src: SanityFileSource, project?: SanityProjectDetails): ResolvedSanityFile;
/**
 * See {@link getFile}
 *
 * @inheritFrom {@link getFile}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetFile: (src: SanityFileSource, project?: SanityProjectDetails | undefined) => any;
/**
 * Tries to resolve a (partial) file asset document with as much information as possible,
 * from any inferrable structure (id, url, path, file object etc)
 *
 * @param src - Input source (file object, asset, reference, id, url, path)
 * @param project - Project ID and dataset the file belongs to
 * @returns File asset document
 *
 * @throws {@link UnresolvableError}
 * Throws if passed file source could not be resolved to an asset ID
 */
export declare function getFileAsset(src: SanityFileSource, project?: SanityProjectDetails): SanityFileAsset;
/**
 * See {@link getFileAsset}
 *
 * @inheritFrom {@link getFileAsset}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetFileAsset: (src: SanityFileSource, project?: SanityProjectDetails | undefined) => any;
/**
 * Tries to resolve the asset document ID from any inferrable structure
 *
 * @param src - Input source (image/file object, asset, reference, id, url, path)
 * @returns The asset document ID
 *
 * @throws {@link UnresolvableError}
 * Throws if passed asset source could not be resolved to an asset document ID
 */
export declare function getAssetDocumentId(src: SanityAssetSource): string;
/**
 * See {@link getAssetDocumentId}
 *
 * @inheritFrom {@link getAssetDocumentId}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetAssetDocumentId: (src: SanityAssetSource) => any;
/**
 * Tries to cooerce a string (ID, URL or path) to an image asset ID
 *
 * @param str - Input string (ID, URL or path)
 * @returns string
 *
 *
 * @throws {@link UnresolvableError}
 * Throws if passed image source could not be resolved to an asset ID
 */
export declare function getIdFromString(str: string): string;
/**
 * See {@link getIdFromString}
 *
 * @inheritFrom {@link getIdFromString}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetIdFromString: (str: string) => any;
/**
 * Resolves project ID and dataset the image belongs to, based on full URL or path
 * @param source - Image URL or path
 * @returns object | undefined
 *
 * @throws {@link UnresolvableError}
 * Throws if passed image source could not be resolved to an asset ID
 */
export declare function getProject(src: SanityImageSource): SanityProjectDetails;
/**
 * See {@link getProject}
 *
 * @inheritFrom {@link getProject}
 * @returns Returns `undefined` instead of throwing if a value cannot be resolved
 */
export declare const tryGetProject: (src: SanityImageSource) => any;
/**
 * Returns whether or not the passed filename is a valid image asset filename
 *
 * @param filename - Filename to validate
 * @returns Whether or not the filename is an image asset filename
 */
export declare function isImageAssetFilename(filename: string): boolean;
/**
 * Returns whether or not the passed filename is a valid file asset filename
 *
 * @param filename - Filename to validate
 * @returns Whether or not the filename is a file asset filename
 */
export declare function isFileAssetFilename(filename: string): boolean;
/**
 * Returns whether or not the passed filename is a valid file or image asset filename
 *
 * @param filename - Filename to validate
 * @returns Whether or not the filename is an asset filename
 */
export declare function isAssetFilename(filename: string): boolean;
/**
 * Return whether or not the passed source is a file source
 *
 * @param src - Source to check
 * @returns Whether or not the given source is a file source
 */
export declare function isFileSource(src: SanityAssetSource): src is SanityFileSource;
/**
 * Return whether or not the passed source is an image source
 *
 * @param src - Source to check
 * @returns Whether or not the given source is an image source
 */
export declare function isImageSource(src: SanityAssetSource): src is SanityImageSource;
