{"version":3,"file":"asset-utils.cjs.production.min.js","sources":["../src/hotspotCrop.ts","../src/utils.ts","../src/constants.ts","../src/types.ts","../src/paths.ts","../src/parse.ts","../src/resolve.ts"],"sourcesContent":["import {SanityImageCrop, SanityImageHotspot} from './types'\n\n/**\n * Default crop (equals to \"whole image\")\n */\nexport const DEFAULT_CROP: Readonly<SanityImageCrop> = Object.freeze({\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0,\n})\n\n/**\n * Default hotspot (equals to horizontal/vertical center, full size of image)\n */\nexport const DEFAULT_HOTSPOT: Readonly<SanityImageHotspot> = Object.freeze({\n  x: 0.5,\n  y: 0.5,\n  height: 1,\n  width: 1,\n})\n\n/**\n * Returns cloned version of the default crop (prevents accidental mutations)\n *\n * @returns Default image crop object\n */\nexport const getDefaultCrop = (): SanityImageCrop => ({...DEFAULT_CROP})\n\n/**\n * Returns cloned version of the default hotspot (prevents accidental mutations)\n *\n * @returns Default image hotspot object\n */\nexport const getDefaultHotspot = (): SanityImageHotspot => ({...DEFAULT_HOTSPOT})\n\n/**\n * Returns whether or not the passed crop has the default values for a crop region\n *\n * @param crop The crop to return whether or not is the default crop\n * @returns True if passed crop matches default, false otherwise\n */\nexport const isDefaultCrop = (crop: SanityImageCrop): boolean => {\n  const {top, bottom, left, right} = crop\n  const {\n    top: defaultTop,\n    bottom: defaultBottom,\n    left: defaultLeft,\n    right: defaultRight,\n  } = DEFAULT_CROP\n\n  return (\n    top === defaultTop && bottom === defaultBottom && left === defaultLeft && right === defaultRight\n  )\n}\n\n/**\n * Returns whether or not the passed hotspot has the default values for a hotspot region\n *\n * @param hotspot The hotspot to return whether or not is the default hotspot\n * @returns True if passed hotspot matches default, false otherwise\n */\nexport const isDefaultHotspot = (hotspot: SanityImageHotspot): boolean => {\n  const {x, y, width, height} = hotspot\n  const {x: defaultX, y: defaultY, width: defaultWidth, height: defaultHeight} = DEFAULT_HOTSPOT\n\n  return x === defaultX && y === defaultY && width === defaultWidth && height === defaultHeight\n}\n","/**\n * @internal\n */\nexport type MethodReturnType<T> = T extends (...args: unknown[]) => infer R ? R : any // eslint-disable-line @typescript-eslint/no-explicit-any\n\n/**\n * @internal\n */\nexport type ArgumentTypes<F extends Function> = F extends (...args: infer A) => unknown ? A : never\n\n/**\n * Error type thrown when the library fails to resolve a value, such as an asset ID,\n * filename or project ID/dataset information.\n *\n * The `input` property holds the value passed as the input, which failed to be\n * resolved to something meaningful.\n */\nexport class UnresolvableError extends Error {\n  unresolvable = true\n\n  // The input may not be a valid source, so let's not type it as one\n  input?: unknown\n\n  constructor(inputSource: unknown, message = 'Failed to resolve asset ID from source') {\n    super(message)\n    this.input = inputSource\n  }\n}\n\n/**\n * Checks whether or not an error instance is of type UnresolvableError\n *\n * @param err - Error to check for unresolvable error type\n * @returns True if the passed error instance appears to be an unresolveable error\n */\nexport function isUnresolvableError(err: Error): err is UnresolvableError {\n  const error = err as UnresolvableError\n  return Boolean(error.unresolvable && 'input' in error)\n}\n\n/**\n * Returns a getter which returns `undefined` instead of throwing,\n * if encountering an `UnresolvableError`\n *\n * @param method - Function to use as resolver\n * @returns Function that returns `undefined` if passed resolver throws UnresolvableError\n * @internal\n */\nexport function getForgivingResolver<T extends Function>(method: T) {\n  return function (...args: ArgumentTypes<T>): MethodReturnType<T> | undefined {\n    try {\n      return method(...args)\n    } catch (err) {\n      if (isUnresolvableError(err)) {\n        return undefined\n      }\n\n      throw err\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const cdnUrl = 'https://cdn.sanity.io'\n\n/**\n * @internal\n */\nexport const fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const fileAssetIdPattern = /^file-[a-zA-Z0-9_]+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\\d+x\\d+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetIdPattern = /^image-[a-zA-Z0-9_]+-\\d+x\\d+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const assetFilenamePattern = /^([a-zA-Z0-9_]+\\.[a-z0-9]+|[a-zA-Z0-9_]+-\\d+x\\d+\\.[a-z0-9]+)$/\n\n/**\n * @internal\n */\nexport const pathPattern = /^(?:images|files)\\/([a-z0-9]+)\\/([a-z0-9][-\\w]*)\\//\n\n/**\n * @internal\n */\nexport const idPattern = /^(?:image-[a-zA-Z0-9_]+-\\d+x\\d+-[a-z0-9]+|file-[a-zA-Z0-9_]+-[a-z0-9]+)$/\n\n/**\n * For use in cases where the project and dataset doesn't really matter\n *\n * @internal\n */\nexport const dummyProject = {projectId: 'a', dataset: 'b'}\n","export type SanityAssetIdParts = SanityFileAssetIdParts | SanityImageAssetIdParts\n\nexport interface SanityFileAssetIdParts {\n  type: 'file'\n  assetId: string\n  extension: string\n}\n\nexport type SanityImageAssetIdParts = {\n  type: 'image'\n  assetId: string\n  extension: string\n  width: number\n  height: number\n}\n\nexport type SanityAssetSource = SanityFileSource | SanityImageSource\n\nexport type SanityFileSource =\n  | string\n  | SanityReference\n  | SanityFileAsset\n  | SanityAssetIdStub\n  | SanityAssetUrlStub\n  | SanityAssetPathStub\n  | SanityFileObjectStub\n\nexport type SanityImageSource =\n  | string\n  | SanityReference\n  | SanityImageAsset\n  | SanityAssetIdStub\n  | SanityAssetUrlStub\n  | SanityAssetPathStub\n  | SanityImageObjectStub\n\nexport type SanitySwatchName =\n  | 'darkMuted'\n  | 'darkVibrant'\n  | 'dominant'\n  | 'lightMuted'\n  | 'lightVibrant'\n  | 'muted'\n  | 'vibrant'\n\nexport interface Rectangle {\n  x: number\n  y: number\n  width: number\n  height: number\n}\n\nexport interface AbsoluteRectangle {\n  top: number\n  left: number\n  right: number\n  bottom: number\n}\n\nexport interface SanityProjectDetails {\n  projectId: string\n  dataset: string\n}\n\nexport interface ImageUrlBuilderOptions {\n  assetId: string\n  extension: string\n  metadata: {\n    dimensions: {\n      width: number\n      height: number\n    }\n  }\n\n  // Serves of aliases of eachother, prefers `vanityFilename` if both are set\n  originalFilename?: string\n  vanityFilename?: string\n}\n\nexport interface FileUrlBuilderOptions {\n  assetId: string\n  extension: string\n\n  // Serves of aliases of eachother, prefers `vanityFilename` if both are set\n  originalFilename?: string\n  vanityFilename?: string\n}\n\nexport interface SanityReference {\n  _ref: string\n  _weak?: boolean\n}\n\n/**\n * Checks whether or not the given source is a Sanity reference\n * (an object containing _ref string key)\n *\n * @param ref - Possible reference\n * @returns Whether or not the passed object is a reference\n */\nexport function isReference(ref: unknown): ref is SanityReference {\n  return isObject(ref) && typeof (ref as SanityReference)._ref === 'string'\n}\n\nexport interface SanityAssetIdStub {\n  _id: string\n}\n\n/**\n * Checks whether or not the given source is an asset ID stub\n * (an object containing an `_id` property)\n *\n * @param stub - Possible asset id stub\n * @returns Whether or not the passed object is an object id stub\n */\nexport function isAssetIdStub(stub: unknown): stub is SanityAssetIdStub {\n  return isObject(stub) && typeof (stub as SanityAssetIdStub)._id === 'string'\n}\n\nexport interface SanityAssetPathStub {\n  path: string\n}\n\n/**\n * Checks whether or not the given source is an asset path stub\n * (an object containing a `path` property)\n *\n * @param stub - Possible asset path stub\n * @returns Whether or not the passed object is an object path stub\n */\nexport function isAssetPathStub(stub: unknown): stub is SanityAssetPathStub {\n  return isObject(stub) && typeof (stub as SanityAssetPathStub).path === 'string'\n}\n\nexport interface SanityAssetUrlStub {\n  url: string\n}\n\n/**\n * Checks whether or not the given source is an asset URL stub\n * (an object containing a `url` property)\n *\n * @param stub - Possible asset url stub\n * @returns Whether or not the passed object is an object url stub\n */\nexport function isAssetUrlStub(stub: unknown): stub is SanityAssetUrlStub {\n  return isObject(stub) && typeof (stub as SanityAssetUrlStub).url === 'string'\n}\n\nexport interface SanityAsset {\n  _id: string\n  _type: string\n  url: string\n  path: string\n  assetId: string\n  extension: string\n  originalFilename?: string\n}\n\nexport type SanityImageAsset = SanityAsset & {\n  _type: 'sanity.imageAsset'\n  metadata: SanityImageMetadata\n}\n\nexport type SanityFileAsset = SanityAsset & {\n  _type: 'sanity.fileAsset'\n  metadata: {[key: string]: unknown}\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity file asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityFileAsset(src: unknown): src is SanityFileAsset {\n  return isObject(src) && (src as SanityFileAsset)._type === 'sanity.fileAsset'\n}\n\nexport interface SanityImageMetadata {\n  dimensions: SanityImageDimensions\n  lqip?: string\n  palette?: SanityImagePalette\n  [key: string]: unknown\n}\n\nexport interface SanityImageSize {\n  height: number\n  width: number\n}\n\nexport type SanityImageDimensions = SanityImageSize & {\n  aspectRatio: number\n}\n\nexport interface SanityImageCrop {\n  _type?: string\n  left: number\n  bottom: number\n  right: number\n  top: number\n}\n\nexport interface SanityImageHotspot {\n  _type?: string\n  width: number\n  height: number\n  x: number\n  y: number\n}\n\nexport interface SanityFileObjectStub {\n  _type?: string\n  asset:\n    | SanityReference\n    | SanityFileAsset\n    | SanityAssetIdStub\n    | SanityAssetPathStub\n    | SanityAssetUrlStub\n  [key: string]: unknown\n}\n\nexport interface SanityImageObjectStub {\n  _type?: string\n  asset:\n    | SanityReference\n    | SanityImageAsset\n    | SanityAssetIdStub\n    | SanityAssetPathStub\n    | SanityAssetUrlStub\n  crop?: SanityImageCrop\n  hotspot?: SanityImageHotspot\n  [key: string]: unknown\n}\n\nexport interface ResolvedSanityImage {\n  _type?: string\n  asset: SanityImageAsset\n  crop: SanityImageCrop\n  hotspot: SanityImageHotspot\n  [key: string]: unknown\n}\n\nexport interface ResolvedSanityFile {\n  _type?: string\n  asset: SanityFileAsset\n  [key: string]: unknown\n}\n\nexport type SanityAssetObjectStub = SanityFileObjectStub | SanityImageObjectStub\n\n/**\n * Checks whether or not the given source is an asset object stub\n *\n * @param stub - Possible asset object stub\n * @returns Whether or not the passed object is an object stub\n */\nexport function isAssetObjectStub(stub: unknown): stub is SanityAssetObjectStub {\n  const item = stub as SanityAssetObjectStub\n  return isObject(item) && item.asset && typeof item.asset === 'object'\n}\n\nexport interface SanityImagePalette {\n  _type?: string\n  darkMuted?: SanityImageSwatch\n  darkVibrant?: SanityImageSwatch\n  dominant?: SanityImageSwatch\n  lightMuted?: SanityImageSwatch\n  lightVibrant?: SanityImageSwatch\n  muted?: SanityImageSwatch\n  vibrant?: SanityImageSwatch\n  [key: string]: unknown\n}\n\nexport interface SanityImageSwatch {\n  background: string\n  foreground: string\n  population: number\n  title?: string\n}\n\nexport interface SanityImageFitResult {\n  width?: number\n  height?: number\n  rect: Rectangle\n}\n\n/**\n * Checks whether or not the passed object is an object (and not `null`)\n *\n * @param obj Item to check whether or not is an object\n * @returns Whether or not `obj` is an object\n * @internal\n */\nexport function isObject(obj: unknown): obj is object {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object'\n}\n","import {pathPattern, fileAssetFilenamePattern, imageAssetFilenamePattern, cdnUrl} from './constants'\nimport {getForgivingResolver, UnresolvableError} from './utils'\nimport {\n  ImageUrlBuilderOptions,\n  SanityProjectDetails,\n  FileUrlBuilderOptions,\n  SanityAssetSource,\n  isAssetObjectStub,\n  isReference,\n  isAssetPathStub,\n  isAssetUrlStub,\n} from './types'\n\n/**\n * Builds the base image path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param project - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImagePath(\n  asset: ImageUrlBuilderOptions,\n  project?: SanityProjectDetails\n): string {\n  if (!project) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for image')\n  }\n\n  const {projectId, dataset} = project\n  const {assetId, extension, metadata, originalFilename, vanityFilename} = asset\n  const {width, height} = metadata.dimensions\n\n  let vanity = vanityFilename || originalFilename\n  vanity = vanity ? `/${vanity}` : ''\n\n  return `images/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}${vanity}`\n}\n\n/**\n * Builds the base image URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param project - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImageUrl(\n  asset: ImageUrlBuilderOptions,\n  project?: SanityProjectDetails\n): string {\n  return `${cdnUrl}/${buildImagePath(asset, project)}`\n}\n\n/**\n * Builds the base file path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param project - Project ID and dataset the file belongs to\n * @return string\n */\nexport function buildFilePath(\n  asset: FileUrlBuilderOptions,\n  project?: SanityProjectDetails\n): string {\n  if (!project) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for file')\n  }\n\n  const {projectId, dataset} = project\n  const {assetId, extension, vanityFilename, originalFilename} = asset\n\n  let vanity = vanityFilename || originalFilename\n  vanity = vanity ? `/${vanity}` : ''\n\n  return `files/${projectId}/${dataset}/${assetId}.${extension}${vanity}`\n}\n\n/**\n * Builds the base file URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID and extension\n * @param project - Project ID and dataset the file belongs to\n * @return string\n */\nexport function buildFileUrl(asset: FileUrlBuilderOptions, project?: SanityProjectDetails): string {\n  return `${cdnUrl}/${buildFilePath(asset, project)}`\n}\n\n/**\n * Checks whether or not the given URL contains an asset path\n *\n * @param url - URL or path name\n * @returns Whether or not it contained an asset path\n */\nfunction hasPath(urlOrPath: string): boolean {\n  return pathPattern.test(tryGetUrlPath(urlOrPath) || '')\n}\n\n/**\n * Tries to get the asset path from a given asset source\n *\n * @param src - The source image to infer an asset path from\n * @returns A path if resolvable, undefined otherwise\n */\nexport function tryGetAssetPath(src: SanityAssetSource): string | undefined {\n  if (isAssetObjectStub(src)) {\n    return tryGetAssetPath(src.asset)\n  }\n\n  if (isReference(src)) {\n    return undefined\n  }\n\n  if (typeof src === 'string') {\n    return hasPath(src) ? getUrlPath(src) : undefined\n  }\n\n  if (isAssetPathStub(src)) {\n    return src.path\n  }\n\n  if (isAssetUrlStub(src)) {\n    return getUrlPath(src.url)\n  }\n\n  return undefined\n}\n\n/**\n * Strips the CDN URL and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `images/project/dataset/filename-200x200.jpg`\n *\n * @param url - URL to get path name from\n * @returns The path of a CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlPath(url: string): string {\n  if (pathPattern.test(url)) {\n    // Already just a path\n    return url\n  }\n\n  if (!url.startsWith(`${cdnUrl}/`)) {\n    throw new UnresolvableError(`Failed to resolve path from URL \"${url}\"`)\n  }\n\n  const qsPos = url.indexOf('?')\n  const toIndex = qsPos === -1 ? undefined : qsPos\n  return url.slice(cdnUrl.length + 1, toIndex)\n}\n\n/**\n * See {@link getUrlPath}\n *\n * @inheritFrom {@link getUrlPath}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlPath = getForgivingResolver(getUrlPath)\n\n/**\n * Strips the CDN URL, path and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `filename-200x200.jpg`\n *\n * @param url - URL to get filename from\n * @returns The filename of an URL, if URL matches the CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlFilename(url: string): string {\n  const path = tryGetUrlPath(url) || url\n  const filename = path.replace(/^(images|files)\\/[a-z0-9]+\\/[a-z0-9][-\\w]\\/*/, '')\n  if (!isValidFilename(filename)) {\n    throw new UnresolvableError(`Failed to resolve filename from URL \"${url}\"`)\n  }\n\n  return filename\n}\n\n/**\n * See {@link getUrlFilename}\n *\n * @inheritFrom {@link getUrlFilename}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlFilename = getForgivingResolver(getUrlFilename)\n\n/**\n * Checks whether or not a given filename matches the expected Sanity asset filename pattern\n *\n * @param filename - Filename to check for validity\n * @returns Whether or not the specified filename is valid\n */\nexport function isValidFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename) || imageAssetFilenamePattern.test(filename)\n}\n","import {SanityAssetIdParts, SanityFileAssetIdParts, SanityImageAssetIdParts} from './types'\nimport {fileAssetIdPattern, imageAssetFilenamePattern, imageAssetIdPattern} from './constants'\nimport {tryGetUrlFilename, isValidFilename} from './paths'\n\n/**\n * @internal\n */\nconst exampleFileId = 'file-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-pdf'\n\n/**\n * @internal\n */\nconst exampleImageId = 'image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg'\n\n/**\n * Parses a Sanity asset document ID into individual parts (type, id, extension, width/height etc)\n *\n * @param documentId - Document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID is invalid\n */\nexport function parseAssetId(documentId: string): SanityAssetIdParts {\n  if (imageAssetIdPattern.test(documentId)) {\n    return parseImageAssetId(documentId)\n  }\n\n  if (fileAssetIdPattern.test(documentId)) {\n    return parseFileAssetId(documentId)\n  }\n\n  throw new Error(`Invalid image/file asset ID: ${documentId}`)\n}\n\n/**\n * Parses a Sanity file asset document ID into individual parts (type, id, extension)\n *\n * @param documentId - File asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseFileAssetId(documentId: string): SanityFileAssetIdParts {\n  if (!fileAssetIdPattern.test(documentId)) {\n    throw new Error(\n      `Malformed file asset ID '${documentId}'. Expected an id like \"${exampleFileId}\"`\n    )\n  }\n\n  const [, assetId, extension] = documentId.split('-')\n  return {type: 'file', assetId, extension}\n}\n\n/**\n * Parses a Sanity image asset document ID into individual parts (type, id, extension, width, height)\n *\n * @param documentId - Image asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseImageAssetId(documentId: string): SanityImageAssetIdParts {\n  const [, assetId, dimensionString, extension] = documentId.split('-')\n  const [width, height] = (dimensionString || '').split('x').map(Number)\n\n  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0)) {\n    throw new Error(`Malformed asset ID '${documentId}'. Expected an id like \"${exampleImageId}\".`)\n  }\n\n  return {type: 'image', assetId, width, height, extension}\n}\n\n/**\n * Parses a Sanity asset filename into individual parts (type, id, extension, width, height)\n *\n * @param filename - Filename to parse into named parts\n * @returns Object of named properties\n * @throws If image/filename is invalid\n */\nexport function parseAssetFilename(filename: string): SanityAssetIdParts {\n  const file = tryGetUrlFilename(filename) || ''\n  if (!isValidFilename(file)) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n\n  try {\n    const type = imageAssetFilenamePattern.test(file) ? 'image' : 'file'\n    const assetId = file.replace(/\\.([a-z0-9+]+)$/i, '-$1')\n    return parseAssetId(`${type}-${assetId}`)\n  } catch (err) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n}\n","import {getDefaultCrop, getDefaultHotspot} from './hotspotCrop'\nimport {getForgivingResolver, UnresolvableError} from './utils'\nimport {parseImageAssetId, parseFileAssetId} from './parse'\nimport {\n  isAssetIdStub,\n  isAssetObjectStub,\n  isAssetPathStub,\n  isAssetUrlStub,\n  isReference,\n  ResolvedSanityFile,\n  ResolvedSanityImage,\n  SanityAssetSource,\n  SanityFileAsset,\n  SanityFileObjectStub,\n  SanityFileSource,\n  SanityImageAsset,\n  SanityImageDimensions,\n  SanityImageObjectStub,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport {\n  cdnUrl,\n  dummyProject,\n  fileAssetFilenamePattern,\n  idPattern,\n  imageAssetFilenamePattern,\n  pathPattern,\n} from './constants'\nimport {\n  buildFilePath,\n  buildFileUrl,\n  buildImagePath,\n  buildImageUrl,\n  getUrlPath,\n  tryGetAssetPath,\n} from './paths'\n\n/**\n * Returns the width, height and aspect ratio of a passed image asset, from any\n * inferrable structure (id, url, path, asset document, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @returns Object with width, height and aspect ratio properties\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageDimensions(src: SanityImageSource): SanityImageDimensions {\n  const imageId = getAssetDocumentId(src)\n  const {width, height} = parseImageAssetId(imageId)\n  const aspectRatio = width / height\n  return {width, height, aspectRatio}\n}\n\n/**\n * See {@link getImageDimensions}\n *\n * @inheritFrom {@link getImageDimensions}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageDimensions = getForgivingResolver(getImageDimensions)\n\n/**\n * Returns the file extension for a given asset\n *\n * @param src - Input source (file/image object, asset, reference, id, url, path)\n * @returns The file extension, if resolvable (no `.` included)\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset ID\n */\nexport function getExtension(src: SanityAssetSource): string {\n  return isFileSource(src)\n    ? getFile(src, dummyProject).asset.extension\n    : getImage(src, dummyProject).asset.extension\n}\n\n/**\n * See {@link getExtension}\n *\n * @inheritFrom {@link getExtension}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetExtension = getForgivingResolver(getExtension)\n\n/**\n * Tries to resolve an image object with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project Project ID and dataset the image belongs to\n * @returns Image object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImage(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): ResolvedSanityImage {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getImageAsset(src, projectDetails)\n\n  const img = src as SanityImageObjectStub\n  return {\n    asset,\n    crop: img.crop || getDefaultCrop(),\n    hotspot: img.hotspot || getDefaultHotspot(),\n  }\n}\n\n/**\n * See {@link getImage}\n *\n * @inheritFrom {@link getImage}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImage = getForgivingResolver(getImage)\n\n/**\n * Tries to resolve a (partial) image asset document with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the image belongs to\n * @returns Image asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageAsset(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): SanityImageAsset {\n  const projectDetails = project || getProject(src)\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityImageObjectStub\n  const source = (sourceObj.asset || src) as SanityImageAsset\n  const metadata = source.metadata || {}\n  const {assetId, width, height, extension} = parseImageAssetId(_id)\n  const aspectRatio = width / height\n  const baseAsset: SanityImageAsset = {\n    _id,\n    _type: 'sanity.imageAsset',\n    assetId,\n    extension,\n    metadata: {\n      ...metadata,\n      dimensions: {width, height, aspectRatio},\n    },\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildImagePath(baseAsset, projectDetails),\n    url: buildImageUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getImageAsset}\n *\n * @inheritFrom {@link getImageAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageAsset = getForgivingResolver(getImageAsset)\n\n/**\n * Tries to resolve an file object with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project Project ID and dataset the file belongs to\n * @returns File object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFile(src: SanityFileSource, project?: SanityProjectDetails): ResolvedSanityFile {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getFileAsset(src, projectDetails)\n  return {asset}\n}\n\n/**\n * See {@link getFile}\n *\n * @inheritFrom {@link getFile}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFile = getForgivingResolver(getFile)\n\n/**\n * Tries to resolve a (partial) file asset document with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the file belongs to\n * @returns File asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFileAsset(\n  src: SanityFileSource,\n  project?: SanityProjectDetails\n): SanityFileAsset {\n  const projectDetails = project || getProject(src)\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityFileObjectStub\n  const source = (sourceObj.asset || src) as SanityFileAsset\n  const {assetId, extension} = parseFileAssetId(_id)\n  const baseAsset: SanityFileAsset = {\n    _id,\n    _type: 'sanity.fileAsset',\n    assetId,\n    extension,\n    metadata: source.metadata || {},\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildFilePath(baseAsset, projectDetails),\n    url: buildFileUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getFileAsset}\n *\n * @inheritFrom {@link getFileAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFileAsset = getForgivingResolver(getFileAsset)\n\n/**\n * Tries to resolve the asset document ID from any inferrable structure\n *\n * @param src - Input source (image/file object, asset, reference, id, url, path)\n * @returns The asset document ID\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset document ID\n */\nexport function getAssetDocumentId(src: SanityAssetSource): string {\n  const source = isAssetObjectStub(src) ? src.asset : src\n\n  let id = ''\n  if (typeof source === 'string') {\n    id = getIdFromString(source)\n  } else if (isReference(source)) {\n    id = source._ref\n  } else if (isAssetIdStub(source)) {\n    id = source._id\n  } else if (isAssetPathStub(source)) {\n    id = idFromUrl(`${cdnUrl}/${source.path}`)\n  } else if (isAssetUrlStub(source)) {\n    id = idFromUrl(source.url)\n  }\n\n  const hasId = id && idPattern.test(id)\n  if (!hasId) {\n    throw new UnresolvableError(src)\n  }\n\n  return id\n}\n\n/**\n * See {@link getAssetDocumentId}\n *\n * @inheritFrom {@link getAssetDocumentId}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetAssetDocumentId = getForgivingResolver(getAssetDocumentId)\n\n/**\n * Tries to cooerce a string (ID, URL or path) to an image asset ID\n *\n * @param str - Input string (ID, URL or path)\n * @returns string\n *\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getIdFromString(str: string): string {\n  if (idPattern.test(str)) {\n    // Already an ID\n    return str\n  }\n\n  if (str.indexOf(`${cdnUrl}/images`) === 0 || str.indexOf(`${cdnUrl}/files`) === 0) {\n    // Full URL\n    return idFromUrl(str)\n  }\n\n  if (pathPattern.test(str)) {\n    // Path\n    return idFromUrl(`${cdnUrl}/${str}`)\n  }\n\n  if (isFileAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/files/a/b/${str}`)\n  }\n\n  if (isImageAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/images/a/b/${str}`)\n  }\n\n  throw new UnresolvableError(str)\n}\n\n/**\n * See {@link getIdFromString}\n *\n * @inheritFrom {@link getIdFromString}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetIdFromString = getForgivingResolver(getIdFromString)\n\n/**\n * Converts from a full asset URL to just the asset document ID\n *\n * @param url - A full asset URL to convert\n * @returns string\n */\nfunction idFromUrl(url: string): string {\n  const path = getUrlPath(url)\n  const [type, , , fileName] = path.split('/')\n  const prefix = type.replace(/s$/, '')\n  return `${prefix}-${fileName.replace(/\\./g, '-')}`\n}\n\n/**\n * Resolves project ID and dataset the image belongs to, based on full URL or path\n * @param source - Image URL or path\n * @returns object | undefined\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getProject(src: SanityImageSource): SanityProjectDetails {\n  const path = tryGetAssetPath(src)\n  if (!path) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  const [, projectId, dataset] = path.match(pathPattern) || ([] as string[])\n  if (!projectId || !dataset) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  return {projectId, dataset}\n}\n\n/**\n * See {@link getProject}\n *\n * @inheritFrom {@link getProject}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetProject = getForgivingResolver(getProject)\n\n/**\n * Returns whether or not the passed filename is a valid image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an image asset filename\n */\nexport function isImageAssetFilename(filename: string): boolean {\n  return imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is a file asset filename\n */\nexport function isFileAssetFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file or image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an asset filename\n */\nexport function isAssetFilename(filename: string): boolean {\n  return isImageAssetFilename(filename) || isFileAssetFilename(filename)\n}\n\n/**\n * Return whether or not the passed source is a file source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file source\n */\nexport function isFileSource(src: SanityAssetSource): src is SanityFileSource {\n  const assetId = getAssetDocumentId(src)\n  return assetId.startsWith('file-')\n}\n\n/**\n * Return whether or not the passed source is an image source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is an image source\n */\nexport function isImageSource(src: SanityAssetSource): src is SanityImageSource {\n  const assetId = getAssetDocumentId(src)\n  return assetId.startsWith('image-')\n}\n"],"names":["DEFAULT_CROP","Object","freeze","left","top","bottom","right","DEFAULT_HOTSPOT","x","y","height","width","getDefaultCrop","getDefaultHotspot","UnresolvableError","inputSource","message","input","Error","isUnresolvableError","err","Boolean","unresolvable","getForgivingResolver","method","cdnUrl","fileAssetFilenamePattern","fileAssetIdPattern","imageAssetFilenamePattern","imageAssetIdPattern","pathPattern","idPattern","dummyProject","projectId","dataset","isReference","ref","isObject","_ref","isAssetIdStub","stub","_id","isAssetPathStub","path","isAssetUrlStub","url","isAssetObjectStub","item","asset","obj","Array","isArray","buildImagePath","project","metadata","dimensions","vanity","vanityFilename","originalFilename","assetId","extension","buildImageUrl","buildFilePath","buildFileUrl","tryGetAssetPath","src","test","tryGetUrlPath","getUrlPath","undefined","startsWith","qsPos","indexOf","slice","length","getUrlFilename","filename","replace","isValidFilename","tryGetUrlFilename","parseAssetId","documentId","parseImageAssetId","parseFileAssetId","split","type","dimensionString","map","Number","getImageDimensions","getAssetDocumentId","aspectRatio","tryGetImageDimensions","getExtension","isFileSource","getFile","getImage","tryGetExtension","img","getImageAsset","tryGetProject","crop","hotspot","tryGetImage","projectDetails","getProject","baseAsset","_type","tryGetImageAsset","getFileAsset","tryGetFile","source","tryGetFileAsset","id","getIdFromString","idFromUrl","tryGetAssetDocumentId","str","isFileAssetFilename","isImageAssetFilename","tryGetIdFromString","fileName","match","file"],"mappings":"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"}