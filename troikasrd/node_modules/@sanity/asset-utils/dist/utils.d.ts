/**
 * @internal
 */
export declare type MethodReturnType<T> = T extends (...args: unknown[]) => infer R ? R : any;
/**
 * @internal
 */
export declare type ArgumentTypes<F extends Function> = F extends (...args: infer A) => unknown ? A : never;
/**
 * Error type thrown when the library fails to resolve a value, such as an asset ID,
 * filename or project ID/dataset information.
 *
 * The `input` property holds the value passed as the input, which failed to be
 * resolved to something meaningful.
 */
export declare class UnresolvableError extends Error {
    unresolvable: boolean;
    input?: unknown;
    constructor(inputSource: unknown, message?: string);
}
/**
 * Checks whether or not an error instance is of type UnresolvableError
 *
 * @param err - Error to check for unresolvable error type
 * @returns True if the passed error instance appears to be an unresolveable error
 */
export declare function isUnresolvableError(err: Error): err is UnresolvableError;
/**
 * Returns a getter which returns `undefined` instead of throwing,
 * if encountering an `UnresolvableError`
 *
 * @param method - Function to use as resolver
 * @returns Function that returns `undefined` if passed resolver throws UnresolvableError
 * @internal
 */
export declare function getForgivingResolver<T extends Function>(method: T): (...args: ArgumentTypes<T>) => MethodReturnType<T> | undefined;
