"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBaseServer = getBaseServer;
exports.getDocumentElement = getDocumentElement;
exports.applyStaticRoutes = applyStaticRoutes;
exports.callInitializers = callInitializers;

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _react = _interopRequireDefault(require("react"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _requireUncached = _interopRequireDefault(require("require-uncached"));

var _resolver = require("@sanity/resolver");

var _getStaticBasePath = _interopRequireDefault(require("./util/getStaticBasePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var docPart = 'part:@sanity/base/document';
var initPart = 'part:@sanity/server/initializer';

var getDefaultModule = mod => {
  return mod && mod.__esModule ? mod.default : mod;
};

var getTitle = function getTitle() {
  var project = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var projectName = project && project.name || '';
  return projectName ? "".concat(projectName, " \u2013 Sanity") : 'Sanity';
};

var assetify = (assetPath, hashes) => ({
  path: assetPath,
  hash: hashes[assetPath]
});

var getDocumentComponent = function getDocumentComponent(basePath) {
  var isSanityMonorepo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  // Explicitly pass false here to not use uncompiled JSX etc
  return (0, _resolver.resolveParts)({
    basePath,
    isSanityMonorepo
  }).then(res => {
    var part = res.implementations[docPart];

    if (!part) {
      throw new Error("Part '".concat(docPart, "' is not implemented by any plugins, are you missing @sanity/base?"));
    }

    return getDefaultModule((0, _requireUncached.default)(part[0].path));
  });
};

function getBaseServer() {
  return (0, _express.default)();
}

function getDocumentElement(_ref) {
  var project = _ref.project,
      basePath = _ref.basePath,
      hashes = _ref.hashes,
      isSanityMonorepo = _ref.isSanityMonorepo;
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var assetHashes = hashes || {}; // Project filesystem base path

  return getDocumentComponent(basePath, isSanityMonorepo).then(Document => /*#__PURE__*/_react.default.createElement(Document, Object.assign({
    // URL base path
    basePath: process.env.STUDIO_BASEPATH || project && project.basePath || '',
    title: getTitle(project),
    stylesheets: ['css/main.css'].map(item => assetify(item, assetHashes)),
    scripts: ['js/vendor.bundle.js', 'js/app.bundle.js'].map(item => assetify(item, assetHashes))
  }, props)));
}

function applyStaticRoutes(app) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var staticPath = config.staticPath || _path.default.join(__dirname, '..', 'public');

  var staticBasePath = (0, _getStaticBasePath.default)(config);
  app.use(staticBasePath, _express.default.static(staticPath));
  app.get('*', (req, res) => {
    if (req.url.startsWith(staticBasePath)) {
      return res.status(404).send('File not found');
    }

    return getDocumentElement(config).then(doc => res.send("<!doctype html>".concat(_server.default.renderToStaticMarkup(doc)))).catch(err => {
      console.error(err.stack); // eslint-disable-line no-console

      res.set('Content-Type', 'text/plain').status(500).send(err.stack);
    });
  });
  return app;
}

function callInitializers(config) {
  (0, _resolver.resolveParts)(config).then(res => {
    var parts = res.implementations[initPart];

    if (!parts) {
      return;
    }

    res.implementations[initPart] // eslint-disable-next-line import/no-dynamic-require
    .map(part => getDefaultModule(require(part.path))).forEach(initializer => initializer(config));
  });
}