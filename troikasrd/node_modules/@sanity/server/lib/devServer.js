"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDevServer;

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _register = _interopRequireDefault(require("@babel/register"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _baseServer = require("./baseServer");

var _webpackConfig = _interopRequireDefault(require("./configs/webpack.config.dev"));

var _getStaticBasePath = _interopRequireDefault(require("./util/getStaticBasePath"));

var _isSanityMonorepo = _interopRequireDefault(require("./configs/isSanityMonorepo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getDevServer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  config.isSanityMonorepo = (0, _isSanityMonorepo.default)(config.basePath);
  var staticPath = (0, _getStaticBasePath.default)(config);
  var app = (0, _baseServer.getBaseServer)(config);
  var webpackConfig = config.webpack || (0, _webpackConfig.default)(config); // Serve an empty CSS file for the main stylesheet,
  // as they are injected dynamically in development mode

  app.get("".concat(staticPath, "/css/main.css"), (req, res) => {
    res.set('Content-Type', 'text/css');
    res.send();
  }); // Use babel-register in order to be able to load things like
  // the document component, which can contain JSX etc

  if (config.isSanityMonorepo) {
    (0, _register.default)({
      babelrc: false,
      configFile: _path.default.resolve(__dirname, '../.babelrc'),
      // Ignore all files in node_modules except `node_modules/@sanity/base/**/*`
      ignore: [/node_modules\/(?!@sanity\/base).*/],
      extensions: ['.jsx', '.js', '.mjs', '.ts', '.tsx']
    });
  } else {
    (0, _register.default)();
  } // Apply the dev and hot middlewares to build/serve bundles on the fly


  var compiler = (0, _webpack.default)(webpackConfig);
  app.use((0, _webpackDevMiddleware.default)(compiler, {
    logLevel: 'silent',
    watchOptions: {
      ignored: /node_modules/
    },
    publicPath: webpackConfig.output.publicPath
  }));
  app.use((0, _webpackHotMiddleware.default)(compiler)); // Expose webpack compiler on server instance

  app.locals.compiler = compiler; // Call any registered initializers

  (0, _baseServer.callInitializers)(config);
  return (0, _baseServer.applyStaticRoutes)(app, config);
}