"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var simpleGet = require('simple-get');

var pkg = require('../../package.json');

module.exports = function (url) {
  var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new Promise((resolve, reject) => {
    simpleGet({
      url,
      method: 'HEAD',
      followRedirects: false,
      headers: _objectSpread({
        'User-Agent': "".concat(pkg.name, " ").concat(pkg.version)
      }, headers)
    }, (err, res) => {
      if (err) {
        reject(err);
        return;
      }

      if (res.statusCode >= 400) {
        var error = new Error("Request returned HTTP ".concat(res.statusCode));
        error.statusCode = res.statusCode;
        reject(error);
        return;
      }

      res.resume();
      resolve(res.headers);
    });
  });
};