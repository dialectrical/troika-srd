"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fs = require('fs');

var path = require('path');

var semver = require('semver');

var resolveFrom = require('resolve-from');

var generateHelpUrl = require('@sanity/generate-help-url'); // NOTE: when doing changes here, also remember to update versions in help docs at
// https://admin.sanity.io/desk/docs;helpArticle;upgrade-packages


var PACKAGES = [{
  name: 'react',
  supported: ['^16.9', '^17'],
  deprecatedBelow: null
}, {
  name: 'react-dom',
  supported: ['^16.9', '^17'],
  deprecatedBelow: null
}];

module.exports = workDir => {
  var manifest = readPackageJson(path.join(workDir, 'package.json'));
  var dependencies = Object.assign({}, manifest.dependencies, manifest.devDependencies);
  var installedPackages = PACKAGES.map(pkg => {
    if (!dependencies[pkg.name]) {
      return null;
    }

    var manifestPath = resolveFrom.silent(workDir, path.join(pkg.name, 'package.json'));
    var installed = semver.coerce(manifestPath ? readPackageJson(manifestPath).version : dependencies[pkg].replace(/[\D.]/g, ''));
    var supported = pkg.supported.join(' || '); // "Untested" is usually the case where we have not upgraded the React version requirements
    // before a release, but given that is usually works in a backwards-compatible way, we want
    // to indicate that it's _untested_, not necessarily _unsupported_
    // Ex: Installed is react@17.0.0, but we've only _tested_ with react@^16

    var isUntested = !semver.satisfies(installed, supported) && semver.gtr(installed, supported); // "Unsupported" in that the installed version is _lower than_ the minimum version
    // Ex: Installed is react@15.0.0, but we require react@^16

    var isUnsupported = !semver.satisfies(installed, supported) && !isUntested; // "Deprecated" in that we will stop supporting it at some point in the near future,
    // so users should be prompted to upgrade

    var isDeprecated = pkg.deprecatedBelow && semver.ltr(installed, pkg.deprecatedBelow);
    return _objectSpread(_objectSpread({}, pkg), {}, {
      installed,
      isUnsupported,
      isDeprecated,
      isUntested
    });
  }).filter(Boolean);
  var unsupported = installedPackages.filter(pkg => pkg.isUnsupported);
  var deprecated = installedPackages.filter(pkg => !pkg.isUnsupported && pkg.isDeprecated);
  var untested = installedPackages.filter(pkg => pkg.isUntested);

  if (deprecated.length > 0) {
    // eslint-disable-next-line no-console
    console.warn("\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ".concat(listPackages(deprecated), "\n\nSupport for these will be removed in a future release!\n\n  ").concat(getUpgradeInstructions(deprecated), "\n"));
  }

  if (untested.length > 0) {
    // eslint-disable-next-line no-console
    console.warn("\n[WARN] The following package versions have not yet been marked as supported:\n\n  ".concat(listPackages(untested), "\n\nYou _may_ encounter bugs while using these versions.\n\n  ").concat(getDowngradeInstructions(untested), "\n"));
  }

  if (unsupported.length > 0) {
    // eslint-disable-next-line no-console
    console.error("\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ".concat(listPackages(unsupported), "\n\n  ").concat(getUpgradeInstructions(unsupported), "\n"));
    process.exit(1);
  }
};

function listPackages(pkgs) {
  return pkgs.map(pkg => "".concat(pkg.name, " (installed: ").concat(pkg.installed, ", want: ").concat(pkg.deprecatedBelow || pkg.supported.join(' || '), ")")).join('\n  ');
}

function getUpgradeInstructions(pkgs) {
  var inst = pkgs.map(pkg => {
    var _pkg$supported$map$so = pkg.supported.map(version => semver.coerce(version).version).sort(semver.rcompare),
        _pkg$supported$map$so2 = _slicedToArray(_pkg$supported$map$so, 1),
        highestSupported = _pkg$supported$map$so2[0];

    return "\"".concat(pkg.name, "@").concat(highestSupported, "\"");
  }).join(' ');
  return "To upgrade, run either:\n\n  yarn add ".concat(inst, "\n\n  or\n\n  npm install ").concat(inst, "\n\nRead more at ").concat(generateHelpUrl('upgrade-packages'));
}

function getDowngradeInstructions(pkgs) {
  var inst = pkgs.map(pkg => {
    var _pkg$supported$map$so3 = pkg.supported.map(version => semver.coerce(version).version).sort(semver.rcompare),
        _pkg$supported$map$so4 = _slicedToArray(_pkg$supported$map$so3, 1),
        highestSupported = _pkg$supported$map$so4[0];

    return "\"".concat(pkg.name, "@").concat(highestSupported, "\"");
  }).join(' ');
  return "To downgrade, run either:\n\n  yarn add ".concat(inst, "\n\n  or\n\n  npm install ").concat(inst);
}

function readPackageJson(filePath) {
  try {
    // eslint-disable-next-line no-sync
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  } catch (err) {
    throw new Error("Failed to read \"".concat(filePath, "\": ").concat(err.message));
  }
}