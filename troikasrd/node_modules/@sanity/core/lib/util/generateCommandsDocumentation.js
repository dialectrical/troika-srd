"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCommandsDocumentation = generateCommandsDocumentation;
exports.generateCommandDocumentation = generateCommandDocumentation;

var _padEnd2 = _interopRequireDefault(require("lodash/padEnd"));

var _noSuchCommandText = _interopRequireDefault(require("./noSuchCommandText"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generate documentation for all commands within a given group
 */
function generateCommandsDocumentation(commandGroups) {
  var group = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  var commandGroup = commandGroups[group];

  if (!commandGroup) {
    throw new Error((0, _noSuchCommandText.default)(group));
  } // Find the maximum length of a command name, so we can pad the descriptions


  var cmdLength = commandGroup.reduce((max, cmd) => Math.max(cmd.name.length, max), 0);
  var rows = ['usage: sanity [-v|--version] [-d|--debug] [-h|--help] <command> [<args>]', '', 'Commands:'].concat(commandGroup.map(cmd => "   ".concat((0, _padEnd2.default)(cmd.name, cmdLength), " ").concat(cmd.description))).concat(['', "See 'sanity help <command>' for specific information on a subcommand."]);
  return rows.join('\n');
}
/**
 * Generate documentation for a single command within the given group
 */


function generateCommandDocumentation(command, group, subCommand) {
  if (!command) {
    throw new Error(subCommand ? "\"".concat(subCommand, "\" is not a subcommand of \"").concat(group, "\". See 'sanity help ").concat(group, "'") : (0, _noSuchCommandText.default)(group));
  }

  var cmdParts = [group, subCommand].filter(Boolean).join(' ');
  return ["usage: sanity ".concat(cmdParts, " ").concat(command.signature || ''), '', "   ".concat(command.description || ''), '', (command.helpText || '').trim()].join('\n');
}