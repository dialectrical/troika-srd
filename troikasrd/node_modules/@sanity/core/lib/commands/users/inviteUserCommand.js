"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var prettifyQuotaError = require('../../util/prettifyQuotaError');

var helpText = "\nOptions\n  --role Role to invite the user as\n\nExamples\n  # Invite a new user to the project (prompt for details)\n  sanity users invite\n\n  # Send a new user invite to the email \"pippi@sanity.io\", prompt for role\n  sanity users invite pippi@sanity.io\n\n  # Send a new user invite to the email \"pippi@sanity.io\", as administrator\n  sanity users invite pippi@sanity.io --role administrator\n";
var _default = {
  name: 'invite',
  group: 'users',
  signature: '[EMAIL]',
  helpText,
  description: 'Invite a new user to the project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          prompt = context.prompt;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          selectedEmail = _args$argsWithoutOpti[0];

      var flags = args.extOptions;
      var client = apiClient().clone().config({
        useProjectHostname: false,
        apiVersion: '2021-06-07'
      });

      var _client$config = client.config(),
          projectId = _client$config.projectId;

      var roles = (yield client.request({
        uri: "/projects/".concat(projectId, "/roles")
      })).filter(role => role.appliesToUsers);
      var email = selectedEmail || (yield promptForEmail(prompt));
      var selectedRole = flags.role || (yield promptForRole(prompt, roles));
      var role = roles.find(_ref => {
        var name = _ref.name;
        return name.toLowerCase() === selectedRole.toLowerCase();
      });

      if (!role) {
        throw new Error("Role name \"".concat(selectedRole, "\" not found"));
      }

      yield client.clone().request({
        method: 'POST',
        uri: "/invitations/project/".concat(projectId),
        body: {
          email,
          role: role.name
        },
        useGlobalApi: true,
        maxRedirects: 0
      }).catch(prettifyQuotaError('Project is already at user quota, add billing details to the project in order to allow overage charges.'));
      output.print("Invitation sent to ".concat(email));
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function promptForEmail(prompt) {
  return prompt.single({
    type: 'input',
    message: 'Email to invite:',
    filter: val => val.trim(),
    validate: name => {
      if (!name || !name.includes('@')) {
        return 'Invalid email';
      }

      return true;
    }
  });
}

function promptForRole(prompt, roles) {
  return prompt.single({
    type: 'list',
    message: 'Which role should the user have?',
    choices: roles.map(role => ({
      value: role.name,
      name: "".concat(role.title, " (").concat(role.description, ")")
    }))
  });
}