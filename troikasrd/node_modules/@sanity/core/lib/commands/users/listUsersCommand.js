"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _size2 = _interopRequireDefault(require("lodash/size"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var sortFields = ['id', 'name', 'role', 'date'];
var helpText = "\nOptions\n  --no-invitations Don't include pending invitations\n  --no-robots Don't include robots (token users)\n  --sort <field> Sort users by specified column: ".concat(sortFields.join(', '), "\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List all users of the project\n  sanity users list\n\n  # List all users of the project, but exclude pending invitations and robots\n  sanity users list --no-invitations --no-robots\n\n  # List all users, sorted by role\n  sanity users list --sort role\n");
var _default = {
  name: 'list',
  group: 'users',
  signature: '',
  helpText,
  description: 'List all users of the project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          chalk = context.chalk;

      var _sort$order$robots$in = _objectSpread({
        sort: 'date',
        order: 'asc',
        robots: true,
        invitations: true
      }, args.extOptions),
          sort = _sort$order$robots$in.sort,
          order = _sort$order$robots$in.order,
          robots = _sort$order$robots$in.robots,
          invitations = _sort$order$robots$in.invitations;

      if (!sortFields.includes(sort)) {
        throw new Error("Can't sort by field \"".concat(sort, "\". Must be one of ").concat(sortFields.join(', ')));
      }

      if (order !== 'asc' && order !== 'desc') {
        throw new Error("Unknown sort order \"".concat(order, "\", must be either \"asc\" or \"desc\""));
      }

      var client = apiClient();
      var globalClient = client.clone().config({
        useProjectHostname: false
      });

      var _client$config = client.config(),
          projectId = _client$config.projectId;

      var useGlobalApi = true;

      var _yield$Promise$all = yield Promise.all([invitations ? globalClient.request({
        uri: "/invitations/project/".concat(projectId),
        useGlobalApi
      }).then(getPendingInvitations) : [], globalClient.request({
        uri: "/projects/".concat(projectId),
        useGlobalApi
      })]),
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),
          pendingInvitations = _yield$Promise$all2[0],
          project = _yield$Promise$all2[1];

      var memberIds = project.members.map(member => member.id);
      var users = yield globalClient.request({
        uri: "/users/".concat(memberIds.join(',')),
        useGlobalApi
      }).then(arrayify);
      var members = project.members.map(member => _objectSpread(_objectSpread({}, member), getUserProps(users.find(candidate => candidate.id === member.id)))).filter(member => !member.isRobot || robots).concat(pendingInvitations);
      var ordered = (0, _sortBy2.default)(members.map(_ref => {
        var id = _ref.id,
            name = _ref.name,
            role = _ref.role,
            date = _ref.date;
        return [id, name, role, date];
      }), [sortFields.indexOf(sort)]);
      var rows = order === 'asc' ? ordered : ordered.reverse();
      var maxWidths = rows.reduce((max, row) => row.map((current, index) => Math.max((0, _size2.default)(current), max[index])), sortFields.map(str => (0, _size2.default)(str)));

      var printRow = row => {
        var isInvite = row[0] === '<pending>';
        var textRow = row.map((col, i) => "".concat(col).padEnd(maxWidths[i])).join('   ');
        return isInvite ? chalk.dim(textRow) : textRow;
      };

      output.print(chalk.cyan(printRow(sortFields)));
      rows.forEach(row => output.print(printRow(row)));
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function arrayify(obj) {
  return Array.isArray(obj) ? obj : [obj];
}

function getUserProps(user) {
  var _ref2 = user || {},
      name = _ref2.displayName,
      date = _ref2.createdAt;

  return {
    name,
    date
  };
}

function getPendingInvitations(invitations) {
  return invitations.filter(invite => !invite.isAccepted && !invite.isRevoked && !invite.acceptedByUserId).map(invite => ({
    id: '<pending>',
    name: invite.email,
    role: invite.role,
    date: invite.createdAt
  }));
}