"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'create',
  group: 'hook',
  signature: '[NAME] [DATASET] [URL]',
  description: 'Create a new hook for the given dataset',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 3),
          hookName = _args$argsWithoutOpti[0],
          datasetName = _args$argsWithoutOpti[1],
          hookUrl = _args$argsWithoutOpti[2];

      var client = apiClient();
      var name = yield hookName || promptForHookName(context);
      var dataset = yield datasetName || promptForDataset(context);
      var url = yield hookUrl || promptForHookUrl(context);
      var body = {
        name,
        dataset,
        url
      };

      try {
        yield client.request({
          method: 'POST',
          uri: '/hooks',
          body,
          json: true
        });
        output.print('Hook created successfully');
      } catch (err) {
        throw new Error("Hook creation failed:\n".concat(err.message));
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function promptForHookName(context) {
  var prompt = context.prompt;
  return prompt.single({
    type: 'input',
    message: 'Hook name:',
    validate: name => name && name.length > 0 && name.length < 250 ? true : 'Hook names must be between 0 and 250 characters'
  });
}

function promptForHookUrl(context) {
  var prompt = context.prompt;
  return prompt.single({
    type: 'input',
    message: 'Hook URL:',
    validate: url => url && /^https?:\/\//.test(url) ? true : 'Hook URL must have an http/https prefix'
  });
}

function promptForDataset(_x3) {
  return _promptForDataset.apply(this, arguments);
}

function _promptForDataset() {
  _promptForDataset = _asyncToGenerator(function* (context) {
    var prompt = context.prompt,
        apiClient = context.apiClient;
    var client = apiClient();
    var datasets = yield client.datasets.list();
    var choices = datasets.map(dataset => ({
      value: dataset.name,
      name: dataset.name
    }));
    choices.push({
      value: '*',
      name: '* (all datasets)'
    });
    return prompt.single({
      message: 'Select dataset hook should apply to',
      type: 'list',
      choices
    });
  });
  return _promptForDataset.apply(this, arguments);
}