"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatFailure = formatFailure;
exports.getStatus = getStatus;
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'attempt',
  group: 'hook',
  signature: 'ATTEMPT_ID',
  description: 'Print details of a given webhook delivery attempt',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          attemptId = _args$argsWithoutOpti[0];

      var client = apiClient();
      var attempt;

      try {
        attempt = yield client.request({
          uri: "/hooks/attempts/".concat(attemptId)
        });
      } catch (err) {
        throw new Error("Hook attempt retrieval failed:\n".concat(err.message));
      }

      var _attempt = attempt,
          createdAt = _attempt.createdAt,
          resultCode = _attempt.resultCode,
          resultBody = _attempt.resultBody,
          failureReason = _attempt.failureReason,
          inProgress = _attempt.inProgress;
      output.print("Date: ".concat(createdAt));
      output.print("Status: ".concat(getStatus(attempt)));
      output.print("Status code: ".concat(resultCode));

      if (attempt.isFailure) {
        output.print("Failure: ".concat(formatFailure(attempt)));
      }

      if (!inProgress && (!failureReason || failureReason === 'http')) {
        var body = resultBody ? "\n---\n".concat(resultBody, "\n---\n") : '<empty>';
        output.print("Response body: ".concat(body));
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function formatFailure(attempt) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      includeHelp = _ref.includeHelp;

  var id = attempt.id,
      failureReason = attempt.failureReason,
      resultCode = attempt.resultCode;
  var help = includeHelp ? "(run `sanity hook attempt ".concat(id, "` for details)") : '';

  switch (failureReason) {
    case 'http':
      return "HTTP ".concat(resultCode, " ").concat(help);

    case 'timeout':
      return 'Request timed out';

    case 'network':
      return 'Network error';

    case 'other':
    default:
  }

  return 'Unknown error';
}

function getStatus(attempt) {
  if (attempt.isFailure) {
    return 'Failed';
  }

  if (attempt.inProgress) {
    return 'In progress';
  }

  return 'Delivered';
}