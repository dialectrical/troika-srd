"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _util = require("util");

var _printHookAttemptCommand = require("./printHookAttemptCommand");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'logs',
  group: 'hook',
  signature: '[NAME]',
  description: 'List latest log entries for a given hook',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient;
      var flags = args.extOptions;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          name = _args$argsWithoutOpti[0];

      var client = apiClient();
      var hookId = yield promptForHook(name, context);
      var messages;
      var attempts;

      try {
        messages = yield client.request({
          uri: "/hooks/".concat(hookId, "/messages")
        });
        attempts = yield client.request({
          uri: "/hooks/".concat(hookId, "/attempts")
        });
      } catch (err) {
        throw new Error("Hook logs retrieval failed:\n".concat(err.message));
      }

      var groupedAttempts = (0, _groupBy2.default)(attempts, 'messageId');
      var populated = messages.map(msg => Object.assign(msg, {
        attempts: groupedAttempts[msg.id]
      }));
      var totalMessages = messages.length - 1;
      populated.forEach((message, i) => {
        printMessage(message, context, {
          detailed: flags.detailed
        });
        printSeparator(context, totalMessages === i);
      });
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function promptForHook(_x3, _x4) {
  return _promptForHook.apply(this, arguments);
}

function _promptForHook() {
  _promptForHook = _asyncToGenerator(function* (specified, context) {
    var specifiedName = specified && specified.toLowerCase();
    var prompt = context.prompt,
        apiClient = context.apiClient;
    var client = apiClient();
    var hooks = yield client.request({
      uri: '/hooks',
      json: true
    });

    if (specifiedName) {
      var selected = hooks.filter(hook => hook.name.toLowerCase() === specifiedName)[0];

      if (!selected) {
        throw new Error("Hook with name \"".concat(specified, " not found\""));
      }

      return selected.id;
    }

    if (hooks.length === 0) {
      throw new Error('No hooks currently registered');
    }

    if (hooks.length === 1) {
      return hooks[0].id;
    }

    var choices = hooks.map(hook => ({
      value: hook.id,
      name: hook.name
    }));
    return prompt.single({
      message: 'Select hook to list logs for',
      type: 'list',
      choices
    });
  });
  return _promptForHook.apply(this, arguments);
}

function printSeparator(context, skip) {
  if (!skip) {
    context.output.print('---\n');
  }
}

function printMessage(message, context, options) {
  var detailed = options.detailed;
  var output = context.output,
      chalk = context.chalk;
  output.print("Date: ".concat(message.createdAt));
  output.print("Status: ".concat(message.status));
  output.print("Result code: ".concat(message.resultCode));

  if (message.failureCount > 0) {
    output.print("Failures: ".concat(message.failureCount));
  }

  if (detailed) {
    output.print('Payload:');
    output.print((0, _util.inspect)(JSON.parse(message.payload), {
      colors: true
    }));
  }

  if (detailed && message.attempts) {
    output.print('Attempts:');
    message.attempts.forEach(attempt => {
      var date = attempt.createdAt.replace(/\.\d+Z$/, 'Z');
      var prefix = "  [".concat(date, "]");

      if (attempt.inProgress) {
        output.print("".concat(prefix, " ").concat(chalk.yellow('Pending')));
      } else if (attempt.isFailure) {
        var failure = (0, _printHookAttemptCommand.formatFailure)(attempt, {
          includeHelp: true
        });
        output.print("".concat(prefix, " ").concat(chalk.yellow("Failure: ".concat(failure))));
      } else {
        output.print("".concat(prefix, " Success: HTTP ").concat(attempt.resultCode, " (").concat(attempt.duration, "ms)"));
      }
    });
  } // Leave some empty space between messages


  output.print('');
}