"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _without2 = _interopRequireDefault(require("lodash/without"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _readLocalManifest = _interopRequireDefault(require("@sanity/util/lib/readLocalManifest"));

var _generateConfigChecksum = _interopRequireDefault(require("../../util/generateConfigChecksum"));

var _pluginChecksumManifest = require("../../util/pluginChecksumManifest");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _default = {
  name: 'uninstall',
  signature: '[plugin]',
  description: 'Removes a Sanity plugin from the current Sanity configuration',
  action: (args, context) => {
    var output = context.output;

    var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
        plugin = _args$argsWithoutOpti[0];

    if (!plugin) {
      return output.error(new Error('Plugin name must be specified'));
    } // @todo add support for multiple simultaneous plugins to be uninstalled


    return uninstallPlugin(plugin, context);
  }
};
exports.default = _default;

function uninstallPlugin(_x, _x2) {
  return _uninstallPlugin.apply(this, arguments);
}

function _uninstallPlugin() {
  _uninstallPlugin = _asyncToGenerator(function* (plugin, context) {
    var prompt = context.prompt,
        yarn = context.yarn,
        workDir = context.workDir;
    var isFullName = plugin.indexOf('sanity-plugin-') === 0;
    var shortName = isFullName ? plugin.substr(14) : plugin;
    var fullName = isFullName ? plugin : "sanity-plugin-".concat(plugin);
    yield removeConfiguration(workDir, fullName, shortName, prompt);
    yield removeFromSanityManifest(workDir, shortName);
    return yarn(['remove', fullName], context);
  });
  return _uninstallPlugin.apply(this, arguments);
}

function removeConfiguration(_x3, _x4, _x5, _x6) {
  return _removeConfiguration.apply(this, arguments);
}

function _removeConfiguration() {
  _removeConfiguration = _asyncToGenerator(function* (workDir, fullName, shortName, prompt) {
    var localConfigPath = _path.default.join(workDir, 'config', "".concat(shortName, ".json"));

    var hasLocalConfig = yield (0, _pluginChecksumManifest.localConfigExists)(workDir, shortName);

    if (!hasLocalConfig) {
      return;
    }

    try {
      var localChecksum = yield (0, _generateConfigChecksum.default)(localConfigPath);
      var sameChecksum = yield (0, _pluginChecksumManifest.hasSameChecksum)(workDir, fullName, localChecksum);

      var _yield$promptOnAltere = yield promptOnAlteredConfiguration(shortName, sameChecksum, prompt),
          deleteConfig = _yield$promptOnAltere.deleteConfig;

      deleteConfiguration(localConfigPath, deleteConfig);
    } catch (err) {// Destination file does not exist?
      // Predictable, proceed with uninstall
    }
  });
  return _removeConfiguration.apply(this, arguments);
}

function removeFromSanityManifest(_x7, _x8) {
  return _removeFromSanityManifest.apply(this, arguments);
}

function _removeFromSanityManifest() {
  _removeFromSanityManifest = _asyncToGenerator(function* (workDir, pluginName) {
    var manifest = yield (0, _readLocalManifest.default)(workDir, 'sanity.json');
    manifest.plugins = (0, _without2.default)(manifest.plugins || [], pluginName);
    return _fsExtra.default.writeJson(_path.default.join(workDir, 'sanity.json'), manifest, {
      spaces: 2
    });
  });
  return _removeFromSanityManifest.apply(this, arguments);
}

function deleteConfiguration(configPath, userConfirmed) {
  if (!userConfirmed) {
    return Promise.resolve(); // Leave the configuration in place
  }

  return _fsExtra.default.unlink(configPath);
}

function promptOnAlteredConfiguration(plugin, sameChecksum, prompt) {
  if (sameChecksum) {
    return Promise.resolve({
      deleteConfig: true
    });
  }

  return prompt([{
    type: 'confirm',
    name: 'deleteConfig',
    message: "Local configuration for '".concat(plugin, "' has modifications - remove anyway?"),
    default: true
  }]);
}