"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _simpleGet = _interopRequireDefault(require("simple-get"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _import = _interopRequireDefault(require("@sanity/import"));

var _padStart = _interopRequireDefault(require("lodash/padStart"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

var _chooseDatasetPrompt = _interopRequireDefault(require("../../actions/dataset/chooseDatasetPrompt"));

var _validateDatasetName = _interopRequireDefault(require("../../actions/dataset/validateDatasetName"));

var _debug = _interopRequireDefault(require("../../debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var yellow = str => "\x1B[33m".concat(str, "\x1B[39m");

var helpText = "\nOptions\n  --missing On duplicate document IDs, skip importing document in question\n  --replace On duplicate document IDs, replace existing document with imported document\n  --allow-failing-assets Skip assets that cannot be fetched/uploaded\n  --replace-assets Skip reuse of existing assets\n\nRarely used options (should generally not be used)\n  --allow-assets-in-different-dataset Allow asset documents to reference different project/dataset\n\nExamples\n  # Import \"moviedb.ndjson\" from the current directory to the dataset called \"moviedb\"\n  sanity dataset import moviedb.ndjson moviedb\n\n  # Import \"moviedb.tar.gz\" from the current directory to the dataset called \"moviedb\",\n  # replacing any documents encountered that have the same document IDs\n  sanity dataset import moviedb.tar.gz moviedb --replace\n\n  # Import from a folder containing an ndjson file, such as an extracted tarball\n  # retrieved through \"sanity dataset export\".\n  sanity dataset import ~/some/folder moviedb\n\n  # Import from a remote URL. Will download and extract the tarball to a temporary\n  # location before importing it.\n  sanity dataset import https://some.url/moviedb.tar.gz moviedb --replace\n";
var _default = {
  name: 'import',
  group: 'dataset',
  signature: '[FILE | FOLDER | URL] [TARGET_DATASET]',
  description: 'Import documents to given dataset from ndjson file',
  helpText,
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          chalk = context.chalk,
          fromInitCommand = context.fromInitCommand;
      var allowAssetsInDifferentDataset = args.extOptions['allow-assets-in-different-dataset'];
      var allowFailingAssets = args.extOptions['allow-failing-assets'];
      var assetConcurrency = args.extOptions['asset-concurrency'];
      var replaceAssets = args.extOptions['replace-assets'];
      var operation = getMutationOperation(args.extOptions);
      var client = apiClient();

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 2),
          file = _args$argsWithoutOpti[0],
          target = _args$argsWithoutOpti[1];

      if (!file) {
        throw new Error("Source file name and target dataset must be specified (\"sanity dataset import ".concat(chalk.bold('[file]'), " [dataset]\")"));
      }

      var targetDataset = yield determineTargetDataset(target, context);
      (0, _debug.default)("Target dataset has been set to \"".concat(targetDataset, "\""));
      var isUrl = /^https?:\/\//i.test(file);
      var inputStream;
      var sourceIsFolder = false;

      if (isUrl) {
        (0, _debug.default)('Input is a URL, streaming from source URL');
        inputStream = yield getUrlStream(file);
      } else {
        var sourceFile = _path.default.resolve(process.cwd(), file);

        var fileStats = yield _fsExtra.default.stat(sourceFile).catch(() => null);

        if (!fileStats) {
          throw new Error("".concat(sourceFile, " does not exist or is not readable"));
        }

        sourceIsFolder = fileStats.isDirectory();
        inputStream = sourceIsFolder ? sourceFile : yield _fsExtra.default.createReadStream(sourceFile);
      }

      var importClient = client.clone().config({
        dataset: targetDataset
      });
      var currentStep;
      var currentProgress;
      var stepStart;
      var spinInterval;
      var percent;

      function onProgress(opts) {
        var lengthComputable = opts.total;
        var sameStep = opts.step == currentStep;
        percent = getPercentage(opts);

        if (lengthComputable && opts.total === opts.current) {
          clearInterval(spinInterval);
          spinInterval = null;
        }

        if (sameStep) {
          return;
        } // Moved to a new step


        var prevStep = currentStep;
        var prevStepStart = stepStart || Date.now();
        stepStart = Date.now();
        currentStep = opts.step;

        if (currentProgress && currentProgress.succeed) {
          var timeSpent = (0, _prettyMs.default)(Date.now() - prevStepStart, {
            secondsDecimalDigits: 2
          });
          currentProgress.text = "[100%] ".concat(prevStep, " (").concat(timeSpent, ")");
          currentProgress.succeed();
        }

        currentProgress = output.spinner("[0%] ".concat(opts.step, " (0.00s)")).start();

        if (spinInterval) {
          clearInterval(spinInterval);
          spinInterval = null;
        }

        spinInterval = setInterval(() => {
          var timeSpent = (0, _prettyMs.default)(Date.now() - prevStepStart, {
            secondsDecimalDigits: 2
          });
          currentProgress.text = "".concat(percent).concat(opts.step, " (").concat(timeSpent, ")");
        }, 60);
      }

      function endTask(_ref) {
        var success = _ref.success;
        clearInterval(spinInterval);
        spinInterval = null;

        if (success) {
          var timeSpent = (0, _prettyMs.default)(Date.now() - stepStart, {
            secondsDecimalDigits: 2
          });
          currentProgress.text = "[100%] ".concat(currentStep, " (").concat(timeSpent, ")");
          currentProgress.succeed();
        } else if (currentProgress) {
          currentProgress.fail();
        }
      } // Start the import!


      try {
        var _yield$sanityImport = yield (0, _import.default)(inputStream, {
          client: importClient,
          operation,
          onProgress,
          allowFailingAssets,
          allowAssetsInDifferentDataset,
          assetConcurrency,
          replaceAssets
        }),
            numDocs = _yield$sanityImport.numDocs,
            warnings = _yield$sanityImport.warnings;

        endTask({
          success: true
        });
        output.print('Done! Imported %d documents to dataset "%s"\n', numDocs, targetDataset);
        printWarnings(warnings, output);
      } catch (err) {
        endTask({
          success: false
        });
        var isNonRefConflict = !fromInitCommand && err.response && err.response.statusCode === 409 && err.step !== 'strengthen-references';

        if (!isNonRefConflict) {
          throw err;
        }

        var message = [err.message, '', 'You probably want either:', ' --replace (replace existing documents with same IDs)', ' --missing (only import documents that do not already exist)', ''].join('\n');
        var error = new Error(message);
        error.details = err.details;
        error.response = err.response;
        error.responseBody = err.responseBody;
        throw error;
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function determineTargetDataset(_x3, _x4) {
  return _determineTargetDataset.apply(this, arguments);
}

function _determineTargetDataset() {
  _determineTargetDataset = _asyncToGenerator(function* (target, context) {
    var apiClient = context.apiClient,
        output = context.output,
        prompt = context.prompt;
    var client = apiClient();

    if (target) {
      var dsError = (0, _validateDatasetName.default)(target);

      if (dsError) {
        throw new Error(dsError);
      }
    }

    (0, _debug.default)('Fetching available datasets');
    var spinner = output.spinner('Fetching available datasets').start();
    var datasets = yield client.datasets.list();
    spinner.succeed('[100%] Fetching available datasets');
    var targetDataset = target ? "".concat(target) : null;

    if (!targetDataset) {
      targetDataset = yield (0, _chooseDatasetPrompt.default)(context, {
        message: 'Select target dataset',
        allowCreation: true
      });
    } else if (!datasets.find(dataset => dataset.name === targetDataset)) {
      (0, _debug.default)('Target dataset does not exist, prompting for creation');
      var shouldCreate = yield prompt.single({
        type: 'confirm',
        message: "Dataset \"".concat(targetDataset, "\" does not exist, would you like to create it?"),
        default: true
      });

      if (!shouldCreate) {
        throw new Error("Dataset \"".concat(targetDataset, "\" does not exist"));
      }

      yield client.datasets.create(targetDataset);
    }

    return targetDataset;
  });
  return _determineTargetDataset.apply(this, arguments);
}

function getMutationOperation(flags) {
  var replace = flags.replace,
      missing = flags.missing;

  if (replace && missing) {
    throw new Error('Cannot use both --replace and --missing');
  }

  if (flags.replace) {
    return 'createOrReplace';
  }

  if (flags.missing) {
    return 'createIfNotExists';
  }

  return 'create';
}

function getPercentage(opts) {
  if (!opts.total) {
    return '';
  }

  var percent = Math.floor(opts.current / opts.total * 100);
  return "[".concat((0, _padStart.default)(percent, 3, ' '), "%] ");
}

function getUrlStream(url) {
  return new Promise((resolve, reject) => {
    (0, _simpleGet.default)(url, (err, res) => err ? reject(err) : resolve(res));
  });
}

function printWarnings(warnings, output) {
  var assetFails = warnings.filter(warn => warn.type === 'asset');

  if (!assetFails.length) {
    return;
  }

  var warn = (output.warn || output.print).bind(output);
  warn(yellow('⚠ Failed to import the following %s:'), assetFails.length > 1 ? 'assets' : 'asset');
  warnings.forEach(warning => {
    warn("  ".concat(warning.url));
  });
}