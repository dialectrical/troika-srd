"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("../../debug"));

var _datasetNamePrompt = _interopRequireDefault(require("../../actions/dataset/datasetNamePrompt"));

var _validateDatasetName = _interopRequireDefault(require("../../actions/dataset/validateDatasetName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var helpText = "\nOptions\n  --visibility <mode> Set visibility for this dataset (public/private)\n\nExamples\n  sanity dataset create\n  sanity dataset create <name>\n  sanity dataset create <name> --visibility private\n";
var allowedModes = ['private', 'public'];
var _default = {
  name: 'create',
  group: 'dataset',
  signature: '[NAME]',
  helpText,
  description: 'Create a new dataset within your project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          prompt = context.prompt;
      var flags = args.extOptions;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          dataset = _args$argsWithoutOpti[0];

      var client = apiClient();
      var nameError = dataset && (0, _validateDatasetName.default)(dataset);

      if (nameError) {
        throw new Error(nameError);
      }

      var _yield$Promise$all = yield Promise.all([client.datasets.list().then(sets => sets.map(ds => ds.name)), client.request({
        uri: '/features'
      })]),
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),
          datasets = _yield$Promise$all2[0],
          projectFeatures = _yield$Promise$all2[1];

      if (flags.visibility && !allowedModes.includes(flags.visibility)) {
        throw new Error("Visibility mode \"".concat(flags.visibility, "\" not allowed"));
      }

      var datasetName = yield dataset || (0, _datasetNamePrompt.default)(prompt);

      if (datasets.includes(datasetName)) {
        throw new Error("Dataset \"".concat(datasetName, "\" already exists"));
      }

      var canCreatePrivate = projectFeatures.includes('privateDataset');
      (0, _debug.default)('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot');
      var defaultAclMode = canCreatePrivate ? flags.visibility : 'public';
      var aclMode = yield defaultAclMode || promptForDatasetVisibility(prompt, output);

      try {
        yield client.datasets.create(datasetName, {
          aclMode
        });
        output.print('Dataset created successfully');
      } catch (err) {
        throw new Error("Dataset creation failed:\n".concat(err.message));
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function promptForDatasetVisibility(_x3, _x4) {
  return _promptForDatasetVisibility.apply(this, arguments);
}

function _promptForDatasetVisibility() {
  _promptForDatasetVisibility = _asyncToGenerator(function* (prompt, output) {
    var mode = yield prompt.single({
      type: 'list',
      message: 'Dataset visibility',
      choices: [{
        value: 'public',
        name: 'Public (world readable)'
      }, {
        value: 'private',
        name: 'Private (Authenticated user or token needed)'
      }]
    });

    if (mode === 'private') {
      output.print('Please note that while documents are private, assets (files and images) are still public\n');
    }

    return mode;
  });
  return _promptForDatasetVisibility.apply(this, arguments);
}