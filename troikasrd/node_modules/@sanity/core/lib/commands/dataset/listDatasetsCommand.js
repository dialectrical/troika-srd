"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _listAliasesHandler = _interopRequireDefault(require("./alias/listAliasesHandler"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'list',
  group: 'dataset',
  signature: '',
  description: 'List datasets of your project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output;
      var client = apiClient();
      var datasets = yield client.datasets.list();
      output.print(datasets.map(set => set.name).join('\n')); // Print alias list

      yield (0, _listAliasesHandler.default)(args, context);
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;