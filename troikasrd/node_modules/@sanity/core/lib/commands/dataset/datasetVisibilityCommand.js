"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validateDatasetName = _interopRequireDefault(require("../../actions/dataset/validateDatasetName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'visibility',
  group: 'dataset',
  signature: 'get/set [dataset] [mode]',
  description: 'Set visibility of a dataset',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 3),
          action = _args$argsWithoutOpti[0],
          ds = _args$argsWithoutOpti[1],
          aclMode = _args$argsWithoutOpti[2];

      var client = apiClient();

      if (!client.datasets.edit) {
        throw new Error('@sanity/cli must be upgraded first:\n  npm install -g @sanity/cli');
      }

      if (!action) {
        throw new Error('Action must be provided (get/set)');
      }

      if (!['set', 'get'].includes(action)) {
        throw new Error('Invalid action (only get/set allowed)');
      }

      if (!ds) {
        throw new Error('Dataset name must be provided');
      }

      if (action === 'set' && !aclMode) {
        throw new Error('Please provide a visibility mode (public/private)');
      }

      var dataset = "".concat(ds);
      var dsError = (0, _validateDatasetName.default)(dataset);

      if (dsError) {
        throw new Error(dsError);
      }

      var current = (yield client.datasets.list()).find(curr => curr.name === dataset);

      if (!current) {
        throw new Error('Dataset not found');
      }

      if (action === 'get') {
        output.print(current.aclMode);
        return;
      }

      if (current.aclMode === aclMode) {
        output.print("Dataset already in \"".concat(aclMode, "\"-mode"));
        return;
      }

      if (aclMode === 'private') {
        output.print('Please note that while documents are private, assets (files and images) are still public\n');
      }

      yield client.datasets.edit(dataset, {
        aclMode
      });
      output.print('Dataset visibility changed');
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;