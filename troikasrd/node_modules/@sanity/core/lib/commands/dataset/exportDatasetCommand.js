"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

var _util = require("@sanity/util");

var _export = _interopRequireDefault(require("@sanity/export"));

var _chooseDatasetPrompt = _interopRequireDefault(require("../../actions/dataset/chooseDatasetPrompt"));

var _validateDatasetName = _interopRequireDefault(require("../../actions/dataset/validateDatasetName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var noop = () => null;

var helpText = "\nOptions\n  --raw                     Extract only documents, without rewriting asset references\n  --no-assets               Export only non-asset documents and remove references to image assets\n  --no-drafts               Export only published versions of documents\n  --no-compress             Skips compressing tarball entries (still generates a gzip file)\n  --types                   Defines which document types to export\n  --overwrite               Overwrite any file with the same name\n  --asset-concurrency <num> Concurrent number of asset downloads\n\nExamples\n  sanity dataset export moviedb localPath.tar.gz\n  sanity dataset export moviedb assetless.tar.gz --no-assets\n  sanity dataset export staging staging.tar.gz --raw\n  sanity dataset export staging staging.tar.gz --types products,shops\n";
var _default = {
  name: 'export',
  group: 'dataset',
  signature: '[NAME] [DESTINATION]',
  description: 'Export dataset to local filesystem as a gzipped tarball',
  helpText,
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          chalk = context.chalk,
          workDir = context.workDir,
          prompt = context.prompt;
      var client = apiClient();

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 2),
          targetDataset = _args$argsWithoutOpti[0],
          targetDestination = _args$argsWithoutOpti[1];

      var flags = args.extOptions;
      var absolutify = _util.pathTools.absolutify;

      if (flags.types) {
        flags.types = "".concat(flags.types).split(',');
      }

      if (flags['asset-concurrency']) {
        flags.assetConcurrency = parseInt(flags['asset-concurrency'], 10);
      }

      var dataset = targetDataset ? "".concat(targetDataset) : null;

      if (!dataset) {
        dataset = yield (0, _chooseDatasetPrompt.default)(context, {
          message: 'Select dataset to export'
        });
      }

      var dsError = (0, _validateDatasetName.default)(dataset);

      if (dsError) {
        throw dsError;
      } // Verify existence of dataset before trying to export from it


      var datasets = yield client.datasets.list();

      if (!datasets.find(set => set.name === dataset)) {
        throw new Error("Dataset with name \"".concat(dataset, "\" not found"));
      }

      var destinationPath = targetDestination;

      if (!destinationPath) {
        destinationPath = yield prompt.single({
          type: 'input',
          message: 'Output path:',
          default: _path.default.join(workDir, "".concat(dataset, ".tar.gz")),
          filter: absolutify
        });
      }

      var outputPath = yield getOutputPath(destinationPath, dataset, prompt, flags);

      if (!outputPath) {
        output.print('Cancelled');
        return;
      } // If we are dumping to a file, let the user know where it's at


      if (outputPath !== '-') {
        output.print("Exporting dataset \"".concat(chalk.cyan(dataset), "\" to \"").concat(chalk.cyan(outputPath), "\""));
      }

      var currentStep = 'Exporting documents...';
      var spinner = output.spinner(currentStep).start();

      var onProgress = progress => {
        if (progress.step !== currentStep) {
          spinner.succeed();
          spinner = output.spinner(progress.step).start();
        } else if (progress.step === currentStep && progress.update) {
          spinner.text = "".concat(progress.step, " (").concat(progress.current, "/").concat(progress.total, ")");
        }

        currentStep = progress.step;
      };

      var start = Date.now();

      try {
        yield (0, _export.default)(_objectSpread({
          client,
          dataset,
          outputPath,
          onProgress
        }, flags));
        spinner.succeed();
      } catch (err) {
        spinner.fail();
        throw err;
      }

      output.print("Export finished (".concat((0, _prettyMs.default)(Date.now() - start), ")"));
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
}; // eslint-disable-next-line complexity

exports.default = _default;

function getOutputPath(_x3, _x4, _x5, _x6) {
  return _getOutputPath.apply(this, arguments);
}

function _getOutputPath() {
  _getOutputPath = _asyncToGenerator(function* (destination, dataset, prompt, flags) {
    if (destination === '-') {
      return '-';
    }

    var dstPath = _path.default.isAbsolute(destination) ? destination : _path.default.resolve(process.cwd(), destination);
    var dstStats = yield _fsExtra.default.stat(dstPath).catch(noop);
    var looksLikeFile = dstStats ? dstStats.isFile() : _path.default.basename(dstPath).indexOf('.') !== -1;

    if (!dstStats) {
      var createPath = looksLikeFile ? _path.default.dirname(dstPath) : dstPath;
      yield _fsExtra.default.mkdirs(createPath);
    }

    var finalPath = looksLikeFile ? dstPath : _path.default.join(dstPath, "".concat(dataset, ".tar.gz"));
    dstStats = yield _fsExtra.default.stat(finalPath).catch(noop);

    if (!flags.overwrite && dstStats && dstStats.isFile()) {
      var shouldOverwrite = yield prompt.single({
        type: 'confirm',
        message: "File \"".concat(finalPath, "\" already exists, would you like to overwrite it?"),
        default: false
      });

      if (!shouldOverwrite) {
        return false;
      }
    }

    return finalPath;
  });
  return _getOutputPath.apply(this, arguments);
}