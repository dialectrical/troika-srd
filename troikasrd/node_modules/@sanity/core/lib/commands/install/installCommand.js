"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _generateConfigChecksum = _interopRequireDefault(require("../../util/generateConfigChecksum"));

var _addPluginToManifest = _interopRequireDefault(require("@sanity/util/lib/addPluginToManifest"));

var _pluginChecksumManifest = require("../../util/pluginChecksumManifest");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'install',
  signature: '[PLUGIN]',
  description: 'Installs a Sanity plugin to the current Sanity configuration',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var extOptions = args.extOptions;
      var yarn = context.yarn;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          plugin = _args$argsWithoutOpti[0];

      if (!plugin) {
        var flags = extOptions.offline ? ['--offline'] : [];
        return yarn(['install'].concat(flags), context);
      } // @todo add support for multiple simultaneous plugins to be installed


      return installPlugin(plugin, context);
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function installPlugin(_x3, _x4) {
  return _installPlugin.apply(this, arguments);
}

function _installPlugin() {
  _installPlugin = _asyncToGenerator(function* (plugin, context) {
    var output = context.output,
        workDir = context.workDir,
        yarn = context.yarn;
    var isNamespaced = plugin[0] === '@';
    var shortName = plugin;
    var fullName = plugin;

    if (!isNamespaced) {
      var isFullName = plugin.indexOf('sanity-plugin-') === 0;
      shortName = isFullName ? plugin.substr(14) : plugin;
      fullName = isFullName ? plugin : "sanity-plugin-".concat(plugin);
    }

    yield yarn(['add', fullName], context);
    yield (0, _addPluginToManifest.default)(workDir, shortName);
    yield copyConfiguration(workDir, fullName, shortName, output);
    output.print("Plugin '".concat(fullName, "' installed"));
  });
  return _installPlugin.apply(this, arguments);
}

function copyConfiguration(_x5, _x6, _x7, _x8) {
  return _copyConfiguration.apply(this, arguments);
} // @todo Improve with some sort of helpful key differ or similar


function _copyConfiguration() {
  _copyConfiguration = _asyncToGenerator(function* (rootDir, fullName, shortName, output) {
    var configPath = _path.default.join(rootDir, 'node_modules', fullName, 'config.dist.json');

    var dstPath = _path.default.join(rootDir, 'config', "".concat(shortName, ".json"));

    if (!_fsExtra.default.existsSync(configPath)) {
      return;
    } // Configuration exists, check if user has local configuration already


    if ( // eslint-disable-line no-constant-condition
    false
    /* disabled for now until we can offer the user a way to fix this */
    && _fsExtra.default.existsSync(dstPath)) {
      var distChecksum = yield (0, _generateConfigChecksum.default)(configPath);
      var sameChecksum = yield (0, _pluginChecksumManifest.hasSameChecksum)(rootDir, fullName, distChecksum);
      warnOnDifferentChecksum(shortName, sameChecksum, output.print);
    } else {
      // Destination file does not exist, copy
      yield _fsExtra.default.copy(configPath, dstPath);
      var checksum = yield (0, _generateConfigChecksum.default)(configPath);
      yield (0, _pluginChecksumManifest.setChecksum)(rootDir, fullName, checksum);
    }
  });
  return _copyConfiguration.apply(this, arguments);
}

function warnOnDifferentChecksum(plugin, sameChecksum, printer) {
  if (!sameChecksum) {
    printer(["[Warning] Default configuration for plugin '".concat(plugin, "' has changed since you first installed it,"), 'check local configuration vs distributed configuration to ensure your configuration is up to date'].join(' '));
  }
}