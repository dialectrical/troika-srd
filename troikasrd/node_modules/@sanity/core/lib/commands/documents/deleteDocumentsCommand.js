"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pluralize = _interopRequireDefault(require("pluralize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var helpText = "\nDelete a document from the projects configured dataset\n\nOptions\n  --dataset NAME to override dataset\n\nExample\n  # Delete the document with the ID \"myDocId\"\n  sanity documents delete myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents delete 'myDocId'\n\n  # Delete document with ID \"someDocId\" from dataset \"blog\"\n  sanity documents delete --dataset=blog someDocId\n\n  # Delete the document with ID \"doc1\" and \"doc2\"\n  sanity documents delete doc1 doc2\n";
var _default = {
  name: 'delete',
  group: 'documents',
  signature: '[ID] [...IDS]',
  helpText,
  description: 'Delete a document by ID',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          chalk = context.chalk;
      var dataset = args.extOptions.dataset;
      var ids = args.argsWithoutOptions.map(str => "".concat(str));

      if (!ids.length) {
        throw new Error('Document ID must be specified');
      }

      var client = dataset ? apiClient().clone().config({
        dataset
      }) : apiClient();
      var transaction = ids.reduce((trx, id) => trx.delete(id), client.transaction());

      try {
        var _yield$transaction$co = yield transaction.commit(),
            results = _yield$transaction$co.results;

        var deleted = results.filter(res => res.operation === 'delete').map(res => res.id);
        var notFound = ids.filter(id => !deleted.includes(id));

        if (deleted.length > 0) {
          output.print("Deleted ".concat(deleted.length, " ").concat((0, _pluralize.default)('document', deleted.length)));
        }

        if (notFound.length > 0) {
          output.error(chalk.red("".concat((0, _pluralize.default)('Document', notFound.length), " not found: ").concat(notFound.join(', '))));
        }
      } catch (err) {
        throw new Error("Failed to delete ".concat((0, _pluralize.default)('document', ids.length), ":\n").concat(err.message));
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;