"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var colorizeJson = require('../../util/colorizeJson');

var helpText = "\nGet and print a document from the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n\nExamples\n  # Get the document with the ID \"myDocId\"\n  sanity documents get myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents get 'myDocId'\n";
var _default = {
  name: 'get',
  group: 'documents',
  signature: '[DOCUMENT_ID]',
  helpText,
  description: 'Get and print a document by ID',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output,
          chalk = context.chalk;
      var _args$extOptions = args.extOptions,
          pretty = _args$extOptions.pretty,
          dataset = _args$extOptions.dataset;

      var _args$argsWithoutOpti = args.argsWithoutOptions.map(str => "".concat(str)),
          _args$argsWithoutOpti2 = _slicedToArray(_args$argsWithoutOpti, 1),
          docId = _args$argsWithoutOpti2[0];

      if (!docId) {
        throw new Error('Document ID must be specified');
      }

      var client = dataset ? apiClient().clone().config({
        dataset
      }) : apiClient();

      try {
        var doc = yield client.getDocument(docId);

        if (!doc) {
          throw new Error('Document not found');
        }

        output.print(pretty ? colorizeJson(doc, chalk) : JSON.stringify(doc, null, 2));
      } catch (err) {
        throw new Error("Failed to fetch document:\n".concat(err.message));
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;