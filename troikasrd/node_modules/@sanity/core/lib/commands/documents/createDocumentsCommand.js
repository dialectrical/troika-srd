"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var os = require('os');

var path = require('path');

var fse = require('fs-extra');

var json5 = require('json5');

var execa = require('execa');

var chokidar = require('chokidar');

var _require = require('lodash'),
    isPlainObject = _require.isPlainObject,
    isEqual = _require.isEqual,
    noop = _require.noop;

var _require2 = require('@sanity/uuid'),
    uuid = _require2.uuid;

var helpText = "\nOptions\n  --replace On duplicate document IDs, replace existing document with specified document(s)\n  --missing On duplicate document IDs, don't modify the target document(s)\n  --watch   Write the documents whenever the target file or buffer changes\n  --json5   Use JSON5 file type to allow a \"simplified\" version of JSON\n  --id <id> Specify a document ID to use. Will fetch remote document ID and populate editor.\n  --dataset NAME to override dataset\n\nExamples\n  # Create the document specified in \"myDocument.json\".\n  sanity documents create myDocument.json\n\n  # Open configured $EDITOR and create the specified document(s)\n  sanity documents create\n\n  # Fetch document with the ID \"myDocId\" and open configured $EDITOR with the\n  # current document content (if any). Replace document with the edited version\n  # when the editor closes\n  sanity documents create --id myDocId --replace\n\n  # Open configured $EDITOR and replace the document with the given content\n  # on each save. Use JSON5 file extension and parser for simplified syntax.\n  sanity documents create --id myDocId --watch --replace --json5\n";
var _default = {
  name: 'create',
  group: 'documents',
  signature: '[FILE]',
  helpText,
  description: 'Create one or more documents',
  // eslint-disable-next-line complexity
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient,
          output = context.output;
      var _args$extOptions = args.extOptions,
          replace = _args$extOptions.replace,
          missing = _args$extOptions.missing,
          watch = _args$extOptions.watch,
          id = _args$extOptions.id,
          dataset = _args$extOptions.dataset;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          file = _args$argsWithoutOpti[0];

      var useJson5 = args.extOptions.json5;
      var client = dataset ? apiClient().clone().config({
        dataset
      }) : apiClient();

      if (replace && missing) {
        throw new Error('Cannot use both --replace and --missing');
      }

      if (id && file) {
        throw new Error('Cannot use --id when specifying a file path');
      }

      var operation = 'create';

      if (replace || missing) {
        operation = replace ? 'createOrReplace' : 'createIfNotExists';
      }

      if (file) {
        var contentPath = path.resolve(process.cwd(), file);
        var content = json5.parse(yield fse.readFile(contentPath, 'utf8'));
        var result = yield writeDocuments(content, operation, client);
        output.print(getResultMessage(result, operation));
        return;
      } // Create a temporary file and use that as source, opening an editor on it


      var docId = id || uuid();
      var ext = useJson5 ? 'json5' : 'json';
      var tmpFile = path.join(os.tmpdir(), 'sanity-cli', "".concat(docId, ".").concat(ext));
      var stringify = useJson5 ? json5.stringify : JSON.stringify;
      var defaultValue = id && (yield client.getDocument(id)) || {
        _id: docId,
        _type: 'specify-me'
      };
      yield fse.outputFile(tmpFile, stringify(defaultValue, null, 2));
      var editor = getEditor();

      if (watch) {
        // If we're in watch mode, we want to run the creation on each change (if it validates)
        registerUnlinkOnSigInt(tmpFile);
        output.print("Watch mode: ".concat(tmpFile));
        output.print('Watch mode: Will write documents on each save.');
        output.print('Watch mode: Press Ctrl + C to cancel watch mode.');
        chokidar.watch(tmpFile).on('change', () => {
          output.print('');
          return readAndPerformCreatesFromFile(tmpFile);
        });
        execa(editor.bin, editor.args.concat(tmpFile), {
          stdio: 'inherit'
        });
      } else {
        // While in normal mode, we just want to wait for the editor to close and run the thing once
        execa.sync(editor.bin, editor.args.concat(tmpFile), {
          stdio: 'inherit'
        });
        yield readAndPerformCreatesFromFile(tmpFile);
        yield fse.unlink(tmpFile).catch(noop);
      }

      function readAndPerformCreatesFromFile(_x3) {
        return _readAndPerformCreatesFromFile.apply(this, arguments);
      }

      function _readAndPerformCreatesFromFile() {
        _readAndPerformCreatesFromFile = _asyncToGenerator(function* (filePath) {
          var content;

          try {
            content = json5.parse(yield fse.readFile(filePath, 'utf8'));
          } catch (err) {
            output.error("Failed to read input: ".concat(err.message));
            return;
          }

          if (isEqual(content, defaultValue)) {
            output.print('Value not modified, doing nothing.');
            output.print('Modify document to trigger creation.');
            return;
          }

          try {
            var writeResult = yield writeDocuments(content, operation, client);
            output.print(getResultMessage(writeResult, operation));
          } catch (err) {
            output.error("Failed to write documents: ".concat(err.message));

            if (err.message.includes('already exists')) {
              output.error('Perhaps you want to use `--replace` or `--missing`?');
            }
          }
        });
        return _readAndPerformCreatesFromFile.apply(this, arguments);
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function registerUnlinkOnSigInt(tmpFile) {
  process.on('SIGINT', /*#__PURE__*/_asyncToGenerator(function* () {
    yield fse.unlink(tmpFile).catch(noop); // eslint-disable-next-line no-process-exit

    process.exit(130);
  }));
}

function writeDocuments(documents, operation, client) {
  var docs = Array.isArray(documents) ? documents : [documents];

  if (!docs.length === 0) {
    throw new Error('No documents provided');
  }

  docs.forEach(validateDocument);
  return client.transaction(docs.map(doc => ({
    [operation]: doc
  }))).commit();
}

function validateDocument(doc, index, arr) {
  var isSingle = arr.length === 1;

  if (!isPlainObject(doc)) {
    throw new Error(getErrorMessage('must be an object', index, isSingle));
  }

  if (typeof doc._type !== 'string') {
    throw new Error(getErrorMessage('must have a `_type` property of type string', index, isSingle));
  }
}

function getErrorMessage(message, index, isSingle) {
  return isSingle ? "Document ".concat(message) : "Document at index ".concat(index, " ").concat(message);
}

function getResultMessage(result, operation) {
  var joiner = '\n  - ';

  if (operation === 'createOrReplace') {
    return "Upserted:\n  - ".concat(result.results.map(res => res.id).join(joiner));
  }

  if (operation === 'create') {
    return "Created:\n  - ".concat(result.results.map(res => res.id).join(joiner));
  } // "Missing" (createIfNotExists)


  var _result$results$reduc = result.results.reduce((acc, res) => {
    var mod = res.operation === 'update' ? 'skipped' : 'created';
    acc[mod].push(res.id);
    return acc;
  }, {
    created: [],
    skipped: []
  }),
      created = _result$results$reduc.created,
      skipped = _result$results$reduc.skipped;

  if (created.length > 0 && skipped.length > 0) {
    return ["Created:\n  - ".concat(created.join(joiner)), "Skipped (already exists):".concat(joiner).concat(skipped.join(joiner))].join('\n\n');
  } else if (created.length > 0) {
    return "Created:\n  - ".concat(created.join(joiner));
  }

  return "Skipped (already exists):\n  - ".concat(skipped.join(joiner));
}

function getEditor() {
  var defaultEditor = /^win/.test(process.platform) ? 'notepad' : 'vim'; // eslint-disable-next-line no-process-env

  var editor = process.env.VISUAL || process.env.EDITOR || defaultEditor;
  var args = editor.split(/\s+/);
  var bin = args.shift();
  return {
    bin,
    args
  };
}