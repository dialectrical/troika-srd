"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

module.exports = /*#__PURE__*/function () {
  var _listApisAction = _asyncToGenerator(function* (args, context) {
    var apiClient = context.apiClient,
        output = context.output,
        chalk = context.chalk;
    var client = apiClient({
      requireUser: true,
      requireProject: true
    });
    var endpoints;

    try {
      endpoints = yield client.request({
        url: "/apis/graphql",
        method: 'GET'
      });
    } catch (err) {
      throw err;
    }

    if (endpoints && endpoints.length > 0) {
      output.print('Here are the GraphQL endpoints deployed for this project:');
      endpoints.forEach((endpoint, index) => {
        var dataset = endpoint.dataset,
            tag = endpoint.tag;
        var url = client.getUrl("graphql/".concat(dataset, "/").concat(tag));
        output.print("".concat(index + 1, ".  ").concat(chalk.bold('Dataset:'), "     ").concat(dataset));
        output.print("    ".concat(chalk.bold('Tag:'), "         ").concat(tag));
        output.print("    ".concat(chalk.bold('Generation:'), "  ").concat(endpoint.generation));
        output.print("    ".concat(chalk.bold('Playground:'), "  ").concat(endpoint.playgroundEnabled));
        output.print("    ".concat(chalk.bold('URL:'), "  ").concat(url, "\n"));
      });
    } else {
      output.print("This project doesn't have any GraphQL endpoints deployed.");
    }
  });

  function listApisAction(_x, _x2) {
    return _listApisAction.apply(this, arguments);
  }

  return listApisAction;
}();