"use strict";

var createBooleanFilters = require('./filters/booleanFilters');

var createDateFilters = require('./filters/dateFilters');

var createDatetimeFilters = require('./filters/dateTimeFilters');

var createDocumentFilters = require('./filters/documentFilters');

var createFloatFilters = require('./filters/floatFilters');

var createIdFilters = require('./filters/idFilters');

var createIntegerFilters = require('./filters/integerFilters');

var createStringFilters = require('./filters/stringFilters');

var typeAliases = {
  Url: 'String',
  Text: 'String',
  Email: 'String'
};
var filterCreators = {
  ID: createIdFilters,
  String: createStringFilters,
  Float: createFloatFilters,
  Integer: createIntegerFilters,
  Boolean: createBooleanFilters,
  Datetime: createDatetimeFilters,
  Date: createDateFilters,
  Document: createDocumentFilters
};

function generateTypeFilters(types) {
  var builtInTypeKeys = Object.keys(filterCreators);
  var builtinTypeValues = Object.values(filterCreators);
  var objectTypes = types.filter(type => type.type === 'Object' && !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?
  !type.interfaces && !builtInTypeKeys.includes(type.type));
  var unionTypes = types.filter(type => type.kind === 'Union').map(type => type.name);
  var documentTypes = types.filter(type => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document'));
  var builtinTypeFilters = createBuiltinTypeFilters(builtinTypeValues);
  var objectTypeFilters = createObjectTypeFilters(objectTypes, {
    unionTypes
  });
  var documentTypeFilters = createDocumentTypeFilters(documentTypes, {
    unionTypes
  });
  return builtinTypeFilters.concat(objectTypeFilters).concat(documentTypeFilters);
}

function createBuiltinTypeFilters(builtinTypeValues) {
  return builtinTypeValues.map(filterCreator => filterCreator());
}

function createObjectTypeFilters(objectTypes, options) {
  return objectTypes.map(objectType => {
    return {
      name: "".concat(objectType.name, "Filter"),
      kind: 'InputObject',
      fields: createFieldFilters(objectType, options)
    };
  });
}

function createDocumentTypeFilters(documentTypes, options) {
  return documentTypes.map(documentType => {
    var fields = getDocumentFilters().concat(createFieldFilters(documentType, options));
    return {
      name: "".concat(documentType.name, "Filter"),
      kind: 'InputObject',
      fields
    };
  });
}

function createFieldFilters(objectType, options) {
  var unionTypes = options.unionTypes;
  return objectType.fields.filter(field => field.type !== 'JSON' && field.kind !== 'List' && !unionTypes.includes(field.type)).map(field => ({
    fieldName: field.fieldName,
    type: "".concat(typeAliases[field.type] || field.type, "Filter"),
    isReference: field.isReference
  }));
}

function getDocumentFilters() {
  return [{
    fieldName: '_',
    type: 'DocumentFilter',
    description: 'Apply filters on document level'
  }];
}

module.exports = generateTypeFilters;