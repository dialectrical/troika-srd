"use strict";

var builtInTypes = ['Boolean', 'Date', 'Datetime', 'Email', 'Float', 'ID', 'Integer', 'String', 'Text', 'Url'];
var builtInSortingEnum = {
  name: 'SortOrder',
  kind: 'Enum',
  values: [{
    name: 'ASC',
    description: 'Sorts on the value in ascending order.',
    value: 1
  }, {
    name: 'DESC',
    description: 'Sorts on the value in descending order.',
    value: 2
  }]
};

function generateTypeSortings(types) {
  var objectTypes = types.filter(type => type.type === 'Object' && !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?
  !type.interfaces && !builtInTypes.includes(type.name));
  var documentTypes = types.filter(type => type.name === 'Document' || type.type === 'Object' && type.interfaces && type.interfaces.includes('Document'));

  var hasFields = type => type.fields.length > 0;

  var objectTypeSortings = createObjectTypeSortings(objectTypes);
  var documentTypeSortings = createDocumentTypeSortings(documentTypes);
  var allSortings = [].concat(objectTypeSortings, documentTypeSortings).filter(hasFields);
  return allSortings.concat(builtInSortingEnum);
}

function createObjectTypeSortings(objectTypes) {
  return objectTypes.map(objectType => ({
    name: "".concat(objectType.name, "Sorting"),
    kind: 'InputObject',
    fields: objectType.fields.filter(field => field.type !== 'JSON' && field.kind !== 'List').filter(field => !field.isReference).map(field => ({
      fieldName: field.fieldName,
      type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : "".concat(field.type, "Sorting")
    }))
  }));
}

function createDocumentTypeSortings(documentTypes) {
  return documentTypes.map(documentType => ({
    name: "".concat(documentType.name, "Sorting"),
    kind: 'InputObject',
    fields: documentType.fields.filter(field => field.type !== 'JSON' && field.kind !== 'List').filter(field => !field.isReference).map(field => ({
      fieldName: field.fieldName,
      type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : "".concat(field.type, "Sorting")
    }))
  }));
}

module.exports = generateTypeSortings;