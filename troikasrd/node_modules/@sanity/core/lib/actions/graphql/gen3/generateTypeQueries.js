"use strict";

var _require = require('lodash'),
    upperFirst = _require.upperFirst;

function generateTypeQueries(types, sortings) {
  var queries = [];
  var documentTypes = types.filter(type => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document'));
  var documentTypeNames = documentTypes.map(docType => JSON.stringify(docType.originalName || docType.name));
  var documentsFilter = "_type in [".concat(documentTypeNames.join(', '), "]");
  var queryable = [...documentTypes, types.find(type => type.name === 'Document')];

  var isSortable = type => sortings.some(sorting => sorting.name === "".concat(type.name, "Sorting")); // Single ID-based result lookup queries


  queryable.forEach(type => {
    queries.push({
      fieldName: type.name,
      type: type.name,
      constraints: [{
        field: '_id',
        comparator: 'eq',
        value: {
          kind: 'argumentValue',
          argName: 'id'
        }
      }],
      args: [{
        name: 'id',
        description: "".concat(type.name, " document ID"),
        type: 'ID',
        isNullable: false
      }]
    });
  }); // Fetch all of type

  queryable.forEach(type => {
    queries.push({
      fieldName: "all".concat(upperFirst(type.name)),
      filter: type.name === 'Document' && type.kind === 'Interface' ? documentsFilter : "_type == ".concat(JSON.stringify(type.originalName || type.name)),
      type: {
        kind: 'List',
        isNullable: false,
        children: {
          type: type.name,
          isNullable: false
        }
      },
      args: [{
        name: 'where',
        type: "".concat(type.name, "Filter"),
        isFieldFilter: true
      }, isSortable(type) && {
        name: 'sort',
        type: {
          kind: 'List',
          isNullable: true,
          children: {
            type: "".concat(type.name, "Sorting"),
            isNullable: false
          }
        }
      }, {
        name: 'limit',
        type: 'Int',
        description: 'Max documents to return',
        isFieldFilter: false
      }, {
        name: 'offset',
        type: 'Int',
        description: 'Offset at which to start returning documents from',
        isFieldFilter: false
      }].filter(Boolean)
    });
  });
  return queries;
}

module.exports = generateTypeQueries;