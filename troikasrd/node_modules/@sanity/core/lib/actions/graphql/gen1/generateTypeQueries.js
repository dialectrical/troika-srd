"use strict";

var pluralize = require('pluralize');

var _require = require('lodash'),
    startCase = _require.startCase,
    upperFirst = _require.upperFirst;

function pluralizeTypeName(name) {
  var words = startCase(name).split(' ');
  var last = words[words.length - 1];
  var plural = pluralize(last.toLowerCase());
  words[words.length - 1] = upperFirst(plural);
  return words.join('');
}

function generateTypeQueries(types, filters) {
  var queries = [];
  var queryable = types.filter(type => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document')); // Single ID-based result lookup queries

  queryable.forEach(type => {
    queries.push({
      fieldName: type.name,
      type: type.name,
      constraints: [{
        field: '_id',
        comparator: 'EQUALS',
        value: {
          kind: 'argumentValue',
          argName: 'id'
        }
      }],
      args: [{
        name: 'id',
        description: "".concat(type.name, " document ID"),
        type: 'ID',
        isNullable: false
      }]
    });
  }); // Fetch all of type

  queryable.forEach(type => {
    var filterName = "".concat(type.name, "Filter");
    var hasFilter = filters.find(filter => filter.name === filterName);
    queries.push({
      fieldName: "all".concat(pluralizeTypeName(type.name)),
      filter: "_type == \"".concat(type.originalName || type.name, "\""),
      type: {
        kind: 'List',
        isNullable: false,
        children: {
          type: type.name,
          isNullable: false
        }
      },
      args: hasFilter ? [{
        name: 'where',
        type: filterName,
        isFieldFilter: true
      }].concat(getLimitOffsetArgs()) : getLimitOffsetArgs()
    });
  });
  return queries;
}

function getLimitOffsetArgs() {
  return [{
    name: 'limit',
    type: 'Int',
    description: 'Max documents to return',
    isFieldFilter: false
  }, {
    name: 'offset',
    type: 'Int',
    description: 'Offset at which to start returning documents from',
    isFieldFilter: false
  }];
}

module.exports = generateTypeQueries;