"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (args, context) {
    var apiClient = context.apiClient,
        chalk = context.chalk,
        output = context.output,
        prompt = context.prompt;
    var client = apiClient({
      requireUser: true,
      requireProject: true
    }); // Check that the project has a studio hostname

    var spinner = output.spinner('Checking project info').start();
    var project = yield client.projects.getById(client.config().projectId);
    var studioHost = project && (project.studioHost || project.studioHost);
    spinner.succeed();

    if (!studioHost) {
      output.print('Your project has not been assigned a studio hostname.');
      output.print('Nothing to undeploy.');
      return;
    } // Double-check


    output.print('');
    var url = "https://".concat(chalk.yellow(studioHost), ".sanity.studio");
    var shouldUndeploy = yield prompt.single({
      type: 'confirm',
      default: false,
      message: "This will undeploy ".concat(url, " and make it unavailable for your users.\n  The hostname will be available for anyone to claim.\n  Are you ").concat(chalk.red('sure'), " you want to undeploy?").trim()
    });

    if (!shouldUndeploy) {
      return;
    }

    var projectId = client.config().projectId;
    var uri = "/projects/".concat(projectId);
    spinner = output.spinner('Undeploying studio').start();

    try {
      yield client.request({
        uri,
        method: 'PATCH',
        body: {
          studioHost: null
        }
      });
      spinner.succeed();
    } catch (err) {
      spinner.fail();
      throw err;
    }

    output.print("Studio undeploy scheduled. It might take a few minutes before ".concat(url, " is unavailable."));
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;