"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("../../debug"));

var _datasetNamePrompt = _interopRequireDefault(require("./datasetNamePrompt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var apiClient = context.apiClient,
        prompt = context.prompt;
    var message = options.message,
        allowCreation = options.allowCreation;
    var client = apiClient();
    var datasets = yield client.datasets.list();
    var hasProduction = datasets.find(dataset => dataset.name === 'production');
    var datasetChoices = datasets.map(dataset => ({
      value: dataset.name
    }));
    var selected = yield prompt.single({
      message: message || 'Select dataset to use',
      type: 'list',
      choices: allowCreation ? [{
        value: 'new',
        name: 'Create new dataset'
      }, new prompt.Separator(), ...datasetChoices] : datasetChoices
    });

    if (selected === 'new') {
      (0, _debug.default)('User wants to create a new dataset, prompting for name');
      var newDatasetName = yield (0, _datasetNamePrompt.default)(prompt, {
        message: 'Name your dataset:',
        default: hasProduction ? undefined : 'production'
      });
      yield client.datasets.create(newDatasetName);
      return newDatasetName;
    }

    return selected;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;