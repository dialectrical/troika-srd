"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _execa = _interopRequireDefault(require("execa"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _resolveBin = _interopRequireDefault(require("resolve-bin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (inputFile) {
    var terserBin = _resolveBin.default.sync('terser');

    if (!terserBin) {
      throw new Error("Can't find terser binary, cannot compress bundles");
    }

    var outPath = "".concat(inputFile, ".min");

    var _yield$execa = yield (0, _execa.default)(terserBin, ['-c', '-m', '-o', outPath, inputFile]),
        stderr = _yield$execa.stderr,
        stdout = _yield$execa.stdout,
        code = _yield$execa.code;

    if (code > 0) {
      throw new Error("Failed to minify bundle (".concat(_path.default.basename(inputFile), "):\n\n").concat(stderr || stdout));
    }

    yield _fsExtra.default.unlink(inputFile);
    yield _fsExtra.default.move(outPath, inputFile);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;