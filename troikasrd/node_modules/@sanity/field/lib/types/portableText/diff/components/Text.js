"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = Text;
exports.TextWithDiff = TextWithDiff;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _types = require("@sanity/types");

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("@sanity/base/change-indicators");

var _diff = require("../../../../diff");

var _styledComponents = require("./styledComponents");

var _excluded = ["diff", "childDiff", "children", "path", "segment"],
    _excluded2 = ["diff", "childDiff", "children", "path", "segment"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Text(_ref) {
  var diff = _ref.diff,
      childDiff = _ref.childDiff,
      children = _ref.children,
      path = _ref.path,
      segment = _ref.segment,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var diffWithFallback = diff || childDiff;
  var hasChanged = diffWithFallback && diffWithFallback.action !== 'unchanged' && segment.action !== 'unchanged';

  if (hasChanged) {
    return /*#__PURE__*/_react.default.createElement(TextWithDiff, _extends({}, restProps, {
      childDiff: childDiff,
      diff: diff,
      segment: segment,
      path: path
    }), children);
  }

  return /*#__PURE__*/_react.default.createElement(_styledComponents.InlineBox, null, children);
}

function TextWithDiff(_ref2) {
  var diff = _ref2.diff,
      childDiff = _ref2.childDiff,
      children = _ref2.children,
      path = _ref2.path,
      segment = _ref2.segment,
      restProps = _objectWithoutProperties(_ref2, _excluded2);

  var _React$useContext = _react.default.useContext(_changeIndicators.ConnectorContext),
      onSetFocus = _React$useContext.onSetFocus;

  var _React$useContext2 = _react.default.useContext(_diff.DiffContext),
      fullPath = _React$useContext2.path;

  var spanSegment = path.slice(-2, 1)[0];
  var isRemoved = diff && diff.action === 'removed';
  var prefix = fullPath.slice(0, fullPath.findIndex(seg => (0, _types.isKeySegment)(seg) && (0, _types.isKeySegment)(spanSegment) && seg._key === spanSegment._key));
  var focusPath = prefix.concat(path);
  var handleClick = (0, _react.useCallback)(event => {
    event.stopPropagation();

    if (!isRemoved) {
      event.preventDefault();
      onSetFocus(focusPath);
    }
  }, [focusPath]);
  var realSeg = diff && diff.segments.find(rSeg => rSeg.text === segment.text);
  var diffWithFallback = realSeg || diff || childDiff;
  var annotation = diffWithFallback && diffWithFallback.action !== 'unchanged' && diffWithFallback.annotation || null;
  var diffCard = annotation && segment.action !== 'unchanged' ? /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    annotation: annotation,
    as: segment.action === 'removed' ? 'del' : 'ins',
    tooltip: {
      description: "".concat((0, _startCase2.default)(segment.action), " text")
    }
  }, children) : null;
  return /*#__PURE__*/_react.default.createElement(_styledComponents.InlineBox, _extends({}, restProps, {
    onClick: handleClick,
    "data-changed": ""
  }), /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, diffCard || children)));
}