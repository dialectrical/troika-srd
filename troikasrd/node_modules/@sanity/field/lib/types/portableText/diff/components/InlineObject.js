"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineObject = InlineObject;

var _paths = require("@sanity/util/paths");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _preview = _interopRequireDefault(require("part:@sanity/base/preview"));

var _popover = require("part:@sanity/components/popover");

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("@sanity/base/change-indicators");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _icons = require("@sanity/icons");

var _diff = require("../../../../diff");

var _helpers = require("../helpers");

var _styledComponents2 = require("./styledComponents");

var _excluded = ["diff", "object", "schemaType"],
    _excluded2 = ["diff", "object", "path", "schemaType"];

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var InlineObjectWrapper = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:not([hidden]) {\n    display: inline;\n    cursor: pointer;\n    white-space: nowrap;\n    align-items: center;\n\n    &[data-removed] {\n      text-decoration: line-through;\n    }\n\n    ", " {\n      display: inline-flex;\n    }\n  }\n"])), _styledComponents2.InlineBox);

function InlineObject(_ref) {
  var diff = _ref.diff,
      object = _ref.object,
      schemaType = _ref.schemaType,
      restProps = _objectWithoutProperties(_ref, _excluded);

  if (!schemaType) {
    return /*#__PURE__*/_react.default.createElement(InlineObjectWrapper, _extends({}, restProps, {
      border: true,
      radius: 1
    }), "Unknown schema type: ", object._type);
  }

  if (diff) {
    return /*#__PURE__*/_react.default.createElement(InlineObjectWithDiff, _extends({}, restProps, {
      diff: diff,
      object: object,
      schemaType: schemaType
    }));
  }

  return /*#__PURE__*/_react.default.createElement(InlineObjectWrapper, null, /*#__PURE__*/_react.default.createElement(_preview.default, {
    type: schemaType,
    value: object,
    layout: "inline"
  }));
}

function InlineObjectWithDiff(_ref2) {
  var diff = _ref2.diff,
      object = _ref2.object,
      path = _ref2.path,
      schemaType = _ref2.schemaType,
      restProps = _objectWithoutProperties(_ref2, _excluded2);

  var _React$useContext = _react.default.useContext(_diff.DiffContext),
      fullPath = _React$useContext.path;

  var _React$useContext2 = _react.default.useContext(_changeIndicators.ConnectorContext),
      onSetFocus = _React$useContext2.onSetFocus;

  var color = (0, _diff.useDiffAnnotationColor)(diff, []);
  var style = color ? {
    background: color.background,
    color: color.text
  } : {};

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var emptyObject = object && (0, _helpers.isEmptyObject)(object);
  var isRemoved = diff.action === 'removed';
  var prefix = fullPath.slice(0, fullPath.findIndex(seg => (0, _types.isKeySegment)(seg) && seg._key === object._key));
  var myPath = prefix.concat(path);
  var myValue = "field-".concat((0, _paths.toString)(myPath));
  var values = (0, _changeIndicators.useReportedValues)();
  var isEditing = values.filter(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 1),
        p = _ref4[0];

    return p.startsWith(myValue);
  }).length > 0;
  var focusPath = fullPath.slice(0, -1).concat(path).concat([_paths.FOCUS_TERMINATOR]);
  (0, _react.useEffect)(() => {
    if (isEditing) {
      setOpen(true);
      onSetFocus(focusPath);
    }
  }, [isEditing]);
  var handleOpenPopup = (0, _react.useCallback)(event => {
    event.stopPropagation();
    setOpen(true);

    if (!isRemoved) {
      onSetFocus(focusPath);
      return;
    }

    event.preventDefault();
  }, [focusPath]);
  var handleClose = (0, _react.useCallback)(() => {
    setOpen(false);
  }, []);

  var popoverContent = /*#__PURE__*/_react.default.createElement(_diff.DiffContext.Provider, {
    value: {
      path: myPath
    }
  }, /*#__PURE__*/_react.default.createElement(PopoverContent, {
    diff: diff,
    emptyObject: emptyObject,
    onClose: handleClose,
    schemaType: schemaType
  }));

  var annotation = diff.action !== 'unchanged' && diff.annotation || null;
  var annotations = annotation ? [annotation] : [];
  return /*#__PURE__*/_react.default.createElement(InlineObjectWrapper, _extends({}, restProps, {
    onClick: handleOpenPopup,
    style: style,
    "data-removed": diff.action === 'removed' ? '' : undefined,
    border: true,
    radius: 2
  }), /*#__PURE__*/_react.default.createElement(_popover.Popover, {
    content: popoverContent,
    layer: true,
    open: open,
    portal: true
  }, /*#__PURE__*/_react.default.createElement(_styledComponents2.PreviewContainer, null, /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    annotations: annotations,
    description: "".concat(diff.action, " inline object")
  }, /*#__PURE__*/_react.default.createElement(_styledComponents2.InlineBox, null, /*#__PURE__*/_react.default.createElement(_preview.default, {
    type: schemaType,
    value: object,
    layout: "inline"
  }), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    paddingX: 1
  }, /*#__PURE__*/_react.default.createElement(_styledComponents2.InlineText, {
    size: 0
  }, /*#__PURE__*/_react.default.createElement(_icons.ChevronDownIcon, null))))))));
}

function PopoverContent(_ref5) {
  var diff = _ref5.diff,
      emptyObject = _ref5.emptyObject,
      onClose = _ref5.onClose,
      schemaType = _ref5.schemaType;

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      popoverElement = _useState4[0],
      setPopoverElement = _useState4[1];

  var _useLayer = (0, _ui.useLayer)(),
      isTopLayer = _useLayer.isTopLayer;

  var handleClickOutside = (0, _react.useCallback)(() => {
    // Popover doesn't close at all when using this condition
    // if (!isTopLayer) return
    onClose();
  }, [isTopLayer, onClose]);
  (0, _ui.useClickOutside)(handleClickOutside, [popoverElement]);
  return /*#__PURE__*/_react.default.createElement(_styledComponents2.PopoverContainer, {
    ref: setPopoverElement,
    padding: 3
  }, emptyObject && /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 1,
    muted: true
  }, "Empty ", schemaType.title), !emptyObject && /*#__PURE__*/_react.default.createElement(_diff.ChangeList, {
    diff: diff,
    schemaType: schemaType
  }));
}