"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageFieldDiff = void 0;

var React = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _diff = require("../../../diff");

var _components = require("../../../diff/components");

var _ImagePreview = require("./ImagePreview");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var IMAGE_META_FIELDS = ['crop', 'hotspot'];
var BASE_IMAGE_FIELDS = ['asset', ...IMAGE_META_FIELDS];
var CARD_STYLES = {
  flex: 1
};

var ImageFieldDiff = _ref => {
  var _fromValue$asset, _toValue$asset;

  var diff = _ref.diff,
      schemaType = _ref.schemaType;
  var fromValue = diff.fromValue,
      toValue = diff.toValue,
      fields = diff.fields,
      isChanged = diff.isChanged;
  var fromRef = fromValue === null || fromValue === void 0 ? void 0 : (_fromValue$asset = fromValue.asset) === null || _fromValue$asset === void 0 ? void 0 : _fromValue$asset._ref;
  var toRef = toValue === null || toValue === void 0 ? void 0 : (_toValue$asset = toValue.asset) === null || _toValue$asset === void 0 ? void 0 : _toValue$asset._ref;
  var assetAnnotation = (0, _diff.getAnnotationAtPath)(diff, ['asset', '_ref']); // Get all the changed fields within this image field

  var changedFields = Object.keys(fields).filter(name => fields[name].isChanged && name !== '_type');
  var nestedFields = schemaType.fields.filter(field => !BASE_IMAGE_FIELDS.includes(field.name) && changedFields.includes(field.name)).map(field => field.name);
  var assetAction = 'changed';

  if (!fromRef && toRef) {
    assetAction = 'added';
  } else if (!toRef && fromRef) {
    assetAction = 'removed';
  }

  var didAssetChange = changedFields.includes('asset');
  var didCropChange = changedFields.includes('crop');
  var didHotspotChange = changedFields.includes('hotspot');
  var didMetaChange = didCropChange || didHotspotChange;
  var showImageDiff = didAssetChange || didMetaChange;
  var showMetaChange = didMetaChange && !didAssetChange;
  var from = fromValue && fromRef ? /*#__PURE__*/React.createElement(_diff.DiffCard, {
    annotation: assetAnnotation,
    style: CARD_STYLES
  }, /*#__PURE__*/React.createElement(_ImagePreview.ImagePreview, {
    is: "from",
    id: fromRef,
    diff: diff,
    action: assetAction,
    hotspot: showMetaChange && didHotspotChange ? fromValue.hotspot : undefined,
    crop: showMetaChange && didCropChange ? fromValue.crop : undefined
  })) : /*#__PURE__*/React.createElement(_ImagePreview.NoImagePreview, null);
  var to = toValue && toRef ? /*#__PURE__*/React.createElement(_diff.DiffCard, {
    annotation: assetAnnotation,
    style: CARD_STYLES
  }, /*#__PURE__*/React.createElement(_ImagePreview.ImagePreview, {
    is: "to",
    id: toRef,
    diff: diff,
    hotspot: showMetaChange && didHotspotChange ? toValue.hotspot : undefined,
    crop: showMetaChange && didCropChange ? toValue.crop : undefined
  })) : /*#__PURE__*/React.createElement(_ImagePreview.NoImagePreview, null);

  if (!from && !to) {
    return /*#__PURE__*/React.createElement(_ui.Card, {
      padding: 4,
      radius: 2,
      tone: "transparent"
    }, /*#__PURE__*/React.createElement(_ui.Text, {
      muted: true,
      size: 1,
      align: "center"
    }, "Image not set"));
  }

  if (!isChanged) {
    return toRef ? /*#__PURE__*/React.createElement(_diff.DiffCard, {
      annotation: assetAnnotation,
      style: CARD_STYLES
    }, /*#__PURE__*/React.createElement(_ImagePreview.ImagePreview, {
      id: toRef,
      is: "to",
      diff: diff
    })) : null;
  }

  var imageDiff = /*#__PURE__*/React.createElement(_components.FromTo, {
    align: "center",
    from: from,
    layout: "grid",
    to: to
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, showImageDiff && (didAssetChange ? /*#__PURE__*/React.createElement(_diff.DiffTooltip, {
    annotations: assetAnnotation ? [assetAnnotation] : [],
    description: "".concat(assetAction[0].toUpperCase()).concat(assetAction.slice(1))
  }, imageDiff) : imageDiff), nestedFields.length > 0 && /*#__PURE__*/React.createElement(_ui.Box, {
    marginTop: showImageDiff ? 4 : 3
  }, /*#__PURE__*/React.createElement(_diff.ChangeList, {
    diff: diff,
    schemaType: schemaType,
    fields: nestedFields
  })));
};

exports.ImageFieldDiff = ImageFieldDiff;