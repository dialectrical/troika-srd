"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupChange = GroupChange;

var _components = require("@sanity/base/components");

var _reactHooks = require("@sanity/react-hooks");

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("@sanity/base/hooks");

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _undoChange = require("../changes/undoChange");

var _helpers = require("../helpers");

var _diff = require("../../types/portableText/diff");

var _useHover3 = require("../../utils/useHover");

var _paths = require("../../paths");

var _DiffContext = require("../contexts/DiffContext");

var _ChangeBreadcrumb = require("./ChangeBreadcrumb");

var _ChangeResolver = require("./ChangeResolver");

var _DocumentChangeContext = require("./DocumentChangeContext");

var _RevertChangesButton = require("./RevertChangesButton");

var _excluded = ["change", "readOnly"];

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var ChangeListWrapper = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n"])));

var GroupChangeContainer = _styledComponents.default.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  --field-change-error: ", ";\n  --diff-inspect-padding-xsmall: ", ";\n  --diff-inspect-padding-small: ", ";\n\n  position: relative;\n  padding: var(--diff-inspect-padding-xsmall) var(--diff-inspect-padding-small);\n\n  &::before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    border-left: 1px solid var(--card-border-color);\n  }\n\n  &[data-error]:hover::before,\n  &[data-revert-group-hover]:hover::before,\n  &[data-revert-all-groups-hover]::before {\n    border-left: 2px solid var(--field-change-error);\n  }\n"])), _ref => {
  var theme = _ref.theme;
  return theme.sanity.color.solid.critical.enabled.bg;
}, _ref2 => {
  var theme = _ref2.theme;
  return (0, _ui.rem)(theme.sanity.space[1]);
}, _ref3 => {
  var theme = _ref3.theme;
  return (0, _ui.rem)(theme.sanity.space[2]);
});

function GroupChange(_ref4) {
  var _group$schemaType2, _group$schemaType3;

  var group = _ref4.change,
      readOnly = _ref4.readOnly,
      restProps = _objectWithoutProperties(_ref4, _excluded);

  var titlePath = group.titlePath,
      changes = group.changes,
      groupPath = group.path;

  var _useContext = (0, _react.useContext)(_DiffContext.DiffContext),
      diffPath = _useContext.path;

  var _useContext2 = (0, _react.useContext)(_DocumentChangeContext.DocumentChangeContext),
      documentId = _useContext2.documentId,
      schemaType = _useContext2.schemaType,
      FieldWrapper = _useContext2.FieldWrapper,
      rootDiff = _useContext2.rootDiff,
      isComparingCurrent = _useContext2.isComparingCurrent;

  var isPortableText = changes.every(change => (0, _helpers.isFieldChange)(change) && (0, _diff.isPTSchemaType)(change.schemaType));
  var isNestedInDiff = (0, _paths.pathsAreEqual)(diffPath, groupPath);

  var _useHover = (0, _useHover3.useHover)(),
      _useHover2 = _slicedToArray(_useHover, 2),
      hoverRef = _useHover2[0],
      isHoveringRevert = _useHover2[1];

  var docOperations = (0, _reactHooks.useDocumentOperation)(documentId, schemaType.name);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      confirmRevertOpen = _useState2[0],
      setConfirmRevertOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      revertButtonElement = _useState4[0],
      setRevertButtonElement = _useState4[1];

  var updatePermission = (0, _hooks.unstable_useCheckDocumentPermission)(documentId, schemaType.name, 'update');
  var handleRevertChanges = (0, _react.useCallback)(() => (0, _undoChange.undoChange)(group, rootDiff, docOperations), [group, rootDiff, docOperations]);
  var handleRevertChangesConfirm = (0, _react.useCallback)(() => {
    setConfirmRevertOpen(true);
  }, []);
  var closeRevertChangesConfirmDialog = (0, _react.useCallback)(() => {
    setConfirmRevertOpen(false);
  }, []);
  var handleConfirmDialogAction = (0, _react.useCallback)(action => {
    if (action.action) action.action();
  }, []);
  var setRevertButtonRef = (0, _react.useCallback)(el => {
    hoverRef.current = el;
    setRevertButtonElement(el);
  }, [hoverRef]);

  var content = /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 1,
    as: GroupChangeContainer,
    "data-revert-group-hover": isHoveringRevert ? '' : undefined,
    "data-portable-text": isPortableText ? '' : undefined,
    "data-revert-all-groups-hover": restProps['data-revert-all-changes-hover'] === '' ? '' : undefined
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    as: ChangeListWrapper,
    space: 5
  }, changes.map(change => {
    var _group$schemaType;

    return /*#__PURE__*/_react.default.createElement(_ChangeResolver.ChangeResolver, {
      key: change.key,
      change: change,
      readOnly: readOnly || (group === null || group === void 0 ? void 0 : (_group$schemaType = group.schemaType) === null || _group$schemaType === void 0 ? void 0 : _group$schemaType.readOnly)
    });
  })), isComparingCurrent && updatePermission.granted && /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_RevertChangesButton.RevertChangesButton, {
    onClick: handleRevertChangesConfirm,
    ref: setRevertButtonRef,
    selected: confirmRevertOpen,
    disabled: (group === null || group === void 0 ? void 0 : (_group$schemaType2 = group.schemaType) === null || _group$schemaType2 === void 0 ? void 0 : _group$schemaType2.readOnly) || readOnly
  })));

  return group !== null && group !== void 0 && (_group$schemaType3 = group.schemaType) !== null && _group$schemaType3 !== void 0 && _group$schemaType3.hidden ? null : /*#__PURE__*/_react.default.createElement(_ui.Stack, _extends({
    space: 1
  }, restProps), /*#__PURE__*/_react.default.createElement(_ChangeBreadcrumb.ChangeBreadcrumb, {
    titlePath: titlePath
  }), isNestedInDiff || !FieldWrapper ? content : /*#__PURE__*/_react.default.createElement(FieldWrapper, {
    path: group.path,
    hasHover: isHoveringRevert
  }, content), confirmRevertOpen && /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    actions: [{
      color: 'danger',
      action: handleRevertChanges,
      title: 'Revert change'
    }, {
      kind: 'simple',
      action: closeRevertChangesConfirmDialog,
      title: 'Cancel'
    }],
    onAction: handleConfirmDialogAction // portal
    ,
    referenceElement: revertButtonElement,
    size: "small"
  }, "Are you sure you want to revert the changes?")));
}