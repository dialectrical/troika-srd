"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiffFromTo = DiffFromTo;

var _react = _interopRequireWildcard(require("react"));

var _diff = require("../../diff");

var _DiffCard = require("./DiffCard");

var _DiffTooltip = require("./DiffTooltip");

var _FromTo = require("./FromTo");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var cardStyles = {
  flex: 1,
  minWidth: 0,
  display: 'block',
  whiteSpace: 'break-spaces'
};

function DiffFromTo(props) {
  var align = props.align,
      cardClassName = props.cardClassName,
      diff = props.diff,
      layout = props.layout,
      path = props.path,
      previewComponent = props.previewComponent,
      schemaType = props.schemaType;
  var action = diff.action;
  var changeVerb = (0, _diff.getChangeVerb)(diff);

  if (action === 'unchanged') {
    return /*#__PURE__*/_react.default.createElement(_DiffCard.DiffCard, {
      className: cardClassName,
      style: cardStyles
    }, /*#__PURE__*/(0, _react.createElement)(previewComponent, {
      schemaType,
      value: diff.toValue
    }));
  }

  var from = diff.fromValue !== undefined && diff.fromValue !== null && /*#__PURE__*/_react.default.createElement(_DiffCard.DiffCard, {
    as: "del",
    className: cardClassName,
    diff: diff,
    path: path,
    style: cardStyles
  }, /*#__PURE__*/(0, _react.createElement)(previewComponent, {
    schemaType,
    value: diff.fromValue
  }));

  var to = diff.toValue !== undefined && diff.toValue !== null && /*#__PURE__*/_react.default.createElement(_DiffCard.DiffCard, {
    as: "ins",
    className: cardClassName,
    diff: diff,
    path: path,
    style: cardStyles
  }, /*#__PURE__*/(0, _react.createElement)(previewComponent, {
    schemaType,
    value: diff.toValue
  }));

  if (from && !to) {
    return /*#__PURE__*/_react.default.createElement(_DiffTooltip.DiffTooltip, {
      description: changeVerb,
      diff: diff,
      path: path
    }, from);
  }

  if (!from && to) {
    return /*#__PURE__*/_react.default.createElement(_DiffTooltip.DiffTooltip, {
      description: changeVerb,
      diff: diff,
      path: path
    }, to);
  }

  return /*#__PURE__*/_react.default.createElement(_DiffTooltip.DiffTooltip, {
    description: changeVerb,
    diff: diff,
    path: path
  }, /*#__PURE__*/_react.default.createElement(_FromTo.FromTo, {
    align: align,
    from: from,
    layout: layout,
    to: to
  }));
}