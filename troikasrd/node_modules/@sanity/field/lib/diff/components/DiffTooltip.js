"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiffTooltip = DiffTooltip;

var _components = require("@sanity/base/components");

var _hooks = require("@sanity/base/hooks");

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _diff = require("../../diff");

var _annotations = require("../annotations");

var _excluded = ["diff", "path"],
    _excluded2 = ["annotations", "children", "description"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function DiffTooltip(props) {
  if ('diff' in props) {
    var diff = props.diff,
        _props$path = props.path,
        path = _props$path === void 0 ? [] : _props$path,
        restProps = _objectWithoutProperties(props, _excluded);

    var annotation = (0, _diff.getAnnotationAtPath)(diff, path);
    return /*#__PURE__*/_react.default.createElement(DiffTooltipWithAnnotation, _extends({}, restProps, {
      annotations: annotation ? [annotation] : []
    }));
  }

  return /*#__PURE__*/_react.default.createElement(DiffTooltipWithAnnotation, props);
}

function DiffTooltipWithAnnotation(props) {
  var annotations = props.annotations,
      children = props.children,
      _props$description = props.description,
      description = _props$description === void 0 ? 'Changed' : _props$description,
      restProps = _objectWithoutProperties(props, _excluded2);

  if (!annotations) {
    return children;
  }

  var content = /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    padding: 3,
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 1,
    style: {
      textTransform: 'uppercase'
    },
    muted: true
  }, description), /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2
  }, annotations.map((annotation, idx) => /*#__PURE__*/_react.default.createElement(AnnotationItem, {
    annotation: annotation,
    key: idx
  }))));

  return /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, _extends({
    content: content,
    "data-placement": restProps.placement,
    portal: true,
    allowedAutoPlacements: ['top', 'bottom']
  }, restProps), children));
}

function AnnotationItem(_ref) {
  var annotation = _ref.annotation;
  var author = annotation.author,
      timestamp = annotation.timestamp;

  var _useUser = (0, _hooks.useUser)(author),
      error = _useUser.error,
      user = _useUser.value;

  var color = (0, _annotations.useAnnotationColor)(annotation);
  var timeAgo = (0, _hooks.useTimeAgo)(timestamp, {
    minimal: true
  }); // @todo handle?

  if (error) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    paddingRight: 3,
    style: {
      backgroundColor: color.background,
      color: color.text,
      borderRadius: 'calc(23px / 2)'
    }
  }, /*#__PURE__*/_react.default.createElement(_components.UserAvatar, {
    userId: author
  }), /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    paddingLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1,
    style: {
      color: color.text
    }
  }, user ? user.displayName : 'Loadingâ€¦'))), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "time",
    muted: true,
    size: 1,
    dateTime: timestamp
  }, timeAgo));
}