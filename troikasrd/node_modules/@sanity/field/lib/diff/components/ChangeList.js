"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeList = ChangeList;

var _components = require("@sanity/base/components");

var _reactHooks = require("@sanity/react-hooks");

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("@sanity/base/hooks");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _DiffContext = require("../contexts/DiffContext");

var _buildChangeList = require("../changes/buildChangeList");

var _undoChange = require("../changes/undoChange");

var _ChangeResolver = require("./ChangeResolver");

var _DocumentChangeContext = require("./DocumentChangeContext");

var _NoChanges = require("./NoChanges");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var ChangeListWrapper = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n"])));

function ChangeList(_ref) {
  var diff = _ref.diff,
      fields = _ref.fields,
      schemaType = _ref.schemaType;

  var _React$useContext = _react.default.useContext(_DocumentChangeContext.DocumentChangeContext),
      documentId = _React$useContext.documentId,
      isComparingCurrent = _React$useContext.isComparingCurrent;

  var docOperations = (0, _reactHooks.useDocumentOperation)(documentId, schemaType.name);

  var _React$useContext2 = _react.default.useContext(_DiffContext.DiffContext),
      path = _React$useContext2.path;

  var isRoot = path.length === 0;

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      confirmRevertAllOpen = _React$useState2[0],
      setConfirmRevertAllOpen = _React$useState2[1];

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      confirmRevertAllHover = _React$useState4[0],
      setConfirmRevertAllHover = _React$useState4[1];

  if (schemaType.jsonType !== 'object') {
    throw new Error("Only object schema types are allowed in ChangeList");
  }

  var updatePermission = (0, _hooks.unstable_useCheckDocumentPermission)(documentId, schemaType.name, 'update');

  var allChanges = _react.default.useMemo(() => (0, _buildChangeList.buildObjectChangeList)(schemaType, diff, path, [], {
    fieldFilter: fields
  }), [schemaType, fields, path, diff]);

  var changes = fields && fields.length === 0 ? [] : maybeFlatten(allChanges);
  var rootChange = allChanges[0];

  var revertAllChanges = _react.default.useCallback(() => {
    (0, _undoChange.undoChange)(rootChange, diff, docOperations);
    setConfirmRevertAllOpen(false);
  }, [rootChange, diff, docOperations]);

  var handleRevertAllChangesClick = _react.default.useCallback(() => {
    setConfirmRevertAllOpen(true);
  }, []);

  var handleRevertAllChangesMouseEnter = _react.default.useCallback(() => {
    setConfirmRevertAllHover(true);
  }, []);

  var handleRevertAllChangesMouseLeave = _react.default.useCallback(() => {
    setConfirmRevertAllHover(false);
  }, []);

  var closeRevertAllChangesConfirmDialog = _react.default.useCallback(() => {
    setConfirmRevertAllOpen(false);
  }, []);

  var handleConfirmDialogAction = (0, _react.useCallback)(action => {
    if (action.action) action.action();
  }, []);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      revertAllContainerElement = _useState2[0],
      setRevertAllContainerElement = _useState2[1];

  if (changes.length === 0) {
    return isRoot ? /*#__PURE__*/_react.default.createElement(_NoChanges.NoChanges, null) : null;
  }

  var showFooter = isRoot && changes.length > 1;
  return /*#__PURE__*/_react.default.createElement(_ui.Card, null, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 5
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    as: ChangeListWrapper,
    space: 5
  }, changes.map(change => /*#__PURE__*/_react.default.createElement(_ChangeResolver.ChangeResolver, {
    change: change,
    key: change.key,
    "data-revert-all-changes-hover": confirmRevertAllHover ? '' : undefined,
    readOnly: schemaType.readOnly
  }))), showFooter && isComparingCurrent && updatePermission.granted && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    ref: setRevertAllContainerElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    tone: "critical",
    mode: "ghost",
    text: "Revert all changes",
    icon: _icons.RevertIcon,
    onClick: handleRevertAllChangesClick,
    onMouseEnter: handleRevertAllChangesMouseEnter,
    onMouseLeave: handleRevertAllChangesMouseLeave,
    disabled: schemaType === null || schemaType === void 0 ? void 0 : schemaType.readOnly
  })), confirmRevertAllOpen && /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
    zOffset: "paneFooter"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    actions: [{
      color: 'danger',
      action: revertAllChanges,
      title: 'Revert all'
    }, {
      kind: 'simple',
      action: closeRevertAllChangesConfirmDialog,
      title: 'Cancel'
    }],
    onAction: handleConfirmDialogAction,
    onClickOutside: closeRevertAllChangesConfirmDialog,
    referenceElement: revertAllContainerElement,
    size: "small"
  }, "Are you sure you want to revert all ", changes.length, " changes?"))));
}

function maybeFlatten(changes) {
  return changes.length === 1 && changes[0].type === 'group' && changes[0].path.length === 0 ? changes[0].changes : changes;
}