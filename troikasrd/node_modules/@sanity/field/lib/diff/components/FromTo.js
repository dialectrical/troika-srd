"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FromTo = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _FromToArrow = require("./FromToArrow");

var _excluded = ["align", "layout", "from", "to", "style"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var INLINE_COLUMN_STYLES = {
  flexShrink: 0
};
var BLOCK_COLUMN_STYLES = {
  alignItems: 'stretch'
};
var FLEX_ALIGN = {
  top: 'flex-start',
  center: 'center',
  bottom: 'flex-end',
  default: 'flex-start'
};
var FromTo = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  var _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'top' : _ref$align,
      _ref$layout = _ref.layout,
      layout = _ref$layout === void 0 ? 'inline' : _ref$layout,
      from = _ref.from,
      to = _ref.to,
      style = _ref.style,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var theme = (0, _ui.useTheme)();
  var Layout = layout === 'inline' ? _ui.Flex : _ui.Grid;
  var layoutStyles = (0, _react.useMemo)(() => _objectSpread(_objectSpread({}, style), layout === 'inline' ? {
    maxWidth: '100%',
    display: 'inline-flex'
  } : {
    gridTemplateColumns: "minmax(0, 1fr) ".concat((0, _ui.rem)(theme.sanity.space[5]), " minmax(0, 1fr)")
  }), [layout, style, theme]);
  var columnStyles = layout === 'inline' ? INLINE_COLUMN_STYLES : BLOCK_COLUMN_STYLES;
  return /*#__PURE__*/_react.default.createElement(Layout, _extends({}, restProps, {
    ref: ref,
    style: layoutStyles,
    "data-from-to-layout": true
  }), from && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: FLEX_ALIGN[align],
    style: columnStyles
  }, from), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 2
  }, /*#__PURE__*/_react.default.createElement(_FromToArrow.FromToArrow, null))), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: FLEX_ALIGN[align],
    style: columnStyles
  }, to));
});
exports.FromTo = FromTo;
FromTo.displayName = 'FromTo';