"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRefValue = useRefValue;
exports.useRefPreview = useRefPreview;

var _react = require("react");

var _preview = require("part:@sanity/base/preview");

var _versionedClient = require("../../versionedClient");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useRefValue(refId) {
  var _useState = (0, _react.useState)(undefined),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  (0, _react.useEffect)(() => {
    if (!refId) {
      return undefined;
    }

    var subscription = _versionedClient.versionedClient.observable.getDocument(refId).subscribe(setValue);

    return () => {
      subscription.unsubscribe();
    };
  }, [refId]); // Always return undefined in the case of a falsey ref to prevent bug
  // when going from an ID to an undefined state

  return refId ? value : undefined;
}

function useRefPreview(value, schemaType) {
  var _useState3 = (0, _react.useState)(undefined),
      _useState4 = _slicedToArray(_useState3, 2),
      preview = _useState4[0],
      setPreview = _useState4[1];

  (0, _react.useEffect)(() => {
    var subscription;

    if (value) {
      subscription = (0, _preview.observeForPreview)(value, schemaType).subscribe(result => setPreview(result.snapshot));
    }

    return () => {
      if (subscription) {
        subscription.unsubscribe();
      }
    };
  }, [value, schemaType]);
  return value ? preview : undefined;
}