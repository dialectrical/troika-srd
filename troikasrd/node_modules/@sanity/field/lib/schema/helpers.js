"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveTypeName = resolveTypeName;
exports.getArrayDiffItemType = getArrayDiffItemType;

var _types = require("@sanity/types");

function resolveTypeName(value) {
  return (0, _types.isTypedObject)(value) ? value._type : resolveJSType(value);
}

function getArrayDiffItemType(diff, schemaType) {
  if (diff.action === 'added') {
    return {
      toType: resolveArrayMemberType(schemaType, diff.toValue)
    };
  }

  if (diff.action === 'changed') {
    return {
      fromType: resolveArrayMemberType(schemaType, diff.fromValue),
      toType: resolveArrayMemberType(schemaType, diff.toValue)
    };
  }

  if (diff.action === 'removed') {
    return {
      fromType: resolveArrayMemberType(schemaType, diff.fromValue)
    };
  } // unchanged


  return {
    toType: resolveArrayMemberType(schemaType, diff.toValue)
  };
}

function resolveArrayMemberType(schemaType, value) {
  var typeName = resolveTypeName(value);
  var declared = schemaType.of.find(candidate => candidate.name === typeName);

  if (declared) {
    return declared;
  }

  return schemaType.of.length === 1 ? schemaType.of[0] : undefined;
}

function resolveJSType(val) {
  if (Array.isArray(val)) {
    return 'array';
  }

  if (val === null) {
    return 'null';
  }

  return typeof val;
}