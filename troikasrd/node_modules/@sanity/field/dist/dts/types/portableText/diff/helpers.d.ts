import { Block, ObjectField, SchemaType } from '@sanity/types';
import { ObjectDiff } from '../../../diff';
import { ObjectSchemaType, ArraySchemaType } from '../../../types';
import { InlineSymbolMap, MarkSymbolMap, PortableTextBlock, PortableTextDiff, PortableTextChild, SpanTypeSchema } from './types';
export declare const UNKNOWN_TYPE_NAME = "_UNKOWN_TYPE_";
export declare function hasPTMemberType(schemaType: ArraySchemaType): boolean;
export declare function isPTSchemaType(schemaType: SchemaType): schemaType is ObjectSchemaType<Block>;
export declare function isHeader(node: PortableTextBlock): boolean;
export declare function findChildDiff(diff: ObjectDiff, child: PortableTextChild): ObjectDiff;
export declare function getChildSchemaType(fields: ObjectField<SchemaType>[], child: PortableTextChild): ObjectSchemaType<Record<string, SchemaType>> | undefined;
export declare function getDecorators(spanSchemaType: SpanTypeSchema): {
    title: string;
    value: string;
}[];
export declare function getAnnotations(spanSchemaType: SpanTypeSchema): ObjectSchemaType[];
export declare function isDecorator(name: string, schemaType: SpanTypeSchema): boolean;
export declare function blockToSymbolizedText(diff: ObjectDiff, block: PortableTextBlock | undefined, decoratorMap: MarkSymbolMap, annotationMap: MarkSymbolMap, inlineMap: InlineSymbolMap): string;
export declare function createPortableTextDiff(diff: ObjectDiff, schemaType: ObjectSchemaType): PortableTextDiff;
export declare function getInlineObjects(diff: ObjectDiff): PortableTextChild[];
export declare function findSpanDiffFromChild(diff: ObjectDiff, child: PortableTextChild): ObjectDiff | undefined;
export declare function findAnnotationDiff(diff: ObjectDiff, markDefKey: string): ObjectDiff | undefined;
export declare function isEmptyObject(object: PortableTextChild): boolean;
export declare function escapeRegExp(text: string): string;
export declare function getAllMarkDefs(diff: ObjectDiff): PortableTextChild[];
//# sourceMappingURL=helpers.d.ts.map