{
  "version": 3,
  "sources": ["../../../../../../src/theme/lib/theme/color/factory.ts"],
  "sourcesContent": ["import {ThemeColorGenericState} from './_generic'\nimport {ThemeColorBase} from './base'\nimport {ThemeColorButtonModeKey, ThemeColorButtonStates} from './button'\nimport {createButtonModes} from './button/createButtonModes'\nimport {ThemeColorCardState} from './card'\nimport {createCardStates} from './card/createCardStates'\nimport {defaultOpts} from './defaults'\nimport {ThemeColorInputState} from './input'\nimport {createInputModes} from './input/createInputModes'\nimport {ThemeColorMuted, ThemeColorMutedTone} from './muted'\nimport {createMutedTones} from './muted/createMuted'\nimport {ThemeColorSelectableState} from './selectable'\nimport {createSelectableTones} from './selectable/createSelectableTones'\nimport {ThemeColorSolid, ThemeColorSolidTone} from './solid'\nimport {createSolidTones} from './solid/createSolidTones'\nimport {ThemeColorSpotKey} from './spot'\nimport {createSpot} from './spot/createSpot'\nimport {ThemeColorSyntax} from './syntax'\nimport {\n  ThemeColorName,\n  ThemeColorScheme,\n  ThemeColorSchemes,\n  ThemeColor,\n  ThemeColorToneKey,\n} from './types'\n\n/**\n * @public\n */\nexport interface ThemeColorBuilderOpts {\n  base: (opts: {dark: boolean; name: ThemeColorName}) => ThemeColorBase\n  solid: (opts: {\n    base: ThemeColorBase\n    dark: boolean\n    tone: ThemeColorToneKey\n    name: ThemeColorName\n    state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected'\n  }) => ThemeColorGenericState\n  muted: (opts: {\n    base: ThemeColorBase\n    dark: boolean\n    tone: ThemeColorToneKey\n    name: ThemeColorName\n    state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected'\n  }) => ThemeColorGenericState\n  card: (opts: {\n    base: ThemeColorBase\n    dark: boolean\n    muted: ThemeColorMuted\n    name: ThemeColorName\n    solid: ThemeColorSolid\n    state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected'\n  }) => ThemeColorCardState\n  button: (opts: {\n    dark: boolean\n    mode: ThemeColorButtonModeKey\n    base: ThemeColorBase\n    solid: ThemeColorSolidTone\n    muted: ThemeColorMutedTone\n  }) => ThemeColorButtonStates\n  input: (opts: {\n    base: ThemeColorBase\n    solid: ThemeColorSolidTone\n    muted: ThemeColorMutedTone\n    dark: boolean\n    mode: 'default' | 'invalid'\n    state: 'enabled' | 'disabled' | 'hovered' | 'readOnly'\n  }) => ThemeColorInputState\n  selectable: (opts: {\n    dark: boolean\n    base: ThemeColorBase\n    solid: ThemeColorSolid\n    muted: ThemeColorMuted\n    state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected'\n    tone: 'default' | 'primary' | 'positive' | 'caution' | 'critical'\n  }) => ThemeColorSelectableState\n  syntax: (opts: {base: ThemeColorBase; dark: boolean}) => ThemeColorSyntax\n  spot: (opts: {base: ThemeColorBase; dark: boolean; key: ThemeColorSpotKey}) => string\n}\n\n/**\n * @public\n */\nexport type PartialThemeColorBuilderOpts = Partial<ThemeColorBuilderOpts>\n\n/**\n * @public\n */\nexport function createColorTheme(\n  partialOpts: PartialThemeColorBuilderOpts = {}\n): ThemeColorSchemes {\n  const builders: ThemeColorBuilderOpts = {...defaultOpts, ...partialOpts}\n\n  return {\n    light: _createColorScheme(builders, false),\n    dark: _createColorScheme(builders, true),\n  }\n}\n\n/**\n * @internal\n */\nfunction _createColorScheme(opts: ThemeColorBuilderOpts, dark: boolean): ThemeColorScheme {\n  return {\n    default: _createColor(opts, dark, 'default'),\n    transparent: _createColor(opts, dark, 'transparent'),\n    primary: _createColor(opts, dark, 'primary'),\n    positive: _createColor(opts, dark, 'positive'),\n    caution: _createColor(opts, dark, 'caution'),\n    critical: _createColor(opts, dark, 'critical'),\n  }\n}\n\n/**\n * @internal\n */\nfunction _createColor(\n  opts: ThemeColorBuilderOpts,\n  dark: boolean,\n  name: ThemeColorName\n): ThemeColor {\n  const base = opts.base({dark, name})\n  const solid = createSolidTones(opts, base, dark, name)\n  const muted = createMutedTones(opts, base, dark, name)\n\n  return {\n    base,\n    button: createButtonModes(opts, base, dark, solid, muted),\n    card: createCardStates(opts, base, dark, name, solid, muted),\n    dark,\n    input: createInputModes(opts, base, dark, solid, muted),\n    selectable: createSelectableTones(opts, base, dark, solid, muted),\n    spot: createSpot(opts, base, dark),\n    syntax: opts.syntax({base, dark}),\n    solid,\n    muted,\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAwEO,0BACL,cAA4C,IACzB;AACnB,QAAM,WAAkC,kCAAI,cAAgB;AAE5D,SAAO;AAAA,IACL,OAAO,mBAAmB,UAAU;AAAA,IACpC,MAAM,mBAAmB,UAAU;AAAA;AAAA;AAOvC,4BAA4B,MAA6B,MAAiC;AACxF,SAAO;AAAA,IACL,SAAS,aAAa,MAAM,MAAM;AAAA,IAClC,aAAa,aAAa,MAAM,MAAM;AAAA,IACtC,SAAS,aAAa,MAAM,MAAM;AAAA,IAClC,UAAU,aAAa,MAAM,MAAM;AAAA,IACnC,SAAS,aAAa,MAAM,MAAM;AAAA,IAClC,UAAU,aAAa,MAAM,MAAM;AAAA;AAAA;AAOvC,sBACE,MACA,MACA,MACY;AACZ,QAAM,OAAO,KAAK,KAAK,EAAC,MAAM;AAC9B,QAAM,QAAQ,iBAAiB,MAAM,MAAM,MAAM;AACjD,QAAM,QAAQ,iBAAiB,MAAM,MAAM,MAAM;AAEjD,SAAO;AAAA,IACL;AAAA,IACA,QAAQ,kBAAkB,MAAM,MAAM,MAAM,OAAO;AAAA,IACnD,MAAM,iBAAiB,MAAM,MAAM,MAAM,MAAM,OAAO;AAAA,IACtD;AAAA,IACA,OAAO,iBAAiB,MAAM,MAAM,MAAM,OAAO;AAAA,IACjD,YAAY,sBAAsB,MAAM,MAAM,MAAM,OAAO;AAAA,IAC3D,MAAM,WAAW,MAAM,MAAM;AAAA,IAC7B,QAAQ,KAAK,OAAO,EAAC,MAAM;AAAA,IAC3B;AAAA,IACA;AAAA;AAAA;",
  "names": []
}
