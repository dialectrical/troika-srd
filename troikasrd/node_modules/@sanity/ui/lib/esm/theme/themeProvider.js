var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { useContext, useMemo } from "react";
import { ThemeProvider as StyledThemeProvider } from "styled-components";
import { DEFAULT_THEME_LAYER } from "./defaults";
import { ThemeContext } from "./themeContext";
function ThemeProvider(props) {
  const parentTheme = useContext(ThemeContext);
  const {
    children,
    scheme = (parentTheme == null ? void 0 : parentTheme.scheme) || "light",
    theme: themeProp = (parentTheme == null ? void 0 : parentTheme.theme) || null,
    tone = (parentTheme == null ? void 0 : parentTheme.tone) || "default"
  } = props;
  const theme = useMemo(() => {
    if (!themeProp)
      return null;
    const _a = themeProp, { color: rootColor, layer: rootLayer } = _a, restTheme = __objRest(_a, ["color", "layer"]);
    const colorScheme = rootColor[scheme] || rootColor.light;
    const color = colorScheme[tone] || colorScheme.default;
    const layer = rootLayer || DEFAULT_THEME_LAYER;
    return { sanity: __spreadProps(__spreadValues({}, restTheme), { color, layer }) };
  }, [scheme, themeProp, tone]);
  const value = useMemo(() => themeProp && {
    version: 0,
    theme: themeProp,
    scheme,
    tone
  }, [themeProp, scheme, tone]);
  if (!theme) {
    return /* @__PURE__ */ React.createElement("pre", null, 'ThemeProvider: no "theme" property provided');
  }
  return /* @__PURE__ */ React.createElement(ThemeContext.Provider, {
    value
  }, /* @__PURE__ */ React.createElement(StyledThemeProvider, {
    theme
  }, children));
}
export {
  ThemeProvider
};
