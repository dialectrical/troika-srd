var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { getResponsiveProp, rem, responsive } from "../helpers";
function responsiveInputPaddingStyle(props) {
  const { $iconLeft, $iconRight, theme } = props;
  const { fonts, media, space: spaceScale } = theme.sanity;
  const padding = getResponsiveProp(props.$padding, [0]);
  const space = getResponsiveProp(props.$space, [0]);
  const size = getResponsiveProp(props.$fontSize, [0]);
  const len = Math.max(padding.length, space.length, size.length);
  const _padding = [];
  const _space = [];
  const _size = [];
  for (let i = 0; i < len; i += 1) {
    _padding[i] = padding[i] === void 0 ? _padding[i - 1] : padding[i];
    _space[i] = space[i] === void 0 ? _space[i - 1] : space[i];
    _size[i] = size[i] === void 0 ? _size[i - 1] : size[i];
  }
  return responsive(media, _padding, (_, i) => {
    const fontSize = fonts.text.sizes[_size[i]] || fonts.text.sizes[2];
    const emSize = fontSize.lineHeight - fontSize.ascenderHeight - fontSize.descenderHeight;
    const p = spaceScale[_padding[i]];
    const s = spaceScale[_space[i]];
    const styles = {
      paddingTop: rem(p - fontSize.ascenderHeight),
      paddingRight: rem(p),
      paddingBottom: rem(p - fontSize.descenderHeight),
      paddingLeft: rem(p)
    };
    if ($iconRight)
      styles.paddingRight = rem(p + emSize + s);
    if ($iconLeft)
      styles.paddingLeft = rem(p + emSize + s);
    return styles;
  });
}
function responsiveInputPaddingIconsStyle(props) {
  return responsiveInputPaddingStyle(__spreadProps(__spreadValues({}, props), { $iconLeft: true, $iconRight: true }));
}
function responsiveInputPaddingIconLeftStyle(props) {
  return responsiveInputPaddingStyle(__spreadProps(__spreadValues({}, props), { $iconLeft: true }));
}
function responsiveInputPaddingIconRightStyle(props) {
  return responsiveInputPaddingStyle(__spreadProps(__spreadValues({}, props), { $iconRight: true }));
}
export {
  responsiveInputPaddingIconLeftStyle,
  responsiveInputPaddingIconRightStyle,
  responsiveInputPaddingIconsStyle,
  responsiveInputPaddingStyle
};
