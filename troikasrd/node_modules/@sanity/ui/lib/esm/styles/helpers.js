import { EMPTY_ARRAY } from "../constants";
function fillCSSObject(propKeys, value) {
  return propKeys.reduce((obj, propKey) => {
    obj[propKey] = value;
    return obj;
  }, {});
}
function rem(pixelValue) {
  if (pixelValue === 0)
    return 0;
  return `${pixelValue / 16}rem`;
}
function responsive(media, values, callback) {
  const statements = values.map(callback);
  return statements.map((statement, mediaIndex) => {
    if (mediaIndex === 0)
      return statement;
    return { [`@media screen and (min-width: ${media[mediaIndex - 1]}px)`]: statement };
  });
}
function getResponsiveProp(val, defaultVal) {
  if (val === void 0)
    return defaultVal || EMPTY_ARRAY;
  return Array.isArray(val) ? val : [val];
}
function getResponsiveSpace(theme, props, spaceIndexes = EMPTY_ARRAY) {
  if (!Array.isArray(spaceIndexes)) {
    throw new Error("the property must be array of numbers");
  }
  if (spaceIndexes.length === 0) {
    return null;
  }
  return responsive(theme.sanity.media, spaceIndexes, (spaceIndex) => fillCSSObject(props, rem(theme.sanity.space[spaceIndex])));
}
export {
  fillCSSObject,
  getResponsiveProp,
  getResponsiveSpace,
  rem,
  responsive
};
