var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { useId } from "@reach/auto-id";
import React, { forwardRef, useCallback, useEffect, useState } from "react";
import ReactIs from "react-is";
import styled from "styled-components";
import { useResponsiveProp } from "../../hooks";
import { useTheme } from "../../theme";
import { Text } from "../text";
import { avatarStyle, responsiveAvatarSizeStyle } from "./styles";
const Root = styled.div(responsiveAvatarSizeStyle, avatarStyle.root);
const Arrow = styled.div(avatarStyle.arrow);
const BgStroke = styled.ellipse(avatarStyle.bgStroke);
const Stroke = styled.ellipse(avatarStyle.stroke);
const Initials = styled.div(avatarStyle.initials);
const Avatar = forwardRef(function Avatar2(props, ref) {
  const _a = props, {
    as: asProp,
    color: colorKey = "gray",
    src,
    title,
    initials,
    onImageLoadError,
    arrowPosition: arrowPositionProp,
    animateArrowFrom,
    status = "online",
    size: sizeProp
  } = _a, restProps = __objRest(_a, [
    "as",
    "color",
    "src",
    "title",
    "initials",
    "onImageLoadError",
    "arrowPosition",
    "animateArrowFrom",
    "status",
    "size"
  ]);
  const as = ReactIs.isValidElementType(asProp) ? asProp : "div";
  const size = useResponsiveProp(sizeProp, [0]);
  const theme = useTheme();
  const color = theme.sanity.color.spot[colorKey] || theme.sanity.color.spot.gray;
  const avatarSize = theme.sanity.avatar.sizes[size[0]] || theme.sanity.avatar.sizes[0];
  const _sizeRem = avatarSize.size;
  const _radius = _sizeRem / 2;
  const elementId = useId() || "";
  const [arrowPosition, setArrowPosition] = useState(animateArrowFrom || arrowPositionProp || "inside");
  const [imageFailed, setImageFailed] = useState(false);
  const imageId = `avatar-image-${elementId}`;
  useEffect(() => {
    if (arrowPosition === arrowPositionProp)
      return void 0;
    const raf = requestAnimationFrame(() => setArrowPosition(arrowPositionProp));
    return () => cancelAnimationFrame(raf);
  }, [arrowPosition, arrowPositionProp]);
  useEffect(() => {
    if (src)
      setImageFailed(false);
  }, [src]);
  const handleImageError = useCallback(() => {
    setImageFailed(true);
    if (onImageLoadError) {
      onImageLoadError(new Error("Avatar: the image failed to load"));
    }
  }, [onImageLoadError]);
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    as,
    "data-as": typeof as === "string" ? as : void 0,
    "data-ui": "Avatar"
  }, restProps), {
    $size: size,
    $color: color,
    "aria-label": title,
    "data-arrow-position": arrowPosition,
    "data-status": status,
    ref,
    title
  }), /* @__PURE__ */ React.createElement(Arrow, null, /* @__PURE__ */ React.createElement("svg", {
    width: "11",
    height: "7",
    viewBox: "0 0 11 7",
    fill: "none"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M6.67948 1.50115L11 7L0 7L4.32052 1.50115C4.92109 0.736796 6.07891 0.736795 6.67948 1.50115Z",
    fill: color
  }))), !imageFailed && src && /* @__PURE__ */ React.createElement("svg", {
    viewBox: `0 0 ${_sizeRem} ${_sizeRem}`,
    fill: "none"
  }, /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("pattern", {
    id: imageId,
    patternContentUnits: "objectBoundingBox",
    width: "1",
    height: "1"
  }, /* @__PURE__ */ React.createElement("image", {
    href: src,
    width: "1",
    height: "1",
    onError: handleImageError
  }))), /* @__PURE__ */ React.createElement("circle", {
    cx: _radius,
    cy: _radius,
    r: _radius,
    fill: `url(#${imageId})`
  }), /* @__PURE__ */ React.createElement(BgStroke, {
    cx: _radius,
    cy: _radius,
    rx: _radius,
    ry: _radius,
    vectorEffect: "non-scaling-stroke"
  }), /* @__PURE__ */ React.createElement(Stroke, {
    cx: _radius,
    cy: _radius,
    rx: _radius,
    ry: _radius,
    stroke: color,
    vectorEffect: "non-scaling-stroke"
  })), (imageFailed || !src) && initials && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Initials, null, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    size: size.map((s) => s === 0 ? 0 : s + 1)
  }, /* @__PURE__ */ React.createElement("strong", null, initials)))));
});
export {
  Avatar
};
