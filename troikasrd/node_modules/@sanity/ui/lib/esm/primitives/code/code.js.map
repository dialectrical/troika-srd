{
  "version": 3,
  "sources": ["../../../../src/primitives/code/code.tsx"],
  "sourcesContent": ["import React, {forwardRef} from 'react'\nimport Refractor from 'react-refractor'\nimport styled from 'styled-components'\nimport {responsiveCodeFontStyle, ResponsiveFontStyleProps} from '../../styles/internal'\nimport {codeBaseStyle} from './styles'\n\n/**\n * @public\n */\nexport interface CodeProps {\n  as?: React.ElementType | keyof JSX.IntrinsicElements\n  language?: string\n  size?: number | number[]\n  weight?: string\n}\n\nconst Root = styled.pre<ResponsiveFontStyleProps>(codeBaseStyle, responsiveCodeFontStyle)\n\n/**\n * @public\n */\nexport const Code = forwardRef(function Code(\n  props: CodeProps & Omit<React.HTMLProps<HTMLElement>, 'as' | 'size'>,\n  ref: React.ForwardedRef<HTMLElement>\n) {\n  const {children, language: languageProp, size = 2, weight, ...restProps} = props\n  const language = typeof languageProp === 'string' ? languageProp : undefined\n  const registered = language ? Refractor.hasLanguage(language as any) : false\n\n  return (\n    <Root data-ui=\"Code\" {...restProps} $size={size} $weight={weight} ref={ref}>\n      {!(language && registered) && <code>{children}</code>}\n      {language && registered && <Refractor inline language={language} value={String(children)} />}\n    </Root>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAYA,MAAM,OAAO,OAAO,IAA8B,eAAe;AAK1D,MAAM,OAAO,WAAW,eAC7B,OACA,KACA;AACA,QAA2E,YAApE,YAAU,UAAU,cAAc,OAAO,GAAG,WAAwB,IAAb,sBAAa,IAAb,CAAvD,YAAU,YAAwB,QAAU;AACnD,QAAM,WAAW,OAAO,iBAAiB,WAAW,eAAe;AACnE,QAAM,aAAa,WAAW,UAAU,YAAY,YAAmB;AAEvE,SACE,oCAAC,MAAD;AAAA,IAAM,WAAQ;AAAA,KAAW,YAAzB;AAAA,IAAoC,OAAO;AAAA,IAAM,SAAS;AAAA,IAAQ;AAAA,MAC/D,CAAE,aAAY,eAAe,oCAAC,QAAD,MAAO,WACpC,YAAY,cAAc,oCAAC,WAAD;AAAA,IAAW,QAAM;AAAA,IAAC;AAAA,IAAoB,OAAO,OAAO;AAAA;AAAA;",
  "names": []
}
