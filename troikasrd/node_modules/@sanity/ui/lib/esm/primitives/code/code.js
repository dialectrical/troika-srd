var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef } from "react";
import Refractor from "react-refractor";
import styled from "styled-components";
import { responsiveCodeFontStyle } from "../../styles/internal";
import { codeBaseStyle } from "./styles";
const Root = styled.pre(codeBaseStyle, responsiveCodeFontStyle);
const Code = forwardRef(function Code2(props, ref) {
  const _a = props, { children, language: languageProp, size = 2, weight } = _a, restProps = __objRest(_a, ["children", "language", "size", "weight"]);
  const language = typeof languageProp === "string" ? languageProp : void 0;
  const registered = language ? Refractor.hasLanguage(language) : false;
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    "data-ui": "Code"
  }, restProps), {
    $size: size,
    $weight: weight,
    ref
  }), !(language && registered) && /* @__PURE__ */ React.createElement("code", null, children), language && registered && /* @__PURE__ */ React.createElement(Refractor, {
    inline: true,
    language,
    value: String(children)
  }));
});
export {
  Code
};
