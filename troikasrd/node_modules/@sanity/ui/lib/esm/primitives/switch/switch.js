var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef, useEffect } from "react";
import styled from "styled-components";
import { useForwardedRef } from "../../hooks";
import {
  switchBaseStyles,
  switchRepresentationStyles,
  switchThumbStyles,
  switchTrackStyles,
  switchInputStyles
} from "./styles";
const Root = styled.span(switchBaseStyles);
const Input = styled.input(switchInputStyles);
const Representation = styled.span(switchRepresentationStyles);
const Track = styled.span(switchTrackStyles);
const Thumb = styled.span(switchThumbStyles);
const Switch = forwardRef(function Switch2(props, forwardedRef) {
  const _a = props, { checked, className, disabled, indeterminate, readOnly, style } = _a, restProps = __objRest(_a, ["checked", "className", "disabled", "indeterminate", "readOnly", "style"]);
  const ref = useForwardedRef(forwardedRef);
  useEffect(() => {
    if (ref.current) {
      ref.current.indeterminate = indeterminate || false;
    }
  }, [indeterminate, ref]);
  return /* @__PURE__ */ React.createElement(Root, {
    className,
    "data-ui": "Switch",
    style
  }, /* @__PURE__ */ React.createElement(Input, __spreadProps(__spreadValues({
    "data-read-only": !disabled && readOnly ? "" : void 0
  }, restProps), {
    checked: indeterminate !== true && checked,
    disabled: disabled || readOnly,
    type: "checkbox",
    ref
  })), /* @__PURE__ */ React.createElement(Representation, {
    "aria-hidden": true,
    "data-name": "representation"
  }, /* @__PURE__ */ React.createElement(Track, null), /* @__PURE__ */ React.createElement(Thumb, {
    $checked: checked,
    $indeterminate: indeterminate
  })));
});
export {
  Switch
};
