var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { cloneElement, forwardRef, useCallback, useEffect, useMemo, useState } from "react";
import { usePopper } from "react-popper";
import styled, { css } from "styled-components";
import { EMPTY_RECORD } from "../../constants";
import { useForwardedRef } from "../../hooks";
import { useTheme } from "../../theme";
import { Layer, Portal, useBoundaryElement, usePortal } from "../../utils";
import { Card } from "../card";
import { responsiveContainerWidthStyle } from "../container/styles";
import { PopoverArrow } from "./arrow";
import { usePopoverModifiers } from "./modifiers";
const Root = styled(Layer)(({ $preventOverflow }) => css`
    pointer-events: none;
    display: flex;
    flex-direction: column;
    max-width: calc(100% - 16px);

    & > * {
      min-height: 0;
    }

    /* Hide the popover when the reference element is out of bounds */
    ${$preventOverflow && css`
      &[data-popper-reference-hidden='true'] {
        display: none;
      }
    `}
  `);
const PopoverCard = styled(Card)(({ $constrainSize }) => css`
    flex: 1;
    max-height: ${$constrainSize && "100%"};
    pointer-events: all;

    && {
      display: flex;
    }

    flex-direction: column;

    & > * {
      min-height: 0;
    }

    ${responsiveContainerWidthStyle}
  `);
const Popover = forwardRef(function Popover2(props, ref) {
  var _a;
  const boundaryElementContext = useBoundaryElement();
  const theme = useTheme();
  const _b = props, {
    __unstable_margins: margins,
    allowedAutoPlacements,
    arrow = true,
    boundaryElement: boundaryElementProp = boundaryElementContext.element,
    children: child,
    content,
    constrainSize,
    disabled,
    fallbackPlacements,
    open = false,
    padding,
    placement = "bottom",
    portal: portalProp = false,
    preventOverflow,
    radius = 3,
    referenceElement: referenceElementProp,
    matchReferenceWidth,
    shadow = 3,
    scheme,
    style = EMPTY_RECORD,
    tether,
    tetherOffset,
    tone = "inherit",
    width = 0,
    zOffset = (_a = theme.sanity.layer) == null ? void 0 : _a.popover.zOffset
  } = _b, restProps = __objRest(_b, [
    "__unstable_margins",
    "allowedAutoPlacements",
    "arrow",
    "boundaryElement",
    "children",
    "content",
    "constrainSize",
    "disabled",
    "fallbackPlacements",
    "open",
    "padding",
    "placement",
    "portal",
    "preventOverflow",
    "radius",
    "referenceElement",
    "matchReferenceWidth",
    "shadow",
    "scheme",
    "style",
    "tether",
    "tetherOffset",
    "tone",
    "width",
    "zOffset"
  ]);
  const forwardedRef = useForwardedRef(ref);
  const portal = usePortal();
  const [referenceElement, setReferenceElement] = useState(null);
  const [popperElement, setPopperElement] = useState(null);
  const [arrowElement, setArrowElement] = useState(null);
  const popperReferenceElement = referenceElementProp || referenceElement;
  const modifiers = usePopoverModifiers({
    allowedAutoPlacements,
    arrow,
    arrowElement,
    boundaryElement: boundaryElementProp || portal.boundaryElement,
    constrainSize,
    distance: arrow ? 4 : 0,
    fallbackPlacements,
    margins,
    matchReferenceWidth,
    open,
    preventOverflow,
    skidding: 0,
    tether,
    tetherOffset
  });
  const popper = usePopper(popperReferenceElement, popperElement, {
    placement,
    modifiers
  });
  const { attributes, forceUpdate, styles } = popper;
  const setRef = useCallback((el) => {
    const childRef = child.ref;
    setReferenceElement(el);
    if (typeof childRef === "function") {
      childRef(el);
    } else if (childRef) {
      childRef.current = el;
    }
  }, [child]);
  const setRootRef = useCallback((el) => {
    setPopperElement(el);
    forwardedRef.current = el;
  }, [forwardedRef]);
  const popoverStyle = useMemo(() => __spreadValues(__spreadValues({}, style), styles.popper), [style, styles]);
  useEffect(() => {
    if (forceUpdate) {
      try {
        forceUpdate();
      } catch (_) {
      }
    }
  }, [content, forceUpdate, open, popperReferenceElement]);
  if (disabled) {
    return child || /* @__PURE__ */ React.createElement(React.Fragment, null);
  }
  const node = /* @__PURE__ */ React.createElement(Root, __spreadValues(__spreadProps(__spreadValues({
    "data-ui": "Popover"
  }, restProps), {
    $preventOverflow: preventOverflow,
    ref: setRootRef,
    style: popoverStyle,
    zOffset
  }), attributes.popper), /* @__PURE__ */ React.createElement(PopoverCard, {
    $constrainSize: constrainSize,
    "data-ui": "PopoverCard",
    padding,
    radius,
    scheme,
    shadow,
    tone,
    width
  }, arrow && /* @__PURE__ */ React.createElement(PopoverArrow, {
    ref: setArrowElement,
    style: styles.arrow
  }), content));
  return /* @__PURE__ */ React.createElement(React.Fragment, null, child && !referenceElementProp ? cloneElement(child, { ref: setRef }) : child || /* @__PURE__ */ React.createElement(React.Fragment, null), open && /* @__PURE__ */ React.createElement(React.Fragment, null, portalProp && /* @__PURE__ */ React.createElement(Portal, null, node), !portalProp && node));
});
export {
  Popover
};
