var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { CloseIcon } from "@sanity/icons";
import React, { createElement, forwardRef, isValidElement, useCallback, useMemo } from "react";
import { isValidElementType } from "react-is";
import styled from "styled-components";
import { EMPTY_RECORD } from "../../constants";
import { useForwardedRef, useCustomValidity, useResponsiveProp } from "../../hooks";
import {
  responsiveRadiusStyle,
  responsiveInputPaddingStyle,
  textInputBaseStyle,
  textInputFontSizeStyle,
  textInputRepresentationStyle,
  textInputRootStyle
} from "../../styles/internal";
import { Box } from "../box";
import { Button } from "../button";
import { Card } from "../card";
import { Text } from "../text";
const CLEAR_BUTTON_BOX_STYLE = { zIndex: 2 };
const Root = styled.span(textInputRootStyle);
const InputRoot = styled.span`
  flex: 1;
  min-width: 0;
  display: block;
  position: relative;
`;
const Prefix = styled(Card).attrs({ forwardedAs: "span" })`
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
const Suffix = styled(Card).attrs({ forwardedAs: "span" })`
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
const Input = styled.input(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
const Presentation = styled.span(responsiveRadiusStyle, textInputRepresentationStyle);
const LeftBox = styled(Box)`
  position: absolute;
  top: 0;
  left: 0;
`;
const RightBox = styled(Box)`
  position: absolute;
  top: 0;
  right: 0;
`;
const TextInput = forwardRef(function TextInput2(props, forwardedRef) {
  const _a = props, {
    border = true,
    clearButton,
    disabled = false,
    fontSize = 2,
    icon,
    iconRight,
    onClear,
    padding: paddingProp = 3,
    prefix,
    radius = 1,
    readOnly,
    space = 3,
    suffix,
    customValidity,
    type = "text"
  } = _a, restProps = __objRest(_a, [
    "border",
    "clearButton",
    "disabled",
    "fontSize",
    "icon",
    "iconRight",
    "onClear",
    "padding",
    "prefix",
    "radius",
    "readOnly",
    "space",
    "suffix",
    "customValidity",
    "type"
  ]);
  const ref = useForwardedRef(forwardedRef);
  const padding = useResponsiveProp(paddingProp);
  const $hasClearButton = Boolean(clearButton);
  const $hasIcon = Boolean(icon);
  const $hasIconRight = Boolean(iconRight);
  const $hasSuffix = Boolean(suffix);
  const $hasPrefix = Boolean(prefix);
  useCustomValidity(ref, customValidity);
  const handleClearMouseDown = useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  const handleClearClick = useCallback((event) => {
    var _a2;
    event.preventDefault();
    event.stopPropagation();
    if (onClear)
      onClear();
    (_a2 = ref.current) == null ? void 0 : _a2.focus();
  }, [onClear, ref]);
  const prefixNode = useMemo(() => prefix && /* @__PURE__ */ React.createElement(Prefix, {
    borderTop: true,
    borderLeft: true,
    borderBottom: true,
    radius,
    sizing: "border",
    tone: "inherit"
  }, /* @__PURE__ */ React.createElement("span", null, prefix)), [prefix, radius]);
  const presentationNode = useMemo(() => /* @__PURE__ */ React.createElement(Presentation, {
    $border: border,
    $hasPrefix,
    $hasSuffix,
    $radius: radius
  }, icon && /* @__PURE__ */ React.createElement(LeftBox, {
    padding
  }, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(icon) && icon, isValidElementType(icon) && createElement(icon))), !$hasClearButton && iconRight && /* @__PURE__ */ React.createElement(RightBox, {
    padding
  }, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(iconRight) && iconRight, isValidElementType(iconRight) && createElement(iconRight)))), [border, fontSize, icon, iconRight, padding, radius, $hasClearButton, $hasPrefix, $hasSuffix]);
  const clearButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding]);
  const clearButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding]);
  const clearButtonProps = useMemo(() => typeof clearButton === "object" ? clearButton : EMPTY_RECORD, [clearButton]);
  const clearButtonNode = useMemo(() => !disabled && !readOnly && clearButton && /* @__PURE__ */ React.createElement(RightBox, {
    padding: clearButtonBoxPadding,
    style: CLEAR_BUTTON_BOX_STYLE
  }, /* @__PURE__ */ React.createElement(Button, __spreadProps(__spreadValues({}, clearButtonProps), {
    "data-qa": "clear-button",
    fontSize,
    icon: CloseIcon,
    mode: "bleed",
    onClick: handleClearClick,
    onMouseDown: handleClearMouseDown,
    padding: clearButtonPadding
  }))), [
    clearButton,
    clearButtonBoxPadding,
    clearButtonPadding,
    clearButtonProps,
    disabled,
    fontSize,
    handleClearClick,
    handleClearMouseDown,
    readOnly
  ]);
  const suffixNode = useMemo(() => suffix && /* @__PURE__ */ React.createElement(Suffix, {
    borderTop: true,
    borderRight: true,
    borderBottom: true,
    radius,
    sizing: "border",
    tone: "inherit"
  }, /* @__PURE__ */ React.createElement("span", null, suffix)), [radius, suffix]);
  return /* @__PURE__ */ React.createElement(Root, {
    "data-ui": "TextInput"
  }, prefixNode, /* @__PURE__ */ React.createElement(InputRoot, null, /* @__PURE__ */ React.createElement(Input, __spreadProps(__spreadValues({
    "data-as": "input"
  }, restProps), {
    $iconLeft: $hasIcon,
    $iconRight: $hasIconRight || $hasClearButton,
    $padding: padding,
    $space: space,
    $fontSize: fontSize,
    disabled,
    readOnly,
    ref,
    type
  })), presentationNode, clearButtonNode), suffixNode);
});
export {
  TextInput
};
