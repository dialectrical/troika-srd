{
  "version": 3,
  "sources": ["../../../../src/primitives/tooltip/tooltip.tsx"],
  "sourcesContent": ["import React, {cloneElement, forwardRef, useCallback, useEffect, useState} from 'react'\nimport {usePopper} from 'react-popper'\nimport styled from 'styled-components'\nimport {useForwardedRef} from '../../hooks'\nimport {useTheme} from '../../theme'\nimport {Placement} from '../../types'\nimport {Layer, LayerProps, Portal, useBoundaryElement} from '../../utils'\nimport {Card} from '../card'\nimport {TooltipArrow} from './tooltipArrow'\n\n/**\n * @public\n */\nexport interface TooltipProps extends Omit<LayerProps, 'as'> {\n  allowedAutoPlacements?: Placement[]\n  boundaryElement?: HTMLElement | null\n  children?: React.ReactElement\n  content?: React.ReactNode\n  disabled?: boolean\n  fallbackPlacements?: Placement[]\n  placement?: Placement\n  portal?: boolean\n}\n\nconst Root = styled(Layer)`\n  pointer-events: none;\n`\n\n/**\n * @public\n */\nexport const Tooltip = forwardRef(function Tooltip(\n  props: TooltipProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'children' | 'content'>,\n  ref: React.ForwardedRef<HTMLDivElement>\n) {\n  const boundaryElementContext = useBoundaryElement()\n  const theme = useTheme()\n  const {\n    allowedAutoPlacements,\n    boundaryElement = boundaryElementContext?.element,\n    children,\n    content,\n    disabled,\n    fallbackPlacements,\n    placement = 'bottom',\n    portal,\n    zOffset = theme.sanity.layer?.tooltip.zOffset,\n    ...restProps\n  } = props\n  const forwardedRef = useForwardedRef(ref)\n  const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\n  const [arrowElement, setArrowElement] = useState<HTMLDivElement | null>(null)\n  const popper = usePopper(referenceElement, popperElement, {\n    placement,\n    modifiers: [\n      {\n        name: 'arrow',\n        options: {\n          element: arrowElement,\n          padding: 4,\n        },\n      },\n      {\n        name: 'preventOverflow',\n        options: {\n          altAxis: true,\n          boundary: boundaryElement || undefined,\n          padding: 4,\n        },\n      },\n      {\n        name: 'offset',\n        options: {offset: [0, 3]},\n      },\n      {\n        name: 'flip',\n        options: {\n          allowedAutoPlacements,\n          fallbackPlacements,\n        },\n      },\n    ],\n  })\n  const {forceUpdate} = popper\n  const [isOpen, setIsOpen] = useState(false)\n  const handleBlur = useCallback(() => setIsOpen(false), [])\n  const handleFocus = useCallback(() => setIsOpen(true), [])\n  const handleMouseEnter = useCallback(() => setIsOpen(true), [])\n  const handleMouseLeave = useCallback(() => setIsOpen(false), [])\n\n  useEffect(() => {\n    if (forceUpdate) forceUpdate()\n  }, [forceUpdate, content])\n\n  // Close when `disabled` changes to `true`\n  useEffect(() => {\n    if (disabled) setIsOpen(false)\n  }, [disabled])\n\n  // Close when `content` changes to falsy\n  useEffect(() => {\n    if (!content) setIsOpen(false)\n  }, [content])\n\n  const setRef = (el: HTMLDivElement | null) => {\n    setPopperElement(el)\n    forwardedRef.current = el\n  }\n\n  if (!children) return <></>\n\n  if (disabled) return children\n\n  const referenceProps = {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref: setReferenceElement,\n  }\n\n  const referenceNode = cloneElement(children, referenceProps)\n\n  const popperNode = (\n    <Root\n      data-ui=\"Tooltip\"\n      {...restProps}\n      {...popper.attributes.popper}\n      ref={setRef}\n      style={popper.styles.popper}\n      zOffset={zOffset}\n    >\n      <Card radius={2} shadow={3}>\n        {content}\n        <TooltipArrow ref={setArrowElement} style={popper.styles.arrow} />\n      </Card>\n    </Root>\n  )\n\n  return (\n    <>\n      {referenceNode}\n\n      {isOpen && (\n        <>\n          {portal && <Portal>{popperNode}</Portal>}\n          {!portal && popperNode}\n        </>\n      )}\n    </>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAgBA,MAAM,OAAO,OAAO;AAAA;AAAA;AAOb,MAAM,UAAU,WAAW,kBAChC,OACA,KACA;AAlCF;AAmCE,QAAM,yBAAyB;AAC/B,QAAM,QAAQ;AACd,QAWI,YAVF;AAAA;AAAA,IACA,kBAAkB,iEAAwB;AAAA,IAC1C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA,UAAU,YAAM,OAAO,UAAb,mBAAoB,QAAQ;AAAA,MAEpC,IADC,sBACD,IADC;AAAA,IATH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGF,QAAM,eAAe,gBAAgB;AACrC,QAAM,CAAC,kBAAkB,uBAAuB,SAA6B;AAC7E,QAAM,CAAC,eAAe,oBAAoB,SAAgC;AAC1E,QAAM,CAAC,cAAc,mBAAmB,SAAgC;AACxE,QAAM,SAAS,UAAU,kBAAkB,eAAe;AAAA,IACxD;AAAA,IACA,WAAW;AAAA,MACT;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA;AAAA;AAAA,MAGb;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS;AAAA,UACT,UAAU,mBAAmB;AAAA,UAC7B,SAAS;AAAA;AAAA;AAAA,MAGb;AAAA,QACE,MAAM;AAAA,QACN,SAAS,EAAC,QAAQ,CAAC,GAAG;AAAA;AAAA,MAExB;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP;AAAA,UACA;AAAA;AAAA;AAAA;AAAA;AAKR,QAAM,EAAC,gBAAe;AACtB,QAAM,CAAC,QAAQ,aAAa,SAAS;AACrC,QAAM,aAAa,YAAY,MAAM,UAAU,QAAQ;AACvD,QAAM,cAAc,YAAY,MAAM,UAAU,OAAO;AACvD,QAAM,mBAAmB,YAAY,MAAM,UAAU,OAAO;AAC5D,QAAM,mBAAmB,YAAY,MAAM,UAAU,QAAQ;AAE7D,YAAU,MAAM;AACd,QAAI;AAAa;AAAA,KAChB,CAAC,aAAa;AAGjB,YAAU,MAAM;AACd,QAAI;AAAU,gBAAU;AAAA,KACvB,CAAC;AAGJ,YAAU,MAAM;AACd,QAAI,CAAC;AAAS,gBAAU;AAAA,KACvB,CAAC;AAEJ,QAAM,SAAS,CAAC,OAA8B;AAC5C,qBAAiB;AACjB,iBAAa,UAAU;AAAA;AAGzB,MAAI,CAAC;AAAU,WAAO;AAEtB,MAAI;AAAU,WAAO;AAErB,QAAM,iBAAiB;AAAA,IACrB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,cAAc;AAAA,IACd,cAAc;AAAA,IACd,KAAK;AAAA;AAGP,QAAM,gBAAgB,aAAa,UAAU;AAE7C,QAAM,aACJ,oCAAC,MAAD;AAAA,IACE,WAAQ;AAAA,KACJ,YACA,OAAO,WAAW,SAHxB;AAAA,IAIE,KAAK;AAAA,IACL,OAAO,OAAO,OAAO;AAAA,IACrB;AAAA,MAEA,oCAAC,MAAD;AAAA,IAAM,QAAQ;AAAA,IAAG,QAAQ;AAAA,KACtB,SACD,oCAAC,cAAD;AAAA,IAAc,KAAK;AAAA,IAAiB,OAAO,OAAO,OAAO;AAAA;AAK/D,SACE,0DACG,eAEA,UACC,0DACG,UAAU,oCAAC,QAAD,MAAS,aACnB,CAAC,UAAU;AAAA;",
  "names": []
}
