var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { SelectIcon } from "@sanity/icons";
import React, { forwardRef } from "react";
import styled from "styled-components";
import { useForwardedRef, useCustomValidity } from "../../hooks";
import { Box } from "../box";
import { Text } from "../text";
import { selectStyle } from "./styles";
const Root = styled.div(selectStyle.root);
const Input = styled.select(selectStyle.input);
const IconBox = styled(Box)(selectStyle.iconBox);
const Select = forwardRef(function Select2(props, forwardedRef) {
  const _a = props, {
    children,
    customValidity,
    disabled,
    fontSize = 2,
    padding = 3,
    radius = 1,
    readOnly,
    space = 3
  } = _a, restProps = __objRest(_a, [
    "children",
    "customValidity",
    "disabled",
    "fontSize",
    "padding",
    "radius",
    "readOnly",
    "space"
  ]);
  const ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  return /* @__PURE__ */ React.createElement(Root, {
    "data-ui": "Select"
  }, /* @__PURE__ */ React.createElement(Input, __spreadProps(__spreadValues({
    "data-read-only": !disabled && readOnly ? "" : void 0,
    "data-ui": "Select"
  }, restProps), {
    $fontSize: fontSize,
    $padding: padding,
    $radius: radius,
    $space: space,
    disabled: disabled || readOnly,
    ref
  }), children), /* @__PURE__ */ React.createElement(IconBox, {
    padding
  }, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, /* @__PURE__ */ React.createElement(SelectIcon, null))));
});
export {
  Select
};
