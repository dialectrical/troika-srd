var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef } from "react";
import { isValidElementType } from "react-is";
import styled from "styled-components";
import {
  responsiveBorderStyle,
  responsiveRadiusStyle,
  responsiveShadowStyle
} from "../../styles/internal";
import { ThemeColorProvider, useRootTheme } from "../../theme";
import { Box } from "../box";
import { cardStyle } from "./styles";
const Root = styled(Box)(responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, cardStyle);
const Card = forwardRef(function Card2(props, ref) {
  const _a = props, {
    pressed = false,
    __unstable_checkered: checkered = false,
    __unstable_focusRing: focusRing = false,
    as: asProp,
    border,
    borderTop,
    borderRight,
    borderBottom,
    borderLeft,
    radius = 0,
    scheme,
    selected,
    shadow,
    tone: toneProp = "default"
  } = _a, restProps = __objRest(_a, [
    "pressed",
    "__unstable_checkered",
    "__unstable_focusRing",
    "as",
    "border",
    "borderTop",
    "borderRight",
    "borderBottom",
    "borderLeft",
    "radius",
    "scheme",
    "selected",
    "shadow",
    "tone"
  ]);
  const as = isValidElementType(asProp) ? asProp : "div";
  const rootTheme = useRootTheme();
  const tone = toneProp === "inherit" ? rootTheme.tone : toneProp;
  return /* @__PURE__ */ React.createElement(ThemeColorProvider, {
    scheme,
    tone
  }, /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    "data-as": typeof as === "string" ? as : void 0,
    "data-checkered": checkered ? "" : void 0,
    "data-pressed": pressed ? "" : void 0,
    "data-scheme": rootTheme.scheme,
    "data-selected": selected ? "" : void 0,
    "data-ui": "Card",
    "data-tone": tone
  }, restProps), {
    $border: border,
    $borderTop: borderTop,
    $borderRight: borderRight,
    $borderBottom: borderBottom,
    $borderLeft: borderLeft,
    $checkered: checkered,
    $focusRing: focusRing,
    $radius: radius,
    $shadow: shadow,
    $tone: tone,
    forwardedAs: as,
    ref,
    selected
  })));
});
export {
  Card
};
