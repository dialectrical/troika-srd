import { css } from "styled-components";
import { _colorVarsStyle } from "../../styles/colorVars";
import { focusRingBorderStyle, focusRingStyle } from "../../styles/focusRing";
function cardStyle(props) {
  return [cardBaseStyle(props), cardColorStyle(props)];
}
function cardBaseStyle(props) {
  const { $checkered, theme } = props;
  const space = theme.sanity.space;
  return css`
    ${$checkered && css`
      background-size: ${space[3]}px ${space[3]}px;
      background-position: 50% 50%;
      background-image: var(--card-bg-image);
    `}

    &[data-as='button'] {
      -webkit-font-smoothing: inherit;
      appearance: none;
      outline: none;
      font: inherit;
      text-align: inherit;
      border: 0;
      width: stretch;
    }

    /* &:is(a) */
    &[data-as='a'] {
      outline: none;
      text-decoration: none;
    }

    /* &:is(pre) */
    &[data-as='pre'] {
      font: inherit;
    }
  `;
}
function cardColorStyle(props) {
  var _a, _b;
  const { $checkered, $focusRing, theme } = props;
  const { focusRing } = theme.sanity;
  const { base, card } = theme.sanity.color;
  const border = { width: 0, color: "var(--card-border-color)" };
  return css`
    ${_colorVarsStyle(base, card.enabled, $checkered)}

    background-color: var(--card-bg-color);
    color: var(--card-fg-color);

    /* &:is(button) */
    &[data-as='button'] {
      --card-focus-ring-box-shadow: none;

      box-shadow: var(--card-focus-ring-box-shadow);

      &:disabled {
        ${_colorVarsStyle(base, card.disabled, $checkered)}
      }

      &:not(:disabled) {
        &[data-pressed],
        &[aria-pressed='true'] {
          ${_colorVarsStyle(base, card.pressed, $checkered)}
        }

        &[data-selected],
        [aria-selected='true'] > & {
          ${_colorVarsStyle(base, card.selected, $checkered)}
        }

        @media (hover: hover) {
          &:not([data-pressed]):not([aria-pressed='true']):not([data-selected]) {
            &:hover {
              ${_colorVarsStyle(base, card.hovered, $checkered)}
            }

            &:active {
              ${_colorVarsStyle(base, card.pressed, $checkered)}
            }
          }
        }

        &:focus {
          --card-focus-ring-box-shadow: ${$focusRing ? focusRingStyle({ base, border, focusRing }) : void 0};
        }

        &:focus:not(:focus-visible) {
          --card-focus-ring-box-shadow: ${$focusRing ? focusRingBorderStyle(border) : void 0};
        }
      }
    }

    /* &:is(a) */
    &[data-as='a'] {
      box-shadow: var(--card-focus-ring-box-shadow);

      &[data-disabled] {
        ${_colorVarsStyle(base, card.disabled, $checkered)}
      }

      &:not([data-disabled]) {
        &[data-pressed] {
          ${_colorVarsStyle(base, card.pressed, $checkered)}
        }

        &[data-selected],
        [aria-selected='true'] > & {
          ${_colorVarsStyle(base, card.selected, $checkered)}
        }

        @media (hover: hover) {
          &:not([data-pressed]):not([data-selected]) {
            &:hover {
              ${_colorVarsStyle(base, card.hovered, $checkered)}
            }

            &:active {
              ${_colorVarsStyle(base, card.pressed, $checkered)}
            }
          }
        }

        &:focus {
          --card-focus-ring-box-shadow: ${$focusRing ? focusRingStyle({ base, border, focusRing }) : void 0};
        }

        &:focus:not(:focus-visible) {
          --card-focus-ring-box-shadow: ${$focusRing ? focusRingBorderStyle(border) : void 0};
        }
      }
    }

    ${(_b = (_a = theme.sanity.styles) == null ? void 0 : _a.card) == null ? void 0 : _b.root}
  `;
}
export {
  cardBaseStyle,
  cardColorStyle,
  cardStyle
};
