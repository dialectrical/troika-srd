var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { createElement, forwardRef, isValidElement, useMemo } from "react";
import { isValidElementType } from "react-is";
import styled from "styled-components";
import { responsiveRadiusStyle } from "../../styles/internal";
import { useTheme } from "../../theme";
import { Box } from "../box";
import { Flex } from "../flex";
import { Spinner } from "../spinner";
import { Text } from "../text";
import { buttonBaseStyles, buttonColorStyles } from "./styles";
const Root = styled.button(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles);
const LoadingBox = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--card-bg-color);
  border-radius: inherit;
  z-index: 1;
  box-shadow: inherit;
`;
const Button = forwardRef(function Button2(props, ref) {
  const _a = props, {
    children,
    disabled,
    fontSize,
    icon,
    iconRight,
    justify = "center",
    loading,
    mode = "default",
    padding = 3,
    paddingX,
    paddingY,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
    radius = 2,
    selected,
    space = 3,
    text,
    textAlign,
    tone = "default",
    type = "button"
  } = _a, restProps = __objRest(_a, [
    "children",
    "disabled",
    "fontSize",
    "icon",
    "iconRight",
    "justify",
    "loading",
    "mode",
    "padding",
    "paddingX",
    "paddingY",
    "paddingTop",
    "paddingBottom",
    "paddingLeft",
    "paddingRight",
    "radius",
    "selected",
    "space",
    "text",
    "textAlign",
    "tone",
    "type"
  ]);
  const theme = useTheme();
  const boxProps = useMemo(() => ({
    padding,
    paddingX,
    paddingY,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight
  }), [padding, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight]);
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    "data-ui": "Button"
  }, restProps), {
    $mode: mode,
    $radius: radius,
    $tone: tone,
    "data-disabled": Boolean(loading || disabled),
    "data-selected": selected ? "" : void 0,
    disabled: Boolean(loading || disabled),
    ref,
    type
  }), Boolean(loading) && /* @__PURE__ */ React.createElement(LoadingBox, null, /* @__PURE__ */ React.createElement(Spinner, null)), (icon || text || iconRight) && /* @__PURE__ */ React.createElement(Box, __spreadValues({
    as: "span"
  }, boxProps), /* @__PURE__ */ React.createElement(Flex, {
    as: "span",
    justify
  }, icon && /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(icon) && icon, isValidElementType(icon) && createElement(icon)), text && /* @__PURE__ */ React.createElement(Box, {
    flex: iconRight ? 1 : void 0,
    marginLeft: icon ? space : void 0,
    marginRight: iconRight ? space : void 0
  }, /* @__PURE__ */ React.createElement(Text, {
    align: textAlign,
    size: fontSize,
    textOverflow: "ellipsis",
    weight: theme.sanity.button.textWeight
  }, text)), iconRight && /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(iconRight) && iconRight, isValidElementType(iconRight) && createElement(iconRight)))), children && /* @__PURE__ */ React.createElement(Box, __spreadValues({
    as: "span"
  }, boxProps), children));
});
export {
  Button
};
