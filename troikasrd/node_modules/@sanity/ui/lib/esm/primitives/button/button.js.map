{
  "version": 3,
  "sources": ["../../../../src/primitives/button/button.tsx"],
  "sourcesContent": ["import React, {createElement, forwardRef, isValidElement, useMemo} from 'react'\nimport {isValidElementType} from 'react-is'\nimport styled from 'styled-components'\nimport {ThemeProps} from '../../styles'\nimport {responsiveRadiusStyle, ResponsiveRadiusStyleProps} from '../../styles/internal'\nimport {useTheme} from '../../theme'\nimport {ButtonMode, ButtonTextAlign, ButtonTone, FlexJustify} from '../../types'\nimport {Box} from '../box'\nimport {Flex} from '../flex'\nimport {Spinner} from '../spinner'\nimport {Text} from '../text'\nimport {ResponsivePaddingProps, ResponsiveRadiusProps} from '../types'\nimport {buttonBaseStyles, buttonColorStyles} from './styles'\n\n/**\n * @public\n */\nexport interface ButtonProps extends ResponsivePaddingProps, ResponsiveRadiusProps {\n  as?: React.ElementType | keyof JSX.IntrinsicElements\n  fontSize?: number | number[]\n  mode?: ButtonMode\n  icon?: React.ComponentType | React.ReactNode\n  iconRight?: React.ComponentType | React.ReactNode\n  justify?: FlexJustify | FlexJustify[]\n  /**\n   * @beta Do not use in production, as this might change.\n   */\n  loading?: boolean\n  selected?: boolean\n  space?: number | number[]\n  textAlign?: ButtonTextAlign\n  text?: React.ReactNode\n  tone?: ButtonTone\n  type?: 'button' | 'reset' | 'submit'\n}\n\nconst Root = styled.button<\n  {$mode: ButtonMode; $tone: ButtonTone} & ResponsiveRadiusStyleProps & ThemeProps\n>(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles)\n\nconst LoadingBox = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--card-bg-color);\n  border-radius: inherit;\n  z-index: 1;\n  box-shadow: inherit;\n`\n\n/**\n * @public\n */\nexport const Button = forwardRef(function Button(\n  props: ButtonProps & Omit<React.HTMLProps<HTMLButtonElement>, 'as'>,\n  ref: React.ForwardedRef<HTMLButtonElement>\n) {\n  const {\n    children,\n    disabled,\n    fontSize,\n    icon,\n    iconRight,\n    justify = 'center',\n    loading,\n    mode = 'default',\n    padding = 3,\n    paddingX,\n    paddingY,\n    paddingTop,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    radius = 2,\n    selected,\n    space = 3,\n    text,\n    textAlign,\n    tone = 'default',\n    type = 'button',\n    ...restProps\n  } = props\n\n  const theme = useTheme()\n\n  const boxProps = useMemo(\n    () => ({\n      // flex: 1,\n      padding,\n      paddingX,\n      paddingY,\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n    }),\n    [padding, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight]\n  )\n\n  return (\n    <Root\n      data-ui=\"Button\"\n      {...restProps}\n      $mode={mode}\n      $radius={radius}\n      $tone={tone}\n      data-disabled={Boolean(loading || disabled)}\n      data-selected={selected ? '' : undefined}\n      disabled={Boolean(loading || disabled)}\n      ref={ref}\n      type={type}\n    >\n      {Boolean(loading) && (\n        <LoadingBox>\n          <Spinner />\n        </LoadingBox>\n      )}\n\n      {(icon || text || iconRight) && (\n        <Box as=\"span\" {...boxProps}>\n          <Flex as=\"span\" justify={justify}>\n            {icon && (\n              <Text size={fontSize}>\n                {isValidElement(icon) && icon}\n                {isValidElementType(icon) && createElement(icon)}\n              </Text>\n            )}\n\n            {text && (\n              <Box\n                flex={iconRight ? 1 : undefined}\n                marginLeft={icon ? space : undefined}\n                marginRight={iconRight ? space : undefined}\n              >\n                <Text\n                  align={textAlign}\n                  size={fontSize}\n                  textOverflow=\"ellipsis\"\n                  weight={theme.sanity.button.textWeight}\n                >\n                  {text}\n                </Text>\n              </Box>\n            )}\n\n            {iconRight && (\n              <Text size={fontSize}>\n                {isValidElement(iconRight) && iconRight}\n                {isValidElementType(iconRight) && createElement(iconRight)}\n              </Text>\n            )}\n          </Flex>\n        </Box>\n      )}\n\n      {children && (\n        <Box as=\"span\" {...boxProps}>\n          {children}\n        </Box>\n      )}\n    </Root>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAwBA,MAAM,OAAO,OAAO,OAElB,uBAAuB,kBAAkB;AAE3C,MAAM,aAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBnB,MAAM,SAAS,WAAW,iBAC/B,OACA,KACA;AACA,QAwBI,YAvBF;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA,OAAO;AAAA,IACP,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,OAAO;AAAA,MAEL,IADC,sBACD,IADC;AAAA,IAtBH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAIF,QAAM,QAAQ;AAEd,QAAM,WAAW,QACf,MAAO;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MAEF,CAAC,SAAS,UAAU,UAAU,YAAY,eAAe,aAAa;AAGxE,SACE,oCAAC,MAAD;AAAA,IACE,WAAQ;AAAA,KACJ,YAFN;AAAA,IAGE,OAAO;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,IACP,iBAAe,QAAQ,WAAW;AAAA,IAClC,iBAAe,WAAW,KAAK;AAAA,IAC/B,UAAU,QAAQ,WAAW;AAAA,IAC7B;AAAA,IACA;AAAA,MAEC,QAAQ,YACP,oCAAC,YAAD,MACE,oCAAC,SAAD,QAIF,SAAQ,QAAQ,cAChB,oCAAC,KAAD;AAAA,IAAK,IAAG;AAAA,KAAW,WACjB,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,IAAO;AAAA,KACb,QACC,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KACT,eAAe,SAAS,MACxB,mBAAmB,SAAS,cAAc,QAI9C,QACC,oCAAC,KAAD;AAAA,IACE,MAAM,YAAY,IAAI;AAAA,IACtB,YAAY,OAAO,QAAQ;AAAA,IAC3B,aAAa,YAAY,QAAQ;AAAA,KAEjC,oCAAC,MAAD;AAAA,IACE,OAAO;AAAA,IACP,MAAM;AAAA,IACN,cAAa;AAAA,IACb,QAAQ,MAAM,OAAO,OAAO;AAAA,KAE3B,QAKN,aACC,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KACT,eAAe,cAAc,WAC7B,mBAAmB,cAAc,cAAc,eAOzD,YACC,oCAAC,KAAD;AAAA,IAAK,IAAG;AAAA,KAAW,WAChB;AAAA;",
  "names": []
}
