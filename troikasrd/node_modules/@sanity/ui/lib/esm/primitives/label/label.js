var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef } from "react";
import styled from "styled-components";
import { responsiveLabelFont, responsiveTextAlignStyle } from "../../styles/internal";
import { labelBaseStyle } from "./styles";
const Root = styled.div(responsiveLabelFont, responsiveTextAlignStyle, labelBaseStyle);
const SpanWithTextOverflow = styled.span`
  display: block;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
`;
const Label = forwardRef(function Label2(props, ref) {
  const _a = props, {
    accent,
    align,
    children: childrenProp,
    muted = false,
    size = 2,
    textOverflow,
    weight
  } = _a, restProps = __objRest(_a, [
    "accent",
    "align",
    "children",
    "muted",
    "size",
    "textOverflow",
    "weight"
  ]);
  let children = childrenProp;
  if (textOverflow === "ellipsis") {
    children = /* @__PURE__ */ React.createElement(SpanWithTextOverflow, null, children);
  } else {
    children = /* @__PURE__ */ React.createElement("span", null, children);
  }
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    "data-ui": "Label"
  }, restProps), {
    $accent: accent,
    $align: align,
    $muted: muted,
    $size: size,
    $weight: weight,
    ref
  }), children);
});
export {
  Label
};
