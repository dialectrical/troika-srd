var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef, useCallback, useEffect, useMemo, useState } from "react";
import { useForwardedRef } from "../../hooks";
import { useTheme } from "../../theme";
import { ResizeObserver } from "../resizeObserver";
import { findMaxBreakpoints, findMinBreakpoints } from "./helpers";
const ElementQuery = forwardRef(function ElementQuery2(props, ref) {
  const theme = useTheme();
  const _a = props, { children, media = theme.sanity.media } = _a, restProps = __objRest(_a, ["children", "media"]);
  const [width, setWidth] = useState(() => window.innerWidth);
  const forwardedRef = useForwardedRef(ref);
  const [element, setElement] = useState(null);
  useEffect(() => {
    if (!element)
      return;
    const handleResizeEntries = (entries) => {
      setWidth(entries[0].contentRect.width);
    };
    const ro = new ResizeObserver(handleResizeEntries);
    ro.observe(element);
    return () => ro.disconnect();
  }, [element]);
  const max = useMemo(() => findMaxBreakpoints(media, width), [media, width]);
  const min = useMemo(() => findMinBreakpoints(media, width), [media, width]);
  const setRef = useCallback((el) => {
    forwardedRef.current = el;
    setElement(el);
  }, [forwardedRef]);
  return /* @__PURE__ */ React.createElement("div", __spreadProps(__spreadValues({
    "data-ui": "ElementQuery"
  }, restProps), {
    "data-eq-max": max.length ? max.join(" ") : void 0,
    "data-eq-min": min.length ? min.join(" ") : void 0,
    ref: setRef
  }), children);
});
export {
  ElementQuery
};
