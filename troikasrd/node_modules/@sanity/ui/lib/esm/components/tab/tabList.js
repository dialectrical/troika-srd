var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { cloneElement, forwardRef, useCallback, useMemo, useState } from "react";
import { Inline } from "../../primitives";
function _isReactElement(node) {
  return Boolean(node);
}
const TabList = forwardRef(function TabList2(props, ref) {
  const _a = props, { children: childrenProp } = _a, restProps = __objRest(_a, ["children"]);
  const [focusedIndex, setFocusedIndex] = useState(-1);
  const children = useMemo(() => childrenProp.filter(_isReactElement), [childrenProp]);
  const tabs = children.map((child, childIndex) => cloneElement(child, {
    focused: focusedIndex === childIndex,
    key: childIndex,
    onFocus: () => handleTabFocus(childIndex)
  }));
  const numTabs = tabs.length;
  const handleTabFocus = useCallback((tabIdx) => {
    setFocusedIndex(tabIdx);
  }, []);
  const handleKeyDown = useCallback((event) => {
    if (event.key === "ArrowLeft") {
      setFocusedIndex((prevIndex) => (prevIndex + numTabs - 1) % numTabs);
    }
    if (event.key === "ArrowRight") {
      setFocusedIndex((prevIndex) => (prevIndex + 1) % numTabs);
    }
  }, [numTabs]);
  return /* @__PURE__ */ React.createElement(Inline, __spreadProps(__spreadValues({
    "data-ui": "TabList"
  }, restProps), {
    onKeyDown: handleKeyDown,
    ref,
    role: "tablist"
  }), tabs);
});
export {
  TabList
};
