var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { CloseIcon } from "@sanity/icons";
import React, { forwardRef, useCallback, useEffect, useRef, useState } from "react";
import styled from "styled-components";
import { focusFirstDescendant, focusLastDescendant } from "../../helpers";
import { useClickOutside, useGlobalKeyDown } from "../../hooks";
import { Box, Button, Card, Container, Flex, Text } from "../../primitives";
import { responsivePaddingStyle } from "../../styles/internal";
import { useTheme } from "../../theme";
import { Layer, Portal, useLayer } from "../../utils";
import {
  dialogStyle,
  responsiveDialogPositionStyle
} from "./styles";
import { useDialog } from "./useDialog";
const Root = styled(Layer)(responsivePaddingStyle, dialogStyle, responsiveDialogPositionStyle);
const DialogContainer = styled(Container)`
  &:not([hidden]) {
    display: flex;
  }
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;
const DialogCardRoot = styled(Card)`
  &:not([hidden]) {
    display: flex;
  }
  width: 100%;
  min-height: 0;
  max-height: 100%;
  overflow: hidden;
`;
const DialogLayout = styled(Flex)`
  flex: 1;
  min-height: 0;
  width: 100%;
`;
const DialogHeader = styled(Card)`
  position: relative;
  z-index: 2;

  &:after {
    content: '';
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    bottom: -1px;
    border-bottom: 1px solid var(--card-hairline-soft-color);
  }
`;
const DialogContent = styled(Box)`
  position: relative;
  z-index: 1;
  overflow: auto;
  outline: none;
`;
const DialogFooter = styled(Box)`
  position: relative;
  z-index: 3;
  border-top: 1px solid var(--card-hairline-soft-color);
`;
const DialogCard = forwardRef(function DialogCard2(props, ref) {
  const {
    __unstable_autoFocus: autoFocus,
    __unstable_hideCloseButton: hideCloseButton,
    children,
    contentRef,
    footer,
    header,
    id,
    onClickOutside,
    onClose,
    radius,
    scheme,
    shadow,
    width
  } = props;
  const [rootElement, setRootElement] = useState(null);
  const localContentRef = useRef(null);
  const layer = useLayer();
  const { isTopLayer } = layer;
  const labelId = `${id}_label`;
  const showCloseButton = Boolean(onClose) && hideCloseButton === false;
  const showHeader = Boolean(header) || showCloseButton;
  useEffect(() => {
    if (!autoFocus)
      return;
    if (localContentRef.current) {
      focusFirstDescendant(localContentRef.current);
    }
  }, [autoFocus]);
  useGlobalKeyDown(useCallback((event) => {
    if (!isTopLayer || !onClose)
      return;
    if (event.key === "Escape") {
      event.preventDefault();
      event.stopPropagation();
      onClose();
    }
  }, [isTopLayer, onClose]));
  useClickOutside(useCallback(() => {
    if (!isTopLayer || !onClickOutside)
      return;
    onClickOutside();
  }, [isTopLayer, onClickOutside]), [rootElement]);
  const setRef = useCallback((el) => {
    setRootElement(el);
    if (typeof ref === "function")
      ref(el);
    else if (ref)
      ref.current = el;
  }, [ref]);
  const setContentRef = useCallback((el) => {
    localContentRef.current = el;
    if (typeof contentRef === "function")
      contentRef(el);
    else if (contentRef)
      contentRef.current = el;
  }, [contentRef]);
  return /* @__PURE__ */ React.createElement(DialogContainer, {
    "data-ui": "DialogCard",
    width
  }, /* @__PURE__ */ React.createElement(DialogCardRoot, {
    radius,
    ref: setRef,
    scheme,
    shadow
  }, /* @__PURE__ */ React.createElement(DialogLayout, {
    direction: "column"
  }, showHeader && /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement(Flex, null, /* @__PURE__ */ React.createElement(Box, {
    flex: 1,
    padding: 4
  }, header && /* @__PURE__ */ React.createElement(Text, {
    id: labelId,
    weight: "semibold"
  }, header)), showCloseButton && /* @__PURE__ */ React.createElement(Box, {
    padding: 2
  }, /* @__PURE__ */ React.createElement(Button, {
    "aria-label": "Close dialog",
    disabled: !onClose,
    icon: CloseIcon,
    mode: "bleed",
    onClick: onClose,
    padding: 3
  })))), /* @__PURE__ */ React.createElement(DialogContent, {
    flex: 1,
    ref: setContentRef,
    tabIndex: -1
  }, children), footer && /* @__PURE__ */ React.createElement(DialogFooter, null, footer))));
});
const Dialog = forwardRef(function Dialog2(props, ref) {
  var _a;
  const dialog = useDialog();
  const theme = useTheme();
  const _b = props, {
    __unstable_autoFocus: autoFocus = true,
    __unstable_hideCloseButton: hideCloseButton = false,
    cardRadius = 3,
    cardShadow = 4,
    children,
    contentRef,
    footer,
    header,
    id,
    onClickOutside,
    onClose,
    padding = 4,
    position = dialog.position || "fixed",
    scheme,
    width = 0,
    zOffset = dialog.zOffset || ((_a = theme.sanity.layer) == null ? void 0 : _a.dialog.zOffset)
  } = _b, restProps = __objRest(_b, [
    "__unstable_autoFocus",
    "__unstable_hideCloseButton",
    "cardRadius",
    "cardShadow",
    "children",
    "contentRef",
    "footer",
    "header",
    "id",
    "onClickOutside",
    "onClose",
    "padding",
    "position",
    "scheme",
    "width",
    "zOffset"
  ]);
  const preDivRef = useRef(null);
  const postDivRef = useRef(null);
  const cardRef = useRef(null);
  const handleFocus = useCallback((event) => {
    const target = event.target;
    const cardElement = cardRef.current;
    if (!cardElement) {
      return;
    }
    if (target === preDivRef.current) {
      focusLastDescendant(cardElement);
      return;
    }
    if (target === postDivRef.current) {
      focusFirstDescendant(cardElement);
      return;
    }
  }, []);
  const labelId = `${id}_label`;
  return /* @__PURE__ */ React.createElement(Portal, null, /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({}, restProps), {
    $padding: padding,
    $position: position,
    "aria-labelledby": labelId,
    "aria-modal": true,
    "data-ui": "Dialog",
    id,
    onFocus: handleFocus,
    ref,
    role: "dialog",
    zOffset
  }), /* @__PURE__ */ React.createElement("div", {
    ref: preDivRef,
    tabIndex: 0
  }), /* @__PURE__ */ React.createElement(DialogCard, {
    __unstable_autoFocus: autoFocus,
    __unstable_hideCloseButton: hideCloseButton,
    contentRef,
    footer,
    header,
    id,
    onClickOutside,
    onClose,
    radius: cardRadius,
    ref: cardRef,
    scheme,
    shadow: cardShadow,
    width
  }, children), /* @__PURE__ */ React.createElement("div", {
    ref: postDivRef,
    tabIndex: 0
  })));
});
export {
  Dialog
};
