var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { ChevronDownIcon } from "@sanity/icons";
import React, {
  cloneElement,
  forwardRef,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState
} from "react";
import styled from "styled-components";
import { EMPTY_ARRAY } from "../../constants";
import { focusFirstDescendant } from "../../helpers";
import { useForwardedRef, useResponsiveProp } from "../../hooks";
import {
  Box,
  Button,
  Card,
  Popover,
  Spinner,
  Text,
  TextInput
} from "../../primitives";
import { AutocompleteOption } from "./autocompleteOption";
const Root = styled.div`
  position: relative;
`;
const ListBox = styled(Box)`
  & > ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
`;
const ResultsPopover = styled(Popover)`
  & > div {
    min-height: 43px;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  &[data-popper-reference-hidden='true'] {
    display: none;
  }
`;
const LoadingCard = styled(Card)`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  align-items: center;
  justify-content: center;
  transition: opacity 100ms;

  &:not([hidden]) {
    display: flex;
  }
`;
const EMPTY_RECORD = {};
const defaultRenderValue = (value, option) => option ? option.value : value;
const defaultFilterOption = (query, option) => option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
const LIST_IGNORE_KEYS = [
  "Control",
  "Shift",
  "Alt",
  "Enter",
  "Home",
  "End",
  "PageUp",
  "PageDown",
  "Meta",
  "Tab",
  "CapsLock"
];
const InnerAutocomplete = forwardRef(function InnerAutocomplete2(props, ref) {
  const _a = props, {
    border = true,
    customValidity,
    disabled,
    filterOption: filterOptionProp,
    fontSize = 2,
    icon,
    id,
    loading,
    onBlur,
    onChange,
    onFocus,
    onQueryChange,
    onSelect,
    openButton,
    options: optionsProp,
    padding: paddingProp = 3,
    popover = {},
    prefix,
    radius = 2,
    readOnly,
    renderOption: renderOptionProp,
    renderValue = defaultRenderValue,
    value: valueProp = ""
  } = _a, restProps = __objRest(_a, [
    "border",
    "customValidity",
    "disabled",
    "filterOption",
    "fontSize",
    "icon",
    "id",
    "loading",
    "onBlur",
    "onChange",
    "onFocus",
    "onQueryChange",
    "onSelect",
    "openButton",
    "options",
    "padding",
    "popover",
    "prefix",
    "radius",
    "readOnly",
    "renderOption",
    "renderValue",
    "value"
  ]);
  const defaultRenderOption = useCallback(({ value: value2 }) => /* @__PURE__ */ React.createElement(Card, {
    as: "button",
    padding: paddingProp,
    tone: "inherit"
  }, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize,
    textOverflow: "ellipsis"
  }, value2)), [fontSize, paddingProp]);
  const renderOption = typeof renderOptionProp === "function" ? renderOptionProp : defaultRenderOption;
  const filterOption = typeof filterOptionProp === "function" ? filterOptionProp : defaultFilterOption;
  const [value, setValue] = useState(valueProp);
  const [query, setQuery] = useState(null);
  const valueRef = useRef(value);
  const [focused, setFocused] = useState(false);
  const listboxId = `${id}-listbox`;
  const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY;
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const inputRef = useRef(null);
  const listRef = useRef(null);
  const activeItemId = selectedIndex > -1 ? `${id}-option-${selectedIndex}` : void 0;
  const padding = useResponsiveProp(paddingProp);
  const [rootElement, setRootElement] = useState(null);
  const [resultsPopoverElement, setResultsPopoverElement] = useState(null);
  const currentOption = value ? options.find((o) => o.value === value) : void 0;
  const filteredOptions = useMemo(() => options.filter((option) => query ? filterOption(query, option) : true), [filterOption, options, query]);
  const optionsLen = filteredOptions.length;
  const expanded = query !== null && loading || focused && optionsLen > 0 && query !== null;
  const forwardedRef = useForwardedRef(ref);
  const popoverMouseWithinRef = useRef(false);
  const handleRootBlur = useCallback((event) => {
    setTimeout(() => {
      if (popoverMouseWithinRef.current) {
        return;
      }
      const focusedEl = document.activeElement;
      const focusInside = focusedEl && rootElement && rootElement.contains(focusedEl) || focusedEl && resultsPopoverElement && resultsPopoverElement.contains(focusedEl);
      if (!focusInside) {
        setFocused(false);
        setQuery(null);
        if (onQueryChange)
          onQueryChange(null);
        if (onBlur)
          onBlur(event);
      }
    }, 0);
  }, [onBlur, onQueryChange, resultsPopoverElement, rootElement]);
  const handleRootKeyDown = useCallback((event) => {
    var _a2, _b;
    if (event.key === "ArrowDown") {
      event.preventDefault();
      if (!optionsLen)
        return;
      setSelectedIndex((index) => (index + 1) % optionsLen);
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      if (!optionsLen)
        return;
      setSelectedIndex((index) => {
        return index === -1 ? optionsLen - 1 : (optionsLen + index - 1) % optionsLen;
      });
      return;
    }
    if (event.key === "Escape") {
      setFocused(false);
      valueRef.current = "";
      setQuery(null);
      if (onQueryChange)
        onQueryChange(null);
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
      return;
    }
    const target = event.target;
    const listEl = listRef.current;
    if ((listEl === target || (listEl == null ? void 0 : listEl.contains(target))) && !LIST_IGNORE_KEYS.includes(event.key)) {
      (_b = inputRef.current) == null ? void 0 : _b.focus();
      return;
    }
  }, [onQueryChange, optionsLen]);
  const handleInputChange = useCallback((event) => {
    const q = event.currentTarget.value;
    valueRef.current = q;
    setQuery(q);
    if (!focused) {
      setFocused(true);
    }
    if (onQueryChange)
      onQueryChange(q);
  }, [focused, onQueryChange]);
  const handleInputFocus = useCallback((event) => {
    if (!focused) {
      setFocused(true);
      if (onFocus)
        onFocus(event);
    }
  }, [focused, onFocus]);
  const handlePopoverMouseEnter = useCallback(() => {
    popoverMouseWithinRef.current = true;
  }, []);
  const handlePopoverMouseLeave = useCallback(() => {
    popoverMouseWithinRef.current = false;
  }, []);
  const handleClearButtonClick = useCallback(() => {
    var _a2;
    valueRef.current = "";
    setValue("");
    if (onChange)
      onChange("");
    setQuery(null);
    if (onQueryChange)
      onQueryChange(null);
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
  }, [onChange, onQueryChange]);
  const handleClearButtonFocus = useCallback(() => setFocused(true), []);
  const handleOptionSelect = useCallback((v) => {
    var _a2;
    if (onSelect)
      onSelect(v);
    setValue(v);
    if (onChange)
      onChange(v);
    setQuery(null);
    if (onQueryChange)
      onQueryChange(null);
    setFocused(false);
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    popoverMouseWithinRef.current = false;
  }, [onChange, onSelect, onQueryChange]);
  useEffect(() => {
    if (valueProp !== valueRef.current) {
      valueRef.current = valueProp;
      setValue(valueProp);
      setQuery(null);
    }
  }, [valueProp]);
  useEffect(() => setSelectedIndex(-1), [optionsLen]);
  useEffect(() => {
    const listElement = listRef.current;
    if (!listElement)
      return;
    const selectedItemElement = listElement.childNodes[selectedIndex];
    if (selectedItemElement) {
      focusFirstDescendant(selectedItemElement);
    }
  }, [selectedIndex]);
  const setRef = useCallback((el) => {
    inputRef.current = el;
    forwardedRef.current = el;
  }, [forwardedRef]);
  const clearButton = useMemo(() => !disabled && value.length > 0 ? {
    "aria-label": "Clear",
    onFocus: handleClearButtonFocus
  } : void 0, [disabled, handleClearButtonFocus, value]);
  const openButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding]);
  const openButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding]);
  const openButtonProps = useMemo(() => typeof openButton === "object" ? openButton : EMPTY_RECORD, [openButton]);
  const handleOpenClick = useCallback((event) => {
    var _a2;
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    setQuery(query || renderValue(value, currentOption) || "");
    if (openButtonProps.onClick)
      openButtonProps.onClick(event);
  }, [currentOption, openButtonProps, query, renderValue, value]);
  const openButtonNode = useMemo(() => !disabled && !readOnly && openButton ? /* @__PURE__ */ React.createElement(Box, {
    padding: openButtonBoxPadding
  }, /* @__PURE__ */ React.createElement(Button, __spreadProps(__spreadValues({}, openButtonProps), {
    fontSize,
    icon: ChevronDownIcon,
    mode: "bleed",
    onClick: handleOpenClick,
    padding: openButtonPadding
  }))) : void 0, [
    disabled,
    fontSize,
    handleOpenClick,
    openButton,
    openButtonBoxPadding,
    openButtonPadding,
    openButtonProps,
    readOnly
  ]);
  return /* @__PURE__ */ React.createElement(Root, {
    "data-ui": "Autocomplete",
    onBlur: handleRootBlur,
    onKeyDown: handleRootKeyDown,
    ref: setRootElement
  }, /* @__PURE__ */ React.createElement(ResultsPopover, __spreadValues({
    __unstable_margins: [1, 1, 1, 1],
    arrow: false,
    constrainSize: true,
    content: /* @__PURE__ */ React.createElement(ListBox, {
      paddingY: 1,
      tabIndex: -1
    }, /* @__PURE__ */ React.createElement("ul", {
      "aria-multiselectable": false,
      id: listboxId,
      ref: listRef,
      role: "listbox"
    }, filteredOptions.map((option, optionIndex) => /* @__PURE__ */ React.createElement(AutocompleteOption, {
      id: `${id}-option-${optionIndex}`,
      key: option.value,
      onSelect: handleOptionSelect,
      selected: selectedIndex > -1 ? optionIndex === selectedIndex : currentOption === option,
      value: option.value
    }, cloneElement(renderOption(option), { disabled: loading, tabIndex: -1 })))), /* @__PURE__ */ React.createElement(LoadingCard, {
      padding: 3,
      style: { opacity: loading ? 0.5 : 0 }
    }, /* @__PURE__ */ React.createElement(Spinner, null))),
    fallbackPlacements: ["top-start"],
    matchReferenceWidth: true,
    onMouseEnter: handlePopoverMouseEnter,
    onMouseLeave: handlePopoverMouseLeave,
    open: expanded,
    portal: true,
    placement: "bottom-start",
    radius,
    ref: setResultsPopoverElement
  }, popover), /* @__PURE__ */ React.createElement(TextInput, __spreadProps(__spreadValues({}, restProps), {
    "aria-activedescendant": activeItemId,
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-owns": listboxId,
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    border,
    clearButton,
    customValidity,
    disabled,
    fontSize,
    icon,
    id,
    inputMode: "search",
    onChange: handleInputChange,
    onClear: handleClearButtonClick,
    onFocus: handleInputFocus,
    padding,
    prefix,
    radius,
    readOnly,
    ref: setRef,
    role: "combobox",
    spellCheck: false,
    suffix: openButtonNode,
    value: query === null ? renderValue(value, currentOption) : query
  }))));
});
const Autocomplete = InnerAutocomplete;
export {
  Autocomplete
};
