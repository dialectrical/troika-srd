var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { CloseIcon } from "@sanity/icons";
import React from "react";
import styled from "styled-components";
import { Box, Button, Card, Flex, Stack, Text } from "../../primitives";
const STATUS_CARD_TONE = {
  error: "critical",
  warning: "caution",
  success: "positive",
  info: "primary"
};
const ROLES = {
  error: "alert",
  warning: "alert",
  success: "status",
  info: "status"
};
const Root = styled(Card)`
  pointer-events: all;
`;
const TextBox = styled(Flex)`
  overflow-x: auto;
`;
function Toast(props) {
  const _a = props, { closable, description, onClose, title, status } = _a, restProps = __objRest(_a, ["closable", "description", "onClose", "title", "status"]);
  const cardTone = status ? STATUS_CARD_TONE[status] : "default";
  const role = status ? ROLES[status] : "status";
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    "data-ui": "Toast",
    role
  }, restProps), {
    marginTop: 3,
    radius: 2,
    shadow: 2,
    tone: cardTone
  }), /* @__PURE__ */ React.createElement(Flex, {
    align: "flex-start"
  }, /* @__PURE__ */ React.createElement(TextBox, {
    flex: 1,
    padding: 3
  }, /* @__PURE__ */ React.createElement(Stack, {
    space: 3
  }, title && /* @__PURE__ */ React.createElement(Text, {
    weight: "semibold"
  }, title), description && /* @__PURE__ */ React.createElement(Text, {
    muted: true,
    size: 1
  }, description))), closable && /* @__PURE__ */ React.createElement(Box, {
    padding: 1
  }, /* @__PURE__ */ React.createElement(Button, {
    as: "button",
    icon: CloseIcon,
    mode: "bleed",
    padding: 2,
    onClick: onClose,
    style: { verticalAlign: "top" }
  }))));
}
export {
  Toast
};
