var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, {
  createElement,
  forwardRef,
  isValidElement,
  useCallback,
  useEffect,
  useMemo,
  useState
} from "react";
import { isValidElementType } from "react-is";
import { useForwardedRef } from "../../hooks";
import { Box, Flex, Text } from "../../primitives";
import { Selectable } from "../../primitives/_selectable";
import { Hotkeys } from "../hotkeys";
import { useMenu } from "./useMenu";
const MenuItem = forwardRef(function MenuItem2(props, forwardedRef) {
  const _a = props, {
    as = "button",
    children,
    disabled,
    fontSize = 2,
    hotkeys,
    icon,
    iconRight,
    onClick,
    padding = 3,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    pressed,
    radius = 2,
    selected: selectedProp,
    space = 3,
    text,
    tone = "default"
  } = _a, restProps = __objRest(_a, [
    "as",
    "children",
    "disabled",
    "fontSize",
    "hotkeys",
    "icon",
    "iconRight",
    "onClick",
    "padding",
    "paddingX",
    "paddingY",
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
    "pressed",
    "radius",
    "selected",
    "space",
    "text",
    "tone"
  ]);
  const { activeElement, mount, onItemClick, onMouseEnter, onMouseLeave } = useMenu();
  const [rootElement, setRootElement] = useState(null);
  const selected = Boolean(activeElement) && rootElement === activeElement;
  useEffect(() => mount(rootElement, selectedProp), [mount, rootElement, selectedProp]);
  const ref = useForwardedRef(forwardedRef);
  const handleClick = useCallback((event) => {
    if (disabled)
      return;
    if (onClick)
      onClick(event);
    if (onItemClick)
      onItemClick();
  }, [disabled, onClick, onItemClick]);
  const paddingProps = useMemo(() => ({
    padding,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft
  }), [padding, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft]);
  const setRef = useCallback((el) => {
    ref.current = el;
    setRootElement(el);
  }, [ref]);
  return /* @__PURE__ */ React.createElement(Selectable, __spreadProps(__spreadValues({
    "data-as": as,
    "data-ui": "MenuItem",
    forwardedAs: as
  }, restProps), {
    "aria-pressed": as === "button" && pressed,
    "data-pressed": as !== "button" && pressed ? "" : void 0,
    "data-selected": selected ? "" : void 0,
    $radius: radius,
    $tone: tone,
    disabled,
    onClick: handleClick,
    onMouseEnter,
    onMouseLeave,
    padding: 0,
    ref: setRef,
    role: "menuitem",
    tabIndex: -1,
    type: as === "button" ? "button" : void 0
  }), (icon || text || iconRight) && /* @__PURE__ */ React.createElement(Box, __spreadValues({
    as: "span"
  }, paddingProps), /* @__PURE__ */ React.createElement(Flex, {
    as: "span"
  }, icon && /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(icon) && icon, isValidElementType(icon) && createElement(icon)), text && /* @__PURE__ */ React.createElement(Box, {
    flex: 1,
    marginLeft: icon ? space : void 0,
    marginRight: iconRight ? space : void 0
  }, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize,
    textOverflow: "ellipsis"
  }, text)), hotkeys && /* @__PURE__ */ React.createElement(Box, {
    marginLeft: space,
    style: { marginTop: -4, marginBottom: -4 }
  }, /* @__PURE__ */ React.createElement(Hotkeys, {
    fontSize,
    keys: hotkeys
  })), iconRight && /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(iconRight) && iconRight, isValidElementType(iconRight) && createElement(iconRight)))), children && /* @__PURE__ */ React.createElement(Box, __spreadValues({
    as: "span"
  }, paddingProps), children));
});
export {
  MenuItem
};
