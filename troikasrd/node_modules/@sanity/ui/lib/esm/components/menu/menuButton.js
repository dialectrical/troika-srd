var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import React, { cloneElement, forwardRef, useCallback, useMemo, useState } from "react";
import { isElement } from "react-is";
import { Popover } from "../../primitives";
const MenuButton = forwardRef(function MenuButton2(props, ref) {
  const {
    boundaryElement,
    button: buttonProp,
    id,
    menu: menuProp,
    placement,
    popoverScheme,
    portal,
    popover,
    popoverRadius,
    preventOverflow
  } = props;
  const [open, setOpen] = useState(false);
  const [shouldFocus, setShouldFocus] = useState(null);
  const [buttonElement, setButtonElement] = useState(null);
  const [menuElements, setChildMenuElements] = useState([]);
  const handleButtonClick = useCallback(() => {
    setOpen((v) => !v);
    setShouldFocus(null);
  }, []);
  const handleButtonKeyDown = useCallback((event) => {
    if (event.key === "ArrowDown" || event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      setOpen(true);
      setShouldFocus("first");
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      setOpen(true);
      setShouldFocus("last");
      return;
    }
  }, []);
  const handleMenuClickOutside = useCallback((event) => {
    const target = event.target;
    if (!(target instanceof Node)) {
      return;
    }
    if (buttonElement && (target === buttonElement || buttonElement.contains(target))) {
      return;
    }
    for (const el of menuElements) {
      if (target === el || el.contains(target)) {
        return;
      }
    }
    setOpen(false);
  }, [buttonElement, menuElements]);
  const handleMenuEscape = useCallback(() => {
    setOpen(false);
    if (buttonElement)
      buttonElement.focus();
  }, [buttonElement]);
  const handleBlur = useCallback((event) => {
    const target = event.relatedTarget;
    if (!(target instanceof Node)) {
      return;
    }
    for (const el of menuElements) {
      if (el === target || el.contains(target)) {
        return;
      }
    }
    setOpen(false);
  }, [menuElements]);
  const handleItemClick = useCallback(() => {
    setOpen(false);
    if (buttonElement)
      buttonElement.focus();
  }, [buttonElement]);
  const registerElement = useCallback((el) => {
    setChildMenuElements((els) => els.concat([el]));
    return () => {
      setChildMenuElements((els) => {
        return els.filter((_el) => _el !== el);
      });
    };
  }, []);
  const menuProps = useMemo(() => ({
    "aria-labelledby": id,
    onBlurCapture: handleBlur,
    onClickOutside: handleMenuClickOutside,
    onEscape: handleMenuEscape,
    onItemClick: handleItemClick,
    originElement: buttonElement,
    registerElement,
    shouldFocus
  }), [
    buttonElement,
    handleMenuClickOutside,
    handleMenuEscape,
    handleItemClick,
    id,
    handleBlur,
    registerElement,
    shouldFocus
  ]);
  const menu = isElement(menuProp) ? cloneElement(menuProp, menuProps) : null;
  const setButtonRef = useCallback((el) => {
    if (typeof ref === "function") {
      ref(el);
    } else if (ref) {
      ref.current = el;
    }
    setButtonElement(el);
  }, [ref]);
  const button = useMemo(() => isElement(buttonProp) ? cloneElement(buttonProp, {
    "data-ui": "MenuButton",
    id,
    onClick: handleButtonClick,
    onKeyDown: handleButtonKeyDown,
    "aria-haspopup": true,
    "aria-expanded": open,
    ref: setButtonRef,
    selected: open
  }) : null, [buttonProp, handleButtonClick, handleButtonKeyDown, id, open, setButtonRef]);
  const popoverProps = useMemo(() => {
    return __spreadValues({
      boundaryElement,
      placement,
      portal,
      radius: popoverRadius,
      overflow: preventOverflow,
      scheme: popoverScheme
    }, popover || {});
  }, [boundaryElement, placement, popover, popoverRadius, portal, preventOverflow, popoverScheme]);
  return /* @__PURE__ */ React.createElement(Popover, __spreadProps(__spreadValues({}, popoverProps), {
    content: menu,
    "data-ui": "MenuButton__popover",
    open
  }), button || /* @__PURE__ */ React.createElement(React.Fragment, null));
});
export {
  MenuButton
};
