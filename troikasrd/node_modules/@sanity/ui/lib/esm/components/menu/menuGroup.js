var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { ChevronRightIcon } from "@sanity/icons";
import React, { useCallback, useEffect, useRef, useState } from "react";
import styled from "styled-components";
import { Box, Popover, Text } from "../../primitives";
import { Selectable } from "../../primitives/_selectable";
import { Menu } from "./menu";
import { useMenu } from "./useMenu";
const MOUSE_LEAVE_TIMEOUT = 1e3;
const TextContainer = styled.span`
  &:not([hidden]) {
    display: flex;
  }

  & > div:first-child {
    flex: 1;
    min-width: 0;
  }
`;
function MenuGroup(props) {
  const _a = props, {
    as = "button",
    children,
    fontSize,
    onClick,
    padding = 3,
    popover = {},
    radius = 2,
    text,
    tone = "default"
  } = _a, restProps = __objRest(_a, [
    "as",
    "children",
    "fontSize",
    "onClick",
    "padding",
    "popover",
    "radius",
    "text",
    "tone"
  ]);
  const [open, setOpen] = useState(false);
  const {
    activeElement,
    mount,
    onClickOutside,
    onEscape,
    onItemClick,
    onMouseEnter,
    onMouseLeave,
    registerElement
  } = useMenu();
  const [rootElement, setRootElement] = useState(null);
  const mouseLeaveTimeoutRef = useRef(null);
  const shouldFocusRef = useRef(null);
  const active = Boolean(activeElement) && activeElement === rootElement;
  useEffect(() => mount(rootElement), [mount, rootElement]);
  const handleMouseEnter = useCallback((event) => {
    if (mouseLeaveTimeoutRef.current) {
      clearTimeout(mouseLeaveTimeoutRef.current);
      mouseLeaveTimeoutRef.current = null;
    }
    onMouseEnter(event);
    setOpen(true);
  }, [onMouseEnter]);
  const handleMouseLeave = useCallback((event) => {
    onMouseLeave(event);
    mouseLeaveTimeoutRef.current = setTimeout(() => {
      setOpen(false);
    }, MOUSE_LEAVE_TIMEOUT);
  }, [onMouseLeave]);
  const handleMenuKeyDown = useCallback((event) => {
    if (event.key === "ArrowLeft") {
      event.stopPropagation();
      setOpen(false);
      requestAnimationFrame(() => {
        rootElement == null ? void 0 : rootElement.focus();
      });
    }
  }, [rootElement]);
  const handleMenuMouseEnter = useCallback(() => {
    if (mouseLeaveTimeoutRef.current) {
      clearTimeout(mouseLeaveTimeoutRef.current);
      mouseLeaveTimeoutRef.current = null;
    }
  }, []);
  const handleMenuMouseLeave = useCallback(() => {
    mouseLeaveTimeoutRef.current = setTimeout(() => {
      setOpen(false);
    }, MOUSE_LEAVE_TIMEOUT);
  }, []);
  const handleClick = useCallback((event) => {
    if (onClick)
      onClick(event);
    shouldFocusRef.current = "first";
    setOpen(true);
    requestAnimationFrame(() => {
      shouldFocusRef.current = null;
    });
  }, [onClick]);
  const handleItemClick = useCallback(() => {
    setOpen(false);
    if (onItemClick)
      onItemClick();
  }, [onItemClick]);
  useEffect(() => {
    return () => {
      if (mouseLeaveTimeoutRef.current !== null) {
        clearTimeout(mouseLeaveTimeoutRef.current);
        mouseLeaveTimeoutRef.current = null;
      }
    };
  }, []);
  const content = /* @__PURE__ */ React.createElement(Menu, {
    onClickOutside,
    onEscape,
    onItemClick: handleItemClick,
    onKeyDown: handleMenuKeyDown,
    onMouseEnter: handleMenuMouseEnter,
    onMouseLeave: handleMenuMouseLeave,
    registerElement,
    shouldFocus: shouldFocusRef.current
  }, children);
  const handleKeyDown = useCallback((event) => {
    const target = event.currentTarget;
    if (document.activeElement !== target) {
      return;
    }
    if (event.key === "ArrowRight") {
      shouldFocusRef.current = "first";
      setOpen(true);
      requestAnimationFrame(() => {
        shouldFocusRef.current = null;
      });
      return;
    }
  }, []);
  return /* @__PURE__ */ React.createElement(Popover, __spreadProps(__spreadValues({}, popover), {
    content,
    "data-ui": "MenuGroup__popover",
    open
  }), /* @__PURE__ */ React.createElement(Selectable, __spreadProps(__spreadValues({
    "data-as": as,
    "data-ui": "MenuGroup",
    forwardedAs: as
  }, restProps), {
    "aria-pressed": as === "button" ? !active && open : void 0,
    "data-pressed": as !== "button" ? !active && open : void 0,
    "data-selected": active ? "" : void 0,
    $radius: radius,
    $tone: tone,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    ref: setRootElement,
    tabIndex: -1,
    type: as === "button" ? "button" : void 0
  }), /* @__PURE__ */ React.createElement(Box, {
    padding
  }, /* @__PURE__ */ React.createElement(TextContainer, null, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, text), /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, /* @__PURE__ */ React.createElement(ChevronRightIcon, null))))));
}
export {
  MenuGroup
};
