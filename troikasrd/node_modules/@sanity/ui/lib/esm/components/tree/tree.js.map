{
  "version": 3,
  "sources": ["../../../../src/components/tree/tree.tsx"],
  "sourcesContent": ["import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {Stack} from '../../primitives'\nimport {_findNextItemElement, _findPrevItemElement, _focusItemElement} from './helpers'\nimport {TreeContext} from './treeContext'\nimport {TreeContextValue, TreeState} from './types'\n\n/**\n * This API might change. DO NOT USE IN PRODUCTION.\n * @beta\n */\nexport interface TreeProps {\n  space?: number | number[]\n}\n\n/**\n * This API might change. DO NOT USE IN PRODUCTION.\n * @beta\n */\nexport function Tree(\n  props: TreeProps &\n    Omit<React.HTMLProps<HTMLDivElement>, 'align' | 'as' | 'height' | 'ref' | 'role' | 'wrap'>\n): React.ReactElement {\n  const {children, space = 1, ...restProps} = props\n  const [focusedElement, setFocusedElement] = useState<HTMLElement | null>(null)\n  const path: string[] = useMemo(() => [], [])\n  const rootRef = useRef<HTMLElement | null>(null)\n  const [itemElements, setItemElements] = useState<HTMLElement[]>([])\n  const [state, setState] = useState<TreeState>({})\n\n  const registerItem = useCallback(\n    (element: HTMLElement, path: string, expanded: boolean, selected: boolean) => {\n      setState((s) => ({...s, [path]: {element, expanded}}))\n\n      if (selected) {\n        setFocusedElement(element)\n      }\n\n      return () => {\n        setState((s) => {\n          const newState = {...s}\n\n          delete newState[path]\n\n          return newState\n        })\n      }\n    },\n    []\n  )\n\n  const setExpanded = useCallback((path: string, expanded: boolean) => {\n    setState((s) => {\n      const itemState = s[path]\n\n      if (!itemState) return s\n\n      return {...s, [path]: {...itemState, expanded}}\n    })\n  }, [])\n\n  const contextValue: TreeContextValue = useMemo(\n    () => ({\n      version: 0.0,\n      focusedElement: focusedElement || itemElements[0] || null,\n      level: 0,\n      path,\n      registerItem,\n      setExpanded,\n      setFocusedElement,\n      space,\n      state,\n    }),\n    [focusedElement, itemElements, path, registerItem, setExpanded, space, state]\n  )\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (!focusedElement) return\n\n      if (event.key === 'ArrowDown') {\n        event.preventDefault()\n\n        const nextEl = _findNextItemElement(state, itemElements, focusedElement)\n\n        if (nextEl) {\n          _focusItemElement(nextEl)\n          setFocusedElement(nextEl)\n        }\n\n        return\n      }\n\n      if (event.key === 'ArrowUp') {\n        event.preventDefault()\n\n        const prevEl = _findPrevItemElement(state, itemElements, focusedElement)\n\n        if (prevEl) {\n          _focusItemElement(prevEl)\n          setFocusedElement(prevEl)\n        }\n\n        return\n      }\n\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n\n        const itemKey = focusedElement.getAttribute('data-tree-key')\n\n        if (!itemKey) return\n\n        const itemState = state[itemKey]\n\n        if (!itemState) return\n\n        if (itemState.expanded) {\n          setState((s) => {\n            const itemState = s[itemKey]\n\n            if (!itemState) return s\n\n            return {...s, [itemKey]: {...itemState, expanded: false}}\n          })\n        } else {\n          const itemPath = itemKey.split('/')\n\n          itemPath.pop()\n\n          const parentKey = itemPath.join('/')\n          const parentState = parentKey && state[parentKey]\n\n          if (parentState) {\n            parentState.element.focus()\n            setFocusedElement(parentState.element)\n          }\n        }\n\n        return\n      }\n\n      if (event.key === 'ArrowRight') {\n        event.preventDefault()\n\n        const focusedKey = focusedElement.getAttribute('data-tree-key')\n\n        if (!focusedKey) return\n\n        if (!state[focusedKey]?.expanded) {\n          setState((s) => {\n            const itemState = s[focusedKey]\n\n            if (!itemState) return s\n\n            return {...s, [focusedKey]: {...itemState, expanded: true}}\n          })\n        }\n\n        return\n      }\n    },\n    [focusedElement, itemElements, state]\n  )\n\n  useEffect(() => {\n    if (!rootRef.current) return\n    const _itemElements = Array.from(\n      rootRef.current.querySelectorAll('[data-ui=\"TreeItem\"]')\n    ) as HTMLElement[]\n\n    setItemElements(_itemElements)\n  }, [children])\n\n  return (\n    <TreeContext.Provider value={contextValue}>\n      <Stack\n        as=\"ul\"\n        data-ui=\"Tree\"\n        {...restProps}\n        onKeyDown={handleKeyDown}\n        ref={rootRef}\n        role=\"tree\"\n        space={space}\n      >\n        {children}\n      </Stack>\n    </TreeContext.Provider>\n  )\n}\n"],
  "mappings": "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",
  "names": []
}
