var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef } from "react";
import styled from "styled-components";
import { useResponsiveProp } from "../../hooks";
import { responsive } from "../../styles";
import { Skeleton } from "./skeleton";
const Root = styled(Skeleton)(({ $size, $style, theme }) => {
  const { media } = theme.sanity;
  const font = theme.sanity.fonts[$style];
  const styles = responsive(media, $size, (sizeIndex) => {
    const fontSize = font.sizes[sizeIndex];
    const capHeight = fontSize.lineHeight - fontSize.ascenderHeight - fontSize.descenderHeight;
    return { height: capHeight };
  });
  return styles;
});
const TextSkeleton = forwardRef(function TextSkeleton2(props, ref) {
  const _a = props, { size = 2 } = _a, restProps = __objRest(_a, ["size"]);
  const $size = useResponsiveProp(size);
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({}, restProps), {
    $size,
    ref,
    $style: "text"
  }));
});
const LabelSkeleton = forwardRef(function TextSkeleton3(props, ref) {
  const _a = props, { size = 2 } = _a, restProps = __objRest(_a, ["size"]);
  const $size = useResponsiveProp(size);
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({}, restProps), {
    $size,
    ref,
    $style: "label"
  }));
});
const HeadingSkeleton = forwardRef(function TextSkeleton4(props, ref) {
  const _a = props, { size = 2 } = _a, restProps = __objRest(_a, ["size"]);
  const $size = useResponsiveProp(size);
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({}, restProps), {
    $size,
    ref,
    $style: "heading"
  }));
});
const CodeSkeleton = forwardRef(function TextSkeleton5(props, ref) {
  const _a = props, { size = 2 } = _a, restProps = __objRest(_a, ["size"]);
  const $size = useResponsiveProp(size);
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({}, restProps), {
    $size,
    ref,
    $style: "code"
  }));
});
export {
  CodeSkeleton,
  HeadingSkeleton,
  LabelSkeleton,
  TextSkeleton
};
