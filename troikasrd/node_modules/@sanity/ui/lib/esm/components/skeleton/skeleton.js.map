{
  "version": 3,
  "sources": ["../../../../src/components/skeleton/skeleton.tsx"],
  "sourcesContent": ["import React, {forwardRef, useEffect, useState} from 'react'\nimport styled from 'styled-components'\nimport {Box} from '../../primitives'\nimport {BoxProps, ResponsiveRadiusProps} from '../../primitives'\nimport {responsiveRadiusStyle, ResponsiveRadiusStyleProps} from '../../styles/internal'\nimport {skeletonStyle} from './styles'\n\nconst Root = styled(Box)<{$animated: boolean; $visible: boolean} & ResponsiveRadiusStyleProps>(\n  responsiveRadiusStyle,\n  skeletonStyle\n)\n\n/**\n * This API might change. DO NOT USE IN PRODUCTION.\n * @beta\n */\nexport interface SkeletonProps extends ResponsiveRadiusProps, Omit<BoxProps, 'children'> {\n  animated?: boolean\n  delay?: number\n}\n\n/**\n * This API might change. DO NOT USE IN PRODUCTION.\n * @beta\n */\nexport const Skeleton = forwardRef(function Skeleton(\n  props: SkeletonProps & React.HTMLProps<HTMLDivElement>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const {animated = false, delay, radius, ...restProps} = props\n  const [visible, setVisible] = useState<boolean>(delay ? false : true)\n\n  useEffect(() => {\n    if (!delay) {\n      return setVisible(true)\n    }\n\n    const timeout = setTimeout(() => {\n      setVisible(true)\n    }, delay)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [delay])\n\n  return <Root {...restProps} $animated={animated} $radius={radius} $visible={visible} ref={ref} />\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA,MAAM,OAAO,OAAO,KAClB,uBACA;AAgBK,MAAM,WAAW,WAAW,mBACjC,OACA,KACA;AACA,QAAwD,YAAjD,aAAW,OAAO,OAAO,WAAwB,IAAb,sBAAa,IAAb,CAApC,YAAkB,SAAO;AAChC,QAAM,CAAC,SAAS,cAAc,SAAkB,QAAQ,QAAQ;AAEhE,YAAU,MAAM;AACd,QAAI,CAAC,OAAO;AACV,aAAO,WAAW;AAAA;AAGpB,UAAM,UAAU,WAAW,MAAM;AAC/B,iBAAW;AAAA,OACV;AAEH,WAAO,MAAM;AACX,mBAAa;AAAA;AAAA,KAEd,CAAC;AAEJ,SAAO,oCAAC,MAAD,iCAAU,YAAV;AAAA,IAAqB,WAAW;AAAA,IAAU,SAAS;AAAA,IAAQ,UAAU;AAAA,IAAS;AAAA;AAAA;",
  "names": []
}
