var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  LayerProvider: () => LayerProvider
});
var import_react = __toModule(require("react"));
var import_hooks = __toModule(require("../../hooks"));
var import_layerContext = __toModule(require("./layerContext"));
function LayerProvider(props) {
  const { children, zOffset: zOffsetProp = 0 } = props;
  const parent = (0, import_react.useContext)(import_layerContext.LayerContext);
  const zOffset = (0, import_hooks.useResponsiveProp)(zOffsetProp);
  const maxMediaIndex = zOffset.length - 1;
  const mediaIndex = Math.min((0, import_hooks.useMediaIndex)(), maxMediaIndex);
  const zIndex = parent ? parent.zIndex + zOffset[mediaIndex] : zOffset[mediaIndex];
  const [size, setSize] = (0, import_react.useState)(0);
  const registerChild = (0, import_react.useCallback)(() => {
    setSize((v) => v + 1);
    return () => setSize((v) => v - 1);
  }, []);
  const parentRegisterChild = parent == null ? void 0 : parent.registerChild;
  (0, import_react.useEffect)(() => {
    if (!parentRegisterChild)
      return;
    return parentRegisterChild();
  }, [parentRegisterChild]);
  const value = (0, import_react.useMemo)(() => ({ version: 0, isTopLayer: size === 0, registerChild, size, zIndex }), [size, registerChild, zIndex]);
  return /* @__PURE__ */ import_react.default.createElement(import_layerContext.LayerContext.Provider, {
    value
  }, children);
}
