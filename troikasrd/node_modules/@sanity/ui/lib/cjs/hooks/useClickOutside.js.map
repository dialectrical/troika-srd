{
  "version": 3,
  "sources": ["../../../src/hooks/useClickOutside.ts"],
  "sourcesContent": ["import {useEffect, useRef, useState} from 'react'\nimport {EMPTY_ARRAY} from '../constants'\n\n/**\n * @public\n */\nexport type ClickOutsideListener = (event: MouseEvent) => void\n\nfunction _getElements(\n  element: HTMLElement | null,\n  elementsArg: Array<HTMLElement | HTMLElement[] | null>\n): HTMLElement[] {\n  const ret = [element]\n\n  for (const el of elementsArg) {\n    if (Array.isArray(el)) {\n      ret.push(...el)\n    } else {\n      ret.push(el)\n    }\n  }\n\n  return ret.filter(Boolean) as HTMLElement[]\n}\n\n/**\n * @public\n */\nexport function useClickOutside(\n  listener: ClickOutsideListener,\n  elementsArg: Array<HTMLElement | HTMLElement[] | null> = EMPTY_ARRAY,\n  boundaryElement?: HTMLElement | null\n): (el: HTMLElement | null) => void {\n  const [element, setElement] = useState<HTMLElement | null>(null)\n  const [elements, setElements] = useState(() => _getElements(element, elementsArg))\n  const elementsRef = useRef(elements)\n\n  useEffect(() => {\n    const prevElements = elementsRef.current\n    const nextElements = _getElements(element, elementsArg)\n\n    if (prevElements.length !== nextElements.length) {\n      setElements(nextElements)\n      elementsRef.current = nextElements\n\n      return\n    }\n\n    for (const el of prevElements) {\n      if (!nextElements.includes(el)) {\n        setElements(nextElements)\n        elementsRef.current = nextElements\n\n        return\n      }\n    }\n\n    for (const el of nextElements) {\n      if (!prevElements.includes(el)) {\n        setElements(nextElements)\n        elementsRef.current = nextElements\n\n        return\n      }\n    }\n  }, [element, elementsArg])\n\n  useEffect(() => {\n    if (!listener) return undefined\n\n    const handleWindowMouseDown = (evt: MouseEvent) => {\n      const target = evt.target\n\n      if (!(target instanceof Node)) {\n        return\n      }\n\n      if (boundaryElement && !boundaryElement.contains(target)) {\n        return\n      }\n\n      for (const el of elements) {\n        if (target === el || el.contains(target)) {\n          return\n        }\n      }\n\n      listener(evt)\n    }\n\n    window.addEventListener('mousedown', handleWindowMouseDown)\n\n    return () => {\n      window.removeEventListener('mousedown', handleWindowMouseDown)\n    }\n  }, [boundaryElement, listener, elements])\n\n  return setElement\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAA0C;AAC1C,uBAA0B;AAO1B,sBACE,SACA,aACe;AACf,QAAM,MAAM,CAAC;AAEb,aAAW,MAAM,aAAa;AAC5B,QAAI,MAAM,QAAQ,KAAK;AACrB,UAAI,KAAK,GAAG;AAAA,WACP;AACL,UAAI,KAAK;AAAA;AAAA;AAIb,SAAO,IAAI,OAAO;AAAA;AAMb,yBACL,UACA,cAAyD,8BACzD,iBACkC;AAClC,QAAM,CAAC,SAAS,cAAc,2BAA6B;AAC3D,QAAM,CAAC,UAAU,eAAe,2BAAS,MAAM,aAAa,SAAS;AACrE,QAAM,cAAc,yBAAO;AAE3B,8BAAU,MAAM;AACd,UAAM,eAAe,YAAY;AACjC,UAAM,eAAe,aAAa,SAAS;AAE3C,QAAI,aAAa,WAAW,aAAa,QAAQ;AAC/C,kBAAY;AACZ,kBAAY,UAAU;AAEtB;AAAA;AAGF,eAAW,MAAM,cAAc;AAC7B,UAAI,CAAC,aAAa,SAAS,KAAK;AAC9B,oBAAY;AACZ,oBAAY,UAAU;AAEtB;AAAA;AAAA;AAIJ,eAAW,MAAM,cAAc;AAC7B,UAAI,CAAC,aAAa,SAAS,KAAK;AAC9B,oBAAY;AACZ,oBAAY,UAAU;AAEtB;AAAA;AAAA;AAAA,KAGH,CAAC,SAAS;AAEb,8BAAU,MAAM;AACd,QAAI,CAAC;AAAU,aAAO;AAEtB,UAAM,wBAAwB,CAAC,QAAoB;AACjD,YAAM,SAAS,IAAI;AAEnB,UAAI,CAAE,mBAAkB,OAAO;AAC7B;AAAA;AAGF,UAAI,mBAAmB,CAAC,gBAAgB,SAAS,SAAS;AACxD;AAAA;AAGF,iBAAW,MAAM,UAAU;AACzB,YAAI,WAAW,MAAM,GAAG,SAAS,SAAS;AACxC;AAAA;AAAA;AAIJ,eAAS;AAAA;AAGX,WAAO,iBAAiB,aAAa;AAErC,WAAO,MAAM;AACX,aAAO,oBAAoB,aAAa;AAAA;AAAA,KAEzC,CAAC,iBAAiB,UAAU;AAE/B,SAAO;AAAA;",
  "names": []
}
