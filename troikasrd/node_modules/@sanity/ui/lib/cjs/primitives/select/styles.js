var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  selectStyle: () => selectStyle
});
var import_styled_components = __toModule(require("styled-components"));
var import_styles = __toModule(require("../../styles"));
var import_internal = __toModule(require("../../styles/internal"));
function rootStyle() {
  return import_styled_components.css`
    position: relative;
    width: stretch;

    &:not([hidden]) {
      display: inline-block;
    }
  `;
}
function inputBaseStyle(props) {
  const { theme } = props;
  const font = theme.sanity.fonts.text;
  return import_styled_components.css`
    -webkit-font-smoothing: antialiased;
    appearance: none;
    border: 0;
    font-family: ${font.family};
    color: inherit;
    width: 100%;
    outline: none;
    margin: 0;

    &:disabled {
      opacity: 1;
    }
  `;
}
function inputColorStyle(props) {
  const { theme } = props;
  const { focusRing, input } = theme.sanity;
  const color = theme.sanity.color.input;
  return import_styled_components.css`
    /* enabled */
    background-color: ${color.default.enabled.bg};
    color: ${color.default.enabled.fg};
    box-shadow: ${(0, import_internal.focusRingBorderStyle)({
    color: color.default.enabled.border,
    width: input.border.width
  })};

    /* hovered */
    @media (hover: hover) {
      &:not(:disabled):hover {
        background-color: ${color.default.hovered.bg};
        color: ${color.default.hovered.fg};
        box-shadow: ${(0, import_internal.focusRingBorderStyle)({
    color: color.default.hovered.border,
    width: input.border.width
  })};
      }
    }

    /* focused */
    &:not(:disabled):focus {
      box-shadow: ${(0, import_internal.focusRingStyle)({
    border: { width: input.border.width, color: color.default.enabled.border },
    focusRing
  })};
    }

    /* read-only */
    &[data-read-only] {
      background-color: ${color.default.readOnly.bg};
      color: ${color.default.readOnly.fg};
      box-shadow: ${(0, import_internal.focusRingBorderStyle)({
    color: color.default.readOnly.border,
    width: input.border.width
  })};
    }

    /* disabled */
    &:not([data-read-only]):disabled {
      background-color: ${color.default.disabled.bg};
      color: ${color.default.disabled.fg};
      box-shadow: ${(0, import_internal.focusRingBorderStyle)({
    color: color.default.disabled.border,
    width: input.border.width
  })};
    }
  `;
}
function textSize(size) {
  return { fontSize: (0, import_styles.rem)(size.fontSize), lineHeight: (0, import_styles.rem)(size.lineHeight) };
}
function inputTextSizeStyle(props) {
  const { theme, $fontSize } = props;
  const { sizes } = theme.sanity.fonts.text;
  return (0, import_styles.responsive)(theme.sanity.media, (0, import_styles.getResponsiveProp)($fontSize), (sizeIndex) => textSize(sizes[sizeIndex] || sizes[2]));
}
function inputStyle() {
  return [
    import_internal.responsiveRadiusStyle,
    inputBaseStyle,
    inputColorStyle,
    inputTextSizeStyle,
    import_internal.responsiveInputPaddingIconRightStyle
  ];
}
function iconBoxStyle(props) {
  const { theme } = props;
  const color = theme.sanity.color.input;
  return import_styled_components.css`
    pointer-events: none;
    position: absolute;
    top: 0;
    right: 0;

    /* enabled */
    --card-fg-color: ${color.default.enabled.fg};

    /* hover */
    @media (hover: hover) {
      select:not(disabled):not(:read-only):hover + && {
        --card-fg-color: ${color.default.hovered.fg};
      }
    }

    /* disabled */
    select:disabled + && {
      --card-fg-color: ${color.default.disabled.fg};
    }

    /* read-only */
    select[data-read-only] + && {
      --card-fg-color: ${color.default.readOnly.fg};
    }
  `;
}
const selectStyle = {
  root: rootStyle,
  input: inputStyle,
  iconBox: iconBoxStyle
};
