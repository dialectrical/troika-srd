var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  switchBaseStyles: () => switchBaseStyles,
  switchInputStyles: () => switchInputStyles,
  switchRepresentationStyles: () => switchRepresentationStyles,
  switchThumbStyles: () => switchThumbStyles,
  switchTrackStyles: () => switchTrackStyles
});
var import_styled_components = __toModule(require("styled-components"));
var import_styles = __toModule(require("../../styles"));
var import_internal = __toModule(require("../../styles/internal"));
function switchBaseStyles() {
  return import_styled_components.css`
    position: relative;
    &:not([hidden]) {
      display: inline-block;
    }
  `;
}
function switchInputStyles() {
  return import_styled_components.css`
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    opacity: 0;
    height: 100%;
    width: 100%;
    outline: none;
    padding: 0;
    margin: 0;

    /* Place the input element above the representation element */
    z-index: 1;
  `;
}
function switchRepresentationStyles(props) {
  const { theme } = props;
  const { focusRing, input } = theme.sanity;
  const color = theme.sanity.color.button.default;
  return import_styled_components.css`
    --switch-bg-color: ${color.default.enabled.bg};
    --switch-fg-color: ${color.default.enabled.fg};
    --switch-box-shadow: none;

    &:not([hidden]) {
      display: block;
    }
    position: relative;
    width: ${(0, import_styles.rem)(input.switch.width)};
    height: ${(0, import_styles.rem)(input.switch.height)};
    border-radius: ${(0, import_styles.rem)(input.switch.height / 2)};

    /* Make sure itâ€™s not possible to interact with the wrapper element */
    pointer-events: none;

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 1;
      box-shadow: var(--switch-box-shadow);
      border-radius: inherit;
    }

    /* Focus styles */
    input:focus + && {
      --switch-box-shadow: ${(0, import_internal.focusRingStyle)({ focusRing })};
    }

    input:focus:not(:focus-visible) + && {
      --switch-box-shadow: none;
    }

    input:checked + && {
      --switch-bg-color: ${color.positive.enabled.bg};
      --switch-fg-color: ${color.positive.enabled.fg};
    }

    @media (hover: hover) {
      input:not(:disabled):hover + && {
        --switch-bg-color: ${color.default.hovered.bg};
        --switch-fg-color: ${color.default.hovered.fg};
      }

      input:not(:disabled):checked:hover + && {
        --switch-bg-color: ${color.positive.hovered.bg};
        --switch-fg-color: ${color.positive.hovered.fg};
      }
    }

    input:not([data-read-only]):disabled + && {
      --switch-bg-color: ${color.default.disabled.bg};
      --switch-fg-color: ${color.default.disabled.fg};
    }
  `;
}
function switchTrackStyles(props) {
  const { theme } = props;
  const { input } = theme.sanity;
  return import_styled_components.css`
    &:not([hidden]) {
      display: block;
    }
    background-color: var(--switch-bg-color);
    position: absolute;
    left: 0;
    top: 0;
    width: ${(0, import_styles.rem)(input.switch.width)};
    height: ${(0, import_styles.rem)(input.switch.height)};
    border-radius: ${(0, import_styles.rem)(input.switch.height / 2)};
  `;
}
function switchThumbStyles(props) {
  const { $indeterminate, theme } = props;
  const { input } = theme.sanity;
  const trackWidth = input.switch.width;
  const trackHeight = input.switch.height;
  const trackPadding = input.switch.padding;
  const size = trackHeight - input.switch.padding * 2;
  const checkedOffset = trackWidth - trackPadding * 2 - size;
  const indeterminateOffset = trackWidth / 2 - size / 2 - trackPadding;
  const checked = $indeterminate !== true && props.$checked === true;
  return import_styled_components.css`
    &:not([hidden]) {
      display: block;
    }
    position: absolute;
    left: ${(0, import_styles.rem)(trackPadding)};
    top: ${(0, import_styles.rem)(trackPadding)};
    height: ${(0, import_styles.rem)(size)};
    width: ${(0, import_styles.rem)(size)};
    border-radius: ${(0, import_styles.rem)(size / 2)};
    transition-property: transform;
    transition-duration: ${input.switch.transitionDurationMs}ms;
    transition-timing-function: ${input.switch.transitionTimingFunction};
    background: var(--switch-fg-color);
    transform: translate3d(0, 0, 0);

    ${checked && import_styled_components.css`
      transform: translate3d(${checkedOffset}px, 0, 0);
    `}

    ${$indeterminate && import_styled_components.css`
      transform: translate3d(${indeterminateOffset}px, 0, 0);
    `}
  `;
}
