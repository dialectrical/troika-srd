var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  codeBaseStyle: () => codeBaseStyle
});
var import_styled_components = __toModule(require("styled-components"));
function codeSyntaxHighlightingStyle({ theme }) {
  const color = theme.sanity.color.syntax;
  return {
    "&.atrule": { color: color.atrule },
    "&.attr-name": { color: color.attrName },
    "&.attr-value": { color: color.attrValue },
    "&.attribute": { color: color.attribute },
    "&.boolean": { color: color.boolean },
    "&.builtin": { color: color.builtin },
    "&.cdata": { color: color.cdata },
    "&.char": { color: color.char },
    "&.class": { color: color.class },
    "&.class-name": { color: color.className },
    "&.comment": { color: color.comment },
    "&.constant": { color: color.constant },
    "&.deleted": { color: color.deleted },
    "&.doctype": { color: color.doctype },
    "&.entity": { color: color.entity },
    "&.function": { color: color.function },
    "&.hexcode": { color: color.hexcode },
    "&.id": { color: color.id },
    "&.important": { color: color.important },
    "&.inserted": { color: color.inserted },
    "&.keyword": { color: color.keyword },
    "&.number": { color: color.number },
    "&.operator": { color: color.operator },
    "&.prolog": { color: color.prolog },
    "&.property": { color: color.property },
    "&.pseudo-class": { color: color.pseudoClass },
    "&.pseudo-element": { color: color.pseudoElement },
    "&.punctuation": { color: color.punctuation },
    "&.regex": { color: color.regex },
    "&.selector": { color: color.selector },
    "&.string": { color: color.string },
    "&.symbol": { color: color.symbol },
    "&.tag": { color: color.tag },
    "&.unit": { color: color.unit },
    "&.url": { color: color.url },
    "&.variable": { color: color.variable }
  };
}
function codeBaseStyle() {
  return import_styled_components.css`
    color: var(--card-code-fg-color);

    &:before {
      content: '';
      display: block;
      height: 0;
    }

    &:after {
      content: '';
      display: block;
      height: 0;
    }

    & code {
      font-family: inherit;

      &.refractor .token {
        ${codeSyntaxHighlightingStyle}
      }
    }

    & a {
      color: inherit;
      text-decoration: underline;
      border-radius: 1px;
    }

    & [data-sanity-icon] {
      vertical-align: baseline;
    }
  `;
}
