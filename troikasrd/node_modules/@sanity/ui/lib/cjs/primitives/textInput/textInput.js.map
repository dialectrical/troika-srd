{
  "version": 3,
  "sources": ["../../../../src/primitives/textInput/textInput.tsx"],
  "sourcesContent": ["import {CloseIcon} from '@sanity/icons'\nimport React, {createElement, forwardRef, isValidElement, useCallback, useMemo} from 'react'\nimport {isValidElementType} from 'react-is'\nimport styled from 'styled-components'\nimport {EMPTY_RECORD} from '../../constants'\nimport {useForwardedRef, useCustomValidity, useResponsiveProp} from '../../hooks'\nimport {\n  responsiveRadiusStyle,\n  ResponsiveRadiusStyleProps,\n  responsiveInputPaddingStyle,\n  TextInputInputStyleProps,\n  TextInputRepresentationStyleProps,\n  TextInputResponsivePaddingStyleProps,\n  textInputBaseStyle,\n  textInputFontSizeStyle,\n  textInputRepresentationStyle,\n  textInputRootStyle,\n} from '../../styles/internal'\nimport {ThemeFontWeightKey} from '../../theme'\nimport {Box} from '../box'\nimport {Button, ButtonProps} from '../button'\nimport {Card} from '../card'\nimport {Text} from '../text'\n\n/**\n * @public\n */\nexport type TextInputClearButtonProps = Omit<ButtonProps, 'as'> &\n  Omit<React.HTMLProps<HTMLButtonElement>, 'as' | 'ref'>\n\n/**\n * @public\n */\nexport type TextInputType =\n  | 'date'\n  | 'datetime-local'\n  | 'email'\n  | 'url'\n  | 'month'\n  | 'number'\n  | 'password'\n  | 'tel'\n  | 'time'\n  | 'text'\n  | 'week'\n\n/**\n * @public\n */\nexport interface TextInputProps {\n  border?: boolean\n  /**\n   * @beta\n   */\n  clearButton?: boolean | TextInputClearButtonProps\n  customValidity?: string\n  fontSize?: number | number[]\n  icon?: React.ComponentType | React.ReactNode\n  iconRight?: React.ComponentType | React.ReactNode\n  /**\n   * @beta\n   */\n  onClear?: () => void\n  padding?: number | number[]\n  prefix?: React.ReactNode\n  radius?: number | number[]\n  space?: number | number[]\n  suffix?: React.ReactNode\n  type?: TextInputType\n  weight?: ThemeFontWeightKey\n}\n\nconst CLEAR_BUTTON_BOX_STYLE: React.CSSProperties = {zIndex: 2}\n\nconst Root = styled.span(textInputRootStyle)\n\nconst InputRoot = styled.span`\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n`\n\nconst Prefix = styled(Card).attrs({forwardedAs: 'span'})`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n`\n\nconst Suffix = styled(Card).attrs({forwardedAs: 'span'})`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n`\n\nconst Input = styled.input<TextInputResponsivePaddingStyleProps & TextInputInputStyleProps>(\n  responsiveInputPaddingStyle,\n  textInputBaseStyle,\n  textInputFontSizeStyle\n)\n\nconst Presentation = styled.span<ResponsiveRadiusStyleProps & TextInputRepresentationStyleProps>(\n  responsiveRadiusStyle,\n  textInputRepresentationStyle\n)\n\nconst LeftBox = styled(Box)`\n  position: absolute;\n  top: 0;\n  left: 0;\n`\n\nconst RightBox = styled(Box)`\n  position: absolute;\n  top: 0;\n  right: 0;\n`\n\n/**\n * @public\n */\nexport const TextInput = forwardRef(function TextInput(\n  props: TextInputProps & Omit<React.HTMLProps<HTMLInputElement>, 'as' | 'prefix' | 'type'>,\n  forwardedRef: React.Ref<HTMLInputElement>\n) {\n  const {\n    border = true,\n    clearButton,\n    disabled = false,\n    fontSize = 2,\n    icon,\n    iconRight,\n    onClear,\n    padding: paddingProp = 3,\n    prefix,\n    radius = 1,\n    readOnly,\n    space = 3,\n    suffix,\n    customValidity,\n    type = 'text',\n    ...restProps\n  } = props\n\n  const ref = useForwardedRef(forwardedRef)\n  const padding = useResponsiveProp(paddingProp)\n\n  // Transient properties\n  const $hasClearButton = Boolean(clearButton)\n  const $hasIcon = Boolean(icon)\n  const $hasIconRight = Boolean(iconRight)\n  const $hasSuffix = Boolean(suffix)\n  const $hasPrefix = Boolean(prefix)\n\n  useCustomValidity(ref, customValidity)\n\n  // Prevent the clear button from taking the focus away from the input\n  const handleClearMouseDown = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    event.stopPropagation()\n  }, [])\n\n  const handleClearClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (onClear) onClear()\n\n      // Focus the input, in case focus has been lost when clicking the clear button\n      ref.current?.focus()\n    },\n    [onClear, ref]\n  )\n\n  // Render prefix (memoized)\n  const prefixNode = useMemo(\n    () =>\n      prefix && (\n        <Prefix borderTop borderLeft borderBottom radius={radius} sizing=\"border\" tone=\"inherit\">\n          <span>{prefix}</span>\n        </Prefix>\n      ),\n    [prefix, radius]\n  )\n\n  // Render presentation (memoized)\n  const presentationNode = useMemo(\n    () => (\n      <Presentation\n        $border={border}\n        $hasPrefix={$hasPrefix}\n        $hasSuffix={$hasSuffix}\n        $radius={radius}\n      >\n        {icon && (\n          <LeftBox padding={padding}>\n            <Text size={fontSize}>\n              {isValidElement(icon) && icon}\n              {isValidElementType(icon) && createElement(icon)}\n            </Text>\n          </LeftBox>\n        )}\n\n        {!$hasClearButton && iconRight && (\n          <RightBox padding={padding}>\n            <Text size={fontSize}>\n              {isValidElement(iconRight) && iconRight}\n              {isValidElementType(iconRight) && createElement(iconRight)}\n            </Text>\n          </RightBox>\n        )}\n      </Presentation>\n    ),\n    [border, fontSize, icon, iconRight, padding, radius, $hasClearButton, $hasPrefix, $hasSuffix]\n  )\n\n  // Render clear button (memoized)\n  const clearButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding])\n  const clearButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding])\n  const clearButtonProps: TextInputClearButtonProps = useMemo(\n    () => (typeof clearButton === 'object' ? clearButton : EMPTY_RECORD),\n    [clearButton]\n  )\n  const clearButtonNode = useMemo(\n    () =>\n      !disabled &&\n      !readOnly &&\n      clearButton && (\n        <RightBox padding={clearButtonBoxPadding} style={CLEAR_BUTTON_BOX_STYLE}>\n          <Button\n            {...clearButtonProps}\n            data-qa=\"clear-button\"\n            fontSize={fontSize}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={handleClearClick}\n            onMouseDown={handleClearMouseDown}\n            padding={clearButtonPadding}\n          />\n        </RightBox>\n      ),\n    [\n      clearButton,\n      clearButtonBoxPadding,\n      clearButtonPadding,\n      clearButtonProps,\n      disabled,\n      fontSize,\n      handleClearClick,\n      handleClearMouseDown,\n      readOnly,\n    ]\n  )\n\n  // Render suffix (memoized)\n  const suffixNode = useMemo(\n    () =>\n      suffix && (\n        <Suffix borderTop borderRight borderBottom radius={radius} sizing=\"border\" tone=\"inherit\">\n          <span>{suffix}</span>\n        </Suffix>\n      ),\n    [radius, suffix]\n  )\n\n  return (\n    <Root data-ui=\"TextInput\">\n      {prefixNode}\n      <InputRoot>\n        <Input\n          data-as=\"input\"\n          {...restProps}\n          $iconLeft={$hasIcon}\n          $iconRight={$hasIconRight || $hasClearButton}\n          $padding={padding}\n          $space={space}\n          $fontSize={fontSize}\n          disabled={disabled}\n          readOnly={readOnly}\n          ref={ref}\n          type={type}\n        />\n        {presentationNode}\n        {clearButtonNode}\n      </InputRoot>\n      {suffixNode}\n    </Root>\n  )\n})\n"],
  "mappings": "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",
  "names": []
}
