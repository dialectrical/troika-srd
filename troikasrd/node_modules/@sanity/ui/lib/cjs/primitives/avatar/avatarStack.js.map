{
  "version": 3,
  "sources": ["../../../../src/primitives/avatar/avatarStack.tsx"],
  "sourcesContent": ["import React, {cloneElement, forwardRef} from 'react'\nimport styled, {css} from 'styled-components'\nimport {EMPTY_RECORD} from '../../constants'\nimport {getResponsiveProp, rem, responsive, ThemeProps} from '../../styles'\nimport {AvatarSize} from '../../types'\nimport {childrenToElementArray} from '../helpers'\nimport {AvatarCounter} from './avatarCounter'\n\nconst BASE_STYLES = css`\n  white-space: nowrap;\n\n  & > div {\n    vertical-align: top;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  }\n`\n\nfunction avatarStackStyle() {\n  return BASE_STYLES\n}\n\nfunction responsiveAvatarStackSizeStyle(props: {size: AvatarSize | AvatarSize[]} & ThemeProps) {\n  const {theme} = props\n  const {avatar, media} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.size), (size) => {\n    const avatarSize = avatar.sizes[size]\n\n    if (!avatarSize) return EMPTY_RECORD\n\n    return {\n      '& > div + div': {\n        marginLeft: rem(avatarSize.distance),\n      },\n    }\n  })\n}\n\nconst Root = styled.div<{size: AvatarSize | AvatarSize[]}>(\n  responsiveAvatarStackSizeStyle,\n  avatarStackStyle\n)\n\n/**\n * @public\n */\nexport interface AvatarStackProps {\n  children: React.ReactNode\n  maxLength?: number\n  size?: AvatarSize | AvatarSize[]\n  tone?: 'navbar'\n}\n\n/**\n * @public\n */\nexport const AvatarStack = forwardRef(function AvatarStack(\n  props: AvatarStackProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'ref'>,\n  ref: React.ForwardedRef<HTMLDivElement>\n) {\n  const {children: childrenProp, maxLength: maxLengthProp = 4, size = 0, tone, ...restProps} = props\n  const maxLength = Math.max(maxLengthProp, 0)\n  const children = childrenToElementArray(childrenProp).filter(\n    (child) => typeof child !== 'string'\n  ) as React.ReactElement[]\n  const len = children.length\n  const visibleCount = maxLength - 1\n  const extraCount = len - visibleCount\n  const visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children\n\n  return (\n    <Root data-ui=\"AvatarStack\" {...restProps} ref={ref} size={size}>\n      {len === 0 && (\n        <div>\n          <AvatarCounter count={len} tone={tone} />\n        </div>\n      )}\n\n      {len !== 0 && extraCount > 1 && (\n        <div>\n          <AvatarCounter count={extraCount} size={size} tone={tone} />\n        </div>\n      )}\n\n      {visibleChildren.map((child, childIndex) => (\n        <div key={String(childIndex)}>{cloneElement(child, {size, tone})}</div>\n      ))}\n    </Root>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAA8C;AAC9C,+BAA0B;AAC1B,uBAA2B;AAC3B,oBAA6D;AAE7D,qBAAqC;AACrC,2BAA4B;AAE5B,MAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYpB,4BAA4B;AAC1B,SAAO;AAAA;AAGT,wCAAwC,OAAuD;AAC7F,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,QAAQ,UAAS,MAAM;AAE9B,SAAO,8BAAW,OAAO,qCAAkB,MAAM,OAAO,CAAC,SAAS;AAChE,UAAM,aAAa,OAAO,MAAM;AAEhC,QAAI,CAAC;AAAY,aAAO;AAExB,WAAO;AAAA,MACL,iBAAiB;AAAA,QACf,YAAY,uBAAI,WAAW;AAAA;AAAA;AAAA;AAAA;AAMnC,MAAM,OAAO,iCAAO,IAClB,gCACA;AAgBK,MAAM,cAAc,6BAAW,sBACpC,OACA,KACA;AACA,QAA6F,YAAtF,YAAU,cAAc,WAAW,gBAAgB,GAAG,OAAO,GAAG,SAAsB,IAAb,sBAAa,IAAb,CAAzE,YAAwB,aAA8B,QAAU;AACvE,QAAM,YAAY,KAAK,IAAI,eAAe;AAC1C,QAAM,WAAW,2CAAuB,cAAc,OACpD,CAAC,UAAU,OAAO,UAAU;AAE9B,QAAM,MAAM,SAAS;AACrB,QAAM,eAAe,YAAY;AACjC,QAAM,aAAa,MAAM;AACzB,QAAM,kBAAkB,aAAa,IAAI,SAAS,MAAM,YAAY,OAAO;AAE3E,SACE,mDAAC,MAAD;AAAA,IAAM,WAAQ;AAAA,KAAkB,YAAhC;AAAA,IAA2C;AAAA,IAAU;AAAA,MAClD,QAAQ,KACP,mDAAC,OAAD,MACE,mDAAC,oCAAD;AAAA,IAAe,OAAO;AAAA,IAAK;AAAA,OAI9B,QAAQ,KAAK,aAAa,KACzB,mDAAC,OAAD,MACE,mDAAC,oCAAD;AAAA,IAAe,OAAO;AAAA,IAAY;AAAA,IAAY;AAAA,OAIjD,gBAAgB,IAAI,CAAC,OAAO,eAC3B,mDAAC,OAAD;AAAA,IAAK,KAAK,OAAO;AAAA,KAAc,+BAAa,OAAO,EAAC,MAAM;AAAA;",
  "names": []
}
