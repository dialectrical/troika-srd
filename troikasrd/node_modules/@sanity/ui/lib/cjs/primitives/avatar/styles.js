var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  avatarInitialsStyle: () => avatarInitialsStyle,
  avatarRootStyle: () => avatarRootStyle,
  avatarStyle: () => avatarStyle,
  responsiveAvatarSizeStyle: () => responsiveAvatarSizeStyle
});
var import_styles = __toModule(require("../../styles"));
var import_internal = __toModule(require("../../styles/internal"));
const avatarStyle = {
  root: avatarRootStyle,
  arrow: avatarArrowStyle,
  bgStroke: avatarBgStrokeStyle,
  stroke: avatarStrokeStyle,
  initials: avatarInitialsStyle
};
function avatarArrowStyle() {
  return {
    position: "absolute",
    boxSizing: "border-box",
    zIndex: 0,
    opacity: 0,
    transition: "all 0.2s linear",
    transform: "rotate(-90deg) translate3d(0, 6px, 0)",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    "& > svg": {
      width: "11px",
      height: "7px",
      position: "absolute",
      top: "-5px",
      left: "50%",
      transform: "translateX(-6px)",
      "&:not([hidden])": {
        display: "block"
      }
    },
    "[data-arrow-position='inside'] > &": {
      transform: "rotate(-90deg) translate3d(0, 6px, 0)",
      opacity: 0
    },
    "[data-arrow-position='top'] > &": {
      opacity: 1,
      transform: "rotate(0deg)"
    },
    "[data-arrow-position='bottom'] > &": {
      opacity: 1,
      transform: "rotate(-180deg)"
    }
  };
}
function avatarRootStyle(props) {
  const { $color, theme } = props;
  const { focusRing } = theme.sanity;
  return {
    backgroundColor: $color,
    position: "relative",
    boxSizing: "border-box",
    userSelect: "none",
    boxShadow: "0 0 0 1px var(--card-bg-color)",
    '&[data-status="inactive"]': {
      opacity: 0.5
    },
    "&>svg": {
      "&:not([hidden])": {
        display: "block"
      }
    },
    '&[data-as="button"]': {
      "-webkit-font-smoothing": "inherit",
      appearance: "none",
      margin: 0,
      padding: 0,
      border: 0,
      font: "inherit",
      color: "inherit",
      outline: "none",
      "&:focus": {
        boxShadow: (0, import_internal.focusRingStyle)({ focusRing })
      },
      "&:focus:not(:focus-visible)": {
        boxShadow: "none"
      }
    }
  };
}
function responsiveAvatarSizeStyle(props) {
  const { theme } = props;
  const { avatar, media } = theme.sanity;
  return (0, import_styles.responsive)(media, props.$size, (size) => {
    const avatarSize = avatar.sizes[size] || avatar.sizes[0];
    return {
      width: (0, import_styles.rem)(avatarSize.size),
      height: (0, import_styles.rem)(avatarSize.size),
      borderRadius: (0, import_styles.rem)(avatarSize.size / 2),
      "&>svg": {
        width: (0, import_styles.rem)(avatarSize.size),
        height: (0, import_styles.rem)(avatarSize.size),
        borderRadius: (0, import_styles.rem)(avatarSize.size / 2)
      }
    };
  });
}
function avatarInitialsStyle(props) {
  const { theme } = props;
  const { base } = theme.sanity.color;
  return {
    width: "100%",
    height: "100%",
    color: base.fg,
    alignItems: "center",
    justifyContent: "center",
    textTransform: "uppercase",
    textAlign: "center",
    borderRadius: "50%",
    "&:not([hidden])": {
      display: "flex"
    }
  };
}
function avatarBgStrokeStyle() {
  return {
    strokeWidth: "4px",
    stroke: "var(--card-bg-color)"
  };
}
function avatarStrokeStyle() {
  return {
    strokeWidth: "3px",
    '[data-status="editing"] &': {
      strokeSasharray: "2 4",
      strokeLinecap: "round"
    }
  };
}
