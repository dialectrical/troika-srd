var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  AvatarStack: () => AvatarStack
});
var import_react = __toModule(require("react"));
var import_styled_components = __toModule(require("styled-components"));
var import_constants = __toModule(require("../../constants"));
var import_styles = __toModule(require("../../styles"));
var import_helpers = __toModule(require("../helpers"));
var import_avatarCounter = __toModule(require("./avatarCounter"));
const BASE_STYLES = import_styled_components.css`
  white-space: nowrap;

  & > div {
    vertical-align: top;

    &:not([hidden]) {
      display: inline-block;
    }
  }
`;
function avatarStackStyle() {
  return BASE_STYLES;
}
function responsiveAvatarStackSizeStyle(props) {
  const { theme } = props;
  const { avatar, media } = theme.sanity;
  return (0, import_styles.responsive)(media, (0, import_styles.getResponsiveProp)(props.size), (size) => {
    const avatarSize = avatar.sizes[size];
    if (!avatarSize)
      return import_constants.EMPTY_RECORD;
    return {
      "& > div + div": {
        marginLeft: (0, import_styles.rem)(avatarSize.distance)
      }
    };
  });
}
const Root = import_styled_components.default.div(responsiveAvatarStackSizeStyle, avatarStackStyle);
const AvatarStack = (0, import_react.forwardRef)(function AvatarStack2(props, ref) {
  const _a = props, { children: childrenProp, maxLength: maxLengthProp = 4, size = 0, tone } = _a, restProps = __objRest(_a, ["children", "maxLength", "size", "tone"]);
  const maxLength = Math.max(maxLengthProp, 0);
  const children = (0, import_helpers.childrenToElementArray)(childrenProp).filter((child) => typeof child !== "string");
  const len = children.length;
  const visibleCount = maxLength - 1;
  const extraCount = len - visibleCount;
  const visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
  return /* @__PURE__ */ import_react.default.createElement(Root, __spreadProps(__spreadValues({
    "data-ui": "AvatarStack"
  }, restProps), {
    ref,
    size
  }), len === 0 && /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement(import_avatarCounter.AvatarCounter, {
    count: len,
    tone
  })), len !== 0 && extraCount > 1 && /* @__PURE__ */ import_react.default.createElement("div", null, /* @__PURE__ */ import_react.default.createElement(import_avatarCounter.AvatarCounter, {
    count: extraCount,
    size,
    tone
  })), visibleChildren.map((child, childIndex) => /* @__PURE__ */ import_react.default.createElement("div", {
    key: String(childIndex)
  }, (0, import_react.cloneElement)(child, { size, tone }))));
});
