var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  inputElementStyle: () => inputElementStyle,
  radioBaseStyle: () => radioBaseStyle
});
var import_styled_components = __toModule(require("styled-components"));
var import_styles = __toModule(require("../../styles"));
var import_internal = __toModule(require("../../styles/internal"));
function radioBaseStyle() {
  return import_styled_components.css`
    position: relative;

    &:not([hidden]) {
      display: inline-block;
    }

    &[data-read-only] {
      outline: 1px solid red;
    }
  `;
}
function inputElementStyle(props) {
  const { theme } = props;
  const { focusRing, input } = theme.sanity;
  const color = theme.sanity.color.input;
  const dist = (input.radio.size - input.radio.markSize) / 2;
  return import_styled_components.css`
    appearance: none;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    height: 100%;
    width: 100%;
    outline: none;
    z-index: 1;
    padding: 0;
    margin: 0;
    border-radius: ${(0, import_styles.rem)(input.radio.size / 2)};
    border: none;

    /* enabled */
    & + span {
      display: block;
      position: relative;
      height: ${(0, import_styles.rem)(input.radio.size)};
      width: ${(0, import_styles.rem)(input.radio.size)};
      border-radius: ${(0, import_styles.rem)(input.radio.size / 2)};
      background: ${color.default.enabled.bg};
      box-shadow: ${(0, import_internal.focusRingBorderStyle)({
    color: color.default.enabled.border,
    width: input.border.width
  })};

      &::after {
        content: '';
        position: absolute;
        top: ${(0, import_styles.rem)(dist)};
        left: ${(0, import_styles.rem)(dist)};
        height: ${(0, import_styles.rem)(input.radio.markSize)};
        width: ${(0, import_styles.rem)(input.radio.markSize)};
        border-radius: ${(0, import_styles.rem)(input.radio.markSize / 2)};
        background: ${color.default.enabled.fg};
        opacity: 0;
      }
    }

    /* focused */
    &:not(:disabled):focus + span {
      box-shadow: ${(0, import_internal.focusRingStyle)({
    border: { width: input.border.width, color: color.default.enabled.border },
    focusRing
  })};
    }

    &:not(:disabled):focus:not(:focus-visible) + span {
      box-shadow: ${(0, import_internal.focusRingBorderStyle)({
    color: color.default.enabled.border,
    width: input.border.width
  })};
    }

    &:checked + span::after {
      opacity: 1;
    }

    /* read only */
    &[data-read-only] + span {
      box-shadow: 0 0 0 1px ${color.default.readOnly.border};
      background: ${color.default.readOnly.bg};

      &::after {
        background: ${color.default.readOnly.fg};
      }
    }

    /* disabled */
    &:not([data-read-only]):disabled + span {
      box-shadow: 0 0 0 1px ${color.default.disabled.border};
      background: ${color.default.disabled.bg};

      &::after {
        background: ${color.default.disabled.fg};
      }
    }
  `;
}
