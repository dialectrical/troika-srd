{
  "version": 3,
  "sources": ["../../../../src/primitives/heading/heading.tsx"],
  "sourcesContent": ["import React, {forwardRef} from 'react'\nimport styled from 'styled-components'\nimport {\n  ResponsiveFontStyleProps,\n  responsiveHeadingFont,\n  responsiveTextAlignStyle,\n  ResponsiveTextAlignStyleProps,\n} from '../../styles/internal'\nimport {ThemeFontWeightKey} from '../../theme'\nimport {TextAlign} from '../../types'\nimport {headingBaseStyle} from './styles'\nimport {HeadingStyleProps} from './types'\n\n/**\n * @public\n */\nexport interface HeadingProps {\n  accent?: boolean\n  align?: TextAlign | TextAlign[]\n  as?: React.ElementType | keyof JSX.IntrinsicElements\n  muted?: boolean\n  size?: number | number[]\n  /**\n   * Controls how overflowing text is treated.\n   * Use `textOverflow=\"ellipsis\"` to render text as a single line which is concatenated with a `\u2026` symbol.\n   * @beta\n   */\n  textOverflow?: 'ellipsis'\n  weight?: ThemeFontWeightKey\n}\n\nconst Root = styled.div<\n  HeadingStyleProps & ResponsiveTextAlignStyleProps & ResponsiveFontStyleProps\n>(headingBaseStyle, responsiveTextAlignStyle, responsiveHeadingFont)\n\nconst SpanWithTextOverflow = styled.span`\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`\n\n/**\n * @public\n */\nexport const Heading = forwardRef(function Heading(\n  props: HeadingProps & Omit<React.HTMLProps<HTMLElement>, 'as' | 'size'>,\n  ref: React.ForwardedRef<HTMLElement>\n) {\n  const {\n    accent = false,\n    align,\n    children: childrenProp,\n    muted = false,\n    size = 2,\n    textOverflow,\n    weight,\n    ...restProps\n  } = props\n\n  let children = childrenProp\n\n  if (textOverflow === 'ellipsis') {\n    children = <SpanWithTextOverflow>{children}</SpanWithTextOverflow>\n  }\n\n  return (\n    <Root\n      data-ui=\"Heading\"\n      {...restProps}\n      $accent={accent}\n      $align={align}\n      $muted={muted}\n      $size={size}\n      $weight={weight}\n      ref={ref}\n    >\n      {children}\n    </Root>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAgC;AAChC,+BAAmB;AACnB,sBAKO;AAGP,oBAA+B;AAqB/B,MAAM,OAAO,iCAAO,IAElB,gCAAkB,0CAA0B;AAE9C,MAAM,uBAAuB,iCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAU7B,MAAM,UAAU,6BAAW,kBAChC,OACA,KACA;AACA,QASI,YARF;AAAA,aAAS;AAAA,IACT;AAAA,IACA,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP;AAAA,IACA;AAAA,MAEE,IADC,sBACD,IADC;AAAA,IAPH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAIF,MAAI,WAAW;AAEf,MAAI,iBAAiB,YAAY;AAC/B,eAAW,mDAAC,sBAAD,MAAuB;AAAA;AAGpC,SACE,mDAAC,MAAD;AAAA,IACE,WAAQ;AAAA,KACJ,YAFN;AAAA,IAGE,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,IACT;AAAA,MAEC;AAAA;",
  "names": []
}
