var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  cardBaseStyle: () => cardBaseStyle,
  cardColorStyle: () => cardColorStyle,
  cardStyle: () => cardStyle
});
var import_styled_components = __toModule(require("styled-components"));
var import_colorVars = __toModule(require("../../styles/colorVars"));
var import_focusRing = __toModule(require("../../styles/focusRing"));
function cardStyle(props) {
  return [cardBaseStyle(props), cardColorStyle(props)];
}
function cardBaseStyle(props) {
  const { $checkered, theme } = props;
  const space = theme.sanity.space;
  return import_styled_components.css`
    ${$checkered && import_styled_components.css`
      background-size: ${space[3]}px ${space[3]}px;
      background-position: 50% 50%;
      background-image: var(--card-bg-image);
    `}

    &[data-as='button'] {
      -webkit-font-smoothing: inherit;
      appearance: none;
      outline: none;
      font: inherit;
      text-align: inherit;
      border: 0;
      width: stretch;
    }

    /* &:is(a) */
    &[data-as='a'] {
      outline: none;
      text-decoration: none;
    }

    /* &:is(pre) */
    &[data-as='pre'] {
      font: inherit;
    }
  `;
}
function cardColorStyle(props) {
  var _a, _b;
  const { $checkered, $focusRing, theme } = props;
  const { focusRing } = theme.sanity;
  const { base, card } = theme.sanity.color;
  const border = { width: 0, color: "var(--card-border-color)" };
  return import_styled_components.css`
    ${(0, import_colorVars._colorVarsStyle)(base, card.enabled, $checkered)}

    background-color: var(--card-bg-color);
    color: var(--card-fg-color);

    /* &:is(button) */
    &[data-as='button'] {
      --card-focus-ring-box-shadow: none;

      box-shadow: var(--card-focus-ring-box-shadow);

      &:disabled {
        ${(0, import_colorVars._colorVarsStyle)(base, card.disabled, $checkered)}
      }

      &:not(:disabled) {
        &[data-pressed],
        &[aria-pressed='true'] {
          ${(0, import_colorVars._colorVarsStyle)(base, card.pressed, $checkered)}
        }

        &[data-selected],
        [aria-selected='true'] > & {
          ${(0, import_colorVars._colorVarsStyle)(base, card.selected, $checkered)}
        }

        @media (hover: hover) {
          &:not([data-pressed]):not([aria-pressed='true']):not([data-selected]) {
            &:hover {
              ${(0, import_colorVars._colorVarsStyle)(base, card.hovered, $checkered)}
            }

            &:active {
              ${(0, import_colorVars._colorVarsStyle)(base, card.pressed, $checkered)}
            }
          }
        }

        &:focus {
          --card-focus-ring-box-shadow: ${$focusRing ? (0, import_focusRing.focusRingStyle)({ base, border, focusRing }) : void 0};
        }

        &:focus:not(:focus-visible) {
          --card-focus-ring-box-shadow: ${$focusRing ? (0, import_focusRing.focusRingBorderStyle)(border) : void 0};
        }
      }
    }

    /* &:is(a) */
    &[data-as='a'] {
      box-shadow: var(--card-focus-ring-box-shadow);

      &[data-disabled] {
        ${(0, import_colorVars._colorVarsStyle)(base, card.disabled, $checkered)}
      }

      &:not([data-disabled]) {
        &[data-pressed] {
          ${(0, import_colorVars._colorVarsStyle)(base, card.pressed, $checkered)}
        }

        &[data-selected],
        [aria-selected='true'] > & {
          ${(0, import_colorVars._colorVarsStyle)(base, card.selected, $checkered)}
        }

        @media (hover: hover) {
          &:not([data-pressed]):not([data-selected]) {
            &:hover {
              ${(0, import_colorVars._colorVarsStyle)(base, card.hovered, $checkered)}
            }

            &:active {
              ${(0, import_colorVars._colorVarsStyle)(base, card.pressed, $checkered)}
            }
          }
        }

        &:focus {
          --card-focus-ring-box-shadow: ${$focusRing ? (0, import_focusRing.focusRingStyle)({ base, border, focusRing }) : void 0};
        }

        &:focus:not(:focus-visible) {
          --card-focus-ring-box-shadow: ${$focusRing ? (0, import_focusRing.focusRingBorderStyle)(border) : void 0};
        }
      }
    }

    ${(_b = (_a = theme.sanity.styles) == null ? void 0 : _a.card) == null ? void 0 : _b.root}
  `;
}
