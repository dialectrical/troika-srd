var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  buttonBaseStyles: () => buttonBaseStyles,
  buttonColorStyles: () => buttonColorStyles
});
var import_styled_components = __toModule(require("styled-components"));
var import_colorVars = __toModule(require("../../styles/colorVars"));
var import_internal = __toModule(require("../../styles/internal"));
function buttonBaseStyles() {
  return import_styled_components.css`
    -webkit-font-smoothing: inherit;
    appearance: none;
    display: inline-flex;
    align-items: center;
    font: inherit;
    border: 0;
    outline: none;
    user-select: none;
    text-decoration: none;
    border: 0;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    white-space: nowrap;
    text-align: left;
    position: relative;

    & > span {
      display: block;
      flex: 1;
      min-width: 0;
      border-radius: inherit;
    }

    &::-moz-focus-inner {
      border: 0;
      padding: 0;
    }
  `;
}
const buttonTheme = { border: { width: 1 } };
function buttonColorStyles(props) {
  var _a, _b;
  const { $mode, theme } = props;
  const { focusRing } = theme.sanity;
  const base = theme.sanity.color.base;
  const mode = theme.sanity.color.button[$mode] || theme.sanity.color.button.default;
  const color = mode[props.$tone] || mode.default;
  const border = { width: buttonTheme.border.width, color: "var(--card-border-color)" };
  return [
    (0, import_colorVars._colorVarsStyle)(base, color.enabled),
    {
      backgroundColor: "var(--card-bg-color)",
      color: "var(--card-fg-color)",
      boxShadow: (0, import_internal.focusRingBorderStyle)(border),
      '&:disabled, &[data-disabled="true"]': (0, import_colorVars._colorVarsStyle)(base, color.disabled),
      "&:not([data-disabled='true'])": {
        "&:focus": {
          boxShadow: (0, import_internal.focusRingStyle)({ base, border, focusRing })
        },
        "&:focus:not(:focus-visible)": {
          boxShadow: (0, import_internal.focusRingBorderStyle)(border)
        },
        "@media (hover: hover)": {
          "&:hover": (0, import_colorVars._colorVarsStyle)(base, color.hovered),
          "&:active": (0, import_colorVars._colorVarsStyle)(base, color.pressed)
        },
        "&[data-selected]": (0, import_colorVars._colorVarsStyle)(base, color.pressed)
      }
    },
    (_b = (_a = theme.sanity.styles) == null ? void 0 : _a.button) == null ? void 0 : _b.root
  ].filter(Boolean);
}
