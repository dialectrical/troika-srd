var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  treeItemBoxStyle: () => treeItemBoxStyle,
  treeItemRootColorStyle: () => treeItemRootColorStyle,
  treeItemRootStyle: () => treeItemRootStyle
});
var import_styled_components = __toModule(require("styled-components"));
var import_styles = __toModule(require("../../styles"));
var import_colorVars = __toModule(require("../../styles/colorVars"));
function treeItemRootStyle() {
  return import_styled_components.css`
    &[role='none'] > [role='treeitem'] {
      outline: none;
      cursor: default;
      border-radius: 3px;

      &:focus {
        position: relative;
      }
    }

    &[role='treeitem'] {
      outline: none;

      & > div {
        cursor: default;
        border-radius: 3px;
      }

      &:focus > div {
        position: relative;
      }
    }
  `;
}
function treeItemRootColorStyle(props) {
  const { theme } = props;
  const $tone = "default";
  const { base, muted, selectable } = theme.sanity.color;
  const tone = selectable ? selectable[$tone] || selectable.default : muted[$tone] || muted.default;
  return import_styled_components.css`
    /* <div role="none"><a data-ui="TreeItem__box" role="treeitem" tabIndex="0"></div> */
    &[role='none'] {
      & > [role='treeitem'] {
        ${(0, import_colorVars._colorVarsStyle)(base, tone.enabled)}

        background-color: var(--card-bg-color);
        color: var(--treeitem-fg-color);
      }

      &[data-selected] > [role='treeitem'] {
        ${(0, import_colorVars._colorVarsStyle)(base, tone.pressed)}
      }

      @media (hover: hover) {
        &:not([data-selected]) > [role='treeitem']:not(:focus):hover {
          ${(0, import_colorVars._colorVarsStyle)(base, tone.hovered)}
        }

        & > [role='treeitem']:focus {
          ${(0, import_colorVars._colorVarsStyle)(base, tone.selected)}
        }
      }
    }

    /* <div role="treeitem" tabIndex="0"><div data-ui="TreeItem__box"></div> */
    &[role='treeitem'] {
      & > [data-ui='TreeItem__box'] {
        ${(0, import_colorVars._colorVarsStyle)(base, tone.enabled)}

        background-color: var(--card-bg-color);
        color: var(--card-fg-color);
      }

      &[data-selected] > [data-ui='TreeItem__box'] {
        ${(0, import_colorVars._colorVarsStyle)(base, tone.pressed)}
      }

      @media (hover: hover) {
        &:not([data-selected]):not(:focus) > [data-ui='TreeItem__box']:hover {
          ${(0, import_colorVars._colorVarsStyle)(base, tone.hovered)}
        }

        &:focus > [data-ui='TreeItem__box'] {
          ${(0, import_colorVars._colorVarsStyle)(base, tone.selected)}
        }
      }
    }
  `;
}
function treeItemBoxStyle(props) {
  const { $level, theme } = props;
  const { space } = theme.sanity;
  return import_styled_components.css`
    padding-left: ${(0, import_styles.rem)(space[2] * $level)};

    &[data-as='a'] {
      text-decoration: none;
    }
  `;
}
