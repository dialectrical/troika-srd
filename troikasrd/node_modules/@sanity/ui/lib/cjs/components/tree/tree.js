var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  Tree: () => Tree
});
var import_react = __toModule(require("react"));
var import_primitives = __toModule(require("../../primitives"));
var import_helpers = __toModule(require("./helpers"));
var import_treeContext = __toModule(require("./treeContext"));
function Tree(props) {
  const _a = props, { children, space = 1 } = _a, restProps = __objRest(_a, ["children", "space"]);
  const [focusedElement, setFocusedElement] = (0, import_react.useState)(null);
  const path = (0, import_react.useMemo)(() => [], []);
  const rootRef = (0, import_react.useRef)(null);
  const [itemElements, setItemElements] = (0, import_react.useState)([]);
  const [state, setState] = (0, import_react.useState)({});
  const registerItem = (0, import_react.useCallback)((element, path2, expanded, selected) => {
    setState((s) => __spreadProps(__spreadValues({}, s), { [path2]: { element, expanded } }));
    if (selected) {
      setFocusedElement(element);
    }
    return () => {
      setState((s) => {
        const newState = __spreadValues({}, s);
        delete newState[path2];
        return newState;
      });
    };
  }, []);
  const setExpanded = (0, import_react.useCallback)((path2, expanded) => {
    setState((s) => {
      const itemState = s[path2];
      if (!itemState)
        return s;
      return __spreadProps(__spreadValues({}, s), { [path2]: __spreadProps(__spreadValues({}, itemState), { expanded }) });
    });
  }, []);
  const contextValue = (0, import_react.useMemo)(() => ({
    version: 0,
    focusedElement: focusedElement || itemElements[0] || null,
    level: 0,
    path,
    registerItem,
    setExpanded,
    setFocusedElement,
    space,
    state
  }), [focusedElement, itemElements, path, registerItem, setExpanded, space, state]);
  const handleKeyDown = (0, import_react.useCallback)((event) => {
    var _a2;
    if (!focusedElement)
      return;
    if (event.key === "ArrowDown") {
      event.preventDefault();
      const nextEl = (0, import_helpers._findNextItemElement)(state, itemElements, focusedElement);
      if (nextEl) {
        (0, import_helpers._focusItemElement)(nextEl);
        setFocusedElement(nextEl);
      }
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      const prevEl = (0, import_helpers._findPrevItemElement)(state, itemElements, focusedElement);
      if (prevEl) {
        (0, import_helpers._focusItemElement)(prevEl);
        setFocusedElement(prevEl);
      }
      return;
    }
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      const itemKey = focusedElement.getAttribute("data-tree-key");
      if (!itemKey)
        return;
      const itemState = state[itemKey];
      if (!itemState)
        return;
      if (itemState.expanded) {
        setState((s) => {
          const itemState2 = s[itemKey];
          if (!itemState2)
            return s;
          return __spreadProps(__spreadValues({}, s), { [itemKey]: __spreadProps(__spreadValues({}, itemState2), { expanded: false }) });
        });
      } else {
        const itemPath = itemKey.split("/");
        itemPath.pop();
        const parentKey = itemPath.join("/");
        const parentState = parentKey && state[parentKey];
        if (parentState) {
          parentState.element.focus();
          setFocusedElement(parentState.element);
        }
      }
      return;
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      const focusedKey = focusedElement.getAttribute("data-tree-key");
      if (!focusedKey)
        return;
      if (!((_a2 = state[focusedKey]) == null ? void 0 : _a2.expanded)) {
        setState((s) => {
          const itemState = s[focusedKey];
          if (!itemState)
            return s;
          return __spreadProps(__spreadValues({}, s), { [focusedKey]: __spreadProps(__spreadValues({}, itemState), { expanded: true }) });
        });
      }
      return;
    }
  }, [focusedElement, itemElements, state]);
  (0, import_react.useEffect)(() => {
    if (!rootRef.current)
      return;
    const _itemElements = Array.from(rootRef.current.querySelectorAll('[data-ui="TreeItem"]'));
    setItemElements(_itemElements);
  }, [children]);
  return /* @__PURE__ */ import_react.default.createElement(import_treeContext.TreeContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ import_react.default.createElement(import_primitives.Stack, __spreadProps(__spreadValues({
    as: "ul",
    "data-ui": "Tree"
  }, restProps), {
    onKeyDown: handleKeyDown,
    ref: rootRef,
    role: "tree",
    space
  }), children));
}
