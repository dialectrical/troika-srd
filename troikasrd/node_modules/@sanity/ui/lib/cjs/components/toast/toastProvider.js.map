{
  "version": 3,
  "sources": ["../../../../src/components/toast/toastProvider.tsx"],
  "sourcesContent": ["import {AnimatePresence, motion} from 'framer-motion'\nimport React, {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport styled from 'styled-components'\nimport {Box} from '../../primitives'\nimport {Layer} from '../../utils'\nimport {Toast} from './toast'\nimport {ToastContext} from './toastContext'\nimport {ToastContextValue, ToastParams} from './types'\n\ninterface ToastState {\n  toasts: {\n    dismiss: () => void\n    id: string\n    params: ToastParams\n  }[]\n}\n\n/**\n * @public\n */\nexport interface ToastProviderProps {\n  children?: React.ReactNode\n  padding?: number | number[]\n  paddingX?: number | number[]\n  paddingY?: number | number[]\n  zOffset?: number | number[]\n}\n\nconst Root = styled(Layer)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n`\n\nconst ToastContainer = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  max-width: 420px;\n  width: 100%;\n`\n\nlet toastId = 0\n\n/**\n * @public\n */\nexport function ToastProvider(props: ToastProviderProps): React.ReactElement {\n  const {children, padding = 4, paddingX, paddingY, zOffset} = props\n  const [state, setState] = useState<ToastState>({toasts: []})\n  const toastsRef = useRef<{[key: string]: {timeoutId: NodeJS.Timeout}}>({})\n\n  const push = useCallback((params: ToastParams) => {\n    const id = params.id || String(toastId++)\n    const duration = params.duration || 5000\n\n    const dismiss = () => {\n      const timeoutId = toastsRef.current[id]?.timeoutId\n\n      setState((prevState) => {\n        const idx = prevState.toasts.findIndex((t) => t.id === id)\n\n        if (idx > -1) {\n          const toasts = prevState.toasts.slice(0)\n\n          toasts.splice(idx, 1)\n\n          return {...prevState, toasts}\n        }\n\n        return prevState\n      })\n\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId)\n        delete toastsRef.current[id]\n      }\n    }\n\n    setState((prevState) => {\n      return {\n        ...prevState,\n        toasts: prevState.toasts\n          .filter((t) => t.id !== id)\n          .concat([\n            {\n              dismiss,\n              id,\n              params: {...params, duration},\n            },\n          ]),\n      }\n    })\n\n    if (toastsRef.current[id]) {\n      clearTimeout(toastsRef.current[id].timeoutId)\n      delete toastsRef.current[id]\n    }\n\n    toastsRef.current[id] = {timeoutId: setTimeout(dismiss, duration)}\n\n    return id\n  }, [])\n\n  // clear timeouts on unmount\n  useEffect(\n    () => () => {\n      for (const {timeoutId} of Object.values(toastsRef.current)) {\n        clearTimeout(timeoutId)\n      }\n\n      toastsRef.current = {}\n    },\n    []\n  )\n\n  const value: ToastContextValue = useMemo(() => ({version: 0.0, push}), [push])\n\n  return (\n    <ToastContext.Provider value={value}>\n      {children}\n\n      <Root data-ui=\"ToastProvider\" zOffset={zOffset}>\n        <ToastContainer>\n          <Box padding={padding} paddingX={paddingX} paddingY={paddingY}>\n            <AnimatePresence initial={false}>\n              {state.toasts.map(({dismiss, id, params}) => (\n                <motion.div\n                  animate={{opacity: 1, y: 0, scale: 1}}\n                  exit={{opacity: 0, scale: 0.5, transition: {duration: 0.2}}}\n                  initial={{opacity: 0, y: 32, scale: 0.25}}\n                  key={id}\n                  layout=\"position\"\n                  transition={{type: 'spring', damping: 30, stiffness: 400}}\n                >\n                  <Toast\n                    closable={params.closable}\n                    description={params.description}\n                    onClose={dismiss}\n                    status={params.status}\n                    title={params.title}\n                  />\n                </motion.div>\n              ))}\n            </AnimatePresence>\n          </Box>\n        </ToastContainer>\n      </Root>\n    </ToastContext.Provider>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,2BAAsC;AACtC,mBAAuE;AACvE,+BAAmB;AACnB,wBAAkB;AAClB,mBAAoB;AACpB,mBAAoB;AACpB,0BAA2B;AAsB3B,MAAM,OAAO,sCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpB,MAAM,iBAAiB,iCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS9B,IAAI,UAAU;AAKP,uBAAuB,OAA+C;AAC3E,QAAM,EAAC,UAAU,UAAU,GAAG,UAAU,UAAU,YAAW;AAC7D,QAAM,CAAC,OAAO,YAAY,2BAAqB,EAAC,QAAQ;AACxD,QAAM,YAAY,yBAAqD;AAEvE,QAAM,OAAO,8BAAY,CAAC,WAAwB;AAChD,UAAM,KAAK,OAAO,MAAM,OAAO;AAC/B,UAAM,WAAW,OAAO,YAAY;AAEpC,UAAM,UAAU,MAAM;AA5D1B;AA6DM,YAAM,YAAY,gBAAU,QAAQ,QAAlB,mBAAuB;AAEzC,eAAS,CAAC,cAAc;AACtB,cAAM,MAAM,UAAU,OAAO,UAAU,CAAC,MAAM,EAAE,OAAO;AAEvD,YAAI,MAAM,IAAI;AACZ,gBAAM,SAAS,UAAU,OAAO,MAAM;AAEtC,iBAAO,OAAO,KAAK;AAEnB,iBAAO,iCAAI,YAAJ,EAAe;AAAA;AAGxB,eAAO;AAAA;AAGT,UAAI,cAAc,QAAW;AAC3B,qBAAa;AACb,eAAO,UAAU,QAAQ;AAAA;AAAA;AAI7B,aAAS,CAAC,cAAc;AACtB,aAAO,iCACF,YADE;AAAA,QAEL,QAAQ,UAAU,OACf,OAAO,CAAC,MAAM,EAAE,OAAO,IACvB,OAAO;AAAA,UACN;AAAA,YACE;AAAA,YACA;AAAA,YACA,QAAQ,iCAAI,SAAJ,EAAY;AAAA;AAAA;AAAA;AAAA;AAM9B,QAAI,UAAU,QAAQ,KAAK;AACzB,mBAAa,UAAU,QAAQ,IAAI;AACnC,aAAO,UAAU,QAAQ;AAAA;AAG3B,cAAU,QAAQ,MAAM,EAAC,WAAW,WAAW,SAAS;AAExD,WAAO;AAAA,KACN;AAGH,8BACE,MAAM,MAAM;AACV,eAAW,EAAC,eAAc,OAAO,OAAO,UAAU,UAAU;AAC1D,mBAAa;AAAA;AAGf,cAAU,UAAU;AAAA,KAEtB;AAGF,QAAM,QAA2B,0BAAQ,MAAO,GAAC,SAAS,GAAK,SAAQ,CAAC;AAExE,SACE,mDAAC,iCAAa,UAAd;AAAA,IAAuB;AAAA,KACpB,UAED,mDAAC,MAAD;AAAA,IAAM,WAAQ;AAAA,IAAgB;AAAA,KAC5B,mDAAC,gBAAD,MACE,mDAAC,uBAAD;AAAA,IAAK;AAAA,IAAkB;AAAA,IAAoB;AAAA,KACzC,mDAAC,sCAAD;AAAA,IAAiB,SAAS;AAAA,KACvB,MAAM,OAAO,IAAI,CAAC,EAAC,SAAS,IAAI,aAC/B,mDAAC,4BAAO,KAAR;AAAA,IACE,SAAS,EAAC,SAAS,GAAG,GAAG,GAAG,OAAO;AAAA,IACnC,MAAM,EAAC,SAAS,GAAG,OAAO,KAAK,YAAY,EAAC,UAAU;AAAA,IACtD,SAAS,EAAC,SAAS,GAAG,GAAG,IAAI,OAAO;AAAA,IACpC,KAAK;AAAA,IACL,QAAO;AAAA,IACP,YAAY,EAAC,MAAM,UAAU,SAAS,IAAI,WAAW;AAAA,KAErD,mDAAC,oBAAD;AAAA,IACE,UAAU,OAAO;AAAA,IACjB,aAAa,OAAO;AAAA,IACpB,SAAS;AAAA,IACT,QAAQ,OAAO;AAAA,IACf,OAAO,OAAO;AAAA;AAAA;",
  "names": []
}
