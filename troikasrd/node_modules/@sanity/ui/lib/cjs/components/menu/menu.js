var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  Menu: () => Menu
});
var import_react = __toModule(require("react"));
var import_styled_components = __toModule(require("styled-components"));
var import_hooks = __toModule(require("../../hooks"));
var import_primitives = __toModule(require("../../primitives"));
var import_utils = __toModule(require("../../utils"));
var import_helpers = __toModule(require("./helpers"));
var import_menuContext = __toModule(require("./menuContext"));
const Root = (0, import_styled_components.default)(import_primitives.Box)`
  outline: none;
  overflow: auto;
`;
const Menu = (0, import_react.forwardRef)(function Menu2(props, ref) {
  const _a = props, {
    children,
    focusFirst,
    focusLast,
    onClickOutside,
    onEscape,
    onItemClick,
    onItemSelect,
    onKeyDown,
    originElement,
    padding = 1,
    registerElement,
    shouldFocus = props.focusFirst && "first" || props.focusLast && "last" || null,
    space = 1
  } = _a, restProps = __objRest(_a, [
    "children",
    "focusFirst",
    "focusLast",
    "onClickOutside",
    "onEscape",
    "onItemClick",
    "onItemSelect",
    "onKeyDown",
    "originElement",
    "padding",
    "registerElement",
    "shouldFocus",
    "space"
  ]);
  const { isTopLayer } = (0, import_utils.useLayer)();
  const [rootElement, setRootElement] = (0, import_react.useState)(null);
  const elementsRef = (0, import_react.useRef)([]);
  const [activeIndex, setActiveIndex] = (0, import_react.useState)(-1);
  const activeIndexRef = (0, import_react.useRef)(activeIndex);
  const activeElement = elementsRef.current[activeIndex] || null;
  const activeElementRef = (0, import_react.useRef)(activeElement);
  const mounted = Boolean(rootElement);
  const setRef = (0, import_react.useCallback)((el) => {
    setRootElement(el);
    if (typeof ref === "function")
      ref(el);
    else if (ref)
      ref.current = el;
  }, [ref]);
  const mount = (0, import_react.useCallback)((element, selected) => {
    if (!element)
      return () => void 0;
    if (elementsRef.current.indexOf(element) === -1) {
      elementsRef.current.push(element);
      (0, import_helpers._sortElements)(rootElement, elementsRef.current);
    }
    if (selected) {
      const selectedIndex = elementsRef.current.indexOf(element);
      setActiveIndex(selectedIndex);
      activeIndexRef.current = selectedIndex;
    }
    return () => {
      const idx = elementsRef.current.indexOf(element);
      if (idx > -1) {
        elementsRef.current.splice(idx, 1);
      }
    };
  }, [rootElement]);
  const handleKeyDown = (0, import_react.useCallback)((event) => {
    if (event.key === "Tab") {
      if (originElement) {
        originElement.focus();
      }
      return;
    }
    if (event.key === "Home") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = (0, import_helpers._getFocusableElements)(elementsRef.current);
      const el = focusableElements[0];
      if (!el)
        return;
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      activeIndexRef.current = currentIndex;
      return;
    }
    if (event.key === "End") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = (0, import_helpers._getFocusableElements)(elementsRef.current);
      const el = focusableElements[focusableElements.length - 1];
      if (!el)
        return;
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      activeIndexRef.current = currentIndex;
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = (0, import_helpers._getFocusableElements)(elementsRef.current);
      const focusableLen = focusableElements.length;
      if (focusableLen === 0)
        return;
      const focusedElement = elementsRef.current[activeIndex];
      let focusedIndex = focusableElements.indexOf(focusedElement);
      focusedIndex = (focusedIndex - 1 + focusableLen) % focusableLen;
      const el = focusableElements[focusedIndex];
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      activeIndexRef.current = currentIndex;
      return;
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = (0, import_helpers._getFocusableElements)(elementsRef.current);
      const focusableLen = focusableElements.length;
      if (focusableLen === 0)
        return;
      const focusedElement = elementsRef.current[activeIndex];
      let focusedIndex = focusableElements.indexOf(focusedElement);
      focusedIndex = (focusedIndex + 1) % focusableLen;
      const el = focusableElements[focusedIndex];
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      activeIndexRef.current = currentIndex;
      return;
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [activeIndex, onKeyDown, originElement]);
  const handleItemMouseEnter = (0, import_react.useCallback)((event) => {
    const element = event.currentTarget;
    const currentIndex = elementsRef.current.indexOf(element);
    setActiveIndex(currentIndex);
    activeIndexRef.current = currentIndex;
  }, []);
  const handleItemMouseLeave = (0, import_react.useCallback)(() => {
    rootElement == null ? void 0 : rootElement.focus();
    setActiveIndex(-1);
    activeIndexRef.current = -1;
  }, [rootElement]);
  (0, import_react.useEffect)(() => {
    if (onItemSelect)
      onItemSelect(activeIndex);
  }, [activeIndex, onItemSelect]);
  (0, import_react.useEffect)(() => {
    activeElementRef.current = activeElement;
  }, [activeElement]);
  (0, import_react.useEffect)(() => {
    if (!mounted)
      return;
    const rafId = window.requestAnimationFrame(() => {
      const _activeIndex = activeIndexRef.current;
      if (_activeIndex === -1) {
        if (shouldFocus === "first") {
          const focusableElements = (0, import_helpers._getFocusableElements)(elementsRef.current);
          const el = focusableElements[0];
          if (el) {
            const currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
            activeIndexRef.current = currentIndex;
          }
        }
        if (shouldFocus === "last") {
          const focusableElements = (0, import_helpers._getFocusableElements)(elementsRef.current);
          const el = focusableElements[focusableElements.length - 1];
          if (el) {
            const currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
            activeIndexRef.current = currentIndex;
          }
        }
        return;
      }
      const element = elementsRef.current[_activeIndex] || null;
      element == null ? void 0 : element.focus();
    });
    return () => {
      window.cancelAnimationFrame(rafId);
    };
  }, [activeIndex, mounted, shouldFocus]);
  (0, import_hooks.useClickOutside)((0, import_react.useCallback)((event) => isTopLayer && onClickOutside && onClickOutside(event), [isTopLayer, onClickOutside]), [rootElement]);
  (0, import_hooks.useGlobalKeyDown)((0, import_react.useCallback)((event) => {
    if (!isTopLayer)
      return;
    if (event.key === "Escape") {
      event.stopPropagation();
      if (onEscape)
        onEscape();
    }
  }, [isTopLayer, onEscape]));
  (0, import_react.useEffect)(() => {
    if (!rootElement || !registerElement)
      return;
    return registerElement(rootElement);
  }, [registerElement, rootElement]);
  const value = (0, import_react.useMemo)(() => ({
    version: 0,
    activeElement,
    activeIndex,
    mount,
    onClickOutside,
    onEscape,
    onMouseEnter: handleItemMouseEnter,
    onMouseLeave: handleItemMouseLeave,
    onItemClick,
    registerElement
  }), [
    activeElement,
    activeIndex,
    mount,
    handleItemMouseEnter,
    handleItemMouseLeave,
    onClickOutside,
    onEscape,
    onItemClick,
    registerElement
  ]);
  return /* @__PURE__ */ import_react.default.createElement(import_menuContext.MenuContext.Provider, {
    value
  }, /* @__PURE__ */ import_react.default.createElement(Root, __spreadProps(__spreadValues({
    "data-ui": "Menu"
  }, restProps), {
    onKeyDown: handleKeyDown,
    padding,
    ref: setRef,
    role: "menu",
    tabIndex: -1
  }), /* @__PURE__ */ import_react.default.createElement(import_primitives.Stack, {
    space
  }, children)));
});
