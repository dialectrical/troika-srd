{
  "version": 3,
  "sources": ["../../../../src/components/autocomplete/autocomplete.tsx"],
  "sourcesContent": ["import {ChevronDownIcon} from '@sanity/icons'\nimport React, {\n  cloneElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport styled from 'styled-components'\nimport {EMPTY_ARRAY} from '../../constants'\nimport {focusFirstDescendant} from '../../helpers'\nimport {useForwardedRef, useResponsiveProp} from '../../hooks'\nimport {\n  Box,\n  Button,\n  ButtonProps,\n  Card,\n  Popover,\n  PopoverProps,\n  Spinner,\n  Text,\n  TextInput,\n} from '../../primitives'\nimport {AutocompleteOption} from './autocompleteOption'\n\n/**\n * @public\n */\nexport type AutocompleteOpenButtonProps = Omit<ButtonProps, 'as'> &\n  Omit<React.HTMLProps<HTMLButtonElement>, 'as' | 'ref'>\n\n/**\n * @public\n */\nexport interface BaseAutocompleteOption {\n  value: string\n}\n\n/**\n * @public\n */\nexport interface AutocompleteProps<Option extends BaseAutocompleteOption> {\n  border?: boolean\n  customValidity?: string\n  filterOption?: (query: string, option: Option) => boolean\n  fontSize?: number | number[]\n  icon?: React.ComponentType | React.ReactNode\n  id: string\n  loading?: boolean\n  onChange?: (value: string) => void\n  onQueryChange?: (query: string | null) => void\n  onSelect?: (value: string) => void\n  /**\n   * @beta\n   */\n  openButton?: boolean | AutocompleteOpenButtonProps\n  options?: Option[]\n  padding?: number | number[]\n  popover?: Omit<PopoverProps, 'content' | 'onMouseEnter' | 'onMouseLeave' | 'open'>\n  prefix?: React.ReactNode\n  radius?: number | number[]\n  renderOption?: (option: Option) => React.ReactElement\n  renderValue?: (value: string, option?: Option) => string\n  suffix?: React.ReactNode\n  value?: string\n}\n\nconst Root = styled.div`\n  position: relative;\n`\n\nconst ListBox = styled(Box)`\n  & > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n`\n\nconst ResultsPopover = styled(Popover)`\n  & > div {\n    min-height: 43px;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  &[data-popper-reference-hidden='true'] {\n    display: none;\n  }\n`\n\nconst LoadingCard = styled(Card)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  align-items: center;\n  justify-content: center;\n  transition: opacity 100ms;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n`\n\nconst EMPTY_RECORD = {}\n\nconst defaultRenderValue = (value: string, option?: BaseAutocompleteOption) =>\n  option ? option.value : value\n\nconst defaultFilterOption = (query: string, option: BaseAutocompleteOption) =>\n  option.value.toLowerCase().indexOf(query.toLowerCase()) > -1\n\nconst LIST_IGNORE_KEYS = [\n  'Control',\n  'Shift',\n  'Alt',\n  'Enter',\n  'Home',\n  'End',\n  'PageUp',\n  'PageDown',\n  'Meta',\n  'Tab',\n  'CapsLock',\n]\n\nconst InnerAutocomplete = forwardRef(function InnerAutocomplete<\n  Option extends BaseAutocompleteOption\n>(\n  props: AutocompleteProps<Option> &\n    Omit<\n      React.HTMLProps<HTMLInputElement>,\n      | 'aria-activedescendant'\n      | 'aria-autocomplete'\n      | 'aria-expanded'\n      | 'aria-owns'\n      | 'as'\n      | 'autoCapitalize'\n      | 'autoComplete'\n      | 'autoCorrect'\n      | 'id'\n      | 'inputMode'\n      | 'onChange'\n      | 'onSelect'\n      | 'prefix'\n      | 'ref'\n      | 'role'\n      | 'spellCheck'\n      | 'type'\n      | 'value'\n    >,\n  ref: React.Ref<HTMLInputElement>\n) {\n  const {\n    border = true,\n    customValidity,\n    disabled,\n    filterOption: filterOptionProp,\n    fontSize = 2,\n    icon,\n    id,\n    loading,\n    onBlur,\n    onChange,\n    onFocus,\n    onQueryChange,\n    onSelect,\n    openButton,\n    options: optionsProp,\n    padding: paddingProp = 3,\n    popover = {},\n    prefix,\n    radius = 2,\n    readOnly,\n    renderOption: renderOptionProp,\n    renderValue = defaultRenderValue,\n    value: valueProp = '',\n    ...restProps\n  } = props\n\n  const defaultRenderOption = useCallback(\n    ({value}: BaseAutocompleteOption) => (\n      <Card as=\"button\" padding={paddingProp} tone=\"inherit\">\n        <Text size={fontSize} textOverflow=\"ellipsis\">\n          {value}\n        </Text>\n      </Card>\n    ),\n    [fontSize, paddingProp]\n  )\n\n  const renderOption =\n    typeof renderOptionProp === 'function' ? renderOptionProp : defaultRenderOption\n  const filterOption =\n    typeof filterOptionProp === 'function' ? filterOptionProp : defaultFilterOption\n  const [value, setValue] = useState(valueProp)\n  const [query, setQuery] = useState<string | null>(null)\n  const valueRef = useRef(value)\n  const [focused, setFocused] = useState(false)\n  const listboxId = `${id}-listbox`\n  const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY\n  const [selectedIndex, setSelectedIndex] = useState(-1)\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const listRef = useRef<HTMLUListElement | null>(null)\n  const activeItemId = selectedIndex > -1 ? `${id}-option-${selectedIndex}` : undefined\n  const padding = useResponsiveProp(paddingProp)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [resultsPopoverElement, setResultsPopoverElement] = useState<HTMLDivElement | null>(null)\n  const currentOption = value ? options.find((o) => o.value === value) : undefined\n  const filteredOptions = useMemo(\n    () => options.filter((option) => (query ? filterOption(query, option) : true)),\n    [filterOption, options, query]\n  )\n  const optionsLen = filteredOptions.length\n  const expanded = (query !== null && loading) || (focused && optionsLen > 0 && query !== null)\n  const forwardedRef = useForwardedRef(ref)\n  const popoverMouseWithinRef = useRef(false)\n\n  const handleRootBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      setTimeout(() => {\n        // NOTE: This is a workaround for a bug that may happen in Chrome (clicking the scrollbar\n        // closes the results in certain situations):\n        // - Do not handle blur if the mouse is within the popover\n        if (popoverMouseWithinRef.current) {\n          return\n        }\n\n        const focusedEl = document.activeElement\n        const focusInside =\n          (focusedEl && rootElement && rootElement.contains(focusedEl)) ||\n          (focusedEl && resultsPopoverElement && resultsPopoverElement.contains(focusedEl))\n\n        if (!focusInside) {\n          setFocused(false)\n          setQuery(null)\n          if (onQueryChange) onQueryChange(null)\n          if (onBlur) onBlur(event)\n        }\n      }, 0)\n    },\n    [onBlur, onQueryChange, resultsPopoverElement, rootElement]\n  )\n\n  const handleRootKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      if (event.key === 'ArrowDown') {\n        event.preventDefault()\n        if (!optionsLen) return\n        setSelectedIndex((index) => (index + 1) % optionsLen)\n\n        return\n      }\n\n      if (event.key === 'ArrowUp') {\n        event.preventDefault()\n        if (!optionsLen) return\n        setSelectedIndex((index) => {\n          return index === -1 ? optionsLen - 1 : (optionsLen + index - 1) % optionsLen\n        })\n\n        return\n      }\n\n      if (event.key === 'Escape') {\n        setFocused(false)\n        valueRef.current = ''\n        setQuery(null)\n        if (onQueryChange) onQueryChange(null)\n\n        inputRef.current?.focus()\n\n        return\n      }\n\n      const target = event.target as Node\n      const listEl = listRef.current\n\n      if (\n        (listEl === target || listEl?.contains(target)) &&\n        !LIST_IGNORE_KEYS.includes(event.key)\n      ) {\n        inputRef.current?.focus()\n\n        return\n      }\n    },\n    [onQueryChange, optionsLen]\n  )\n\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const q = event.currentTarget.value\n\n      valueRef.current = q\n      setQuery(q)\n\n      if (!focused) {\n        setFocused(true)\n      }\n\n      if (onQueryChange) onQueryChange(q)\n    },\n    [focused, onQueryChange]\n  )\n\n  const handleInputFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      if (!focused) {\n        setFocused(true)\n        if (onFocus) onFocus(event)\n      }\n    },\n    [focused, onFocus]\n  )\n\n  const handlePopoverMouseEnter = useCallback(() => {\n    popoverMouseWithinRef.current = true\n  }, [])\n\n  const handlePopoverMouseLeave = useCallback(() => {\n    popoverMouseWithinRef.current = false\n  }, [])\n\n  const handleClearButtonClick = useCallback(() => {\n    valueRef.current = ''\n    setValue('')\n    if (onChange) onChange('')\n    setQuery(null)\n    if (onQueryChange) onQueryChange(null)\n    inputRef.current?.focus()\n  }, [onChange, onQueryChange])\n\n  const handleClearButtonFocus = useCallback(() => setFocused(true), [])\n\n  const handleOptionSelect = useCallback(\n    (v: string) => {\n      if (onSelect) onSelect(v)\n      setValue(v)\n      if (onChange) onChange(v)\n      setQuery(null)\n      if (onQueryChange) onQueryChange(null)\n      setFocused(false)\n      inputRef.current?.focus()\n      popoverMouseWithinRef.current = false\n    },\n    [onChange, onSelect, onQueryChange]\n  )\n\n  // Change the value when `value` prop changes\n  useEffect(() => {\n    if (valueProp !== valueRef.current) {\n      valueRef.current = valueProp\n      setValue(valueProp)\n      setQuery(null)\n    }\n  }, [valueProp])\n\n  // Reset selected item when the list changes\n  // @todo: what if the list length didn\u2019t change, but the list contents changed?\n  useEffect(() => setSelectedIndex(-1), [optionsLen])\n\n  // Focus the selected item\n  useEffect(() => {\n    const listElement = listRef.current\n\n    if (!listElement) return\n\n    const selectedItemElement = listElement.childNodes[selectedIndex] as HTMLLIElement | undefined\n\n    if (selectedItemElement) {\n      focusFirstDescendant(selectedItemElement)\n    }\n  }, [selectedIndex])\n\n  const setRef = useCallback(\n    (el: HTMLInputElement | null) => {\n      inputRef.current = el\n      forwardedRef.current = el\n    },\n    [forwardedRef]\n  )\n\n  const clearButton = useMemo(\n    () =>\n      !disabled && value.length > 0\n        ? {\n            'aria-label': 'Clear',\n            onFocus: handleClearButtonFocus,\n          }\n        : undefined,\n    [disabled, handleClearButtonFocus, value]\n  )\n\n  const openButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding])\n  const openButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding])\n  const openButtonProps: AutocompleteOpenButtonProps = useMemo(\n    () => (typeof openButton === 'object' ? openButton : EMPTY_RECORD),\n    [openButton]\n  )\n\n  const handleOpenClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      inputRef.current?.focus()\n      setQuery(query || renderValue(value, currentOption) || '')\n      if (openButtonProps.onClick) openButtonProps.onClick(event)\n    },\n    [currentOption, openButtonProps, query, renderValue, value]\n  )\n\n  const openButtonNode = useMemo(\n    () =>\n      !disabled && !readOnly && openButton ? (\n        <Box padding={openButtonBoxPadding}>\n          <Button\n            {...openButtonProps}\n            fontSize={fontSize}\n            icon={ChevronDownIcon}\n            mode=\"bleed\"\n            onClick={handleOpenClick}\n            padding={openButtonPadding}\n          />\n        </Box>\n      ) : undefined,\n    [\n      disabled,\n      fontSize,\n      handleOpenClick,\n      openButton,\n      openButtonBoxPadding,\n      openButtonPadding,\n      openButtonProps,\n      readOnly,\n    ]\n  )\n\n  return (\n    <Root\n      data-ui=\"Autocomplete\"\n      onBlur={handleRootBlur}\n      onKeyDown={handleRootKeyDown}\n      ref={setRootElement}\n    >\n      <ResultsPopover\n        __unstable_margins={[1, 1, 1, 1]}\n        arrow={false}\n        constrainSize\n        content={\n          <ListBox paddingY={1} tabIndex={-1}>\n            <ul aria-multiselectable={false} id={listboxId} ref={listRef} role=\"listbox\">\n              {filteredOptions.map((option, optionIndex) => (\n                <AutocompleteOption\n                  id={`${id}-option-${optionIndex}`}\n                  key={option.value}\n                  onSelect={handleOptionSelect}\n                  selected={\n                    selectedIndex > -1 ? optionIndex === selectedIndex : currentOption === option\n                  }\n                  value={option.value}\n                >\n                  {cloneElement(renderOption(option), {disabled: loading, tabIndex: -1})}\n                </AutocompleteOption>\n              ))}\n            </ul>\n\n            <LoadingCard padding={3} style={{opacity: loading ? 0.5 : 0}}>\n              <Spinner />\n            </LoadingCard>\n          </ListBox>\n        }\n        fallbackPlacements={['top-start']}\n        matchReferenceWidth\n        onMouseEnter={handlePopoverMouseEnter}\n        onMouseLeave={handlePopoverMouseLeave}\n        open={expanded}\n        portal\n        placement=\"bottom-start\"\n        radius={radius}\n        ref={setResultsPopoverElement}\n        {...popover}\n      >\n        <TextInput\n          {...restProps}\n          aria-activedescendant={activeItemId}\n          aria-autocomplete=\"list\"\n          aria-expanded={expanded}\n          aria-owns={listboxId}\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          border={border}\n          clearButton={clearButton}\n          customValidity={customValidity}\n          disabled={disabled}\n          fontSize={fontSize}\n          icon={icon}\n          id={id}\n          inputMode=\"search\"\n          onChange={handleInputChange}\n          onClear={handleClearButtonClick}\n          onFocus={handleInputFocus}\n          padding={padding}\n          prefix={prefix}\n          radius={radius}\n          readOnly={readOnly}\n          ref={setRef}\n          role=\"combobox\"\n          spellCheck={false}\n          suffix={openButtonNode}\n          value={query === null ? renderValue(value, currentOption) : query}\n        />\n      </ResultsPopover>\n    </Root>\n  )\n})\n\n/**\n * @public\n */\nexport const Autocomplete = InnerAutocomplete as <Option extends BaseAutocompleteOption>(\n  props: AutocompleteProps<Option> &\n    Omit<\n      React.HTMLProps<HTMLInputElement>,\n      | 'aria-activedescendant'\n      | 'aria-autocomplete'\n      | 'aria-expanded'\n      | 'aria-owns'\n      | 'as'\n      | 'autoCapitalize'\n      | 'autoComplete'\n      | 'autoCorrect'\n      | 'id'\n      | 'inputMode'\n      | 'onChange'\n      | 'onSelect'\n      | 'prefix'\n      | 'ref'\n      | 'role'\n      | 'spellCheck'\n      | 'type'\n      | 'value'\n    > & {\n      ref?: React.Ref<HTMLInputElement>\n    }\n) => React.ReactElement\n"],
  "mappings": "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",
  "names": []
}
