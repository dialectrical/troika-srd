var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  responsiveInputPaddingIconLeftStyle: () => responsiveInputPaddingIconLeftStyle,
  responsiveInputPaddingIconRightStyle: () => responsiveInputPaddingIconRightStyle,
  responsiveInputPaddingIconsStyle: () => responsiveInputPaddingIconsStyle,
  responsiveInputPaddingStyle: () => responsiveInputPaddingStyle
});
var import_helpers = __toModule(require("../helpers"));
function responsiveInputPaddingStyle(props) {
  const { $iconLeft, $iconRight, theme } = props;
  const { fonts, media, space: spaceScale } = theme.sanity;
  const padding = (0, import_helpers.getResponsiveProp)(props.$padding, [0]);
  const space = (0, import_helpers.getResponsiveProp)(props.$space, [0]);
  const size = (0, import_helpers.getResponsiveProp)(props.$fontSize, [0]);
  const len = Math.max(padding.length, space.length, size.length);
  const _padding = [];
  const _space = [];
  const _size = [];
  for (let i = 0; i < len; i += 1) {
    _padding[i] = padding[i] === void 0 ? _padding[i - 1] : padding[i];
    _space[i] = space[i] === void 0 ? _space[i - 1] : space[i];
    _size[i] = size[i] === void 0 ? _size[i - 1] : size[i];
  }
  return (0, import_helpers.responsive)(media, _padding, (_, i) => {
    const fontSize = fonts.text.sizes[_size[i]] || fonts.text.sizes[2];
    const emSize = fontSize.lineHeight - fontSize.ascenderHeight - fontSize.descenderHeight;
    const p = spaceScale[_padding[i]];
    const s = spaceScale[_space[i]];
    const styles = {
      paddingTop: (0, import_helpers.rem)(p - fontSize.ascenderHeight),
      paddingRight: (0, import_helpers.rem)(p),
      paddingBottom: (0, import_helpers.rem)(p - fontSize.descenderHeight),
      paddingLeft: (0, import_helpers.rem)(p)
    };
    if ($iconRight)
      styles.paddingRight = (0, import_helpers.rem)(p + emSize + s);
    if ($iconLeft)
      styles.paddingLeft = (0, import_helpers.rem)(p + emSize + s);
    return styles;
  });
}
function responsiveInputPaddingIconsStyle(props) {
  return responsiveInputPaddingStyle(__spreadProps(__spreadValues({}, props), { $iconLeft: true, $iconRight: true }));
}
function responsiveInputPaddingIconLeftStyle(props) {
  return responsiveInputPaddingStyle(__spreadProps(__spreadValues({}, props), { $iconLeft: true }));
}
function responsiveInputPaddingIconRightStyle(props) {
  return responsiveInputPaddingStyle(__spreadProps(__spreadValues({}, props), { $iconRight: true }));
}
