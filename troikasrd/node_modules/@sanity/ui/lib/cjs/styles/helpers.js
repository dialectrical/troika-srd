var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  fillCSSObject: () => fillCSSObject,
  getResponsiveProp: () => getResponsiveProp,
  getResponsiveSpace: () => getResponsiveSpace,
  rem: () => rem,
  responsive: () => responsive
});
var import_constants = __toModule(require("../constants"));
function fillCSSObject(propKeys, value) {
  return propKeys.reduce((obj, propKey) => {
    obj[propKey] = value;
    return obj;
  }, {});
}
function rem(pixelValue) {
  if (pixelValue === 0)
    return 0;
  return `${pixelValue / 16}rem`;
}
function responsive(media, values, callback) {
  const statements = values.map(callback);
  return statements.map((statement, mediaIndex) => {
    if (mediaIndex === 0)
      return statement;
    return { [`@media screen and (min-width: ${media[mediaIndex - 1]}px)`]: statement };
  });
}
function getResponsiveProp(val, defaultVal) {
  if (val === void 0)
    return defaultVal || import_constants.EMPTY_ARRAY;
  return Array.isArray(val) ? val : [val];
}
function getResponsiveSpace(theme, props, spaceIndexes = import_constants.EMPTY_ARRAY) {
  if (!Array.isArray(spaceIndexes)) {
    throw new Error("the property must be array of numbers");
  }
  if (spaceIndexes.length === 0) {
    return null;
  }
  return responsive(theme.sanity.media, spaceIndexes, (spaceIndex) => fillCSSObject(props, rem(theme.sanity.space[spaceIndex])));
}
