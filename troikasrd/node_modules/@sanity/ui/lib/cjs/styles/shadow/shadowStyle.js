var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  responsiveShadowStyle: () => responsiveShadowStyle
});
var import__ = __toModule(require(".."));
var import_constants = __toModule(require("../../constants"));
var import_helpers = __toModule(require("../helpers"));
function toBoxShadow(shadow, color) {
  return `${shadow.map(import_helpers.rem).join(" ")} ${color}`;
}
function shadowStyle(shadow) {
  if (!shadow)
    return import_constants.EMPTY_RECORD;
  const outline = `0 0 0 ${(0, import_helpers.rem)(1)} var(--card-shadow-outline-color)`;
  const umbra = toBoxShadow(shadow.umbra, "var(--card-shadow-umbra-color)");
  const penumbra = toBoxShadow(shadow.penumbra, "var(--card-shadow-penumbra-color)");
  const ambient = toBoxShadow(shadow.ambient, "var(--card-shadow-ambient-color)");
  return { boxShadow: `${outline}, ${umbra}, ${penumbra}, ${ambient}` };
}
function responsiveShadowStyle(props) {
  const { theme } = props;
  const { media, shadows } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import__.getResponsiveProp)(props.$shadow), (shadow) => shadowStyle(shadows[shadow]));
}
