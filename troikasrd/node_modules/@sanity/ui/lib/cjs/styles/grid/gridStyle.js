var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  responsiveGridStyle: () => responsiveGridStyle
});
var import_helpers = __toModule(require("../helpers"));
const GRID_CSS = {
  "&&:not([hidden])": {
    display: "grid"
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  }
};
const GRID_AUTO_COLUMS = {
  auto: "auto",
  min: "min-content",
  max: "max-content",
  fr: "minmax(0, 1fr)"
};
const GRID_AUTO_ROWS = {
  auto: "auto",
  min: "min-content",
  max: "max-content",
  fr: "minmax(0, 1fr)"
};
function responsiveGridStyle() {
  return [
    GRID_CSS,
    responsiveGridAutoFlowStyle,
    responsiveGridAutoRowsStyle,
    responsiveGridAutoColsStyle,
    responsiveGridColumnsStyle,
    responsiveGridRowsStyle,
    responsiveGridGapStyle,
    responsiveGridGapXStyle,
    responsiveGridGapYStyle
  ];
}
function responsiveGridAutoFlowStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$autoFlow), (autoFlow) => ({
    gridAutoFlow: autoFlow
  }));
}
function responsiveGridAutoRowsStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$autoRows), (autoRows) => ({
    gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows]
  }));
}
function responsiveGridAutoColsStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$autoCols), (autoCols) => ({
    gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols]
  }));
}
function responsiveGridColumnsStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$columns), (columns) => ({
    gridTemplateColumns: columns && `repeat(${columns},minmax(0,1fr));`
  }));
}
function responsiveGridRowsStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$rows), (rows) => ({
    gridTemplateRows: rows && `repeat(${rows},minmax(0,1fr));`
  }));
}
function responsiveGridGapStyle(props) {
  const { theme } = props;
  const { media, space } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$gap), (gap) => ({
    gridGap: gap ? (0, import_helpers.rem)(space[gap]) : void 0
  }));
}
function responsiveGridGapXStyle(props) {
  const { theme } = props;
  const { media, space } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$gapX), (gapX) => ({
    columnGap: gapX ? (0, import_helpers.rem)(space[gapX]) : void 0
  }));
}
function responsiveGridGapYStyle(props) {
  const { theme } = props;
  const { media, space } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$gapY), (gapY) => ({
    rowGap: gapY ? (0, import_helpers.rem)(space[gapY]) : void 0
  }));
}
