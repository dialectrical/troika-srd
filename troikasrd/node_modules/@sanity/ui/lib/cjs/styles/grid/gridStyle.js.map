{
  "version": 3,
  "sources": ["../../../../src/styles/grid/gridStyle.ts"],
  "sourcesContent": ["import {CSSObject} from 'styled-components'\nimport {getResponsiveProp, rem, responsive} from '../helpers'\nimport {ThemeProps} from '../types'\nimport {ResponsiveGridStyleProps} from './types'\n\nconst GRID_CSS = {\n  '&&:not([hidden])': {\n    display: 'grid',\n  },\n  '&[data-as=\"ul\"],&[data-as=\"ol\"]': {\n    listStyle: 'none',\n  },\n}\n\nconst GRID_AUTO_COLUMS = {\n  auto: 'auto',\n  min: 'min-content',\n  max: 'max-content',\n  fr: 'minmax(0, 1fr)',\n}\n\nconst GRID_AUTO_ROWS = {\n  auto: 'auto',\n  min: 'min-content',\n  max: 'max-content',\n  fr: 'minmax(0, 1fr)',\n}\n\nexport function responsiveGridStyle(): Array<\n  CSSObject | ((props: ResponsiveGridStyleProps & ThemeProps) => CSSObject[])\n> {\n  return [\n    GRID_CSS,\n    responsiveGridAutoFlowStyle,\n    responsiveGridAutoRowsStyle,\n    responsiveGridAutoColsStyle,\n    responsiveGridColumnsStyle,\n    responsiveGridRowsStyle,\n    responsiveGridGapStyle,\n    responsiveGridGapXStyle,\n    responsiveGridGapYStyle,\n  ]\n}\n\nfunction responsiveGridAutoFlowStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$autoFlow), (autoFlow) => ({\n    gridAutoFlow: autoFlow,\n  }))\n}\n\nfunction responsiveGridAutoRowsStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$autoRows), (autoRows) => ({\n    gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows],\n  }))\n}\n\nfunction responsiveGridAutoColsStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$autoCols), (autoCols) => ({\n    gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols],\n  }))\n}\n\nfunction responsiveGridColumnsStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$columns), (columns) => ({\n    gridTemplateColumns: columns && `repeat(${columns},minmax(0,1fr));`,\n  }))\n}\n\nfunction responsiveGridRowsStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$rows), (rows) => ({\n    gridTemplateRows: rows && `repeat(${rows},minmax(0,1fr));`,\n  }))\n}\n\nfunction responsiveGridGapStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media, space} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$gap), (gap) => ({\n    gridGap: gap ? rem(space[gap]) : undefined,\n  }))\n}\n\nfunction responsiveGridGapXStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media, space} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$gapX), (gapX) => ({\n    columnGap: gapX ? rem(space[gapX]) : undefined,\n  }))\n}\n\nfunction responsiveGridGapYStyle(props: ResponsiveGridStyleProps & ThemeProps) {\n  const {theme} = props\n  const {media, space} = theme.sanity\n\n  return responsive(media, getResponsiveProp(props.$gapY), (gapY) => ({\n    rowGap: gapY ? rem(space[gapY]) : undefined,\n  }))\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,qBAAiD;AAIjD,MAAM,WAAW;AAAA,EACf,oBAAoB;AAAA,IAClB,SAAS;AAAA;AAAA,EAEX,mCAAmC;AAAA,IACjC,WAAW;AAAA;AAAA;AAIf,MAAM,mBAAmB;AAAA,EACvB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,KAAK;AAAA,EACL,IAAI;AAAA;AAGN,MAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,EACN,KAAK;AAAA,EACL,KAAK;AAAA,EACL,IAAI;AAAA;AAGC,+BAEL;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIJ,qCAAqC,OAA8C;AACjF,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,UAAS,MAAM;AAEtB,SAAO,+BAAW,OAAO,sCAAkB,MAAM,YAAY,CAAC,aAAc;AAAA,IAC1E,cAAc;AAAA;AAAA;AAIlB,qCAAqC,OAA8C;AACjF,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,UAAS,MAAM;AAEtB,SAAO,+BAAW,OAAO,sCAAkB,MAAM,YAAY,CAAC,aAAc;AAAA,IAC1E,cAAc,YAAY,eAAe;AAAA;AAAA;AAI7C,qCAAqC,OAA8C;AACjF,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,UAAS,MAAM;AAEtB,SAAO,+BAAW,OAAO,sCAAkB,MAAM,YAAY,CAAC,aAAc;AAAA,IAC1E,iBAAiB,YAAY,iBAAiB;AAAA;AAAA;AAIlD,oCAAoC,OAA8C;AAChF,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,UAAS,MAAM;AAEtB,SAAO,+BAAW,OAAO,sCAAkB,MAAM,WAAW,CAAC,YAAa;AAAA,IACxE,qBAAqB,WAAW,UAAU;AAAA;AAAA;AAI9C,iCAAiC,OAA8C;AAC7E,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,UAAS,MAAM;AAEtB,SAAO,+BAAW,OAAO,sCAAkB,MAAM,QAAQ,CAAC,SAAU;AAAA,IAClE,kBAAkB,QAAQ,UAAU;AAAA;AAAA;AAIxC,gCAAgC,OAA8C;AAC5E,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,OAAO,UAAS,MAAM;AAE7B,SAAO,+BAAW,OAAO,sCAAkB,MAAM,OAAO,CAAC,QAAS;AAAA,IAChE,SAAS,MAAM,wBAAI,MAAM,QAAQ;AAAA;AAAA;AAIrC,iCAAiC,OAA8C;AAC7E,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,OAAO,UAAS,MAAM;AAE7B,SAAO,+BAAW,OAAO,sCAAkB,MAAM,QAAQ,CAAC,SAAU;AAAA,IAClE,WAAW,OAAO,wBAAI,MAAM,SAAS;AAAA;AAAA;AAIzC,iCAAiC,OAA8C;AAC7E,QAAM,EAAC,UAAS;AAChB,QAAM,EAAC,OAAO,UAAS,MAAM;AAE7B,SAAO,+BAAW,OAAO,sCAAkB,MAAM,QAAQ,CAAC,SAAU;AAAA,IAClE,QAAQ,OAAO,wBAAI,MAAM,SAAS;AAAA;AAAA;",
  "names": []
}
