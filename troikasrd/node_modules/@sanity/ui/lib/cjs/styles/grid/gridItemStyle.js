var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  responsiveGridItemStyle: () => responsiveGridItemStyle
});
var import_helpers = __toModule(require("../helpers"));
function responsiveGridItemStyle() {
  return [
    responsiveGridItemRowStyle,
    responsiveGridItemRowStartStyle,
    responsiveGridItemRowEndStyle,
    responsiveGridItemColumnStyle,
    responsiveGridItemColumnStartStyle,
    responsiveGridItemColumnEndStyle
  ];
}
const GRID_ITEM_ROW = {
  auto: "auto",
  full: "1 / -1"
};
const GRID_ITEM_COLUMN = {
  auto: "auto",
  full: "1 / -1"
};
function responsiveGridItemRowStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$row), (row) => {
    if (typeof row === "number") {
      return { gridRow: `span ${row} / span ${row}` };
    }
    return { gridRow: GRID_ITEM_ROW[row] };
  });
}
function responsiveGridItemRowStartStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$rowStart), (rowStart) => ({
    gridRowStart: rowStart
  }));
}
function responsiveGridItemRowEndStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$rowEnd), (rowEnd) => ({ gridRowEnd: rowEnd }));
}
function responsiveGridItemColumnStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$column), (column) => {
    if (typeof column === "number") {
      return { gridColumn: `span ${column} / span ${column}` };
    }
    return { gridColumn: GRID_ITEM_COLUMN[column] };
  });
}
function responsiveGridItemColumnStartStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$columnStart), (columnStart) => ({
    gridColumnStart: columnStart
  }));
}
function responsiveGridItemColumnEndStyle(props) {
  const { theme } = props;
  const { media } = theme.sanity;
  return (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)(props.$columnEnd), (columnEnd) => ({
    gridColumnEnd: columnEnd
  }));
}
