import { ThemeColorGenericState } from './_generic';
import { ThemeColorBase } from './base';
import { ThemeColorButtonModeKey, ThemeColorButtonStates } from './button';
import { ThemeColorCardState } from './card';
import { ThemeColorInputState } from './input';
import { ThemeColorMuted, ThemeColorMutedTone } from './muted';
import { ThemeColorSelectableState } from './selectable';
import { ThemeColorSolid, ThemeColorSolidTone } from './solid';
import { ThemeColorSpotKey } from './spot';
import { ThemeColorSyntax } from './syntax';
import { ThemeColorName, ThemeColorSchemes, ThemeColorToneKey } from './types';
/**
 * @public
 */
export interface ThemeColorBuilderOpts {
    base: (opts: {
        dark: boolean;
        name: ThemeColorName;
    }) => ThemeColorBase;
    solid: (opts: {
        base: ThemeColorBase;
        dark: boolean;
        tone: ThemeColorToneKey;
        name: ThemeColorName;
        state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected';
    }) => ThemeColorGenericState;
    muted: (opts: {
        base: ThemeColorBase;
        dark: boolean;
        tone: ThemeColorToneKey;
        name: ThemeColorName;
        state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected';
    }) => ThemeColorGenericState;
    card: (opts: {
        base: ThemeColorBase;
        dark: boolean;
        muted: ThemeColorMuted;
        name: ThemeColorName;
        solid: ThemeColorSolid;
        state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected';
    }) => ThemeColorCardState;
    button: (opts: {
        dark: boolean;
        mode: ThemeColorButtonModeKey;
        base: ThemeColorBase;
        solid: ThemeColorSolidTone;
        muted: ThemeColorMutedTone;
    }) => ThemeColorButtonStates;
    input: (opts: {
        base: ThemeColorBase;
        solid: ThemeColorSolidTone;
        muted: ThemeColorMutedTone;
        dark: boolean;
        mode: 'default' | 'invalid';
        state: 'enabled' | 'disabled' | 'hovered' | 'readOnly';
    }) => ThemeColorInputState;
    selectable: (opts: {
        dark: boolean;
        base: ThemeColorBase;
        solid: ThemeColorSolid;
        muted: ThemeColorMuted;
        state: 'enabled' | 'disabled' | 'hovered' | 'pressed' | 'selected';
        tone: 'default' | 'primary' | 'positive' | 'caution' | 'critical';
    }) => ThemeColorSelectableState;
    syntax: (opts: {
        base: ThemeColorBase;
        dark: boolean;
    }) => ThemeColorSyntax;
    spot: (opts: {
        base: ThemeColorBase;
        dark: boolean;
        key: ThemeColorSpotKey;
    }) => string;
}
/**
 * @public
 */
export declare type PartialThemeColorBuilderOpts = Partial<ThemeColorBuilderOpts>;
/**
 * @public
 */
export declare function createColorTheme(partialOpts?: PartialThemeColorBuilderOpts): ThemeColorSchemes;
//# sourceMappingURL=factory.d.ts.map