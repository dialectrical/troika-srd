{
  "version": 3,
  "sources": ["../../../../../../src/theme/lib/theme/color/defaults.ts"],
  "sourcesContent": ["import {ThemeColorBuilderOpts} from './factory'\n\nconst black = 'hsl(0, 0%, 0%)'\nconst white = 'hsl(0, 0%, 100%)'\n\nconst colors = {\n  default: {\n    lightest: 'hsl(0, 0%, 95%)',\n    lighter: 'hsl(0, 0%, 70%)',\n    light: 'hsl(0, 0%, 65%)',\n    base: 'hsl(0, 0%, 50%)',\n    dark: 'hsl(0, 0%, 35%)',\n    darker: 'hsl(0, 0%, 20%)',\n    darkest: 'hsl(0, 0%, 5%)',\n  },\n  transparent: {\n    lightest: 'hsl(240, 100%, 95%)',\n    lighter: 'hsl(240, 100%, 70%)',\n    light: 'hsl(240, 100%, 65%)',\n    base: 'hsl(240, 100%, 50%)',\n    dark: 'hsl(240, 100%, 35%)',\n    darker: 'hsl(240, 100%, 20%)',\n    darkest: 'hsl(240, 100%, 5%)',\n  },\n  primary: {\n    lightest: 'hsl(240, 100%, 95%)',\n    lighter: 'hsl(240, 100%, 70%)',\n    light: 'hsl(240, 100%, 65%)',\n    base: 'hsl(240, 100%, 50%)',\n    dark: 'hsl(240, 100%, 35%)',\n    darker: 'hsl(240, 100%, 20%)',\n    darkest: 'hsl(240, 100%, 5%)',\n  },\n  positive: {\n    lightest: 'hsl(120, 100%, 95%)',\n    lighter: 'hsl(120, 100%, 70%)',\n    light: 'hsl(120, 100%, 65%)',\n    base: 'hsl(120, 100%, 50%)',\n    dark: 'hsl(120, 100%, 35%)',\n    darker: 'hsl(120, 100%, 20%)',\n    darkest: 'hsl(120, 100%, 5%)',\n  },\n  caution: {\n    lightest: 'hsl(60, 100%, 95%)',\n    lighter: 'hsl(60, 100%, 70%)',\n    light: 'hsl(60, 100%, 65%)',\n    base: 'hsl(60, 100%, 50%)',\n    dark: 'hsl(60, 100%, 35%)',\n    darker: 'hsl(60, 100%, 20%)',\n    darkest: 'hsl(60, 100%, 5%)',\n  },\n  critical: {\n    lightest: 'hsl(0, 100%, 95%)',\n    lighter: 'hsl(0, 100%, 70%)',\n    light: 'hsl(0, 100%, 65%)',\n    base: 'hsl(0, 100%, 50%)',\n    dark: 'hsl(0, 100%, 35%)',\n    darker: 'hsl(0, 100%, 20%)',\n    darkest: 'hsl(0, 100%, 5%)',\n  },\n}\n\nconst spots = {\n  gray: 'hsl(0, 0%, 50%)',\n  red: 'hsl(0, 100%, 50%)',\n  orange: 'hsl(30, 100%, 50%)',\n  yellow: 'hsl(60, 100%, 50%)',\n  green: 'hsl(120, 100%, 50%)',\n  cyan: 'hsl(180, 100%, 50%)',\n  blue: 'hsl(240, 100%, 50%)',\n  purple: 'hsl(270, 100%, 50%)',\n  magenta: 'hsl(300, 100%, 50%)',\n}\n\nconst tones = {\n  transparent: {\n    bg: [colors.transparent.darkest, colors.transparent.lightest],\n    fg: [colors.transparent.lightest, colors.transparent.darkest],\n    border: [colors.transparent.darker, colors.transparent.lighter],\n    focusRing: [colors.transparent.base, colors.transparent.base],\n  },\n  primary: {\n    bg: [colors.primary.darkest, colors.primary.lightest],\n    fg: [colors.primary.lightest, colors.primary.darkest],\n    border: [colors.primary.darker, colors.primary.lighter],\n    focusRing: [colors.primary.base, colors.primary.base],\n  },\n  positive: {\n    bg: [colors.positive.darkest, colors.positive.lightest],\n    fg: [colors.positive.lightest, colors.positive.darkest],\n    border: [colors.positive.darker, colors.positive.lighter],\n    focusRing: [colors.positive.base, colors.positive.base],\n  },\n  caution: {\n    bg: [colors.caution.darkest, colors.caution.lightest],\n    fg: [colors.caution.lightest, colors.caution.darkest],\n    border: [colors.caution.darker, colors.caution.lighter],\n    focusRing: [colors.caution.base, colors.caution.base],\n  },\n  critical: {\n    bg: [colors.critical.darkest, colors.critical.lightest],\n    fg: [colors.critical.lightest, colors.critical.darkest],\n    border: [colors.critical.darker, colors.critical.lighter],\n    focusRing: [colors.critical.base, colors.critical.base],\n  },\n}\n\nexport const defaultOpts: ThemeColorBuilderOpts = {\n  base: ({dark, name}) => {\n    if (name === 'default') {\n      return {\n        bg: dark ? black : white,\n        fg: dark ? white : black,\n        border: dark ? colors.default.darkest : colors.default.lightest,\n        focusRing: colors.primary.base,\n        shadow: {\n          outline: black,\n          umbra: black,\n          penumbra: black,\n          ambient: black,\n        },\n        skeleton: {\n          from: dark ? white : black,\n          to: dark ? white : black,\n        },\n      }\n    }\n\n    // Variants:\n    // - primary\n    // - positive\n    // - caution\n    // - critical\n    return {\n      bg: tones[name].bg[dark ? 0 : 1],\n      fg: tones[name].fg[dark ? 0 : 1],\n      border: tones[name].border[dark ? 0 : 1],\n      focusRing: tones[name].focusRing[dark ? 0 : 1],\n      shadow: {\n        outline: black,\n        umbra: black,\n        penumbra: black,\n        ambient: black,\n      },\n      skeleton: {\n        from: dark ? white : black,\n        to: dark ? white : black,\n      },\n    }\n  },\n\n  solid: ({base, dark, state, tone}) => {\n    const color = colors[tone]\n\n    if (state === 'hovered') {\n      return {\n        bg: dark ? color.light : color.dark,\n        bg2: dark ? color.light : color.dark,\n        border: dark ? color.lighter : color.darker,\n        fg: dark ? color.darkest : color.lightest,\n        muted: {\n          fg: black,\n        },\n        accent: {\n          fg: black,\n        },\n        link: {\n          fg: black,\n        },\n        code: {\n          bg: black,\n          fg: black,\n        },\n        skeleton: base.skeleton,\n      }\n    }\n\n    return {\n      bg: color.base,\n      bg2: color.base,\n      border: dark ? color.light : color.dark,\n      fg: dark ? color.darkest : color.lightest,\n      muted: {\n        fg: black,\n      },\n      accent: {\n        fg: black,\n      },\n      link: {\n        fg: black,\n      },\n      code: {\n        bg: black,\n        fg: black,\n      },\n      skeleton: base.skeleton,\n    }\n  },\n\n  muted: ({base, dark, state, tone}) => {\n    const color = colors[tone]\n\n    if (state === 'hovered') {\n      return {\n        bg: dark ? color.darker : color.lighter,\n        bg2: dark ? color.darker : color.lighter,\n        border: dark ? color.lighter : color.darker,\n        fg: dark ? color.lightest : color.darkest,\n        muted: {\n          fg: black,\n        },\n        accent: {\n          fg: black,\n        },\n        link: {\n          fg: black,\n        },\n        code: {\n          bg: black,\n          fg: black,\n        },\n        skeleton: base.skeleton,\n      }\n    }\n\n    return {\n      bg: dark ? color.darkest : color.lightest,\n      bg2: dark ? color.darkest : color.lightest,\n      border: dark ? color.darker : color.lighter,\n      fg: dark ? color.lighter : color.darker,\n      muted: {\n        fg: black,\n      },\n      accent: {\n        fg: black,\n      },\n      link: {\n        fg: black,\n      },\n      code: {\n        bg: black,\n        fg: black,\n      },\n      skeleton: base.skeleton,\n    }\n  },\n\n  button: ({base, mode, muted, solid}) => {\n    if (mode === 'bleed') {\n      return {\n        ...muted,\n        enabled: {\n          bg: 'transparent',\n          bg2: 'transparent',\n          fg: muted.enabled.fg,\n          border: 'transparent',\n          muted: {\n            fg: black,\n          },\n          accent: {\n            fg: black,\n          },\n          link: {\n            fg: black,\n          },\n          code: {\n            bg: black,\n            fg: black,\n          },\n          skeleton: base.skeleton,\n        },\n        hovered: {\n          bg: muted.enabled.bg,\n          bg2: muted.enabled.bg,\n          fg: muted.hovered.fg,\n          border: 'transparent',\n          muted: {\n            fg: black,\n          },\n          accent: {\n            fg: black,\n          },\n          link: {\n            fg: black,\n          },\n          code: {\n            bg: black,\n            fg: black,\n          },\n          skeleton: base.skeleton,\n        },\n      }\n    }\n\n    if (mode === 'ghost')\n      return {\n        ...solid,\n        enabled: muted.enabled,\n      }\n\n    return solid\n  },\n\n  card: ({base}) => {\n    return {\n      bg: black,\n      bg2: black,\n      fg: black,\n      border: black,\n      muted: {\n        fg: black,\n      },\n      accent: {\n        fg: black,\n      },\n      link: {\n        fg: black,\n      },\n      code: {\n        bg: black,\n        fg: black,\n      },\n      skeleton: base.skeleton,\n    }\n  },\n\n  input: () => {\n    return {\n      bg: black,\n      fg: black,\n      border: black,\n      placeholder: black,\n    }\n  },\n\n  selectable: ({muted, state, tone}) => {\n    return muted[tone][state]\n  },\n\n  spot: ({key}) => {\n    return spots[key]\n  },\n\n  syntax: () => ({\n    atrule: black,\n    attrName: black,\n    attrValue: black,\n    attribute: black,\n    boolean: black,\n    builtin: black,\n    cdata: black,\n    char: black,\n    class: black,\n    className: black,\n    comment: black,\n    constant: black,\n    deleted: black,\n    doctype: black,\n    entity: black,\n    function: black,\n    hexcode: black,\n    id: black,\n    important: black,\n    inserted: black,\n    keyword: black,\n    number: black,\n    operator: black,\n    prolog: black,\n    property: black,\n    pseudoClass: black,\n    pseudoElement: black,\n    punctuation: black,\n    regex: black,\n    selector: black,\n    string: black,\n    symbol: black,\n    tag: black,\n    unit: black,\n    url: black,\n    variable: black,\n  }),\n}\n"],
  "mappings": "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",
  "names": []
}
