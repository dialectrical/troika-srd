"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const path = require('path');

const fse = require('fs-extra');

const globby = require('globby');

const getFileUrl = require('file-url');

const debug = require('debug')('sanity:import:folder');

module.exports = async function importFromFolder(fromDir, options, importers) {
  debug('Importing from folder %s', fromDir);
  const dataFiles = await globby('*.ndjson', {
    cwd: fromDir,
    absolute: true
  });

  if (dataFiles.length === 0) {
    throw new Error(`No .ndjson file found in ${fromDir}`);
  }

  if (dataFiles.length > 1) {
    throw new Error(`More than one .ndjson file found in ${fromDir} - only one is supported`);
  }

  const assetMap = await fse.readJson(path.join(fromDir, 'assets.json')).catch(() => ({}));
  const dataFile = dataFiles[0];
  debug('Importing from file %s', dataFile);
  const stream = fse.createReadStream(dataFile);
  const images = await globby('images/*', {
    cwd: fromDir,
    absolute: true
  });
  const files = await globby('files/*', {
    cwd: fromDir,
    absolute: true
  });
  const unreferencedAssets = [].concat(images.map(imgPath => `image#${getFileUrl(imgPath, {
    resolve: false
  })}`)).concat(files.map(filePath => `file#${getFileUrl(filePath, {
    resolve: false
  })}`));
  debug('Queueing %d assets', unreferencedAssets.length);

  const streamOptions = _objectSpread(_objectSpread({}, options), {}, {
    unreferencedAssets,
    assetsBase: fromDir,
    assetMap
  });

  const result = await importers.fromStream(stream, streamOptions, importers);

  if (options.deleteOnComplete) {
    await fse.remove(fromDir);
  }

  return result;
};