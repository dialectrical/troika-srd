"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const https = require('https');

const parseUrl = require('url').parse;

const MAX_RETRIES = 5;

function getStatusCodeForUrl(url) {
  const options = _objectSpread(_objectSpread({}, parseUrl(url)), {}, {
    method: 'HEAD'
  });

  return new Promise((resolve, reject) => {
    const req = https.request(options, res => {
      res.resume();
      resolve(res.statusCode);
    });
    req.on('error', reject);
    req.end();
  });
}

async function urlExists(url) {
  let error;

  for (let i = 0; i < MAX_RETRIES; i++) {
    try {
      // eslint-disable-next-line no-await-in-loop
      const statusCode = await getStatusCodeForUrl(url);
      return statusCode === 200;
    } catch (err) {
      error = err; // Wait one second before retrying the request
      // eslint-disable-next-line no-await-in-loop

      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  throw error;
}

module.exports = urlExists;