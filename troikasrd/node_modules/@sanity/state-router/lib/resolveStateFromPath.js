"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveStateFromPath;

var _debug = require("./utils/debug");

var _arrayify = _interopRequireDefault(require("./utils/arrayify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function matchPath(node, path) {
  var parts = path.split('/').filter(Boolean);
  var segmentsLength = node.route.segments.length;

  if (parts.length < segmentsLength) {
    return null;
  }

  var state = {};
  var isMatching = node.route.segments.every((segment, i) => {
    if (segment.type === 'dir') {
      return segment.name === parts[i];
    }

    var transform = node.transform && node.transform[segment.name];
    state[segment.name] = transform ? transform.toState(parts[i]) : parts[i];
    return true;
  });

  if (!isMatching) {
    return null;
  }

  var rest = parts.slice(segmentsLength);
  var childState = null;
  var children = typeof node.children === 'function' ? (0, _arrayify.default)(node.children(state)) : node.children;
  children.some(childNode => {
    // console.log('----childNode')
    // console.log(childNode)
    // console.log('----childNode')
    childState = matchPath(childNode, rest.join('/'));
    return childState;
  });

  if (rest.length > 0 && !childState) {
    return null;
  }

  var mergedState = _objectSpread(_objectSpread({}, state), childState || {});

  return node.scope ? {
    [node.scope]: mergedState
  } : mergedState;
}

function resolveStateFromPath(node, path) {
  (0, _debug.debug)('resolving state from path %s', path);
  var pathMatch = matchPath(node, path.split('?')[0]);
  (0, _debug.debug)('resolved: %o', pathMatch || null);
  return pathMatch || null;
}