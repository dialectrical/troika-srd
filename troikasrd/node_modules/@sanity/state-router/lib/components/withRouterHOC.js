"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withRouterHOC;

var _react = _interopRequireDefault(require("react"));

var _internalRouterContextTypeCheck = _interopRequireDefault(require("./internalRouterContextTypeCheck"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NO_CONTEXT_STATE = {
  state: {},
  navigate: state => {
    throw new Error("Cannot navigate to the state ".concat(JSON.stringify(state), ". No router found in context"));
  },
  navigateIntent: intentName => {
    throw new Error("Cannot navigate to the intent ".concat(intentName, ". No router found in context"));
  }
};

function withRouterHOC(Component) {
  var _class, _temp;

  return _temp = _class = class WithRouter extends _react.default.Component {
    constructor(props, context) {
      super(props);

      _defineProperty(this, "unsubscribe", null);

      _defineProperty(this, "state", {
        routerState: {}
      });

      _defineProperty(this, "context", null);

      var __internalRouter = context.__internalRouter;

      if (__internalRouter) {
        this.state = {
          routerState: __internalRouter.getState()
        };
      }
    } // eslint-disable-next-line camelcase


    UNSAFE_componentWillMount() {
      if (!this.context) throw new Error('WithRouter: missing context value');
      var __internalRouter = this.context.__internalRouter;

      if (!__internalRouter) {
        return;
      }

      this.unsubscribe = __internalRouter.channel.subscribe(() => {
        this.setState({
          routerState: __internalRouter.getState()
        });
      });
    }

    componentWillUnmount() {
      if (this.unsubscribe) this.unsubscribe();
    }

    render() {
      if (!this.context) throw new Error('WithRouter: missing context value');
      var internalRouter = this.context.__internalRouter;
      var router = internalRouter ? {
        state: this.state.routerState,
        navigate: internalRouter.navigate,
        navigateIntent: internalRouter.navigateIntent
      } : NO_CONTEXT_STATE;
      return /*#__PURE__*/_react.default.createElement(Component, _extends({}, this.props, {
        router: router
      }));
    }

  }, _defineProperty(_class, "displayName", "withRouter(".concat(Component.displayName || Component.name, ")")), _defineProperty(_class, "contextTypes", {
    __internalRouter: _internalRouterContextTypeCheck.default
  }), _temp;
}