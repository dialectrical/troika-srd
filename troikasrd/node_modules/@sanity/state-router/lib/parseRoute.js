"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseRoute;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var VALID_PARAM_SEGMENT = /^[a-zA-Z0-9_-]+$/;

function createSegment(segment) {
  if (!segment) {
    return null;
  }

  if (segment.startsWith(':')) {
    var paramName = segment.substring(1);

    if (!VALID_PARAM_SEGMENT.test(paramName)) {
      var addendum = segment.includes('*') ? ' Splats are not supported. Consider using child routes instead' : ''; // eslint-disable-next-line no-console

      console.error(new Error("Warning: Param segments \"".concat(segment, "\" includes invalid characters.").concat(addendum)));
    }

    return {
      type: 'param',
      name: paramName
    };
  }

  return {
    type: 'dir',
    name: segment
  };
}

function parseRoute(route) {
  var _route$split = route.split('?'),
      _route$split2 = _slicedToArray(_route$split, 1),
      pathname = _route$split2[0];

  var segments = pathname.split('/').map(createSegment).filter(Boolean);
  return {
    raw: route,
    segments: segments
  };
}