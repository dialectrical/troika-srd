import React, { ComponentType } from 'react';
import internalRouterContextTypeCheck from './internalRouterContextTypeCheck';
import { HOCRouter, InternalRouter } from './types';
export default function withRouterHOC<Props>(Component: ComponentType<Props & {
    router: HOCRouter;
}>): {
    new (props: any, context: any): {
        unsubscribe: (() => void) | null;
        state: {
            routerState: {};
        };
        context: {
            __internalRouter?: InternalRouter;
        } | null;
        UNSAFE_componentWillMount(): void;
        componentWillUnmount(): void;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextTypes: {
        __internalRouter: typeof internalRouterContextTypeCheck;
    };
    contextType?: React.Context<any> | undefined;
};
//# sourceMappingURL=withRouterHOC.d.ts.map