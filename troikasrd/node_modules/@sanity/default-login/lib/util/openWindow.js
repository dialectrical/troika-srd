"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openCenteredPopup = exports.openPopup = void 0;

var _rxjs = require("rxjs");

var DEFAULT_FEATURES = ['scrollbars=yes', 'toolbar=no', 'location=yes', 'titlebar=yes', 'directories=no', 'status=yes', 'menubar=no'];

var toFeatureStr = features => Object.keys(features).map(name => "".concat(name, "=").concat(features[name]));

var openWindow = (url, target, features) => {
  var win = window.open(url, target, features);

  if (win === null) {
    throw new Error('Unable to open window');
  }

  return win;
};

var waitForEnd = win => new _rxjs.Observable(subscriber => {
  var onMessage = ev => {
    if (ev.data === 'close') {
      subscriber.next();
      subscriber.complete();
    }
  };

  var checkCancelTimer;

  var checkCancel = () => {
    if (win.closed) {
      subscriber.error(new Error('Login window closed by user'));
    } else {
      checkCancelTimer = setTimeout(checkCancel, 500);
    }
  };

  window.addEventListener('message', onMessage);
  checkCancel();
  return () => {
    window.removeEventListener('message', onMessage);
    clearTimeout(checkCancelTimer);
  };
});

var openPopup = (url, positionFeatures) => {
  return new _rxjs.Observable(subscriber => {
    var win = openWindow( // note: we need to start with about:blank here as MS Edge will throw
    // when attempting to call .focus() or .moveTo() on a window with an untrusted origin
    'about:blank', '_blank', DEFAULT_FEATURES.concat(positionFeatures ? toFeatureStr(positionFeatures) : []).join(','));

    if (positionFeatures) {
      win.moveTo(positionFeatures.left, positionFeatures.top);
    }

    win.focus(); // we are done with calling .moveTo() and .focus() so we can now navigate to the url

    win.location.href = url;
    var subscription = waitForEnd(win).subscribe(subscriber);
    return () => {
      win.close();
      subscription.unsubscribe();
    };
  });
};

exports.openPopup = openPopup;

var openCenteredPopup = (url, size) => {
  var screen = window.screen;
  var centerX = screen.width - size.width;
  var centerY = screen.height - size.height;
  var top = centerY > 0 ? centerY / 2 : 0;
  var left = centerX > 0 ? centerX / 2 : 0;
  return openPopup(url, {
    height: size.height,
    width: size.width,
    top,
    left
  });
};

exports.openCenteredPopup = openCenteredPopup;