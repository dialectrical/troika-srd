"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeDragAware;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _debug = _interopRequireDefault(require("debug"));

var _excluded = ["readOnly", "onDragStart", "onDragEnd", "onDrag"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.default)('sanity-imagetool');
var supportsTouch = typeof window !== 'undefined' && 'ontouchstart' in window; // Returns a component that emits `onDragStart, `onDrag` and `onDragEnd` events.
// It handles mouse/touch events the same way
// - `onDragStart` is called with the {x, y} positions relative from the dom node (e.g. where the mousedown event happened)
// - `onDrag` and `onDragEnd` are both called with the {x, y} difference from the previous position

function makeDragAware(Component) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_React$PureComponent) {
    _inherits(DragAware, _React$PureComponent);

    var _super = _createSuper(DragAware);

    function DragAware() {
      var _this;

      _classCallCheck(this, DragAware);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "currentPos", null);

      _defineProperty(_assertThisInitialized(_this), "isDragging", false);

      _defineProperty(_assertThisInitialized(_this), "handleTouchMove", function (event) {
        // Disables mobile scroll by touch
        if (_this.isDragging) {
          event.preventDefault();
        }
      });

      _defineProperty(_assertThisInitialized(_this), "handleDragStart", function (event) {
        var _this$props = _this.props,
            onDragStart = _this$props.onDragStart,
            readOnly = _this$props.readOnly;

        if (readOnly) {
          return;
        }

        if (_this.isDragging) {
          debug('Start cancelled, already a drag in progress');
          return;
        }

        _this.isDragging = true;
        var nextPos = getPos(event);
        debug('Drag started %o', nextPos);
        onDragStart(getPositionRelativeToRect(nextPos.x, nextPos.y, _this.domNode.getBoundingClientRect()));
        _this.currentPos = nextPos;
      });

      _defineProperty(_assertThisInitialized(_this), "handleDrag", function (event) {
        if (!_this.isDragging || _this.props.readOnly) {
          return;
        }

        var onDrag = _this.props.onDrag;
        var nextPos = getPos(event);
        var diff = diffPos(nextPos, _this.currentPos);
        onDrag(diff);
        debug('moving by %o', diff);
        _this.currentPos = nextPos;
      });

      _defineProperty(_assertThisInitialized(_this), "handleDragEnd", function (event) {
        var _this$props2 = _this.props,
            onDragEnd = _this$props2.onDragEnd,
            readOnly = _this$props2.readOnly;

        if (!_this.isDragging || readOnly) {
          return;
        }

        var nextPos = getPos(event);
        onDragEnd(getPositionRelativeToRect(nextPos.x, nextPos.y, _this.domNode.getBoundingClientRect()));
        _this.isDragging = false;
        _this.currentPos = null;
        debug('Done moving %o', nextPos);
      });

      _defineProperty(_assertThisInitialized(_this), "handleDragCancel", function (event) {
        if (!_this.isDragging || _this.props.readOnly) {
          return;
        }

        var onDragEnd = _this.props.onDragEnd;
        _this.isDragging = false;
        onDragEnd(getPositionRelativeToRect(_this.currentPos.x, _this.currentPos.y, _this.domNode.getBoundingClientRect()));
        _this.currentPos = null;
      });

      _defineProperty(_assertThisInitialized(_this), "setDomNode", function (node) {
        _this.domNode = node;
      });

      return _this;
    }

    _createClass(DragAware, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (supportsTouch) {
          document.body.addEventListener('touchmove', this.handleTouchMove, {
            passive: false
          });
          document.body.addEventListener('touchend', this.handleDragEnd);
          document.body.addEventListener('touchcancel', this.handleDragCancel);
        } else {
          document.body.addEventListener('mousemove', this.handleDrag);
          document.body.addEventListener('mouseup', this.handleDragEnd);
          document.body.addEventListener('mouseleave', this.handleDragCancel);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (supportsTouch) {
          document.body.removeEventListener('touchmove', this.handleTouchMove, {
            passive: false
          });
          document.body.removeEventListener('touchend', this.handleDragEnd, {
            passive: false
          });
          document.body.removeEventListener('touchcancel', this.handleDragCancel);
        } else {
          document.body.removeEventListener('mousemove', this.handleDrag);
          document.body.removeEventListener('mouseup', this.handleDragEnd);
          document.body.removeEventListener('mouseleave', this.handleDragCancel);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            readOnly = _this$props3.readOnly,
            onDragStart = _this$props3.onDragStart,
            onDragEnd = _this$props3.onDragEnd,
            onDrag = _this$props3.onDrag,
            rest = _objectWithoutProperties(_this$props3, _excluded);

        return /*#__PURE__*/_react.default.createElement(Component, _extends({
          ref: this.setDomNode,
          onTouchStart: readOnly ? undefined : this.handleDragStart,
          onMouseDown: readOnly ? undefined : this.handleDragStart,
          onTouchMove: readOnly ? undefined : this.handleDrag
        }, rest));
      }
    }]);

    return DragAware;
  }(_react.default.PureComponent), _defineProperty(_class, "propTypes", {
    onDragStart: _propTypes.default.func.isRequired,
    onDrag: _propTypes.default.func.isRequired,
    onDragEnd: _propTypes.default.func.isRequired,
    readOnly: _propTypes.default.bool
  }), _temp;
}

function getPositionRelativeToRect(x, y, rect) {
  return {
    x: x - rect.left,
    y: y - rect.top
  };
}

function getPos(event) {
  if (supportsTouch) {
    return event.touches.length ? {
      x: event.touches[0].clientX,
      y: event.touches[0].clientY
    } : {
      x: 0,
      y: 0
    };
  }

  return {
    x: event.clientX,
    y: event.clientY
  };
}

function diffPos(pos, otherPos) {
  return {
    x: pos.x - otherPos.x,
    y: pos.y - otherPos.y
  };
}