"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _debug = _interopRequireDefault(require("debug"));

var _calculateStyles = _interopRequireDefault(require("./calculateStyles"));

var _constants = require("./constants");

var _HotspotImage = require("./HotspotImage.styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.default)('sanity-imagetool');

function getCropAspect(crop, srcAspect) {
  var origHeight = 1 / srcAspect;
  var origWidth = srcAspect * origHeight;
  var cropWidth = origWidth - (crop.left + crop.right) * origWidth;
  var cropHeight = origHeight - (crop.top + crop.bottom) * origHeight;
  return cropWidth / cropHeight;
}

var HotspotImage = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(HotspotImage, _React$PureComponent);

  var _super = _createSuper(HotspotImage);

  function HotspotImage() {
    var _this;

    _classCallCheck(this, HotspotImage);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      containerAspect: null
    });

    _defineProperty(_assertThisInitialized(_this), "setImageElement", function (el) {
      _this.imageElement = el;
    });

    _defineProperty(_assertThisInitialized(_this), "handleResize", (0, _debounce2.default)(function () {
      return _this.updateContainerAspect(_this.props);
    }));

    _defineProperty(_assertThisInitialized(_this), "setContainerElement", function (el) {
      _this.containerElement = el;
    });

    return _this;
  }

  _createClass(HotspotImage, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var imageElement = this.imageElement; // Fixes issues that may happen if the component is rendered on server and mounted after the image has finished loading
      // In these situations, neither the onLoad or the onError events will be called.
      // Derived from http://imagesloaded.desandro.com/

      var alreadyLoaded = imageElement.src && imageElement.complete && imageElement.naturalWidth !== undefined;

      if (alreadyLoaded) {
        debug("Image '%s' already loaded, refreshing (from cache) to trigger onLoad / onError", this.props.src); // eslint-disable-next-line no-self-assign

        imageElement.src = imageElement.src;
      }

      this.updateContainerAspect(this.props);
      window.addEventListener('resize', this.handleResize);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize);
    } // eslint-disable-next-line camelcase

  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.aspectRatio !== this.props.aspectRatio) {
        this.updateContainerAspect(nextProps);
      }
    }
  }, {
    key: "updateContainerAspect",
    value: function updateContainerAspect(props) {
      if (props.aspectRatio === 'auto') {
        var parentNode = this.containerElement.parentNode;
        this.setState({
          containerAspect: parentNode.offsetWidth / parentNode.offsetHeight
        });
      } else {
        this.setState({
          containerAspect: null
        });
      }
    }
  }, {
    key: "getTargetAspectValue",
    value: function getTargetAspectValue() {
      var _this$props = this.props,
          aspectRatio = _this$props.aspectRatio,
          srcAspectRatio = _this$props.srcAspectRatio,
          crop = _this$props.crop;

      if (aspectRatio === 'none') {
        return getCropAspect(crop, srcAspectRatio);
      }

      if (aspectRatio === 'auto') {
        return this.state.containerAspect;
      }

      return aspectRatio;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          srcAspectRatio = _this$props2.srcAspectRatio,
          crop = _this$props2.crop,
          hotspot = _this$props2.hotspot,
          src = _this$props2.src,
          srcSet = _this$props2.srcSet,
          alignX = _this$props2.alignX,
          alignY = _this$props2.alignY,
          className = _this$props2.className,
          style = _this$props2.style,
          alt = _this$props2.alt,
          onError = _this$props2.onError,
          onLoad = _this$props2.onLoad;
      var targetAspect = this.getTargetAspectValue();
      var targetStyles = (0, _calculateStyles.default)({
        container: {
          aspectRatio: targetAspect
        },
        image: {
          aspectRatio: srcAspectRatio
        },
        hotspot: hotspot,
        crop: crop,
        align: {
          x: alignX,
          y: alignY
        }
      });
      return /*#__PURE__*/_react.default.createElement(_HotspotImage.RootContainer, {
        className: "".concat(className),
        style: style,
        ref: this.setContainerElement
      }, /*#__PURE__*/_react.default.createElement("div", {
        style: targetStyles.container
      }, /*#__PURE__*/_react.default.createElement("div", {
        style: targetStyles.padding
      }), /*#__PURE__*/_react.default.createElement("div", {
        style: targetStyles.crop
      }, /*#__PURE__*/_react.default.createElement("img", {
        ref: this.setImageElement,
        src: src,
        alt: alt,
        srcSet: srcSet,
        onLoad: onLoad,
        onError: onError,
        style: targetStyles.image
      }))));
    }
  }]);

  return HotspotImage;
}(_react.default.PureComponent);

exports.default = HotspotImage;

_defineProperty(HotspotImage, "propTypes", {
  src: _propTypes.default.string.isRequired,
  srcAspectRatio: _propTypes.default.number.isRequired,
  srcSet: _propTypes.default.string,
  hotspot: _propTypes.default.PropTypes.objectOf(_propTypes.default.object),
  crop: _propTypes.default.PropTypes.objectOf(_propTypes.default.object),
  aspectRatio: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.oneOf(['auto', 'none'])]),
  alignX: _propTypes.default.oneOf(['center', 'left', 'right']),
  alignY: _propTypes.default.oneOf(['center', 'top', 'bottom']),
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  alt: _propTypes.default.string,
  onError: _propTypes.default.func,
  onLoad: _propTypes.default.func
});

_defineProperty(HotspotImage, "defaultProps", {
  alignX: 'center',
  alignY: 'center',
  className: '',
  crop: _constants.DEFAULT_CROP,
  hotspot: _constants.DEFAULT_HOTSPOT,
  aspectRatio: 'none'
});