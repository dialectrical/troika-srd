"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Resize = /*#__PURE__*/function (_React$Component) {
  _inherits(Resize, _React$Component);

  var _super = _createSuper(Resize);

  function Resize() {
    _classCallCheck(this, Resize);

    return _super.apply(this, arguments);
  }

  _createClass(Resize, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._canvas) {
        document.body.removeChild(this._canvas);
      }
    }
  }, {
    key: "getCanvas",
    value: function getCanvas() {
      if (!this._canvas) {
        this._canvas = document.createElement('canvas');
        document.body.appendChild(this._canvas);
        this._canvas.style.display = 'none';
      }

      return this._canvas;
    }
  }, {
    key: "resize",
    value: function resize(image, maxHeight, maxWidth) {
      var canvas = this.getCanvas();
      var ratio = image.width / image.height;
      var width = Math.min(image.width, maxWidth);
      var height = Math.min(image.height, maxHeight);
      var landscape = image.width > image.height;
      var targetWidth = landscape ? width : height * ratio;
      var targetHeight = landscape ? width / ratio : height;
      canvas.width = targetWidth;
      canvas.height = targetHeight;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, targetWidth, targetHeight);
      return canvas;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          image = _this$props.image,
          maxHeight = _this$props.maxHeight,
          maxWidth = _this$props.maxWidth,
          children = _this$props.children;
      return children(this.resize(image, maxHeight, maxWidth));
    }
  }]);

  return Resize;
}(_react.default.Component);

exports.default = Resize;

_defineProperty(Resize, "propTypes", {
  image: _propTypes.default.instanceOf(HTMLImageElement).isRequired,
  maxWidth: _propTypes.default.number.isRequired,
  maxHeight: _propTypes.default.number.isRequired,
  children: _propTypes.default.func.isRequired
});