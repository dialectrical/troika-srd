/// <reference types="react" />
export declare const RootContainer: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const CanvasContainer: import("styled-components").StyledComponent<{
    new (props: any): {
        currentPos: any;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: any) => void;
        handleDragStart: (event: any) => void;
        handleDrag: (event: any) => void;
        handleDragEnd: (event: any) => void;
        handleDragCancel: (event: any) => void;
        setDomNode: (node: any) => void;
        domNode: any;
        render(): JSX.Element;
        context: any;
        setState<K extends string | number | symbol>(state: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<any> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<any>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<any>, prevState: Readonly<any>): any;
        componentDidUpdate?(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): void;
    };
    new (props: any, context: any): {
        currentPos: any;
        isDragging: boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleTouchMove: (event: any) => void;
        handleDragStart: (event: any) => void;
        handleDrag: (event: any) => void;
        handleDragEnd: (event: any) => void;
        handleDragCancel: (event: any) => void;
        setDomNode: (node: any) => void;
        domNode: any;
        render(): JSX.Element;
        context: any;
        setState<K extends string | number | symbol>(state: any, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<any> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<any>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<any>, prevState: Readonly<any>): any;
        componentDidUpdate?(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): void;
    };
    propTypes: {
        onDragStart: import("prop-types").Validator<(...args: any[]) => any>;
        onDrag: import("prop-types").Validator<(...args: any[]) => any>;
        onDragEnd: import("prop-types").Validator<(...args: any[]) => any>;
        readOnly: import("prop-types").Requireable<boolean>;
    };
    contextType?: import("react").Context<any>;
}, any, {}, never>;
//# sourceMappingURL=ImageTool.styles.d.ts.map