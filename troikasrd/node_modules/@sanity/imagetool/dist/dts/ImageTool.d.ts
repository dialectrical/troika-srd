export default class ImageTool extends React.PureComponent<any, any, any> {
    static propTypes: {
        value: PropTypes.Requireable<PropTypes.InferProps<{
            hotspot: PropTypes.Requireable<PropTypes.InferProps<{
                x: PropTypes.Requireable<number>;
                y: PropTypes.Requireable<number>;
                height: PropTypes.Requireable<number>;
                width: PropTypes.Requireable<number>;
            }>>;
        }>>;
        image: PropTypes.Requireable<PropTypes.InferProps<{
            height: PropTypes.Requireable<number>;
            width: PropTypes.Requireable<number>;
        }>>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onChangeEnd: PropTypes.Requireable<(...args: any[]) => any>;
        readOnly: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        onChange(): void;
        onChangeEnd(): void;
    };
    constructor(props: any);
    constructor(props: any, context: any);
    getHotspotRect(): Rect;
    getCropRect(): Rect;
    getCropHandles(): {
        left: Rect;
        right: Rect;
        top: Rect;
        topLeft: Rect;
        topRight: Rect;
        bottom: Rect;
        bottomLeft: Rect;
        bottomRight: Rect;
    };
    getActiveCropHandleFor({ x, y }: {
        x: any;
        y: any;
    }): string;
    applyHotspotMoveBy(value: any, delta: any): any;
    applyHotspotResizeBy(value: any, delta: any): any;
    applyCropMoveBy(value: any, delta: any): any;
    emitMove(pos: any): void;
    emitCropMove(pos: any): void;
    emitCrop(side: any, pos: any): void;
    emitResize(pos: any): void;
    getClampedValue(): {
        crop: Rect;
        hotspot: Rect;
    };
    paintHotspot(context: any, opacity: any): void;
    getActualSize(): {
        height: any;
        width: any;
    };
    getDragHandleCoords(): {
        x: number;
        y: number;
        radius: number;
    };
    debug(context: any): void;
    paintBackground(context: any): void;
    paint(context: any): void;
    paintMousePosition(context: any): void;
    paintCropBorder(context: any): void;
    highlightCropHandles(context: any, opacity: any): void;
    getScale(): number;
    getCursor(): string;
    draw(): void;
    handleDragStart: ({ x, y }: {
        x: any;
        y: any;
    }) => void;
    handleDrag: (pos: any) => void;
    handleDragEnd: (pos: any) => void;
    handleMouseOut: () => void;
    handleMouseMove: (event: any) => void;
    setCanvas: (node: any) => void;
    canvas: any;
}
import React from "react";
import { Rect } from "./2d/shapes";
import PropTypes from "prop-types";
//# sourceMappingURL=ImageTool.d.ts.map