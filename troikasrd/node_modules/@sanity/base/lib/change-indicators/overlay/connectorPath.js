"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrowPath = arrowPath;
exports.generateConnectorPath = generateConnectorPath;

var _constants = require("../constants");

function arrowPath(x, y, dir) {
  return ["M ".concat(x - _constants.ARROW_SIZE, " ").concat(y - _constants.ARROW_SIZE * dir, " "), "L ".concat(x, " ").concat(y), "L ".concat(x + _constants.ARROW_SIZE, " ").concat(y - _constants.ARROW_SIZE * dir)].join('');
}

function moveTo(x, y) {
  return "M".concat(x, " ").concat(y);
}

function lineTo(x, y) {
  return "L".concat(x, " ").concat(y);
}

function join(strings) {
  var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return strings.join(delim);
}

function quadCurve(x1, y1, x, y) {
  return "Q".concat(x1, " ").concat(y1, " ").concat(x, " ").concat(y);
}

function generateConnectorPath(line) {
  var from = line.from,
      to = line.to;
  var fromX = from.left,
      fromY = from.top;
  var toX = to.left,
      toY = to.top;
  var cmds = []; // Calculate maximum corner radius

  var r1 = Math.min(_constants.CORNER_RADIUS, Math.abs(fromY - toY) / 2); // FROM

  if (from.isAbove) {
    cmds.push(moveTo(fromX + _constants.ARROW_MARGIN_X, fromY - _constants.ARROW_THRESHOLD + _constants.ARROW_MARGIN_Y), lineTo(fromX + _constants.ARROW_MARGIN_X, fromY - _constants.CORNER_RADIUS), quadCurve(fromX + _constants.ARROW_MARGIN_X, fromY, fromX + _constants.ARROW_MARGIN_X + _constants.CORNER_RADIUS, fromY));
  } else if (from.isBelow) {
    cmds.push(moveTo(fromX + _constants.ARROW_MARGIN_X, fromY + _constants.ARROW_THRESHOLD - _constants.ARROW_MARGIN_Y), lineTo(fromX + _constants.ARROW_MARGIN_X, fromY + _constants.CORNER_RADIUS), quadCurve(fromX + _constants.ARROW_MARGIN_X, fromY, fromX + _constants.ARROW_MARGIN_X + _constants.CORNER_RADIUS, fromY));
  } else {
    cmds.push(moveTo(fromX, fromY));
  } // TO


  if (to.isAbove) {
    if (fromY < to.bounds.top) {
      cmds.push(lineTo(to.bounds.left - 8 - r1, fromY), quadCurve(to.bounds.left - 8, fromY, to.bounds.left - 8, fromY + r1), lineTo(to.bounds.left - 8, toY - r1), quadCurve(to.bounds.left - 8, toY, to.bounds.left - 8 + r1, toY), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X - _constants.CORNER_RADIUS, toY), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, toY, to.bounds.left + _constants.ARROW_MARGIN_X, toY - _constants.CORNER_RADIUS), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X, toY - _constants.ARROW_THRESHOLD + _constants.ARROW_MARGIN_Y));
    } else {
      cmds.push(lineTo(to.bounds.left + _constants.ARROW_MARGIN_X - _constants.CORNER_RADIUS, fromY), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, fromY, to.bounds.left + _constants.ARROW_MARGIN_X, fromY - _constants.CORNER_RADIUS), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X, toY - _constants.ARROW_THRESHOLD + _constants.ARROW_MARGIN_Y));
    }
  } else if (to.isBelow) {
    if (fromY > to.bounds.top + to.bounds.height) {
      // curl around
      cmds.push(lineTo(to.bounds.left - _constants.ARROW_MARGIN_X - r1, fromY), quadCurve(to.bounds.left - _constants.ARROW_MARGIN_X, fromY, to.bounds.left - _constants.ARROW_MARGIN_X, fromY - r1), lineTo(to.bounds.left - _constants.ARROW_MARGIN_X, toY + r1), quadCurve(to.bounds.left - _constants.ARROW_MARGIN_X, toY, to.bounds.left - _constants.ARROW_MARGIN_X + r1, toY), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X - _constants.CORNER_RADIUS, toY), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, toY, to.bounds.left + _constants.ARROW_MARGIN_X, toY + _constants.CORNER_RADIUS), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X, toY + _constants.ARROW_THRESHOLD - _constants.ARROW_MARGIN_Y));
    } else {
      cmds.push(lineTo(to.bounds.left + _constants.ARROW_MARGIN_X - _constants.CORNER_RADIUS, fromY), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, fromY, to.bounds.left + _constants.ARROW_MARGIN_X, fromY + _constants.CORNER_RADIUS), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X, toY + _constants.ARROW_THRESHOLD - _constants.ARROW_MARGIN_Y));
    }
  } else if (fromY < toY) {
    cmds.push(lineTo(to.bounds.left + _constants.ARROW_MARGIN_X - r1, fromY), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, fromY, to.bounds.left + _constants.ARROW_MARGIN_X, fromY + r1), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X, toY - r1), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, toY, to.bounds.left + _constants.ARROW_MARGIN_X + r1, toY), lineTo(toX, toY));
  } else {
    cmds.push(lineTo(to.bounds.left + _constants.ARROW_MARGIN_X - r1, fromY), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, fromY, to.bounds.left + _constants.ARROW_MARGIN_X, fromY - r1), lineTo(to.bounds.left + _constants.ARROW_MARGIN_X, toY + r1), quadCurve(to.bounds.left + _constants.ARROW_MARGIN_X, toY, to.bounds.left + _constants.ARROW_MARGIN_X + r1, toY), lineTo(toX, toY));
  }

  return join(cmds);
}