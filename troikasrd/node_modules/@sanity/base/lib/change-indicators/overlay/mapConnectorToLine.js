"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapConnectorToLine = mapConnectorToLine;

var _constants = require("../constants");

function getConnectorLinePoint(rect, bounds) {
  var centerY = rect.top + rect.height / 2;
  var isAbove = rect.top + rect.height < bounds.top + _constants.ARROW_MARGIN_Y;
  var isBelow = rect.top > bounds.top + bounds.height - _constants.ARROW_MARGIN_Y;
  return {
    bounds: bounds,
    left: rect.left,
    top: centerY,
    centerY,
    startY: rect.top + _constants.CONNECTOR_MARGIN,
    endY: rect.top + rect.height - _constants.CONNECTOR_MARGIN,
    isAbove,
    isBelow,
    outOfBounds: isAbove || isBelow
  };
}

function mapConnectorToLine(connector) {
  var fromBounds = {
    top: connector.from.bounds.top + _constants.ARROW_THRESHOLD,
    bottom: connector.from.bounds.top + connector.from.bounds.height - _constants.ARROW_THRESHOLD,
    left: connector.from.bounds.left,
    right: connector.from.bounds.left + connector.from.bounds.width,
    width: connector.from.bounds.width,
    height: connector.from.bounds.height - _constants.ARROW_THRESHOLD * 2
  };
  var from = getConnectorLinePoint(connector.from.rect, fromBounds);
  from.left = connector.from.rect.left + connector.from.rect.width + 1;
  var toBounds = {
    top: connector.to.bounds.top + _constants.ARROW_THRESHOLD,
    bottom: connector.to.bounds.top + connector.to.bounds.height - _constants.ARROW_THRESHOLD,
    left: connector.to.bounds.left,
    right: connector.to.bounds.left + connector.to.bounds.width,
    width: connector.to.bounds.width,
    height: connector.to.bounds.height - _constants.ARROW_THRESHOLD * 2
  };
  var to = getConnectorLinePoint(connector.to.rect, toBounds);
  var maxStartY = Math.max(to.startY, from.startY); // Align from <-> to vertically

  from.top = Math.min(maxStartY, from.endY);

  if (from.top < toBounds.top) {
    from.top = Math.min(toBounds.top, from.endY);
  } else if (from.top > toBounds.bottom) {
    from.top = Math.max(toBounds.bottom, from.startY);
  }

  to.top = Math.min(maxStartY, to.endY);

  if (to.top < fromBounds.top) {
    to.top = Math.min(fromBounds.top, to.endY);
  } else if (to.top > fromBounds.bottom) {
    to.top = Math.max(fromBounds.bottom, to.startY);
  } // Keep within bounds


  from.top = Math.min(Math.max(from.top, fromBounds.top), fromBounds.bottom);
  to.top = Math.min(Math.max(to.top, toBounds.top), toBounds.bottom);
  return {
    from,
    to
  };
}