"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrappedClient = void 0;

var _client = _interopRequireDefault(require("@sanity/client"));

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var _configSanity = _interopRequireDefault(require("config:sanity"));

var _configureClient = _interopRequireDefault(require("part:@sanity/base/configure-client?"));

var _excluded = ["apiVersion"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fallbackConfig = {
  projectId: 'UNSPECIFIED',
  dataset: 'UNSPECIFIED'
};

var apiConfig = _objectSpread(_objectSpread(_objectSpread({}, fallbackConfig), _configSanity.default.api), {}, {
  requestTagPrefix: 'sanity.studio',
  withCredentials: true,
  useCdn: false,
  apiVersion: '1'
});

var client = (0, _client.default)(apiConfig);
var configuredClient = _configureClient.default ? (0, _configureClient.default)((0, _client.default)(apiConfig)) : client;

var getKeys = obj => Object.keys(Object.getPrototypeOf(obj)).concat(Object.keys(obj));

var instances = [configuredClient];
var wrappedClient = {
  config(newConfig) {
    var silence = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!newConfig) {
      return configuredClient.config();
    }

    if (!silence) {
      // eslint-disable-next-line no-console
      console.warn(new Error("Setting configuration on the global studio client is deprecated - please use `withConfig()` instead - see ".concat((0, _generateHelpUrl.default)('studio-client-global-config'))));
    } // Don't allow overriding apiVersion on instantiated clients


    var apiVersion = newConfig.apiVersion,
        rest = _objectWithoutProperties(newConfig, _excluded);

    instances.forEach(instance => instance.config(rest));
    return configuredClient;
  },

  get clientConfig() {
    return configuredClient.clientConfig;
  },

  withConfig: newConfig => {
    if (!newConfig || !newConfig.apiVersion) {
      throw new Error("Client `withConfig()` called without an `apiVersion` - see ".concat((0, _generateHelpUrl.default)('studio-client-specify-api-version')));
    }

    var newClient = configuredClient.clone().config(newConfig);
    instances.push(newClient);
    return newClient;
  }
};
exports.wrappedClient = wrappedClient;
getKeys(configuredClient).forEach(key => {
  if (key === 'config' || key === 'clientConfig' || key === 'withConfig') {
    return;
  }

  Object.defineProperty(wrappedClient, key, {
    get() {
      // eslint-disable-next-line no-console
      console.warn( // Using Error to get a stack that makes it easier to see where it originates from
      new Error("Used property \"".concat(key, "\" on versionless client - this is deprecated. Please specify API version using `withConfig` - see ").concat((0, _generateHelpUrl.default)('studio-client-specify-api-version'))));
      return typeof configuredClient[key] === 'function' ? configuredClient[key].bind(configuredClient) : configuredClient[key];
    }

  });
});