"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccessDeniedError = AccessDeniedError;
exports.NotFoundError = NotFoundError;
exports.UnknownApiError = UnknownApiError;
exports.default = createProjectsStore;

var _rxjs = require("rxjs");

var _createActions = _interopRequireDefault(require("../utils/createActions"));

var _projectFetcher = _interopRequireDefault(require("part:@sanity/base/project-fetcher"));

var _configSanity = _interopRequireDefault(require("config:sanity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AccessDeniedError(message) {
  this.name = 'AccessDeniedError';
  this.message = message || '';
}

AccessDeniedError.prototype = Object.create(Error.prototype);

function NotFoundError(message) {
  this.name = 'NotFoundError';
  this.message = message || '';
}

NotFoundError.prototype = Object.create(Error.prototype);

function UnknownApiError(error) {
  this.name = 'UnknownApiError';
  this.message = error.message;
  this.code = error.code;
  this.details = error.details;
}

UnknownApiError.prototype = Object.create(Error.prototype);

function handleApiError(errObj, observer) {
  if (errObj.code === 'ACCESS_DENIED') {
    return observer.error(new AccessDeniedError('You are not allowed to perform this action.'));
  }

  if (errObj.code === 'NOT_FOUND_ERROR') {
    return observer.error(new NotFoundError("An project with label '".concat(_configSanity.default.api.dataset, "' not found. Check your project's sanity.json file.")));
  }

  return observer.error(new UnknownApiError(errObj));
}

function currentProject() {
  return new _rxjs.Observable(observer => {
    emitProject('snapshot');

    function emitProject(eventName) {
      _projectFetcher.default.getProject(_configSanity.default.api.dataset).then(project => {
        observer.next({
          event: eventName,
          project: project
        });
      }).catch(error => {
        handleApiError(error, observer);
      });
    }
  });
}

function createProjectsStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    actions: (0, _createActions.default)({}),
    currentProject: currentProject(),
    errors: {
      AccessDeniedError: AccessDeniedError,
      NotFoundError: NotFoundError,
      UnknownApiError: UnknownApiError
    }
  };
}