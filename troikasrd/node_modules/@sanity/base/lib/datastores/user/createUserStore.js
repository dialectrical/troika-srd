"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createUserStore;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _raf = _interopRequireDefault(require("raf"));

var _dataloader = _interopRequireDefault(require("dataloader"));

var _authenticationFetcher = _interopRequireDefault(require("part:@sanity/base/authentication-fetcher"));

var _observableCallback5 = require("observable-callback");

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _debugParams = require("../debugParams");

var _debug = require("../grants/debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var client = _client.default.withConfig({
  apiVersion: '2021-06-07'
});

var _observableCallback = (0, _observableCallback5.observableCallback)(),
    _observableCallback2 = _slicedToArray(_observableCallback, 2),
    logout$ = _observableCallback2[0],
    logout = _observableCallback2[1];

var _observableCallback3 = (0, _observableCallback5.observableCallback)(),
    _observableCallback4 = _slicedToArray(_observableCallback3, 2),
    refresh$ = _observableCallback4[0],
    refresh = _observableCallback4[1];

var userLoader = new _dataloader.default(userIds => fetchApiEndpoint("/users/".concat(userIds.join(',')), {
  tag: 'users.get'
}).then(arrayify).then(response => userIds.map(id => response.find(user => (user === null || user === void 0 ? void 0 : user.id) === id) || null)), {
  batchScheduleFn: cb => (0, _raf.default)(cb)
});

var debugRoles$ = _debugParams.debugRolesParam$.pipe((0, _operators.map)(_debug.getDebugRolesByNames));

function fetchCurrentUser() {
  return (0, _rxjs.defer)(() => {
    var currentUserPromise = _authenticationFetcher.default.getCurrentUser();

    userLoader.prime('me', // @ts-expect-error although not reflected in typings, priming with a promise is indeed supported, see https://github.com/graphql/dataloader/issues/235#issuecomment-692495153 and this PR for fixing it https://github.com/graphql/dataloader/pull/252
    currentUserPromise.then(u => u ? normalizeOwnUser(u) : null));
    return currentUserPromise;
  }).pipe((0, _operators.tap)(user => {
    if (user) {
      // prime the data loader cache with the id of current user
      userLoader.prime(user.id, normalizeOwnUser(user));
    }
  }), (0, _operators.mergeMap)(user => (0, _rxjs.concat)((0, _rxjs.of)(user), debugRoles$.pipe((0, _operators.map)(debugRoles => debugRoles.length > 0 ? _objectSpread(_objectSpread({}, user), {}, {
    roles: debugRoles
  }) : user)))));
}

var currentUser = (0, _rxjs.merge)(fetchCurrentUser(), // initial fetch
refresh$.pipe((0, _operators.switchMap)(() => fetchCurrentUser())), // re-fetch as response to request to refresh current user
logout$.pipe((0, _operators.mergeMap)(() => _authenticationFetcher.default.logout()), (0, _operators.mapTo)(null))).pipe((0, _operators.shareReplay)({
  refCount: true,
  bufferSize: 1
}));
var normalizedCurrentUser = currentUser.pipe((0, _operators.map)(user => user ? normalizeOwnUser(user) : user));

function fetchApiEndpoint(endpoint, _ref) {
  var tag = _ref.tag;
  return client.request({
    uri: endpoint,
    withCredentials: true,
    tag
  });
}

function getUser(userId) {
  return userId === 'me' ? normalizedCurrentUser : (0, _rxjs.from)(userLoader.load(userId));
}

function _getUsers2(_x) {
  return _getUsers.apply(this, arguments);
}

function _getUsers() {
  _getUsers = _asyncToGenerator(function* (ids) {
    var users = yield userLoader.loadMany(ids);
    return users.filter(isUser);
  });
  return _getUsers.apply(this, arguments);
}

function arrayify(value) {
  return Array.isArray(value) ? value : [value];
}

function normalizeOwnUser(user) {
  return {
    id: user.id,
    displayName: user.name,
    imageUrl: user.profileImage
  };
}

function isUser(thing) {
  return Boolean(typeof (thing === null || thing === void 0 ? void 0 : thing.id) === 'string');
}

var currentUserEvents = currentUser.pipe((0, _operators.map)(user => ({
  type: 'snapshot',
  user
})), (0, _operators.catchError)(error => (0, _rxjs.of)({
  type: 'error',
  error
})));
var warned = false;

function getDeprecatedCurrentUserEvents() {
  if (!warned) {
    console.warn("userStore.currentUser is deprecated. Instead use `userStore.me`, which is an observable of the current user (or null if not logged in). ".concat((0, _generateHelpUrl.default)('studio-user-store-currentuser-deprecated')));
    warned = true;
  }

  return currentUserEvents;
}

var observableApi = {
  me: currentUser,
  getCurrentUser: () => currentUser.pipe((0, _operators.take)(1)),
  getUser: getUser,
  getUsers: userIds => (0, _rxjs.from)(_getUsers2(userIds)),

  get currentUser() {
    return getDeprecatedCurrentUserEvents();
  }

};

function createUserStore() {
  return {
    actions: {
      logout,
      retry: refresh
    },
    me: currentUser,

    getCurrentUser() {
      return currentUser.pipe((0, _operators.take)(1)).toPromise();
    },

    getUser(id) {
      return getUser(id).pipe((0, _operators.take)(1)).toPromise();
    },

    getUsers: _getUsers2,

    get currentUser() {
      return getDeprecatedCurrentUserEvents();
    },

    observable: observableApi
  };
}