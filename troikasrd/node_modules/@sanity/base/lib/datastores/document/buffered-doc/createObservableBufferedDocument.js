"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createObservableBufferedDocument = void 0;

var _mutator = require("@sanity/mutator");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _excluded = ["resultRev"];

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// BufferedDocument.LOCAL never updates its revision due to its internal consistency checks
// but we sometimes we need the most current _rev on the document in UI land, e.g.
// in order to do optimistic locking on the edited document to make sure we publish the document the user
// actually are looking at, and not the one currently at the server
// Also - the mutator is not setting _updatedAt on patches applied optimistically or
// when they are received from server
var getUpdatedSnapshot = bufferedDocument => {
  var LOCAL = bufferedDocument.LOCAL;
  var HEAD = bufferedDocument.document.HEAD;

  if (!LOCAL) {
    return LOCAL;
  }

  return _objectSpread(_objectSpread({}, LOCAL), {}, {
    _type: (HEAD || LOCAL)._type,
    _rev: (HEAD || LOCAL)._rev,
    _updatedAt: new Date().toISOString()
  });
};

var toSnapshotEvent = document => ({
  type: 'snapshot',
  document
});

var getDocument = event => event.document; // This is an observable interface for BufferedDocument in an attempt
// to make it easier to work with the api provided by it


var createObservableBufferedDocument = (listenerEvent$, commitMutations) => {
  // Incoming local actions (e.g. a request to mutate, a request to commit pending changes, etc.)
  var actions$ = new _rxjs.Subject(); // Stream of commit requests. Must be handled by a commit handler

  var consistency$ = new _rxjs.BehaviorSubject(true); // Stream of mutations for this document
  // NOTE: this will *not* include remote mutations received over the listener
  // that has *already* applied locally/optimistically

  var mutations$ = new _rxjs.Subject(); // a stream of rebase events emitted from the mutator

  var rebase$ = new _rxjs.Subject(); // a stream of remote mutations with effetcs

  var remoteMutations = new _rxjs.Subject();

  var createInitialBufferedDocument = initialSnapshot => {
    var bufferedDocument = new _mutator.BufferedDocument(initialSnapshot);

    bufferedDocument.onMutation = _ref => {
      var mutation = _ref.mutation,
          remote = _ref.remote;
      // this is called after either when:
      // 1) local mutations has been added, optimistically applied and queued for sending
      // 2) remote mutations originating from another client has arrived and been applied
      mutations$.next({
        type: 'mutation',
        document: getUpdatedSnapshot(bufferedDocument),
        mutations: mutation.mutations,
        origin: remote ? 'remote' : 'local'
      });
    };

    bufferedDocument.onRemoteMutation = mutation => {
      remoteMutations.next({
        type: 'remoteMutation',
        head: bufferedDocument.document.HEAD,
        transactionId: mutation.transactionId,
        timestamp: mutation.timestamp,
        author: mutation.identity,
        effects: mutation.effects
      });
    };

    bufferedDocument.onRebase = (edge, nextRemoteMutations, localMutations) => {
      rebase$.next({
        type: 'rebase',
        document: edge,
        remoteMutations: nextRemoteMutations,
        localMutations
      });
    };

    bufferedDocument.onConsistencyChanged = isConsistent => {
      consistency$.next(isConsistent);
    };

    bufferedDocument.commitHandler = opts => {
      var _opts$mutation$params = opts.mutation.params,
          resultRev = _opts$mutation$params.resultRev,
          mutation = _objectWithoutProperties(_opts$mutation$params, _excluded);

      commitMutations(mutation).then(opts.success, error => {
        var isBadRequest = error.name === 'ClientError' && error.statusCode >= 400 && error.statusCode <= 500;

        if (isBadRequest) {
          opts.cancel(error);
        } else {
          opts.failure();
        }

        return Promise.reject(error);
      });
    };

    return bufferedDocument;
  };

  var currentBufferedDocument$ = listenerEvent$.pipe((0, _operators.scan)((bufferedDocument, listenerEvent) => {
    // consider renaming 'snapshot' to initial/welcome
    if (listenerEvent.type === 'snapshot') {
      if (bufferedDocument) {
        // we received a new snapshot and already got an old one. When we receive a snapshot again
        // it is usually because the connection has been down. Attempt to save pending changes (if any)
        bufferedDocument.commit();
      }

      return createInitialBufferedDocument(listenerEvent.document || null);
    }

    if (bufferedDocument === null) {
      // eslint-disable-next-line no-console
      console.warn('Ignoring event of type "%s" since buffered document has not yet been set up with snapshot', listenerEvent.type);
      return null;
    }

    return bufferedDocument;
  }, null), (0, _operators.distinctUntilChanged)(), (0, _operators.publishReplay)(1), (0, _operators.refCount)()); // this is a stream of document snapshots where each new snapshot are emitted after listener mutations
  // has been applied. Since the optimistic patches is not emitted on the mutation$ stream, we need this
  // in order to update the document with a new _rev (and _updatedAt)

  var snapshotAfterSync$ = listenerEvent$.pipe((0, _operators.filter)(ev => ev.type === 'mutation'), (0, _operators.withLatestFrom)(currentBufferedDocument$), (0, _operators.map)(_ref2 => {
    var _ref3 = _slicedToArray(_ref2, 2),
        mutationEvent = _ref3[0],
        bufferedDocument = _ref3[1];

    bufferedDocument.arrive(new _mutator.Mutation(mutationEvent));
    return getUpdatedSnapshot(bufferedDocument);
  })); // this is where the side effects mandated by local actions actually happens

  var actionHandler$ = actions$.pipe((0, _operators.withLatestFrom)(currentBufferedDocument$), (0, _operators.tap)(_ref4 => {
    var _ref5 = _slicedToArray(_ref4, 2),
        action = _ref5[0],
        bufferedDocument = _ref5[1];

    if (action.type === 'mutation') {
      bufferedDocument.add(new _mutator.Mutation({
        mutations: action.mutations
      }));
    }

    if (action.type === 'commit') {
      bufferedDocument.commit();
    }
  }), // We subscribe to this only for the side effects
  (0, _operators.mergeMapTo)(_rxjs.EMPTY), (0, _operators.share)());

  var emitAction = action => actions$.next(action);

  var addMutations = mutations => emitAction({
    type: 'mutation',
    mutations
  });

  var addMutation = mutation => addMutations([mutation]);

  var commit = () => {
    return currentBufferedDocument$.pipe((0, _operators.take)(1), (0, _operators.mergeMap)(bufferedDocument => bufferedDocument.commit()), (0, _operators.mergeMapTo)(_rxjs.EMPTY));
  }; // A stream of this document's snapshot


  var snapshot$ = (0, _rxjs.merge)(currentBufferedDocument$.pipe((0, _operators.map)(bufferedDocument => bufferedDocument.LOCAL)), mutations$.pipe((0, _operators.map)(getDocument)), rebase$.pipe((0, _operators.map)(getDocument)), snapshotAfterSync$).pipe((0, _operators.map)(toSnapshotEvent), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
  var remoteSnapshot$ = (0, _rxjs.merge)(currentBufferedDocument$.pipe((0, _operators.map)(bufferedDocument => bufferedDocument.document.HEAD), (0, _operators.map)(toSnapshotEvent)), remoteMutations).pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());
  return {
    updates$: (0, _rxjs.merge)(snapshot$, actionHandler$, mutations$, rebase$),
    consistency$: consistency$.pipe((0, _operators.distinctUntilChanged)(), (0, _operators.publishReplay)(1), (0, _operators.refCount)()),
    remoteSnapshot$,
    addMutation,
    addMutations,
    commit
  };
};

exports.createObservableBufferedDocument = createObservableBufferedDocument;