"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBufferedDocument = void 0;

var _createObservableBufferedDocument = require("./createObservableBufferedDocument");

var _excluded = ["_id", "_rev", "_updatedAt"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var prepare = id => document => {
  var _id = document._id,
      _rev = document._rev,
      _updatedAt = document._updatedAt,
      rest = _objectWithoutProperties(document, _excluded);

  return _objectSpread({
    _id: id
  }, rest);
};

var createBufferedDocument = (documentId, listenerEvent$, commitMutations) => {
  var bufferedDocument = (0, _createObservableBufferedDocument.createObservableBufferedDocument)(listenerEvent$, commitMutations);
  var prepareDoc = prepare(documentId);
  var DELETE = {
    delete: {
      id: documentId
    }
  };
  return {
    events: bufferedDocument.updates$,
    consistency$: bufferedDocument.consistency$,
    remoteSnapshot$: bufferedDocument.remoteSnapshot$,
    patch: patches => patches.map(patch => ({
      patch: _objectSpread(_objectSpread({}, patch), {}, {
        id: documentId
      })
    })),
    create: document => ({
      create: prepareDoc(document)
    }),
    createIfNotExists: document => ({
      createIfNotExists: prepareDoc(document)
    }),
    createOrReplace: document => ({
      createOrReplace: prepareDoc(document)
    }),
    delete: () => DELETE,
    mutate: mutations => bufferedDocument.addMutations(mutations),
    commit: () => bufferedDocument.commit()
  };
};

exports.createBufferedDocument = createBufferedDocument;