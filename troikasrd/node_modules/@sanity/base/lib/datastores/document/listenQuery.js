"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listenQuery = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _rxjsExhaustmapWithTrailing = require("rxjs-exhaustmap-with-trailing");

var _versionedClient = require("../../client/versionedClient");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var fetch = (query, params, options) => (0, _rxjs.defer)(() => _versionedClient.versionedClient.observable.fetch(query, params, {
  tag: options.tag,
  filterResponse: true
}));

var listen = (query, params, options) => (0, _rxjs.defer)(() => _versionedClient.versionedClient.listen(query, params, {
  events: ['welcome', 'mutation', 'reconnect'],
  includeResult: false,
  visibility: 'query',
  tag: options.tag
}));

function isWelcomeEvent(event) {
  return event.type === 'welcome';
} // todo: promote as building block for better re-use
// todo: optimize by patching collection in-place


var listenQuery = function listenQuery(query) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var fetchOnce$ = fetch(query, params, options);
  var events$ = listen(query, params, options).pipe((0, _operators.mergeMap)((ev, i) => {
    var isFirst = i === 0;

    if (isFirst && !isWelcomeEvent(ev)) {
      // if the first event is not welcome, it is most likely a reconnect and
      // if it's not a reconnect something is very wrong
      return (0, _rxjs.throwError)(new Error(ev.type === 'reconnect' ? 'Could not establish EventSource connection' : "Received unexpected type of first event \"".concat(ev.type, "\"")));
    }

    return (0, _rxjs.of)(ev);
  }), (0, _operators.share)());

  var _partition = (0, _rxjs.partition)(events$, isWelcomeEvent),
      _partition2 = _slicedToArray(_partition, 2),
      welcome$ = _partition2[0],
      mutationAndReconnect$ = _partition2[1];

  return (0, _rxjs.merge)(welcome$.pipe((0, _operators.take)(1)), mutationAndReconnect$.pipe((0, _operators.throttleTime)(1000, _rxjs.asyncScheduler, {
    leading: true,
    trailing: true
  }))).pipe((0, _rxjsExhaustmapWithTrailing.exhaustMapToWithTrailing)(fetchOnce$));
};

exports.listenQuery = listenQuery;