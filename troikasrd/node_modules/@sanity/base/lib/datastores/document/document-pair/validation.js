"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validation = void 0;

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _validation = require("@sanity/validation");

var _createMemoizer = require("../utils/createMemoizer");

var _editState2 = require("./editState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getValidationMarkers(draft, published) {
  var doc = draft || published;

  if (!doc || !doc._type) {
    return (0, _rxjs.of)([]);
  }

  return (0, _rxjs.from)((0, _validation.validateDocument)(doc, _schema.default));
}

var INITIAL_VALIDATION_STATUS = {
  isValidating: true,
  markers: []
};

function validateEditState(_editState) {
  return getValidationMarkers(_editState.draft, _editState.published).pipe((0, _operators.map)(markers => ({
    markers
  })));
}

var validation = (0, _createMemoizer.memoize)((idPair, typeName) => {
  return (0, _rxjs.concat)((0, _rxjs.of)(INITIAL_VALIDATION_STATUS), (0, _editState2.editState)(idPair, typeName).pipe((0, _operators.switchMap)(_editState => (0, _rxjs.concat)((0, _rxjs.of)({
    isValidating: true
  }), (0, _rxjs.timer)(300).pipe((0, _operators.mapTo)(_editState), (0, _operators.mergeMap)(validateEditState)), (0, _rxjs.of)({
    isValidating: false
  }))), (0, _operators.scan)((prev, next) => _objectSpread(_objectSpread({}, prev), next), INITIAL_VALIDATION_STATUS), (0, _operators.distinctUntilChanged)((prev, next) => prev.isValidating === next.isValidating && prev.markers === next.markers))).pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());
}, idPair => idPair.publishedId);
exports.validation = validation;