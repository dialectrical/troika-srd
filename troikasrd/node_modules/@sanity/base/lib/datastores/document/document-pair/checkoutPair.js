"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkoutPair = checkoutPair;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _versionedClient = require("../../../client/versionedClient");

var _getPairListener = require("../getPairListener");

var _createBufferedDocument = require("../buffered-doc/createBufferedDocument");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isEventForDocId = id => event => event.type !== 'reconnect' && event.documentId === id;

function commitMutations(mutations) {
  return _versionedClient.versionedClient.dataRequest('mutate', mutations, {
    visibility: 'async',
    returnDocuments: false,
    tag: 'document.commit'
  });
}

function setVersion(version) {
  return ev => _objectSpread(_objectSpread({}, ev), {}, {
    version
  });
}

function checkoutPair(idPair) {
  var publishedId = idPair.publishedId,
      draftId = idPair.draftId;
  var listenerEvents$ = (0, _getPairListener.getPairListener)(_versionedClient.versionedClient, idPair).pipe((0, _operators.share)());
  var reconnect$ = listenerEvents$.pipe((0, _operators.filter)(ev => ev.type === 'reconnect'));
  var draft = (0, _createBufferedDocument.createBufferedDocument)(draftId, listenerEvents$.pipe((0, _operators.filter)(isEventForDocId(draftId))), commitMutations);
  var published = (0, _createBufferedDocument.createBufferedDocument)(publishedId, listenerEvents$.pipe((0, _operators.filter)(isEventForDocId(publishedId))), commitMutations);
  return {
    draft: _objectSpread(_objectSpread({}, draft), {}, {
      events: (0, _rxjs.merge)(reconnect$, draft.events).pipe((0, _operators.map)(setVersion('draft'))),
      consistency$: draft.consistency$,
      remoteSnapshot$: draft.remoteSnapshot$.pipe((0, _operators.map)(setVersion('draft')))
    }),
    published: _objectSpread(_objectSpread({}, published), {}, {
      events: (0, _rxjs.merge)(reconnect$, published.events).pipe((0, _operators.map)(setVersion('published'))),
      consistency$: published.consistency$,
      remoteSnapshot$: published.remoteSnapshot$.pipe((0, _operators.map)(setVersion('published')))
    })
  };
}