"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publish = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _versionedClient = require("../../../../client/versionedClient");

var _isLiveEditEnabled = require("../utils/isLiveEditEnabled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var publish = {
  disabled: _ref => {
    var typeName = _ref.typeName,
        snapshots = _ref.snapshots;

    if ((0, _isLiveEditEnabled.isLiveEditEnabled)(typeName)) {
      return 'LIVE_EDIT_ENABLED';
    }

    if (!snapshots.draft) {
      return snapshots.published ? 'ALREADY_PUBLISHED' : 'NO_CHANGES';
    }

    return false;
  },
  execute: _ref2 => {
    var idPair = _ref2.idPair,
        snapshots = _ref2.snapshots;

    var tx = _versionedClient.versionedClient.transaction();

    if (snapshots.published) {
      // If it exists already, we only want to update it if the revision on the remote server
      // matches what our local state thinks it's at
      tx.patch(idPair.publishedId, {
        // Hack until other mutations support revision locking
        unset: ['_revision_lock_pseudo_field_'],
        ifRevisionID: snapshots.published._rev
      }).createOrReplace(_objectSpread(_objectSpread({}, (0, _omit2.default)(snapshots.draft, '_updatedAt')), {}, {
        _id: idPair.publishedId,
        _type: snapshots.draft._type
      }));
    } else {
      // If the document has not been published, we want to create it - if it suddenly exists
      // before being created, we don't want to overwrite if, instead we want to yield an error
      tx.create(_objectSpread(_objectSpread({}, (0, _omit2.default)(snapshots.draft, '_updatedAt')), {}, {
        _id: idPair.publishedId,
        _type: snapshots.draft._type
      }));
    }

    tx.delete(idPair.draftId);
    return tx.commit({
      tag: 'document.publish'
    });
  }
};
exports.publish = publish;