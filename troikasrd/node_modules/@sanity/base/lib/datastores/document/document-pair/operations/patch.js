"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patch = void 0;

var _isLiveEditEnabled = require("../utils/isLiveEditEnabled");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// todo: we could also consider exposing 'mutate' directly
var patch = {
  disabled: () => false,
  execute: function execute(_ref) {
    var snapshots = _ref.snapshots,
        idPair = _ref.idPair,
        draft = _ref.draft,
        published = _ref.published,
        typeName = _ref.typeName;
    var patches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var initialValue = arguments.length > 2 ? arguments[2] : undefined;

    if ((0, _isLiveEditEnabled.isLiveEditEnabled)(typeName)) {
      // No drafting, so patch and commit the published document
      published.mutate([published.createIfNotExists(_objectSpread({
        _type: typeName
      }, initialValue)), ...published.patch(patches)]);
    } else {
      draft.mutate([draft.createIfNotExists(_objectSpread(_objectSpread(_objectSpread({}, initialValue), snapshots.published), {}, {
        _id: idPair.draftId,
        _type: typeName
      })), ...draft.patch(patches)]);
    }
  }
};
exports.patch = patch;