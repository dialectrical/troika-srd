"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.operationArgs = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _snapshotPair = require("./snapshotPair");

var _createMemoizer = require("../utils/createMemoizer");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var operationArgs = (0, _createMemoizer.memoize)((idPair, typeName) => {
  return (0, _snapshotPair.snapshotPair)(idPair).pipe((0, _operators.switchMap)(versions => (0, _rxjs.combineLatest)([versions.draft.snapshots$, versions.published.snapshots$]).pipe((0, _operators.map)(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        draft = _ref2[0],
        published = _ref2[1];

    return {
      idPair,
      typeName: typeName,
      snapshots: {
        draft,
        published
      },
      draft: versions.draft,
      published: versions.published
    };
  }))), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
}, idPair => idPair.publishedId);
exports.operationArgs = operationArgs;