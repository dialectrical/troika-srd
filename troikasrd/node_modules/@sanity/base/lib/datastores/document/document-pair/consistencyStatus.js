"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.consistencyStatus = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _memoizedPair = require("./memoizedPair");

var _createMemoizer = require("../utils/createMemoizer");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// A stream of all events related to either published or draft, each event comes with a 'target'
// that specifies which version (draft|published) the event is about
var consistencyStatus = (0, _createMemoizer.memoize)(idPair => {
  return (0, _memoizedPair.memoizedPair)(idPair).pipe((0, _operators.switchMap)(_ref => {
    var draft = _ref.draft,
        published = _ref.published;
    return (0, _rxjs.combineLatest)([draft.consistency$, published.consistency$]);
  }), (0, _operators.map)(_ref2 => {
    var _ref3 = _slicedToArray(_ref2, 2),
        draftIsConsistent = _ref3[0],
        publishedIsConsistent = _ref3[1];

    return draftIsConsistent && publishedIsConsistent;
  }), (0, _operators.distinctUntilChanged)(), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
}, idPair => idPair.publishedId);
exports.consistencyStatus = consistencyStatus;