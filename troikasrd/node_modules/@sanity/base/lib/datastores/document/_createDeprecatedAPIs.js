"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDeprecatedAPIs;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _createBufferedDocument = require("./buffered-doc/createBufferedDocument");

/* eslint-disable @typescript-eslint/no-use-before-define */
function fetchDocumentSnapshot(client, id) {
  return client.observable.getDocument(id).pipe((0, _operators.map)(document => ({
    type: 'snapshot',
    document: document
  })));
}

function commitMutations(client, mutations) {
  return client.dataRequest('mutate', mutations, {
    visibility: 'async',
    returnDocuments: false
  });
}

function _createDeprecatedAPIs(client) {
  var _doCommit = mutations => commitMutations(client, mutations);

  function patchDoc(documentId, patches) {
    var doc = checkout(documentId);
    doc.patch(patches);
    return doc.commit();
  }

  function deleteDoc(documentId) {
    var doc = checkout(documentId);
    doc.delete();
    doc.commit();
  }

  function checkout(documentId) {
    var serverEvents$ = client.listen('*[_id == $id]', {
      id: documentId
    }, {
      includeResult: false,
      events: ['welcome', 'mutation', 'reconnect']
    }).pipe((0, _operators.concatMap)(event => {
      return event.type === 'welcome' ? fetchDocumentSnapshot(client, documentId) : (0, _rxjs.of)(event);
    }), (0, _operators.share)());
    return (0, _createBufferedDocument.createBufferedDocument)(documentId, serverEvents$, _doCommit);
  }

  function byId(documentId) {
    return checkout(documentId).events;
  }

  function byIds(documentIds) {
    return new _rxjs.Observable(observer => {
      var documentSubscriptions = documentIds.map(id => byId(id).subscribe(observer));
      return () => {
        documentSubscriptions.map(subscription => subscription.unsubscribe());
      };
    });
  }

  function create(document) {
    return client.observable.create(document);
  }

  function createIfNotExists(document) {
    return client.observable.createIfNotExists(document);
  }

  function createOrReplace(document) {
    return client.observable.createOrReplace(document);
  }

  function fetchQuerySnapshot(groqQuery, params) {
    return client.observable.fetch(groqQuery, params).pipe((0, _operators.map)(documents => ({
      type: 'snapshot',
      documents: documents
    })));
  }

  function query(groqQuery, params) {
    return (0, _rxjs.defer)(() => client.observable.listen(groqQuery, params || {}, {
      includeResult: false,
      events: ['welcome', 'mutation', 'reconnect']
    })).pipe((0, _operators.concatMap)(event => {
      return event.type === 'welcome' ? fetchQuerySnapshot(groqQuery, params) : (0, _rxjs.of)(event);
    }));
  }

  return {
    byId,
    byIds,
    create,
    checkout,
    query,
    patch: patchDoc,
    delete: deleteDoc,
    createOrReplace: createOrReplace,
    createIfNotExists: createIfNotExists
  };
}

function deprecate(name, fn) {
  return function () {
    console.warn('The `documentStore.%s()-method is deprecated and should not be relied upon. Please use checkoutPair() or listenQuery() instead.', name);
    return fn(...arguments);
  };
}

function mapObj(obj, mapFn) {
  return Object.keys(obj).reduce((acc, key) => {
    acc[key] = mapFn(obj[key], key);
    return acc;
  }, {});
}

function createDeprecatedAPIs(client) {
  return mapObj(_createDeprecatedAPIs(client), (fn, key) => deprecate(key, fn));
}