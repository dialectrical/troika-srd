"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGrantsStore = createGrantsStore;
exports.default = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _groqJs = require("groq-js");

var _operators2 = require("rxjs-etc/operators");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _user = _interopRequireDefault(require("../user"));

var _debug = require("./debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var client = _client.default.withConfig({
  apiVersion: '2021-06-07'
});

function getDatasetGrants(_x, _x2) {
  return _getDatasetGrants.apply(this, arguments);
}

function _getDatasetGrants() {
  _getDatasetGrants = _asyncToGenerator(function* (projectId, dataset) {
    // `acl` stands for access control list and returns a list of grants
    var grants = yield client.request({
      uri: "/projects/".concat(projectId, "/datasets/").concat(dataset, "/acl"),
      tag: 'acl.get',
      withCredentials: true
    });
    return grants;
  });
  return _getDatasetGrants.apply(this, arguments);
}

function getParams() {
  return _getParams.apply(this, arguments);
}

function _getParams() {
  _getParams = _asyncToGenerator(function* () {
    var params = {};
    var user = yield _user.default.getCurrentUser();

    if (user !== null) {
      params.identity = user.id;
    }

    return params;
  });
  return _getParams.apply(this, arguments);
}

var PARSED_FILTERS_MEMO = new Map();

function matchesFilter(_x3, _x4) {
  return _matchesFilter.apply(this, arguments);
}

function _matchesFilter() {
  _matchesFilter = _asyncToGenerator(function* (filter, document) {
    if (!PARSED_FILTERS_MEMO.has(filter)) {
      // note: it might be tempting to also memoize the result of the evaluation here,
      // Currently these filters are typically evaluated whenever a document change, which means they will be evaluated
      // quite frequently with different versions of the document. There might be some gains in finding out which subset of document
      // properties to use as key (e.g. by looking at the parsed filter and see what properties the filter cares about)
      // But as always, it's worth considering if the complexity/memory usage is worth the potential perf gainâ€¦
      PARSED_FILTERS_MEMO.set(filter, (0, _groqJs.parse)("*[".concat(filter, "]")));
    }

    var parsed = PARSED_FILTERS_MEMO.get(filter);
    var params = yield getParams();
    var data = yield (yield (0, _groqJs.evaluate)(parsed, {
      dataset: [document],
      params
    })).get();
    return (data === null || data === void 0 ? void 0 : data.length) === 1;
  });
  return _matchesFilter.apply(this, arguments);
}

function createGrantsStore() {
  var datasetGrants$ = (0, _rxjs.defer)(() => (0, _rxjs.of)(client.config())).pipe((0, _operators.mergeMap)(_ref => {
    var projectId = _ref.projectId,
        dataset = _ref.dataset;

    if (!projectId || !dataset) {
      throw new Error('Missing projectId or dataset');
    }

    return getDatasetGrants(projectId, dataset);
  }));

  var currentUserDatasetGrants = _debug.debugGrants$.pipe((0, _operators.switchMap)(debugGrants => debugGrants ? (0, _rxjs.of)(debugGrants) : datasetGrants$), (0, _operators.publishReplay)(1), (0, _operators2.refCountDelay)(1000));

  return {
    checkDocumentPermission(permission, document) {
      return currentUserDatasetGrants.pipe((0, _operators.switchMap)(grants => grantsPermissionOn(grants, permission, document)));
    }

  };
}
/**
 * takes a grants object, a permission and a document
 * checks whether the the permission is granted for the given document
 * @param grants the dataset grants object
 * @param permission the permission (e.g. update, read)
 * @param document the document to check
 */


function grantsPermissionOn(_x5, _x6, _x7) {
  return _grantsPermissionOn.apply(this, arguments);
}

function _grantsPermissionOn() {
  _grantsPermissionOn = _asyncToGenerator(function* (grants, permission, document) {
    if (!grants.length) {
      return {
        granted: false,
        reason: 'No document grants'
      };
    }

    var matchingGrants = [];

    var _iterator = _createForOfIteratorHelper(grants),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var grant = _step.value;

        if (yield matchesFilter(grant.filter, document)) {
          matchingGrants.push(grant);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var foundMatch = matchingGrants.some(grant => grant.permissions.some(p => p === permission));
    return {
      granted: foundMatch,
      reason: foundMatch ? "Matching grant" : "No matching grants found"
    };
  });
  return _grantsPermissionOn.apply(this, arguments);
}

var _default = createGrantsStore();

exports.default = _default;