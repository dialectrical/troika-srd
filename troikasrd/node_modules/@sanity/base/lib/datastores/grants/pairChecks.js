"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkPublishPermission = checkPublishPermission;
exports.checkDeletePermission = checkDeletePermission;
exports.checkUnpublishPermission = checkUnpublishPermission;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Various checks that involves "document pairs" aka [published, draft] pairs
// in order to publish a document you need access to:
// - `delete` draft
// - `update` published (if it exists)
// - `create` published (if it does not exists)
function checkPublishPermission(snapshots) {
  return (0, _rxjs.combineLatest)(_index.default.checkDocumentPermission('update', snapshots.draft), _index.default.checkDocumentPermission('update', snapshots.published), _index.default.checkDocumentPermission('create', snapshots.published)).pipe((0, _operators.map)(_ref => {
    var _ref2 = _slicedToArray(_ref, 3),
        deleteDraftPermission = _ref2[0],
        updatePublishedPermission = _ref2[1],
        createPublishedPermission = _ref2[2];

    var canDeleteDraft = deleteDraftPermission.granted;
    var reason = [!canDeleteDraft && "draft version can't be deleted: ".concat(deleteDraftPermission.reason), !updatePublishedPermission.granted && "published version can't be updated: ".concat(updatePublishedPermission.reason), !createPublishedPermission.granted && "published version can't be updated: ".concat(createPublishedPermission.reason)].filter(Boolean).join(', ');
    return {
      granted: deleteDraftPermission.granted && updatePublishedPermission.granted && createPublishedPermission.granted,
      reason: reason ? "Cannot publish: ".concat(reason) : ''
    };
  }));
}

function checkDeletePermission(snapshots) {
  return (0, _rxjs.combineLatest)([_index.default.checkDocumentPermission('update', snapshots.draft), _index.default.checkDocumentPermission('update', snapshots.published)]).pipe((0, _operators.map)(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 2),
        deleteDraftPermission = _ref4[0],
        deletePublishedPermission = _ref4[1];

    var reason = [deleteDraftPermission.granted && "draft version can't be deleted: ".concat(deleteDraftPermission.reason), deletePublishedPermission.granted && "published version can't be deleted: ".concat(deletePublishedPermission.reason)].filter(Boolean).join(' and ');
    return {
      granted: deleteDraftPermission.granted && deletePublishedPermission.granted,
      reason: reason ? "Cannot publish: ".concat(reason) : ''
    };
  }));
} // unpublish is deleting published and creating a draft


function checkUnpublishPermission(snapshots) {
  return (0, _rxjs.combineLatest)([_index.default.checkDocumentPermission('create', snapshots.draft), _index.default.checkDocumentPermission('update', snapshots.published)]).pipe((0, _operators.map)(_ref5 => {
    var _ref6 = _slicedToArray(_ref5, 2),
        createDraftPermission = _ref6[0],
        deletePublishedPermission = _ref6[1];

    var reason = [deletePublishedPermission.granted && "published version can't be deleted: ".concat(deletePublishedPermission.reason), createDraftPermission.granted && "draft version can't be created: ".concat(createDraftPermission.reason)].filter(Boolean).join(' and ');
    return {
      granted: deletePublishedPermission.granted && createDraftPermission.granted,
      reason: reason ? "Cannot publish: ".concat(reason) : ''
    };
  }));
}