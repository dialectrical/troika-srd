"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debugGrants$ = void 0;

var _operators = require("rxjs/operators");

var _debugParams = require("../../debugParams");

var grants = _interopRequireWildcard(require("./exampleGrants"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var DEBUG_ROLE_GRANTS_MAP = {
  // basic
  administrator: grants.administrator,
  editor: grants.editor,
  developer: grants.developer,
  contributor: grants.contributor,
  viewer: grants.viewer,
  // custom
  restricted: grants.restricted,
  // legacy
  read: grants.viewer,
  write: grants.editor
}; // todo: merge other resource keys(?)

var debugGrants$ = _debugParams.debugRolesParam$.pipe((0, _operators.map)(roles => {
  if (!roles.length) return null;
  return roles.filter(value => Boolean(value) && value in DEBUG_ROLE_GRANTS_MAP).flatMap(roleName => DEBUG_ROLE_GRANTS_MAP[roleName] || []);
}));

exports.debugGrants$ = debugGrants$;