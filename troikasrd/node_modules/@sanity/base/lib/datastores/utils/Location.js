"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configure = configure;
exports.default = void 0;

var _url = _interopRequireDefault(require("url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function configure() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    qsImpl: require('querystring')
  },
      qsImpl = _ref.qsImpl;

  class LocationImpl {
    constructor() {
      _defineProperty(this, "query", void 0);

      _defineProperty(this, "hostname", void 0);

      _defineProperty(this, "port", void 0);

      _defineProperty(this, "pathname", void 0);

      _defineProperty(this, "protocol", void 0);

      _defineProperty(this, "slashes", void 0);

      _defineProperty(this, "hash", void 0);
    }

    get search() {
      var stringified = qsImpl.stringify(this.query || {});
      return stringified.length > 1 ? "?".concat(stringified) : null;
    }

    set search(newSearch) {
      this.query = qsImpl.parse(newSearch.replace(/^\?/, ''));
    }

    get host() {
      return this.port ? "".concat(this.hostname, ":").concat(this.port) : this.hostname;
    }

    set host(newVal) {
      var _newVal$split = newVal.split(':'),
          _newVal$split2 = _slicedToArray(_newVal$split, 2),
          hostname = _newVal$split2[0],
          port = _newVal$split2[1];

      Object.assign(this, {
        hostname: hostname,
        port: port
      });
    }

    get path() {
      return this.pathname + (this.search || '');
    }

    set path(newPath) {
      var parsed = _url.default.parse(newPath, false, false);

      Object.assign(this, {
        pathname: parsed.pathname,
        query: qsImpl.parse(parsed.search.substring(1))
      });
    }

    get href() {
      return _url.default.format(this);
    }

    set href(newHref) {
      var parsed = _url.default.parse(newHref, false, false);

      Object.assign(this, {
        protocol: parsed.protocol,
        slashes: parsed.slashes,
        hostname: parsed.hostname,
        pathname: parsed.pathname,
        port: parsed.port,
        auth: parsed.auth,
        query: qsImpl.parse((parsed.search || '').substring(1)),
        hash: parsed.hash
      });
    }

    clone() {
      Object.assign(new Location(), this);
    }

    extend(properties) {
      return Object.assign(new Location(), this, properties);
    }

  }

  return {
    parse(urlToParse) {
      return Object.assign(new LocationImpl(), {
        href: urlToParse
      });
    },

    stringify(location) {
      return _url.default.format({
        protocol: location.protocol,
        slashes: location.slashes,
        hostname: location.hostname,
        pathname: location.pathname,
        port: location.port,
        search: location.search,
        hash: location.hash
      });
    }

  };
}

var _default = configure();

exports.default = _default;