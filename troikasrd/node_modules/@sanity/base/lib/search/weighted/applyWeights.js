"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyWeights = applyWeights;
exports.calculateScore = void 0;

var _toLower2 = _interopRequireDefault(require("lodash/toLower"));

var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));

var _intersection2 = _interopRequireDefault(require("lodash/intersection"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _words2 = _interopRequireDefault(require("lodash/words"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// takes a set of terms and a value and returns a [score, story] pair where score is a value between 0, 1 and story is the explanation
var calculateScore = (searchTerms, value) => {
  var uniqueValueTerms = (0, _uniq2.default)((0, _compact2.default)((0, _words2.default)((0, _toLower2.default)(value))));
  var uniqueSearchTerms = (0, _uniq2.default)(searchTerms.map(_toLower2.default));
  var matches = (0, _intersection2.default)(uniqueSearchTerms, uniqueValueTerms);
  var all = (0, _union2.default)(uniqueValueTerms, uniqueSearchTerms);
  var fieldScore = matches.length / all.length;
  return fieldScore === 1 ? [1, 'Exact match'] : [fieldScore / 2, "Matched ".concat(matches.length, " of ").concat(all.length, " terms: [").concat(matches.join(', '), "]")];
};

exports.calculateScore = calculateScore;

var stringify = value => typeof value === 'string' ? value : JSON.stringify(value);

function applyWeights(searchSpec, hits) {
  var terms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var specByType = (0, _keyBy2.default)(searchSpec, spec => spec.typeName);
  return hits.map((hit, index) => {
    var typeSpec = specByType[hit._type];
    var stories = typeSpec.paths.map((pathSpec, idx) => {
      var value = stringify(hit["w".concat(idx)]);

      if (!value) {
        return {
          path: pathSpec.path,
          score: 0,
          why: 'No match'
        };
      }

      var _calculateScore = calculateScore(terms, value),
          _calculateScore2 = _slicedToArray(_calculateScore, 2),
          score = _calculateScore2[0],
          why = _calculateScore2[1];

      return {
        path: pathSpec.path,
        score: score * pathSpec.weight,
        why: "".concat(why, " (*").concat(pathSpec.weight, ")")
      };
    });
    var totalScore = stories.reduce((acc, rank) => acc + rank.score, 0);
    return {
      hit,
      resultIndex: hits.length - index,
      score: totalScore,
      stories: stories
    };
  });
}