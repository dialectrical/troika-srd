"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegionsWithIntersections = void 0;

var _react = _interopRequireDefault(require("react"));

var _operators = require("rxjs/operators");

var _constants = require("../constants");

var _intersectionObserver = require("./intersectionObserver");

var _RegionsWithIntersections = _interopRequireDefault(require("./RegionsWithIntersections.css"));

var _excluded = ["onIntersection", "io", "id"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var WithIntersection = props => {
  var onIntersection = props.onIntersection,
      io = props.io,
      id = props.id,
      rest = _objectWithoutProperties(props, _excluded);

  var element = _react.default.useRef(null);

  _react.default.useEffect(() => {
    var el = element.current;
    if (!el) return undefined;
    var subscription = io.observe(el).pipe((0, _operators.tap)(entry => onIntersection(id, entry))).subscribe();
    return () => subscription.unsubscribe();
  }, [io]);

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    ref: element
  }, rest));
};

var toPx = num => "".concat(num, "px");

var invert = num => -num;

var RegionsWithIntersections = /*#__PURE__*/_react.default.forwardRef(function RegionsWithIntersections(props, ref) {
  var regions = props.regions,
      render = props.render,
      children = props.children,
      margins = props.margins;

  var overlayRef = _react.default.useRef(null);

  var io = _react.default.useMemo(() => (0, _intersectionObserver.createIntersectionObserver)({
    rootMargin: margins.map(invert).map(toPx).join(' '),
    threshold: _constants.INTERSECTION_THRESHOLDS
  }), []);

  var _React$useState = _react.default.useState({}),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      intersections = _React$useState2[0],
      setIntersections = _React$useState2[1];

  var onIntersection = _react.default.useCallback((id, entry) => {
    setIntersections(current => _objectSpread(_objectSpread({}, current), {}, {
      [id]: entry
    }));
  }, []);

  var top = intersections['::top'];
  var bottom = intersections['::bottom'];
  var regionsWithIntersectionDetails = top && bottom ? regions.filter(region => {
    var _region$presence;

    return ((_region$presence = region.presence) === null || _region$presence === void 0 ? void 0 : _region$presence.length) > 0;
  }).map(region => {
    var intersection = intersections[region.id];

    if (!intersection) {
      return null;
    }

    var _intersection$boundin = intersection.boundingClientRect,
        boundsBottom = _intersection$boundin.bottom,
        boundsTop = _intersection$boundin.top;
    var aboveTop = intersection.boundingClientRect.top < top.boundingClientRect.bottom;
    var belowBottom = intersection.boundingClientRect.top < bottom.boundingClientRect.top;
    var distanceTop = intersection.isIntersecting ? boundsTop - (intersection.intersectionRect.top - _constants.INTERSECTION_ELEMENT_PADDING) : aboveTop ? -top.boundingClientRect.bottom : bottom.boundingClientRect.top;
    var distanceBottom = intersection.isIntersecting ? -(boundsBottom - (intersection.intersectionRect.bottom + _constants.INTERSECTION_ELEMENT_PADDING)) : belowBottom ? bottom.boundingClientRect.top : -top.boundingClientRect.bottom;
    var position = distanceTop <= _constants.SNAP_TO_DOCK_DISTANCE_TOP ? 'top' : distanceBottom <= _constants.SNAP_TO_DOCK_DISTANCE_BOTTOM ? 'bottom' : 'inside';
    return {
      distanceTop,
      distanceBottom,
      region,
      position
    };
  }).filter(Boolean) : [];
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _RegionsWithIntersections.default.root,
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(WithIntersection, {
    io: io,
    id: "::top",
    onIntersection: onIntersection,
    style: {
      zIndex: 100,
      position: 'sticky',
      top: margins[0] - 1,
      height: 1,
      backgroundColor: _constants.DEBUG ? 'red' : 'none'
    }
  }), /*#__PURE__*/_react.default.createElement("div", null, children), /*#__PURE__*/_react.default.createElement("div", {
    ref: overlayRef,
    className: _RegionsWithIntersections.default.overlay,
    style: {
      background: _constants.DEBUG ? 'rgba(255; 0; 0; 0.25)' : ''
    }
  }, overlayRef.current && render(regionsWithIntersectionDetails, overlayRef.current.offsetWidth)), regions.map(region => {
    var forceWidth = region.rect.width === 0;
    return /*#__PURE__*/_react.default.createElement(WithIntersection, {
      className: _RegionsWithIntersections.default.region,
      io: io,
      onIntersection: onIntersection,
      key: region.id,
      id: region.id,
      style: _objectSpread(_objectSpread({}, _constants.DEBUG ? {
        background: 'rgba(255, 0, 0, 0.25)',
        outline: '1px solid #00b'
      } : {}), {}, {
        width: forceWidth ? 1 : region.rect.width,
        left: region.rect.left - (forceWidth ? 1 : 0),
        top: region.rect.top - _constants.INTERSECTION_ELEMENT_PADDING,
        height: region.rect.height + _constants.INTERSECTION_ELEMENT_PADDING * 2,
        visibility: _constants.DEBUG ? 'visible' : 'hidden'
      })
    });
  }), /*#__PURE__*/_react.default.createElement(WithIntersection, {
    id: "::bottom",
    io: io,
    onIntersection: onIntersection,
    style: {
      position: 'sticky',
      bottom: -1,
      height: 1,
      backgroundColor: _constants.DEBUG ? 'blue' : 'none'
    }
  }));
});

exports.RegionsWithIntersections = RegionsWithIntersections;