"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.color = void 0;

var _color = require("@sanity/color");

var _ui = require("@sanity/ui");

var _helpers = require("./helpers");

var _legacyPalette = require("./legacyPalette");

var _legacyTones = require("./legacyTones");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NEUTRAL_TONES = ['default', 'transparent'];
var color = (0, _ui.createColorTheme)({
  base: _ref => {
    var navbar = _ref.dark,
        name = _ref.name;
    var stateTones = navbar ? _legacyTones.legacyTones.state.navbar : _legacyTones.legacyTones.state.default;
    var dark = stateTones.dark;
    var blend = navbar ? _helpers._screen : _helpers._multiply;
    var tints = stateTones[name] || stateTones.default;

    if (name === 'default') {
      var _skeletonFrom = stateTones.default[100];
      return {
        fg: stateTones.fg,
        bg: stateTones.bg,
        border: stateTones.default[200],
        focusRing: _legacyPalette.legacyPalette.focus.base,
        shadow: {
          outline: (0, _ui.rgba)(stateTones.default[500], 0.4),
          umbra: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : stateTones.default[500], 0.2),
          penumbra: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : stateTones.default[500], 0.14),
          ambient: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : stateTones.default[500], 0.12)
        },
        skeleton: {
          from: _skeletonFrom,
          to: (0, _ui.rgba)(_skeletonFrom, 0.5)
        }
      };
    }

    if (name === 'transparent') {
      var _bg = tints[50];

      var _skeletonFrom2 = blend(_bg, tints[100]);

      return {
        fg: tints[900],
        bg: _bg,
        border: tints[300],
        focusRing: _legacyPalette.legacyPalette.focus.base,
        shadow: {
          outline: (0, _ui.rgba)(tints[500], dark ? 0.2 : 0.4),
          umbra: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : tints[500], 0.2),
          penumbra: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : tints[500], 0.14),
          ambient: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : tints[500], 0.12)
        },
        skeleton: {
          from: _skeletonFrom2,
          to: (0, _ui.rgba)(_skeletonFrom2, 0.5)
        }
      };
    }

    var bg = tints[50];
    var skeletonFrom = blend(bg, tints[100]);
    return {
      fg: tints[900],
      bg,
      border: tints[200],
      focusRing: tints[500],
      shadow: {
        outline: (0, _ui.rgba)(tints[500], dark ? 0.2 : 0.4),
        umbra: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : tints[500], 0.2),
        penumbra: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : tints[500], 0.14),
        ambient: (0, _ui.rgba)(dark ? _legacyPalette.legacyPalette.black : tints[500], 0.12)
      },
      skeleton: {
        from: skeletonFrom,
        to: (0, _ui.rgba)(skeletonFrom, 0.5)
      }
    };
  },
  solid: _ref2 => {
    var base = _ref2.base,
        navbar = _ref2.dark,
        name = _ref2.name,
        state = _ref2.state,
        tone = _ref2.tone;
    var buttonTones = navbar ? _legacyTones.legacyTones.button.navbar : _legacyTones.legacyTones.button.default;
    var dark = buttonTones.dark;
    var blend = dark ? _helpers._screen : _helpers._multiply;
    var blendInvert = dark ? _helpers._multiply : _helpers._screen;
    var defaultTints = buttonTones[name] || buttonTones.default;
    var isNeutral = NEUTRAL_TONES.includes(name) && NEUTRAL_TONES.includes(tone);
    var tints = buttonTones[tone === 'default' ? name : tone] || defaultTints;

    if (state === 'disabled') {
      tints = defaultTints;

      var _bg2 = blend(base.bg, tints[200]);

      var _skeletonFrom3 = blendInvert(_bg2, tints[800]);

      return {
        bg: _bg2,
        border: blend(base.bg, tints[200]),
        fg: blend(base.bg, buttonTones.bg),
        muted: {
          fg: blend(base.bg, tints[50])
        },
        accent: {
          fg: blend(base.bg, tints[50])
        },
        link: {
          fg: blend(base.bg, tints[50])
        },
        code: {
          bg: _bg2,
          fg: blend(base.bg, tints[50])
        },
        skeleton: {
          from: _skeletonFrom3,
          to: (0, _ui.rgba)(_skeletonFrom3, 0.5)
        }
      };
    }

    if (state === 'hovered') {
      var _bg3 = blend(base.bg, tints[600]);

      var _skeletonFrom4 = blendInvert(_bg3, tints[800]);

      return {
        bg: _bg3,
        border: blend(base.bg, tints[600]),
        fg: blend(base.bg, buttonTones.bg),
        muted: {
          fg: blend(base.bg, tints[200])
        },
        accent: {
          fg: blendInvert(_bg3, buttonTones.critical[300])
        },
        link: {
          fg: blendInvert(_bg3, buttonTones.primary[200])
        },
        code: {
          bg: blend(_bg3, tints[50]),
          fg: blend(base.bg, tints[200])
        },
        skeleton: {
          from: _skeletonFrom4,
          to: (0, _ui.rgba)(_skeletonFrom4, 0.5)
        }
      };
    }

    if (state === 'pressed') {
      var _bg4 = blend(base.bg, tints[800]);

      var _skeletonFrom5 = blendInvert(_bg4, tints[800]);

      return {
        bg: _bg4,
        border: blend(base.bg, tints[800]),
        fg: blend(base.bg, buttonTones.bg),
        muted: {
          fg: blend(base.bg, tints[200])
        },
        accent: {
          fg: blendInvert(_bg4, buttonTones.critical[300])
        },
        link: {
          fg: blendInvert(_bg4, buttonTones.primary[200])
        },
        code: {
          bg: blend(_bg4, tints[50]),
          fg: blend(base.bg, tints[200])
        },
        skeleton: {
          from: _skeletonFrom5,
          to: (0, _ui.rgba)(_skeletonFrom5, 0.5)
        }
      };
    }

    if (state === 'selected') {
      if (isNeutral) {
        tints = buttonTones.primary;
      }

      var _bg5 = blend(base.bg, tints[800]);

      var _skeletonFrom6 = blendInvert(_bg5, tints[800]);

      return {
        bg: _bg5,
        border: blend(base.bg, tints[800]),
        fg: blend(base.bg, buttonTones.bg),
        muted: {
          fg: blend(base.bg, tints[200])
        },
        accent: {
          fg: blendInvert(_bg5, buttonTones.critical[300])
        },
        link: {
          fg: blendInvert(_bg5, buttonTones.primary[200])
        },
        code: {
          bg: blend(_bg5, tints[50]),
          fg: blend(base.bg, tints[200])
        },
        skeleton: {
          from: _skeletonFrom6,
          to: (0, _ui.rgba)(_skeletonFrom6, 0.5)
        }
      };
    }

    var bg = blend(base.bg, tints[500]);
    var skeletonFrom = blendInvert(bg, tints[800]);
    return {
      bg,
      border: blend(base.bg, tints[500]),
      fg: blend(base.bg, buttonTones.bg),
      muted: {
        fg: blend(base.bg, tints[100])
      },
      accent: {
        fg: blendInvert(bg, buttonTones.critical[200])
      },
      link: {
        fg: blendInvert(bg, buttonTones.primary[100])
      },
      code: {
        bg: blend(bg, tints[50]),
        fg: blend(base.bg, tints[100])
      },
      skeleton: {
        from: skeletonFrom,
        to: (0, _ui.rgba)(skeletonFrom, 0.5)
      }
    };
  },
  muted: _ref3 => {
    var base = _ref3.base,
        navbar = _ref3.dark,
        name = _ref3.name,
        state = _ref3.state,
        tone = _ref3.tone;
    var stateTones = navbar ? _legacyTones.legacyTones.state.navbar : _legacyTones.legacyTones.state.default;
    var dark = stateTones.dark;
    var blend = dark ? _helpers._screen : _helpers._multiply;
    var defaultTints = stateTones[name] || stateTones.default;
    var isNeutral = NEUTRAL_TONES.includes(name) && NEUTRAL_TONES.includes(tone);
    var tints = stateTones[tone === 'default' ? name : tone] || defaultTints;

    if (state === 'disabled') {
      tints = defaultTints;
      var _bg6 = base.bg;

      var _skeletonFrom7 = blend(_bg6, tints[100]);

      return {
        bg: _bg6,
        border: blend(base.bg, tints[50]),
        fg: blend(base.bg, tints[200]),
        muted: {
          fg: blend(_bg6, tints[100])
        },
        accent: {
          fg: blend(_bg6, tints[100])
        },
        link: {
          fg: blend(_bg6, tints[100])
        },
        code: {
          bg: _bg6,
          fg: blend(_bg6, tints[100])
        },
        skeleton: {
          from: _skeletonFrom7,
          to: (0, _ui.rgba)(_skeletonFrom7, 0.5)
        }
      };
    }

    if (state === 'hovered') {
      var _bg7 = blend(base.bg, tints[50]);

      var _skeletonFrom8 = blend(_bg7, tints[100]);

      return {
        bg: _bg7,
        border: blend(_bg7, tints[100]),
        fg: blend(base.bg, tints[900]),
        muted: {
          fg: blend(base.bg, tints[600])
        },
        accent: {
          fg: blend(base.bg, stateTones.critical[500])
        },
        link: {
          fg: blend(base.bg, stateTones.primary[600])
        },
        code: {
          bg: blend(_bg7, tints[50]),
          fg: blend(base.bg, tints[600])
        },
        skeleton: {
          from: _skeletonFrom8,
          to: (0, _ui.rgba)(_skeletonFrom8, 0.5)
        }
      };
    }

    if (state === 'pressed') {
      if (isNeutral) {
        tints = stateTones.primary;
      }

      var _bg8 = blend(base.bg, tints[100]);

      var _skeletonFrom9 = blend(_bg8, tints[100]);

      return {
        bg: _bg8,
        border: blend(_bg8, tints[100]),
        fg: blend(base.bg, tints[800]),
        muted: {
          fg: blend(base.bg, tints[600])
        },
        accent: {
          fg: blend(_bg8, stateTones.critical[500])
        },
        link: {
          fg: blend(_bg8, stateTones.primary[600])
        },
        code: {
          bg: blend(_bg8, tints[50]),
          fg: blend(_bg8, tints[600])
        },
        skeleton: {
          from: _skeletonFrom9,
          to: (0, _ui.rgba)(_skeletonFrom9, 0.5)
        }
      };
    }

    if (state === 'selected') {
      if (isNeutral) {
        tints = stateTones.primary;
      }

      var _bg9 = blend(base.bg, tints[100]);

      var _skeletonFrom10 = blend(_bg9, tints[100]);

      return {
        bg: _bg9,
        border: blend(_bg9, tints[100]),
        fg: blend(_bg9, tints[800]),
        muted: {
          fg: blend(_bg9, tints[600])
        },
        accent: {
          fg: blend(_bg9, stateTones.critical[500])
        },
        link: {
          fg: blend(_bg9, stateTones.primary[600])
        },
        code: {
          bg: blend(_bg9, tints[50]),
          fg: blend(_bg9, tints[600])
        },
        skeleton: {
          from: _skeletonFrom10,
          to: (0, _ui.rgba)(_skeletonFrom10, 0.5)
        }
      };
    }

    var bg = base.bg;
    var skeletonFrom = blend(base.bg, tints[100]);
    return {
      bg,
      border: blend(bg, tints[100]),
      fg: blend(bg, tints[700]),
      muted: {
        fg: blend(bg, tints[600])
      },
      accent: {
        fg: blend(bg, stateTones.critical[500])
      },
      link: {
        fg: blend(bg, stateTones.primary[600])
      },
      code: {
        bg: blend(bg, tints[50]),
        fg: blend(bg, tints[600])
      },
      skeleton: {
        from: skeletonFrom,
        to: (0, _ui.rgba)(skeletonFrom, 0.5)
      }
    };
  },
  button: _ref4 => {
    var base = _ref4.base,
        mode = _ref4.mode,
        muted = _ref4.muted,
        solid = _ref4.solid;

    if (mode === 'bleed') {
      return {
        enabled: _objectSpread(_objectSpread({}, muted.enabled), {}, {
          border: muted.enabled.bg
        }),
        hovered: _objectSpread(_objectSpread({}, muted.hovered), {}, {
          border: muted.hovered.bg
        }),
        pressed: _objectSpread(_objectSpread({}, muted.pressed), {}, {
          border: muted.pressed.bg
        }),
        selected: _objectSpread(_objectSpread({}, muted.selected), {}, {
          border: muted.selected.bg
        }),
        disabled: _objectSpread(_objectSpread({}, muted.disabled), {}, {
          border: muted.disabled.bg
        })
      };
    }

    if (mode === 'ghost') {
      return _objectSpread(_objectSpread({}, solid), {}, {
        enabled: _objectSpread(_objectSpread({}, muted.enabled), {}, {
          border: base.border
        }),
        disabled: muted.disabled
      });
    }

    return solid;
  },
  card: _ref5 => {
    var base = _ref5.base,
        navbar = _ref5.dark,
        muted = _ref5.muted,
        name = _ref5.name,
        solid = _ref5.solid,
        state = _ref5.state;

    if (state === 'hovered') {
      return muted[name].hovered;
    }

    if (state === 'disabled') {
      return muted[name].disabled;
    }

    var isNeutral = NEUTRAL_TONES.includes(name);
    var stateTones = navbar ? _legacyTones.legacyTones.state.navbar : _legacyTones.legacyTones.state.default;
    var tints = stateTones[name] || stateTones.default;
    var dark = stateTones.dark;
    var blend = dark ? _helpers._screen : _helpers._multiply;

    if (state === 'pressed') {
      if (isNeutral) {
        return muted.primary.pressed;
      }

      return muted[name].pressed;
    }

    if (state === 'selected') {
      if (isNeutral) {
        return solid.primary.enabled;
      }

      return solid[name].enabled;
    }

    var bg = base.bg;
    var skeletonFrom = blend(base.bg, tints[dark ? 900 : 100]);
    return {
      bg,
      fg: base.fg,
      border: base.border,
      muted: {
        fg: blend(base.bg, tints[dark ? 400 : 600])
      },
      accent: {
        fg: blend(base.bg, stateTones.critical[dark ? 400 : 500])
      },
      link: {
        fg: blend(base.bg, stateTones.primary[dark ? 400 : 600])
      },
      code: {
        bg: blend(base.bg, tints[dark ? 950 : 50]),
        fg: tints[dark ? 400 : 600]
      },
      skeleton: {
        from: skeletonFrom,
        to: (0, _ui.rgba)(skeletonFrom, 0.5)
      }
    };
  },
  input: _ref6 => {
    var base = _ref6.base,
        navbar = _ref6.dark,
        mode = _ref6.mode,
        state = _ref6.state;
    var stateTones = navbar ? _legacyTones.legacyTones.state.navbar : _legacyTones.legacyTones.state.default;
    var dark = stateTones.dark;
    var blend = dark ? _helpers._screen : _helpers._multiply;

    if (mode === 'invalid') {
      var tints = stateTones.critical;
      return {
        bg: blend(base.bg, tints[50]),
        fg: blend(base.bg, tints[700]),
        border: blend(base.bg, tints[200]),
        placeholder: blend(base.bg, tints[400])
      };
    }

    if (state === 'hovered') {
      return {
        bg: base.bg,
        fg: base.fg,
        border: blend(base.bg, _color.hues.gray[300].hex),
        placeholder: blend(base.bg, _color.hues.gray[400].hex)
      };
    }

    if (state === 'disabled') {
      return {
        bg: blend(base.bg, _color.hues.gray[50].hex),
        fg: blend(base.bg, _color.hues.gray[200].hex),
        border: blend(base.bg, _color.hues.gray[100].hex),
        placeholder: blend(base.bg, _color.hues.gray[100].hex)
      };
    }

    if (state === 'readOnly') {
      return {
        bg: blend(base.bg, _color.hues.gray[50].hex),
        fg: blend(base.bg, _color.hues.gray[800].hex),
        border: blend(base.bg, _color.hues.gray[200].hex),
        placeholder: blend(base.bg, _color.hues.gray[400].hex)
      };
    }

    return {
      bg: base.bg,
      fg: base.fg,
      border: base.border,
      placeholder: blend(base.bg, _color.hues.gray[700].hex)
    };
  },
  selectable: _ref7 => {
    var base = _ref7.base,
        muted = _ref7.muted,
        tone = _ref7.tone,
        solid = _ref7.solid,
        state = _ref7.state;

    if (state === 'enabled') {
      return _objectSpread(_objectSpread({}, muted[tone].enabled), {}, {
        bg: base.bg
      });
    }

    if (state === 'pressed') {
      if (tone === 'default') {
        return muted.primary.pressed;
      }

      return muted[tone].pressed;
    }

    if (state === 'selected') {
      if (tone === 'default') {
        return solid.primary.enabled;
      }

      return solid[tone].enabled;
    }

    if (state === 'disabled') {
      return _objectSpread(_objectSpread({}, muted[tone].disabled), {}, {
        bg: base.bg
      });
    }

    return muted[tone][state];
  },
  spot: _ref8 => {
    var base = _ref8.base,
        key = _ref8.key;
    var dark = (0, _helpers._isDark)(base.bg, base.fg);
    var blend = dark ? _helpers._screen : _helpers._multiply;
    return blend(base.bg, _color.hues[key][dark ? 400 : 500].hex);
  },
  syntax: _ref9 => {
    var base = _ref9.base,
        navbar = _ref9.dark;
    var stateTones = navbar ? _legacyTones.legacyTones.state.navbar : _legacyTones.legacyTones.state.default;
    var dark = stateTones.dark;
    var blend = dark ? _helpers._screen : _helpers._multiply;
    var mainShade = 600;
    var secondaryShade = 400;
    return {
      atrule: blend(base.bg, _color.hues.purple[mainShade].hex),
      attrName: blend(base.bg, stateTones.positive[mainShade]),
      attrValue: blend(base.bg, stateTones.caution[mainShade]),
      attribute: blend(base.bg, stateTones.caution[mainShade]),
      boolean: blend(base.bg, _color.hues.purple[mainShade].hex),
      builtin: blend(base.bg, _color.hues.purple[mainShade].hex),
      cdata: blend(base.bg, stateTones.caution[mainShade]),
      char: blend(base.bg, stateTones.caution[mainShade]),
      class: blend(base.bg, _color.hues.orange[mainShade].hex),
      className: blend(base.bg, _color.hues.cyan[mainShade].hex),
      comment: blend(base.bg, stateTones.default[secondaryShade]),
      constant: blend(base.bg, _color.hues.purple[mainShade].hex),
      deleted: blend(base.bg, stateTones.critical[mainShade]),
      doctype: blend(base.bg, stateTones.default[secondaryShade]),
      entity: blend(base.bg, stateTones.critical[mainShade]),
      function: blend(base.bg, stateTones.positive[mainShade]),
      hexcode: blend(base.bg, stateTones.primary[mainShade]),
      id: blend(base.bg, _color.hues.purple[mainShade].hex),
      important: blend(base.bg, _color.hues.purple[mainShade].hex),
      inserted: blend(base.bg, stateTones.caution[mainShade]),
      keyword: blend(base.bg, _color.hues.magenta[mainShade].hex),
      number: blend(base.bg, _color.hues.purple[mainShade].hex),
      operator: blend(base.bg, _color.hues.magenta[mainShade].hex),
      prolog: blend(base.bg, stateTones.default[secondaryShade]),
      property: blend(base.bg, stateTones.primary[mainShade]),
      pseudoClass: blend(base.bg, stateTones.caution[mainShade]),
      pseudoElement: blend(base.bg, stateTones.caution[mainShade]),
      punctuation: blend(base.bg, stateTones.default[mainShade]),
      regex: blend(base.bg, stateTones.primary[mainShade]),
      selector: blend(base.bg, stateTones.critical[mainShade]),
      string: blend(base.bg, stateTones.caution[mainShade]),
      symbol: blend(base.bg, _color.hues.purple[mainShade].hex),
      tag: blend(base.bg, stateTones.critical[mainShade]),
      unit: blend(base.bg, _color.hues.orange[mainShade].hex),
      url: blend(base.bg, stateTones.critical[mainShade]),
      variable: blend(base.bg, stateTones.critical[mainShade])
    };
  }
});
exports.color = color;