"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fonts = void 0;

var _ui = require("@sanity/ui");

var _sanityCssCustomProperties = _interopRequireDefault(require("sanity:css-custom-properties"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fonts = _objectSpread(_objectSpread({}, _ui.studioTheme.fonts), {}, {
  code: _objectSpread(_objectSpread({}, _ui.studioTheme.fonts.code), {}, {
    family: _sanityCssCustomProperties.default['--font-family-monospace'] || _ui.studioTheme.fonts.code.family
  }),
  heading: _objectSpread(_objectSpread({}, _ui.studioTheme.fonts.heading), {}, {
    family: _sanityCssCustomProperties.default['--font-family-base'] || _ui.studioTheme.fonts.code.family
  }),
  label: _objectSpread(_objectSpread({}, _ui.studioTheme.fonts.label), {}, {
    family: _sanityCssCustomProperties.default['--font-family-base'] || _ui.studioTheme.fonts.code.family
  }),
  text: _objectSpread(_objectSpread({}, _ui.studioTheme.fonts.text), {}, {
    family: _sanityCssCustomProperties.default['--font-family-base'] || _ui.studioTheme.fonts.code.family
  })
});

exports.fonts = fonts;