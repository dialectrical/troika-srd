"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormFieldValidationStatus = FormFieldValidationStatus;

var _color = require("@sanity/color");

var _icons = require("@sanity/icons");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable camelcase */
function FormFieldValidationStatus(props) {
  var _props$__unstable_mar = props.__unstable_markers,
      markers = _props$__unstable_mar === void 0 ? [] : _props$__unstable_mar,
      showSummary = props.__unstable_showSummary,
      fontSize = props.fontSize,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'top' : _props$placement;
  var validationMarkers = markers.filter(_types.isValidationMarker);
  var validation = (0, _helpers.markersToValidationList)(validationMarkers);
  var errors = validation.filter(v => v.type === 'error');
  var hasErrors = errors.length > 0;
  var statusIcon = hasErrors ? _icons.ErrorOutlineIcon : _icons.WarningOutlineIcon;
  var statusColor = hasErrors ? _color.hues.red[500].hex : _color.hues.yellow[500].hex;
  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 3,
      space: 3
    }, showSummary && /*#__PURE__*/_react.default.createElement(FormFieldValidationSummary, {
      markers: validationMarkers
    }), !showSummary && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, validation.map((item, itemIndex) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    _react.default.createElement(FormFieldValidationStatusItem, {
      item: item,
      key: itemIndex
    })))),
    placement: placement,
    fallbackPlacements: ['bottom', 'right', 'left']
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: fontSize,
    weight: "semibold",
    style: {
      color: statusColor
    }
  }, /*#__PURE__*/(0, _react.createElement)(statusIcon))));
}

function FormFieldValidationStatusItem(props) {
  var item = props.item;
  var statusIcon = item.type === 'error' ? _icons.ErrorOutlineIcon : _icons.WarningOutlineIcon;
  var statusColor = item.type === 'error' ? _color.hues.red[500].hex : _color.hues.yellow[500].hex;
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    style: {
      color: statusColor
    }
  }, /*#__PURE__*/(0, _react.createElement)(statusIcon))), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, item.label)));
}

function FormFieldValidationSummary(_ref) {
  var markers = _ref.markers;
  var errorMarkers = markers.filter(_types.isValidationErrorMarker);
  var warningMarkers = markers.filter(_types.isValidationWarningMarker);
  var errorLen = errorMarkers.length;
  var warningLen = warningMarkers.length;
  var errorsStr = "error".concat(errorLen === 1 ? '' : 's');
  var warningsStr = "warning".concat(warningLen === 1 ? '' : 's');
  var errorText = errorLen && "".concat(errorLen, " ").concat(errorsStr);
  var warningText = warningLen && "".concat(warningLen, " ").concat(warningsStr);
  var hasErrors = errorLen > 0;
  var hasWarnings = warningLen > 0;
  var hasBoth = hasErrors && hasWarnings;
  return /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, errorText || '', hasBoth && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " and "), warningText || '');
}