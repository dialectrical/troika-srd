"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollContainer = void 0;

var _react = _interopRequireDefault(require("react"));

var _nanoPubsub = _interopRequireDefault(require("nano-pubsub"));

var _scrollContext = require("./scrollContext");

var _excluded = ["as", "onScroll"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var noop = () => undefined;
/**
 * This provides a utility function for use within Sanity Studios to create scrollable containers
 * It also provides a way for components inside a scrollable container to track onScroll on their first parent scroll container
 * Note: this is used by different studio utilities to track positions of elements on screen
 * Note: It will call any given `onScroll` callback with a Native DOM Event, and not a React Synthetic event
 * Note: It will not make sure the element is actually scrollable, this still needs to be done with css as usual
 */


var ScrollContainer = /*#__PURE__*/_react.default.forwardRef(function ScrollContainer(props, forwardedRef) {
  var _props$as = props.as,
      as = _props$as === void 0 ? 'div' : _props$as,
      onScroll = props.onScroll,
      rest = _objectWithoutProperties(props, _excluded);

  var selfRef = _react.default.useRef(null);

  var parentContext = _react.default.useContext(_scrollContext.ScrollContext);

  var childContext = _react.default.useMemo(() => (0, _nanoPubsub.default)(), []);

  var handleScroll = _react.default.useCallback(event => {
    childContext.publish(event);
  }, [childContext]);

  _react.default.useEffect(() => {
    if (onScroll) {
      // emit scroll events from children
      return childContext.subscribe(onScroll);
    }

    return noop;
  }, [childContext, onScroll]);

  _react.default.useEffect(() => {
    // let events bubble up
    if (parentContext) {
      return childContext.subscribe(parentContext.publish);
    }

    return noop;
  }, [parentContext, childContext]);

  _react.default.useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    selfRef.current.addEventListener('scroll', handleScroll, {
      passive: true,
      capture: true
    });
    return () => {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      selfRef.current.removeEventListener('scroll', handleScroll);
    };
  }, [handleScroll]);

  var setRef = el => {
    selfRef.current = el;
    if (typeof forwardedRef === 'function') forwardedRef(el);else if (forwardedRef && typeof forwardedRef === 'object') forwardedRef.current = el;
  };

  return /*#__PURE__*/_react.default.createElement(_scrollContext.ScrollContext.Provider, {
    value: childContext
  }, /*#__PURE__*/_react.default.createElement(as, _objectSpread({
    ref: setRef
  }, rest)));
});

exports.ScrollContainer = ScrollContainer;