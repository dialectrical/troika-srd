"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ui = require("@sanity/ui");

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var eventBus = window.__webpack_hot_middleware_eventbus__;
var events = eventBus ? eventBus.eventTypes : {};
var CONNECTION_TOAST_ID = 'dev-server-status';
var BUNDLE_EVENT_TOAST_ID = 'dev-server-bundle-event';
var STATE_CONNECTING = 0;
var STATE_OPEN = 1;
var STATE_CLOSED = 2;

function DevServerStatus() {
  var _useState = (0, _react.useState)(STATE_CONNECTING),
      _useState2 = _slicedToArray(_useState, 2),
      connectionState = _useState2[0],
      setConnectionState = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasHadConnection = _useState4[0],
      setHasHadConnection = _useState4[1];

  var _useToast = (0, _ui.useToast)(),
      push = _useToast.push;

  var handleBuilding = (0, _react.useCallback)(() => {
    push({
      closable: true,
      id: BUNDLE_EVENT_TOAST_ID,
      status: 'info',
      title: 'Rebuilding bundleâ€¦'
    });
  }, [push]);
  var handleBuilt = (0, _react.useCallback)(() => {
    push({
      closable: true,
      id: BUNDLE_EVENT_TOAST_ID,
      status: 'success',
      title: 'Rebuilt bundle'
    });
  }, [push]);
  var handleConnecting = (0, _react.useCallback)(() => {
    if (connectionState === STATE_CONNECTING) return;
    setConnectionState(STATE_CONNECTING);
  }, [connectionState]);
  var handleConnected = (0, _react.useCallback)(() => {
    if (connectionState === STATE_OPEN) return;
    setConnectionState(STATE_OPEN);
    push({
      closable: true,
      id: CONNECTION_TOAST_ID,
      status: 'success',
      title: 'Connected to dev server'
    });
  }, [connectionState, push]);
  var handleDisconnected = (0, _react.useCallback)(() => {
    if (connectionState === STATE_CLOSED) return;
    setConnectionState(STATE_CLOSED);
    push({
      closable: true,
      id: CONNECTION_TOAST_ID,
      status: 'warning',
      title: 'Disconnected from dev server'
    });
  }, [connectionState, push]);
  var handleEvent = (0, _react.useCallback)(evt => {
    if (evt.type === events.EVENT_BUILT) {
      handleBuilt();
    }

    if (evt.type === events.EVENT_BUILDING) {
      handleBuilding();
    }

    if (evt.type === events.EVENT_CONNECTING) {
      handleConnecting();
    }

    if (evt.type === events.EVENT_CONNECTED) {
      handleConnected();
    }

    if (evt.type === events.EVENT_DISCONNECTED) {
      handleDisconnected();
    }
  }, [handleBuilding, handleBuilt, handleConnected, handleConnecting, handleDisconnected]); // Handle reconnected

  (0, _react.useEffect)(() => {
    if (connectionState === STATE_OPEN) {
      if (hasHadConnection) {// @todo
        // We reconnected after being disconnected.
        // Hot-reloading won't be applied automatically.
        // We should consider showing a message telling the user to reload,
        // or just programatically reload the page:
        // window.location.reload()
      } else {
        setHasHadConnection(true);
      }
    }
  }, [connectionState, hasHadConnection]); // Subscribe to events

  (0, _react.useEffect)(() => {
    if (!__DEV__ || !eventBus) return undefined;
    return eventBus.subscribe(handleEvent);
  }, [handleEvent]);
  return null;
}

var _default = DevServerStatus;
exports.default = _default;