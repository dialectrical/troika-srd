"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _semverCompare = _interopRequireDefault(require("semver-compare"));

var _sanityVersions = _interopRequireDefault(require("sanity:versions"));

var _fullscreenMessage = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen-message?"));

var _versionedClient = require("../client/versionedClient");

var _requestIdleCallback = require("../actions/utils/requestIdleCallback");

var _FullscreenError = _interopRequireDefault(require("./FullscreenError"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fakeOutdatedModule = false;
var fakeOutdatedModuleSeverity = 'high';

var applySeverity = inp => inp;

if (fakeOutdatedModule) {
  _sanityVersions.default['@sanity/base'] = '0.118.0';

  applySeverity = inp => {
    var mod = inp && inp.outdated.find(item => item.name === '@sanity/base') || {};
    mod.severity = fakeOutdatedModuleSeverity;
    return inp;
  };
}

var hasWarned = false;

var buildQueryString = () => ({
  // eslint-disable-next-line id-length
  m: Object.keys(_sanityVersions.default).filter(pkg => _sanityVersions.default[pkg]).map(pkg => "".concat(pkg, "@").concat(_sanityVersions.default[pkg]))
});

var hashQuery = items => items.join(',').replace(/@?sanity[/-]/g, '');

var storage = typeof sessionStorage === 'undefined' ? {} : sessionStorage;

var onVersionCheckError = err => {
  // eslint-disable-next-line no-console
  console.warn('Module versions check failed. Dependencies *might* be out of date.', err);
};

var breakify = lines => {
  var nodes = [];

  for (var i = 0; i < lines.length; i++) {
    nodes.push(lines[i]);

    if (i !== lines.length - 1) {
      nodes.push( /*#__PURE__*/_react.default.createElement("br", {
        key: i
      }));
    }
  }

  return nodes;
};

var paragraphify = text => {
  return text.split('\n\n').map((para, i) => {
    var lines = para.split('\n'); // eslint-disable-next-line react/no-array-index-key

    return /*#__PURE__*/_react.default.createElement("p", {
      key: i
    }, breakify(lines));
  });
};

var getLatestInstalled = () => {
  var versionNums = Object.keys(_sanityVersions.default).map(pkg => _sanityVersions.default[pkg]);
  var sorted = versionNums.sort(_semverCompare.default);
  return sorted[sorted.length - 1];
};

var checkVersions = function checkVersions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getOutdated = options.getOutdated;
  var query = buildQueryString();
  var hash = hashQuery(query.m);
  var local = storage.versionCheck && storage.versionCheck.indexOf(hash) === 0 && storage.versionCheck.slice(hash.length + 1);

  if (!getOutdated && local) {
    return Promise.resolve({
      result: JSON.parse(local)
    });
  }

  return _versionedClient.versionedClient.request({
    uri: '/versions',
    // resolving the right client definition seems to be an issue :shrug:
    query: buildQueryString(),
    json: true,
    tag: 'module.version-check'
  }).then(result => ({
    hash,
    result: applySeverity(result)
  }));
};

class VersionChecker extends _react.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "checkTimeout", void 0);

    this.state = {};
    this.onResponse = this.onResponse.bind(this);
    this.handleClose = this.handleClose.bind(this);
  }

  onResponse(res) {
    // Don't include outdated modules in the stored result
    var result = (0, _omit2.default)(res.result, ['outdated']);

    if (res.hash && storage) {
      storage.versionCheck = [res.hash, JSON.stringify(result)].join('|');
    } // If we have unsupported modules, we want to show a dialog


    if (!result.isSupported) {
      this.setState({
        result
      });
    }

    if (__DEV__ && res.result && res.result.outdated) {
      var modules = res.result.outdated.map(mod => mod.name).join('\n  - ');
      var instructions = 'Run `sanity upgrade` to update them'; // eslint-disable-next-line no-console

      console.warn("The following modules are outdated:\n  - ".concat(modules, "\n\n").concat(instructions));
      hasWarned = true;
    }
  }

  handleClose() {
    this.setState({
      result: undefined
    });
  }

  componentDidMount() {
    if (hasWarned) {
      return;
    }

    this.checkTimeout = (0, _requestIdleCallback.requestIdleCallback)(() => {
      checkVersions().then(this.onResponse).catch(onVersionCheckError);
    });
  }

  componentWillUnmount() {
    if (this.checkTimeout) {
      (0, _requestIdleCallback.cancelIdleCallback)(this.checkTimeout);
    }
  }

  render() {
    var result = this.state.result;

    if (!result || result.isSupported || result.isSupported === undefined) {
      return null;
    }

    var Dialog = _fullscreenMessage.default || _FullscreenError.default;
    var title = 'Unsupported module versions';
    return /*#__PURE__*/_react.default.createElement(Dialog, {
      color: "danger",
      title: title,
      onClose: this.handleClose
    }, paragraphify(result.message || ''), result.helpUrl && /*#__PURE__*/_react.default.createElement("p", null, "For more information, please read ", /*#__PURE__*/_react.default.createElement("a", {
      href: result.helpUrl
    }, result.helpUrl)));
  }

}

_defineProperty(VersionChecker, "checkVersions", checkVersions);

_defineProperty(VersionChecker, "getLatestInstalled", getLatestInstalled);

var _default = VersionChecker;
exports.default = _default;