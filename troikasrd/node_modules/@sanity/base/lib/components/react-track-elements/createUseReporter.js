"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUseReporter = createUseReporter;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function isFunc(value) {
  return typeof value === 'function';
}

function read(value) {
  return isFunc(value) ? value() : value;
} // eslint-disable-next-line @typescript-eslint/no-empty-function


var noop = () => undefined;

function createUseReporter(Context) {
  return function useReporter( // No reporting will happen if id=null
  id, value) {
    var isEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.is;

    var _React$useContext = React.useContext(Context),
        add = _React$useContext.add,
        update = _React$useContext.update,
        remove = _React$useContext.remove;

    var previous = React.useRef();
    React.useLayoutEffect(() => {
      if (id === null) {
        return noop;
      }

      var current = read(value);
      add(id, current);
      previous.current = current;
      return () => {
        remove(id);
      };
    }, [add, id, remove, value]);
    React.useLayoutEffect(() => {
      var current = read(value);

      if (typeof previous.current !== 'undefined' && !isEqual(previous.current, current) && id !== null) {
        update(id, current);
      }

      previous.current = current;
    });
  };
}