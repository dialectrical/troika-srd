"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStore = createStore;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _nanoPubsub = _interopRequireDefault(require("nano-pubsub"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createStore() {
  var reportedValues = new Map();

  var _createPubsub = (0, _nanoPubsub.default)(),
      publish = _createPubsub.publish,
      subscribe = _createPubsub.subscribe;

  var debouncedPublish = (0, _debounce2.default)(publish, 10, {
    trailing: true
  });

  var read = () => Array.from(reportedValues.entries());

  function add(id, value) {
    if (reportedValues.has(id)) {
      // eslint-disable-next-line no-console
      console.error(new Error("Invalid call to useReporter(".concat(id, "): A component reporting on \"").concat(id, "\" is already mounted in the subtree. Make sure that all reporters within the same <Tracker> subtree have unique ids.")));
    }

    reportedValues.set(id, value);
    debouncedPublish(read());
  }

  function update(id, value) {
    if (!reportedValues.has(id)) {// throw new Error(`A reporter with id "${id}" is not known.`)
    }

    reportedValues.set(id, value);
    debouncedPublish(read());
  }

  function remove(id) {
    if (!reportedValues.has(id)) {// throw new Error(`A reporter with id "${id}" is not known`)
    }

    reportedValues.delete(id);
    debouncedPublish(read());
  }

  return {
    add,
    remove,
    update,
    read,
    subscribe
  };
}