"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _SanityPreview.default;
  }
});
Object.defineProperty(exports, "SanityPreview", {
  enumerable: true,
  get: function get() {
    return _SanityPreview.default;
  }
});
Object.defineProperty(exports, "SanityDefaultPreview", {
  enumerable: true,
  get: function get() {
    return _SanityDefaultPreview.default;
  }
});
Object.defineProperty(exports, "PreviewFields", {
  enumerable: true,
  get: function get() {
    return _PreviewFields.default;
  }
});
Object.defineProperty(exports, "PreviewSubscriber", {
  enumerable: true,
  get: function get() {
    return _PreviewSubscriber.default;
  }
});
Object.defineProperty(exports, "WithVisibility", {
  enumerable: true,
  get: function get() {
    return _WithVisibility.default;
  }
});
exports.observeForPreview = exports.observePaths = void 0;

var _observeFields = _interopRequireDefault(require("./observeFields"));

var _resolveRefType = _interopRequireDefault(require("./utils/resolveRefType"));

var _createPathObserver = require("./createPathObserver");

var _createPreviewObserver = require("./createPreviewObserver");

var _SanityPreview = _interopRequireDefault(require("./components/SanityPreview"));

var _SanityDefaultPreview = _interopRequireDefault(require("./components/SanityDefaultPreview"));

var _PreviewFields = _interopRequireDefault(require("./components/PreviewFields"));

var _PreviewSubscriber = _interopRequireDefault(require("./components/PreviewSubscriber"));

var _WithVisibility = _interopRequireDefault(require("./components/WithVisibility"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var observePaths = (0, _createPathObserver.createPathObserver)(_observeFields.default);
exports.observePaths = observePaths;
var observeForPreview = (0, _createPreviewObserver.createPreviewObserver)(observePaths, _resolveRefType.default);
exports.observeForPreview = observeForPreview;