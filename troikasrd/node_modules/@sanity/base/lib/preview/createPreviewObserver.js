"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPreviewObserver = createPreviewObserver;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@sanity/types");

var _prepareForPreview = _interopRequireWildcard(require("./prepareForPreview"));

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var INSUFFICIENT_PERMISSIONS = Symbol('INSUFFICIENT_PERMISSIONS');

// Takes a value and its type and prepares a snapshot for it that can be passed to a preview component
function createPreviewObserver(observePaths, resolveRefType) {
  return function observeForPreview(value, type, viewOptions) {
    var _type$preview;

    if ((0, _types.isReferenceSchemaType)(type)) {
      // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
      // and the most sane thing to do is to return `null` for snapshot
      if (!value._ref) {
        return (0, _rxjs.of)({
          snapshot: null
        });
      } // Previewing references actually means getting the referenced value,
      // and preview using the preview config of its type
      // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone


      return resolveRefType(value, type).pipe((0, _operators.catchError)(e => {
        if (e instanceof _constants.InsufficientPermissionsError) {
          return (0, _rxjs.of)(INSUFFICIENT_PERMISSIONS);
        }

        throw e;
      }), (0, _operators.switchMap)(refType => {
        if (refType === INSUFFICIENT_PERMISSIONS) {
          return (0, _rxjs.of)({
            type,
            snapshot: _constants.INSUFFICIENT_PERMISSIONS_FALLBACK
          });
        }

        if (!refType) {
          return (0, _rxjs.of)({
            type,
            snapshot: null
          });
        }

        return observeForPreview(value, refType);
      }));
    }

    var selection = (_type$preview = type.preview) === null || _type$preview === void 0 ? void 0 : _type$preview.select;

    if (selection) {
      var _paths = Object.keys(selection).map(key => selection[key].split('.'));

      return observePaths(value, _paths).pipe((0, _operators.map)(snapshot => ({
        type: type,
        snapshot: snapshot && (0, _prepareForPreview.default)(snapshot, type, viewOptions)
      })));
    } // Note: this case is typically rare (or non-existent) and occurs only if
    // the SchemaType doesn't have a `select` field. The schema compiler
    // provides a default `preview` implementation for `object`s, `image`s,
    // `file`s, and `document`s


    return (0, _rxjs.of)({
      type,
      snapshot: value && typeof value === 'object' ? (0, _prepareForPreview.invokePrepare)(type, value, viewOptions).returnValue : null
    });
  };
}