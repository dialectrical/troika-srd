"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPathObserver = createPathObserver;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _props = _interopRequireDefault(require("./utils/props"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isReference(value) {
  return '_ref' in value;
}

function isDocument(value) {
  return '_id' in value;
}

function createEmpty(fields) {
  return fields.reduce((result, field) => {
    result[field] = undefined;
    return result;
  }, {});
}

function resolveMissingHeads(value, paths) {
  return paths.filter(path => !(path[0] in value));
}

function isRecord(value) {
  return (0, _isObject2.default)(value);
}

function observePaths(value, paths, observeFields) {
  if (!isRecord(value)) {
    // Reached a leaf. Return as is
    return (0, _rxjs.of)(value);
  }

  var pathsWithMissingHeads = resolveMissingHeads(value, paths);

  if (pathsWithMissingHeads.length > 0) {
    // Reached a node that is either a document (with _id), or a reference (with _ref) that
    // needs to be "materialized"
    var nextHeads = (0, _uniq2.default)(pathsWithMissingHeads.map(path => path[0]));
    var isRef = isReference(value);

    if (isReference(value) || isDocument(value)) {
      var _id = isRef ? value._ref : value._id;

      return observeFields(_id, nextHeads).pipe((0, _operators.switchMap)(snapshot => {
        if (snapshot === null) {
          return (0, _rxjs.of)(null);
        }

        return observePaths(_objectSpread(_objectSpread(_objectSpread({}, createEmpty(nextHeads)), isRef ? {
          _ref: value._ref
        } : value), snapshot), paths, observeFields);
      }));
    }
  } // We have all the fields needed already present on value


  var leads = {};
  paths.forEach(path => {
    var _path = _toArray(path),
        head = _path[0],
        tail = _path.slice(1);

    if (!leads[head]) {
      leads[head] = [];
    }

    leads[head].push(tail);
  });
  var next = Object.keys(leads).reduce((res, head) => {
    var tails = leads[head].filter(tail => tail.length > 0);

    if (tails.length === 0) {
      res[head] = value[head];
    } else {
      res[head] = observePaths(value[head], tails, observeFields);
    }

    return res;
  }, _objectSpread({}, value));
  return (0, _rxjs.of)(next).pipe((0, _props.default)({
    wait: true
  }));
} // Normalizes path arguments so it supports both dot-paths and array paths, e.g.
// - ['propA.propB', 'propA.propC']
// - [['propA', 'propB'], ['propA', 'propC']]


function normalizePaths(path) {
  return path.map(segment => typeof segment === 'string' ? segment.split('.') : segment);
} // Supports passing either an id or a value (document/reference/object)


function normalizeValue(value) {
  return typeof value === 'string' ? {
    _id: value
  } : value;
}

function createPathObserver(observeFields) {
  return (value, paths) => observePaths(normalizeValue(value), normalizePaths(paths), observeFields);
}