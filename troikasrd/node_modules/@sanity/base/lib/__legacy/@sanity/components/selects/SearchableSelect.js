"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _StatelessSearchableSelect = _interopRequireDefault(require("./StatelessSearchableSelect"));

var _excluded = ["onSearch", "className", "readOnly", "placeholder"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SearchableSelect extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "_rootElement", null);

    _defineProperty(this, "_input", null);

    _defineProperty(this, "handleChange", item => {
      var onChange = this.props.onChange;
      this.setState({
        isInputSelected: true
      });
      if (onChange) onChange(item);
      this.handleClose();
    });

    _defineProperty(this, "handleOpen", () => {
      this.setState({
        isOpen: true
      });
      if (this.props.onOpen) this.props.onOpen();
    });

    _defineProperty(this, "handleClose", () => {
      this.setState({
        isOpen: false
      });
      if (this.props.onClose) this.props.onClose();
    });

    _defineProperty(this, "handleInputChange", inputValue => {
      this.setState({
        inputValue: inputValue,
        isInputSelected: false,
        isOpen: true
      });
      if (this.props.onSearch) this.props.onSearch(inputValue);
    });

    _defineProperty(this, "handleHighlightIndexChange", nextIndex => {
      this.setState({
        highlightIndex: nextIndex
      });
    });

    _defineProperty(this, "setRootElement", element => {
      this._rootElement = element;
    });

    _defineProperty(this, "setInput", input => {
      this._input = input;
    });

    _defineProperty(this, "handleFocus", event => {
      var onFocus = this.props.onFocus;
      this.setState({
        hasFocus: true
      });

      if (onFocus) {
        onFocus();
      }
    });

    _defineProperty(this, "handleBlur", event => {
      this.setState({
        hasFocus: false,
        inputValue: this.props.inputValue || ''
      });

      if (this.state.isOpen && this._rootElement && this._rootElement.contains(event.relatedTarget)) {
        this.setState({
          isOpen: false
        });
      }
    });

    var _inputValue = props.inputValue;
    this.state = {
      inputValue: _inputValue || '',
      isOpen: false,
      highlightIndex: -1,
      isInputSelected: false,
      hasFocus: false // searchResult: []

    };
  } // eslint-disable-next-line camelcase


  UNSAFE_componentWillReceiveProps(nextProps) {
    // if (nextProps.items != this.props.items) {
    //   this.setState({
    //     searchResult: this.props.items || []
    //   })
    // }
    if (nextProps.inputValue !== this.props.inputValue) {
      this.setState({
        inputValue: nextProps.inputValue || ''
      });
    }
  }

  focus() {
    if (this._input) this._input.focus();
  }

  render() {
    var _this$state = this.state,
        isOpen = _this$state.isOpen,
        highlightIndex = _this$state.highlightIndex,
        isInputSelected = _this$state.isInputSelected,
        inputValue = _this$state.inputValue,
        hasFocus = _this$state.hasFocus;

    var _this$props = this.props,
        onSearch = _this$props.onSearch,
        className = _this$props.className,
        readOnly = _this$props.readOnly,
        placeholder = _this$props.placeholder,
        rest = _objectWithoutProperties(_this$props, _excluded);

    var changeHandlers = readOnly ? {} : {
      onInputChange: this.handleInputChange,
      onChange: this.handleChange
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.setRootElement,
      className: className
    }, /*#__PURE__*/_react.default.createElement(_StatelessSearchableSelect.default, _extends({}, rest, changeHandlers, {
      placeholder: placeholder,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onHighlightIndexChange: this.handleHighlightIndexChange,
      onOpen: this.handleOpen,
      onClose: this.handleClose,
      isOpen: isOpen,
      highlightIndex: highlightIndex,
      isInputSelected: isInputSelected,
      inputValue: inputValue,
      ref: this.setInput,
      readOnly: readOnly
    })));
  }

}

exports.default = SearchableSelect;

_defineProperty(SearchableSelect, "defaultProps", {
  placeholder: 'Type to searchâ€¦',
  isLoading: false,
  onChange: () => undefined,
  onSearch: () => undefined,
  onOpen: () => undefined,
  onClose: () => undefined
});