"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/textinputs/default-style"));

var _react = _interopRequireDefault(require("react"));

var _excluded = ["className", "onClear", "hasError", "isClearable", "isSelected", "disabled", "markers", "styles", "customValidity", "focusPath", "inputId", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @todo: refactor to functional component
class DefaultTextInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_input", null);

    _defineProperty(this, "setInput", element => {
      this._input = element;
    });
  }

  componentDidMount() {
    if (this._input && typeof this.props.customValidity === 'string') {
      this._input.setCustomValidity(this.props.customValidity);
    }
  } // eslint-disable-next-line camelcase


  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.customValidity !== this.props.customValidity) {
      if (this._input && typeof nextProps.customValidity === 'string') {
        this._input.setCustomValidity(nextProps.customValidity);
      }
    }
  }

  select() {
    if (this._input) {
      this._input.select();
    }
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _this$props = this.props,
        classNameProp = _this$props.className,
        onClear = _this$props.onClear,
        _this$props$hasError = _this$props.hasError,
        hasError = _this$props$hasError === void 0 ? false : _this$props$hasError,
        _this$props$isClearab = _this$props.isClearable,
        isClearable = _this$props$isClearab === void 0 ? false : _this$props$isClearab,
        _this$props$isSelecte = _this$props.isSelected,
        isSelected = _this$props$isSelecte === void 0 ? false : _this$props$isSelecte,
        _this$props$disabled = _this$props.disabled,
        disabled = _this$props$disabled === void 0 ? false : _this$props$disabled,
        markers = _this$props.markers,
        stylesProp = _this$props.styles,
        customValidity = _this$props.customValidity,
        focusPath = _this$props.focusPath,
        _this$props$inputId = _this$props.inputId,
        inputId = _this$props$inputId === void 0 ? '' : _this$props$inputId,
        _this$props$value = _this$props.value,
        value = _this$props$value === void 0 ? '' : _this$props$value,
        restProps = _objectWithoutProperties(_this$props, _excluded);

    var styles = _objectSpread(_objectSpread({}, _defaultStyle.default), stylesProp);

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(styles.container, isClearable && styles.isClearable, disabled && styles.isDisabled, classNameProp)
    }, /*#__PURE__*/_react.default.createElement("input", _extends({}, restProps, {
      value: value,
      id: inputId,
      ref: this.setInput,
      className: (0, _classnames.default)(styles.input),
      disabled: disabled
    })), isClearable && /*#__PURE__*/_react.default.createElement("button", {
      className: styles.clearButton,
      onClick: onClear,
      type: "button"
    }, /*#__PURE__*/_react.default.createElement(_closeIcon.default, null)));
  }

}

exports.default = DefaultTextInput;