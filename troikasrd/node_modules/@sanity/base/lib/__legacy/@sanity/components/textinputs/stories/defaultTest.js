"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultTestStory = DefaultTestStory;

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _actions = require("part:@sanity/storybook/addons/actions");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _components = require("part:@sanity/storybook/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VALID_TYPES = ['color', 'date', 'email', 'month', 'password', 'search', 'tel', 'text', 'number', 'url', 'week'];

// @todo: refactor to functional component
class DefaultTextInputTest extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "handleChange", event => {
      this.setState({
        value: event.currentTarget.value
      });
    });

    this.state = {
      value: ''
    };
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      placeholder: "This is the placeholder",
      onChange: this.handleChange,
      onFocus: (0, _actions.action)('onFocus'),
      onKeyPress: (0, _actions.action)('onKeyPress'),
      onBlur: (0, _actions.action)('onBlur'),
      value: this.state.value,
      id: "ThisIsAnUniqueId"
    });
  }

}

function DefaultTestStory() {
  return /*#__PURE__*/_react.default.createElement(_components.CenteredContainer, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: '100%',
      maxWidth: 640
    }
  }, /*#__PURE__*/_react.default.createElement(DefaultTextInputTest, {
    placeholder: (0, _knobs.text)('placeholder', 'This is the placeholder', 'props'),
    value: (0, _knobs.text)('value', '', 'props'),
    type: (0, _knobs.select)('type', VALID_TYPES, 'text', 'props'),
    hasError: (0, _knobs.boolean)('hasError', false, 'props'),
    isClearable: (0, _knobs.boolean)('isClearable', false, 'props'),
    isSelected: (0, _knobs.boolean)('isSelected', false, 'props'),
    onChange: (0, _actions.action)('onChange'),
    onFocus: (0, _actions.action)('onFocus'),
    onKeyPress: (0, _actions.action)('onKeyPress'),
    onBlur: (0, _actions.action)('onBlur'),
    onClear: (0, _actions.action)('onClear'),
    id: "ThisIsAnUniqueId"
  })));
}