"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _EventIcon = _interopRequireDefault(require("./EventIcon"));

var _ListItemModules = _interopRequireDefault(require("./ListItem.modules.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => undefined;

class HistoryListItem extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_rootElement", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "handleKeyUp", event => {
      var onEnterKey = this.props.onEnterKey;

      if (event.key === 'Enter') {
        onEnterKey();
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      // Prevent arrow keypress scrolling
      var _this$props = this.props,
          onArrowUpKey = _this$props.onArrowUpKey,
          onArrowDownKey = _this$props.onArrowDownKey;

      if (event.key === 'ArrowDown') {
        onArrowDownKey();
        event.preventDefault();
      } else if (event.key === 'ArrowUp') {
        onArrowUpKey();
        event.preventDefault();
      }
    });

    _defineProperty(this, "handleSelect", evt => {
      this.props.onSelect(evt);
    });
  }

  componentDidUpdate(prevProps) {
    var isSelected = this.props.isSelected; // Focus the element when it becomes selected

    if (isSelected && !prevProps.isSelected) {
      this.focus();
    }
  }

  focus() {
    if (this._rootElement && this._rootElement.current) {
      this._rootElement.current.focus();
    }
  }

  // eslint-disable-next-line complexity
  render() {
    var _this$props2 = this.props,
        linkComponent = _this$props2.linkComponent,
        linkParams = _this$props2.linkParams,
        status = _this$props2.status,
        isSelected = _this$props2.isSelected,
        title = _this$props2.title,
        children = _this$props2.children,
        isCurrentVersion = _this$props2.isCurrentVersion,
        rev = _this$props2.rev,
        tooltip = _this$props2.tooltip,
        type = _this$props2.type;
    var selectionClassName = isSelected ? _ListItemModules.default.selected : _ListItemModules.default.unSelected;

    var content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_EventIcon.default, {
      className: _ListItemModules.default.icon,
      type: type
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _ListItemModules.default.startLine,
      "aria-hidden": "true"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _ListItemModules.default.endLine,
      "aria-hidden": "true"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _ListItemModules.default.status
    }, status), title && type !== 'truncated' && /*#__PURE__*/_react.default.createElement("div", {
      className: _ListItemModules.default.title
    }, title), type === 'truncated' && /*#__PURE__*/_react.default.createElement("div", {
      className: _ListItemModules.default.truncatedInfo
    }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("a", {
      href: "https://www.sanity.io/docs/content-studio/history-experience",
      target: "_blank",
      rel: "noopener noreferrer"
    }, "Learn about history retention"))), children && /*#__PURE__*/_react.default.createElement("div", {
      className: _ListItemModules.default.children
    }, children));

    var rootProps = {
      className: selectionClassName,
      'data-type': type,
      'data-is-current-version': isCurrentVersion,
      'data-is-selected': isSelected,
      'data-rev': rev,
      tabIndex: type === 'truncated' ? undefined : 0,
      onKeyUp: this.handleKeyUp,
      onKeyDown: this.handleKeyDown,
      title: tooltip,
      ref: this._rootElement
    };
    var ParameterizedLink = linkComponent;
    var linkRev = isCurrentVersion ? '-' : rev;
    return ParameterizedLink ? /*#__PURE__*/_react.default.createElement(ParameterizedLink, _extends({
      params: _objectSpread(_objectSpread({}, linkParams), {}, {
        rev: linkRev
      })
    }, rootProps), content) : /*#__PURE__*/_react.default.createElement("div", _extends({}, rootProps, {
      onClick: this.handleSelect
    }), content);
  }

}

exports.default = HistoryListItem;

_defineProperty(HistoryListItem, "defaultProps", {
  status: 'Edited',
  title: undefined,
  onSelect: noop,
  onEnterKey: noop,
  onArrowUpKey: noop,
  onArrowDownKey: noop,
  isCurrentVersion: false,
  isSelected: false,
  users: [],
  children: undefined,
  rev: undefined,
  linkParams: undefined,
  linkComponent: undefined
});