"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _contentStyle = _interopRequireDefault(require("part:@sanity/components/dialogs/content-style"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
function DialogContent(props) {
  var _props$size = props.size,
      size = _props$size === void 0 ? 'auto' : _props$size,
      children = props.children,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 'medium' : _props$padding;
  (0, _react.useEffect)(() => {
    // eslint-disable-next-line no-console
    console.warn('DialogContent is deprecated. Use `<DefaultDialog padding size />` instead.');
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_contentStyle.default[size], _contentStyle.default["padding_".concat(padding)])
  }, children);
}

var _default = DialogContent;
exports.default = _default;