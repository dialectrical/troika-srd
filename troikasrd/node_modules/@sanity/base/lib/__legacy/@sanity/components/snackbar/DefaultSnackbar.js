"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DefaultSnackbar extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "snackId", void 0);
  }

  componentDidMount() {
    if (!this.context.addToSnackQueue) {
      // eslint-disable-next-line no-console
      console.warn('The snackbar is not wrapped in SnackbarProvider');
      return;
    }

    this.snackId = this.context.addToSnackQueue(this.getSnackOptions());
  }

  getSnackOptions() {
    var _this$props = this.props,
        actionProp = _this$props.action,
        actionTitle = _this$props.actionTitle,
        kind = _this$props.kind,
        title = _this$props.title,
        subtitle = _this$props.subtitle,
        timeout = _this$props.timeout,
        children = _this$props.children,
        onClose = _this$props.onClose,
        onAction = _this$props.onAction,
        isPersisted = _this$props.isPersisted,
        isCloseable = _this$props.isCloseable,
        allowDuplicateSnackbarType = _this$props.allowDuplicateSnackbarType;
    var action = (actionTitle || onAction) && {
      title: actionTitle || (actionProp === null || actionProp === void 0 ? void 0 : actionProp.title),
      callback: onAction || (actionProp === null || actionProp === void 0 ? void 0 : actionProp.callback)
    };
    return {
      kind,
      title,
      subtitle,
      children,
      onClose,
      action,
      isPersisted,
      isCloseable,
      autoDismissTimeout: timeout,
      allowDuplicateSnackbarType
    };
  }

  componentWillUnmount() {
    if (!this.context.handleDismissSnack) {
      // eslint-disable-next-line no-console
      console.warn('The snackbar is not wrapped in SnackbarProvider');
      return;
    }

    this.context.handleDismissSnack(this.snackId);
  }

  componentDidUpdate() {
    if (!this.context.updateSnack) {
      // eslint-disable-next-line no-console
      console.warn('The snackbar is not wrapped in SnackbarProvider');
      return;
    }

    this.context.updateSnack(this.snackId, this.getSnackOptions());
  } // eslint-disable-next-line class-methods-use-this


  render() {
    return null;
  }

}

exports.default = DefaultSnackbar;

_defineProperty(DefaultSnackbar, "contextTypes", {
  addToSnackQueue: _propTypes.default.func,
  handleDismissSnack: _propTypes.default.func,
  updateSnack: _propTypes.default.func
});