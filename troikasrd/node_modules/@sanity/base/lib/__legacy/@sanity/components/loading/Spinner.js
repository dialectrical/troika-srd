"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _spinnerIcon = _interopRequireDefault(require("part:@sanity/base/spinner-icon"));

var _spinnerStyle = _interopRequireDefault(require("part:@sanity/components/loading/spinner-style"));

var _react = _interopRequireDefault(require("react"));

var _Portal = require("../utilities/Portal");

var _excluded = ["className", "inline", "message", "fullscreen", "center", "delay", "children", "style"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class Spinner extends _react.default.PureComponent {
  render() {
    var _this$props = this.props,
        classNameProp = _this$props.className,
        inline = _this$props.inline,
        message = _this$props.message,
        fullscreen = _this$props.fullscreen,
        center = _this$props.center,
        _this$props$delay = _this$props.delay,
        delay = _this$props$delay === void 0 ? 300 : _this$props$delay,
        children = _this$props.children,
        _this$props$style = _this$props.style,
        style = _this$props$style === void 0 ? {} : _this$props$style,
        restProps = _objectWithoutProperties(_this$props, _excluded);

    var className = (0, _classnames.default)(inline ? _spinnerStyle.default.inline : _spinnerStyle.default.block, fullscreen && _spinnerStyle.default.fullscreen, center && _spinnerStyle.default.center, classNameProp);

    var rootStyle = _objectSpread(_objectSpread({}, style), {}, {
      animationDelay: "".concat(delay, "ms")
    });

    var root = /*#__PURE__*/_react.default.createElement("div", _extends({}, restProps, {
      className: className,
      style: rootStyle
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _spinnerStyle.default.inner
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: _spinnerStyle.default.iconContainer
    }, /*#__PURE__*/_react.default.createElement(_spinnerIcon.default, null)), children, !children && message && /*#__PURE__*/_react.default.createElement("div", {
      className: _spinnerStyle.default.message
    }, message)));

    if (fullscreen) {
      return /*#__PURE__*/_react.default.createElement(_Portal.Portal, null, root);
    }

    return root;
  }

}

exports.default = Spinner;