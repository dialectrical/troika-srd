"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarStack = AvatarStack;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _helpers = require("../helpers");

var _avatarCounter = require("./avatarCounter");

var _avatarStack = _interopRequireDefault(require("./avatarStack.css"));

var _excluded = ["children", "className", "maxLength", "size", "tone"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function AvatarStack(props) {
  var childrenProp = props.children,
      className = props.className,
      _props$maxLength = props.maxLength,
      maxLengthProp = _props$maxLength === void 0 ? 4 : _props$maxLength,
      _props$size = props.size,
      size = _props$size === void 0 ? 'small' : _props$size,
      tone = props.tone,
      restProps = _objectWithoutProperties(props, _excluded);

  var maxLength = Math.max(maxLengthProp, 0);
  var children = (0, _helpers.childrenToElementArray)(childrenProp);
  var len = children.length;
  var visibleCount = maxLength - 1;
  var extraCount = len - visibleCount;
  var visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", _extends({}, restProps, {
    className: (0, _classnames.default)(_avatarStack.default.root, className),
    "data-size": size
  }), len === 0 && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_avatarCounter.AvatarCounter, {
    count: len,
    tone: tone
  })), len !== 0 && extraCount > 1 && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_avatarCounter.AvatarCounter, {
    count: extraCount,
    size: size,
    tone: tone
  })), visibleChildren.map((child, childIndex) => /*#__PURE__*/_react.default.createElement("div", {
    key: String(childIndex)
  }, /*#__PURE__*/(0, _react.cloneElement)(child, {
    size,
    tone
  })))));
}