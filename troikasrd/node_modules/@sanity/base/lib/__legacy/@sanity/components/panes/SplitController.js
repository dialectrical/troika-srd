"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _helpers = require("../helpers");

var _SplitController = _interopRequireDefault(require("./SplitController.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PanesSplitController extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      isResizing: false
    });

    _defineProperty(this, "handleDragStarted", () => {
      this.setState({
        isResizing: true
      });
    });

    _defineProperty(this, "handleDragFinished", () => {
      this.setState({
        isResizing: false
      });
    });

    _defineProperty(this, "renderSplitPane", (pane1, pane2) => {
      var isCollapsed = pane1.props.isCollapsed;
      var collapsedWidth = this.props.collapsedWidth;
      var isResizing = this.state.isResizing;
      var size = isCollapsed ? collapsedWidth : undefined;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(_SplitController.default.root, isResizing ? _SplitController.default.splitWrapperResizing : _SplitController.default.splitWrapper, pane2 ? '' : _SplitController.default.singleWrapper, isCollapsed && _SplitController.default.collapsed)
      }, /*#__PURE__*/_react.default.createElement(_reactSplitPane.default, {
        minSize: isCollapsed ? collapsedWidth : pane1.props.minSize,
        defaultSize: isCollapsed ? collapsedWidth : pane1.props.defaultSize,
        size: size,
        resizerClassName: _SplitController.default.resizer,
        allowResize: !isCollapsed,
        className: _SplitController.default.splitPane,
        onDragStarted: this.handleDragStarted,
        onDragFinished: this.handleDragFinished
      }, pane1, pane2 || /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'none'
        }
      })));
    });

    _defineProperty(this, "renderRecursivePanes", panes => {
      // only 1 pane left
      if (panes.length === 1) {
        return panes[0];
      } // only 2 panes left


      if (panes.length === 2) {
        return this.renderSplitPane(panes[0], this.renderSplitPane(panes[1]));
      } // Recursive


      var remainingPanes = panes.slice(1);
      return this.renderSplitPane(panes[0], this.renderRecursivePanes(remainingPanes));
    });
  }

  render() {
    var _this$props = this.props,
        children = _this$props.children,
        isMobile = _this$props.isMobile;
    var panes = (0, _helpers.childrenToElementArray)(children);

    if (panes.length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", null, "No panes");
    }

    return isMobile ? children : this.renderRecursivePanes(panes.filter(pane => pane.type !== 'div'));
  }

}

exports.default = PanesSplitController;