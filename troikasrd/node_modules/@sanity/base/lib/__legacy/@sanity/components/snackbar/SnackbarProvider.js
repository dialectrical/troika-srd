"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Portal = require("../utilities/Portal");

var _SnackbarItem = _interopRequireDefault(require("./SnackbarItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This determines (in pixels) how far from the bottom of the screen
// the lowest of the snackbars will be placed:
var SNACKBAR_MARGIN_BOTTOM = 76;

class SnackbarProvider extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      activeSnacks: []
    });

    _defineProperty(this, "maxStack", 3);

    _defineProperty(this, "snackQueue", []);

    _defineProperty(this, "_removeTimer", void 0);

    _defineProperty(this, "handleSetHeight", (id, height) => {
      this.setState(_ref => {
        var activeSnacks = _ref.activeSnacks;
        return {
          activeSnacks: activeSnacks.map(snack => snack.id === id ? _objectSpread(_objectSpread({}, snack), {}, {
            height
          }) : _objectSpread({}, snack))
        };
      });
    });

    _defineProperty(this, "addToSnackQueue", contextSnack => {
      var activeSnacks = this.state.activeSnacks;

      var newSnack = _objectSpread(_objectSpread({}, contextSnack), {}, {
        id: new Date().getTime() + Math.floor(Math.random() * 10000),
        isOpen: true
      });

      if (!newSnack.allowDuplicateSnackbarType) {
        var isInQueue = this.snackQueue.findIndex(snack => snack.kind === newSnack.kind) > -1;
        var isInActive = activeSnacks.findIndex(snack => snack.kind === newSnack.kind) > -1;

        if (isInQueue || isInActive) {
          return null;
        }
      }

      this.snackQueue.push(newSnack);
      this.handleMaxSnackDisplay();
      return newSnack.id;
    });

    _defineProperty(this, "updateSnack", (snackId, contextSnack) => {
      var indexInQueue = this.snackQueue.findIndex(snack => snack.id === snackId);

      if (indexInQueue > -1) {
        this.snackQueue[indexInQueue] = _objectSpread(_objectSpread({}, this.snackQueue[indexInQueue]), contextSnack);
      } else {
        this.setState(_ref2 => {
          var activeSnacks = _ref2.activeSnacks;
          return {
            activeSnacks: activeSnacks.map(snack => snack.id === snackId ? _objectSpread(_objectSpread({}, snack), contextSnack) : snack)
          };
        });
      }
    });

    _defineProperty(this, "handleMaxSnackDisplay", () => {
      var activeSnacks = this.state.activeSnacks;

      if (activeSnacks.length >= this.maxStack) {
        this.handleDismissOldestSnack();
      }

      this.processSnackQueue();
    });

    _defineProperty(this, "processSnackQueue", () => {
      if (this.snackQueue.length > 0) {
        var newSnack = this.snackQueue.shift();

        if (newSnack) {
          this.setState(_ref3 => {
            var activeSnacks = _ref3.activeSnacks;
            return {
              activeSnacks: [...activeSnacks, newSnack]
            };
          });
        }
      }
    });

    _defineProperty(this, "handleDismissOldestSnack", () => {
      var activeSnacks = this.state.activeSnacks;
      var ignorePersistStatus;
      var snackHasBeenRemoved;
      var persistedSnackCount = activeSnacks.reduce((count, current) => count + (current.isOpen && current.isPersisted ? 1 : 0), 0);

      if (persistedSnackCount === this.maxStack) {
        ignorePersistStatus = true;
      } // Find the snack to hide


      activeSnacks.filter(snack => snack.isOpen === true).forEach(snack => {
        if (!snackHasBeenRemoved && (!snack.isPersisted || ignorePersistStatus)) {
          snackHasBeenRemoved = true;
          this.handleDismissSnack(snack.id);
        }
      });
    });

    _defineProperty(this, "handleDismissSnack", id => {
      this.setState(_ref4 => {
        var activeSnacks = _ref4.activeSnacks;
        return {
          activeSnacks: activeSnacks.map(snack => {
            if (snack.id === id) return _objectSpread(_objectSpread({}, snack), {}, {
              isOpen: false
            });
            return _objectSpread({}, snack);
          })
        };
      }, () => this.handleRemoveSnack(id));
    });

    _defineProperty(this, "handleRemoveSnack", id => {
      this._removeTimer = setTimeout(() => {
        this.setState(_ref5 => {
          var activeSnacks = _ref5.activeSnacks;
          return {
            activeSnacks: activeSnacks.filter(snack => snack.id !== id)
          };
        });
      }, 200);
    });

    _defineProperty(this, "getChildContext", () => ({
      addToSnackQueue: this.addToSnackQueue,
      handleDismissSnack: this.handleDismissSnack,
      updateSnack: this.updateSnack
    }));
  }

  get offsets() {
    var activeSnacks = this.state.activeSnacks;
    return activeSnacks.map((snack, index) => {
      var _view$snackbar = {
        view: SNACKBAR_MARGIN_BOTTOM,
        snackbar: 12
      },
          viewOffset = _view$snackbar.view,
          snackbarOffset = _view$snackbar.snackbar;
      var offset = viewOffset;
      var i = index;

      while (activeSnacks[i - 1]) {
        var snackHeight = activeSnacks[i - 1].height || 60;
        offset += snackHeight + snackbarOffset;
        i -= 1;
      }

      return offset;
    });
  }
  /*
   Set a height for the snackbar to stack them correctly
  */


  componentWillUnmount() {
    if (this._removeTimer) {
      clearTimeout(this._removeTimer);
      this._removeTimer = undefined;
    }
  }

  render() {
    var activeSnacks = this.state.activeSnacks;
    var children = this.props.children;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children, /*#__PURE__*/_react.default.createElement(_Portal.Portal, null, /*#__PURE__*/_react.default.createElement("div", {
      role: "region",
      "aria-label": "notifications",
      tabIndex: -1
    }, activeSnacks.map((snack, index) => /*#__PURE__*/_react.default.createElement(_SnackbarItem.default, _extends({
      key: snack.id
    }, snack, {
      offset: this.offsets[index],
      onDismiss: this.handleDismissSnack,
      onSetHeight: this.handleSetHeight
    }))))));
  }

}

exports.default = SnackbarProvider;

_defineProperty(SnackbarProvider, "childContextTypes", {
  addToSnackQueue: _propTypes.default.func,
  handleDismissSnack: _propTypes.default.func,
  updateSnack: _propTypes.default.func
});