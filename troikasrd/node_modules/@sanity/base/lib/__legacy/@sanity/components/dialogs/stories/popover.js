"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverStory = PopoverStory;

var _range2 = _interopRequireDefault(require("lodash/range"));

var _chance = _interopRequireDefault(require("chance"));

var _actions = require("part:@sanity/storybook/addons/actions");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _react = _interopRequireWildcard(require("react"));

var _excluded = ["content", "refStyles"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var chance = new _chance.default();
var dialogTestContent = {
  minimal: 'minimal',
  paragraph: 'paragraph',
  longtext: 'longtext',
  example: 'example with dialogcontent'
};
var paragraph = chance.paragraph();
var paragraphs = (0, _range2.default)(0, 20).map(i => /*#__PURE__*/_react.default.createElement("p", {
  key: i,
  style: {
    margin: 0
  }
}, chance.paragraph()));

function renderContent(type) {
  switch (type) {
    case 'paragraph':
      return /*#__PURE__*/_react.default.createElement("p", {
        style: {
          margin: 0
        }
      }, paragraph);

    case 'longtext':
      return /*#__PURE__*/_react.default.createElement("div", null, paragraphs);

    case 'example':
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", {
        style: {
          margin: 0
        }
      }, "With dialog content"), /*#__PURE__*/_react.default.createElement("p", {
        style: {
          margin: 0
        }
      }, paragraph));

    default:
      return 'Minimal';
  }
}

function PopoverStory() {
  var actions = [{
    index: 1,
    color: 'success',
    title: 'Please click me',
    autoFocus: true
  }];
  var percentRange = {
    range: true,
    min: 0,
    max: 100,
    step: 0.1
  };
  var sizeRange = {
    range: true,
    min: 0,
    max: 1000,
    step: 1
  };
  var left = (0, _knobs.number)('Reference left', 50, percentRange, 'test');
  var top = (0, _knobs.number)('Reference top', 50, percentRange, 'test');
  var width = (0, _knobs.number)('Reference width', 150, sizeRange, 'test');
  var height = (0, _knobs.number)('Reference height', 150, sizeRange, 'test');
  var refStyles = {
    position: 'absolute',
    top: "".concat(top, "%"),
    left: "".concat(left, "%"),
    width: "".concat(width, "px"),
    height: "".concat(height, "px"),
    backgroundColor: 'lime'
  };
  var contentTest = (0, _knobs.select)('content', dialogTestContent, 'minimal');
  var props = {
    actions: (0, _knobs.boolean)('Actions', false, 'test') ? actions : [],
    color: (0, _knobs.select)('Color', [undefined, 'danger', 'default'], undefined, 'Props'),
    onClose: (0, _knobs.boolean)('Closeable', false, 'test') ? (0, _actions.action)('onClose') : undefined,
    hasAnimation: (0, _knobs.boolean)('Animate in', false, 'Props'),
    onAction: (0, _actions.action)('onAction'),
    onClickOutside: (0, _actions.action)('onClickOutside'),
    padding: (0, _knobs.select)('Padding', [undefined, 'none', 'small', 'medium', 'large'], undefined, 'Props'),
    placement: (0, _knobs.select)('Placement', ['auto', 'top', 'right', 'bottom', 'left', 'auto-start', 'top-start', 'right-start', 'bottom-start', 'left-start', 'auto-end', 'top-end', 'right-end', 'bottom-end', 'left-end'], 'auto', 'Props'),
    title: (0, _knobs.text)('Title', 'Title', 'Props'),
    size: (0, _knobs.select)('Size', {
      small: 'Small',
      medium: 'Medium',
      large: 'Large',
      auto: 'Auto'
    }, 'auto', 'Props'),
    useOverlay: (0, _knobs.boolean)('Use overlay', false, 'Props')
  };
  return /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/popover",
    propTables: [_popover.default]
  }, /*#__PURE__*/_react.default.createElement(Example, _extends({}, props, {
    content: contentTest && renderContent(contentTest),
    refStyles: refStyles
  })));
}

function Example(_ref) {
  var content = _ref.content,
      refStyles = _ref.refStyles,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      element = _useState2[0],
      setElement = _useState2[1];

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_popover.default, _extends({}, props, {
    referenceElement: element
  }), content), /*#__PURE__*/_react.default.createElement("div", {
    ref: setElement,
    style: refStyles
  }, "Reference element"));
}