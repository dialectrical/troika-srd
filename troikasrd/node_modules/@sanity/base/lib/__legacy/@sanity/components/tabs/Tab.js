"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Tab = _interopRequireDefault(require("./Tab.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @todo: refactor to functional component
class Tab extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "element", null);

    _defineProperty(this, "focusTimeout", void 0);

    _defineProperty(this, "handleBlur", () => {
      this.setState({
        isDOMFocused: false
      });
    });

    _defineProperty(this, "handleFocus", () => {
      this.setState({
        isDOMFocused: true
      });

      if (this.props.onFocus) {
        this.props.onFocus();
      }
    });

    _defineProperty(this, "setElement", element => {
      this.element = element;
    });

    this.state = {
      isDOMFocused: false
    };
  }

  componentDidUpdate(prevProps) {
    if (!prevProps.isFocused && this.props.isFocused) {
      if (!this.state.isDOMFocused) {
        this.focusTimeout = setTimeout(() => {
          if (this.element) this.element.focus();
        }, 0);
      }
    }
  }

  componentWillUnmount() {
    if (this.focusTimeout) {
      clearTimeout(this.focusTimeout);
      this.focusTimeout = undefined;
    }
  }

  render() {
    var _this$props = this.props,
        icon = _this$props.icon,
        id = _this$props.id,
        isActive = _this$props.isActive,
        label = _this$props.label,
        onClick = _this$props.onClick;
    return /*#__PURE__*/_react.default.createElement("button", {
      "aria-controls": this.props['aria-controls'],
      "aria-selected": isActive ? 'true' : 'false',
      className: isActive ? _Tab.default.isActive : _Tab.default.root,
      id: id,
      onClick: onClick,
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      ref: this.setElement,
      role: "tab",
      tabIndex: isActive ? 0 : -1,
      type: "button"
    }, /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: -1
    }, icon && /*#__PURE__*/_react.default.createElement("span", {
      className: _Tab.default.icon
    }, /*#__PURE__*/_react.default.createElement(icon)), ' ', /*#__PURE__*/_react.default.createElement("span", {
      className: _Tab.default.label
    }, label)));
  }

}

exports.default = Tab;