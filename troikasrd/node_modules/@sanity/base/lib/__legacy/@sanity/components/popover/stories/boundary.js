"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BoundaryStory = BoundaryStory;

var _popover = require("part:@sanity/components/popover");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _components = require("part:@sanity/storybook/components");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
function BoundaryStory() {
  var boundary = (0, _knobs.select)('Boundary', {
    viewport: 'Viewport',
    wrapper: 'Wrapper'
  }, 'viewport', 'Props');
  var content = (0, _knobs.text)('Content', 'Content', 'Props');
  var open = (0, _knobs.boolean)('Open', true, 'Props');
  var placement = (0, _knobs.select)('Placement', {
    'top-start': 'Top start',
    top: 'Top',
    'top-end': 'Top end',
    'right-start': 'Right start',
    right: 'Right',
    'right-end': 'Right end',
    'bottom-start': 'Bottom start',
    bottom: 'Bottom',
    'bottom-end': 'Bottom end',
    'left-start': 'Left start',
    left: 'Left',
    'left-end': 'Left end'
  }, 'bottom', 'Props');
  return /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/default",
    propTables: [_popover.Popover]
  }, /*#__PURE__*/_react.default.createElement(_components.CenteredContainer, null, /*#__PURE__*/_react.default.createElement(PopoverExample, {
    boundary: boundary,
    content: content,
    open: open,
    placement: placement
  })));
}

function PopoverExample(_ref) {
  var boundary = _ref.boundary,
      content = _ref.content,
      open = _ref.open,
      placement = _ref.placement;
  var boundaryRef = (0, _react.useRef)(null);
  var popoverContent = content ? /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: '1em'
    }
  }, content) : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: boundaryRef,
    style: {
      minWidth: 200,
      minHeight: 200,
      outline: '1px solid red'
    }
  }, /*#__PURE__*/_react.default.createElement(_popover.Popover, {
    boundaryElement: boundary === 'wrapper' ? boundaryRef.current : null,
    content: popoverContent,
    open: open,
    placement: placement
  }, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      display: 'inline-block',
      padding: '0.25em',
      background: 'rgba(127, 127, 127, 0.5)'
    }
  }, "Reference")));
}