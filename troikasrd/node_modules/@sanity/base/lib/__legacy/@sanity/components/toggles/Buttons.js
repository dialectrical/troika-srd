"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _buttonsStyle = _interopRequireDefault(require("part:@sanity/components/toggles/buttons-style"));

var _button = _interopRequireDefault(require("part:@sanity/components/toggles/button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @todo: refactor to functional component
class ToggleButtons extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", event => {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          items = _this$props.items;
      var index = Number(event.currentTarget.getAttribute('data-index'));
      if (onChange && items) onChange(items[index]);
    });
  }

  render() {
    var _this$props2 = this.props,
        items = _this$props2.items,
        label = _this$props2.label,
        value = _this$props2.value;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _buttonsStyle.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _buttonsStyle.default.label
    }, label), items && items.map((item, i) => {
      return /*#__PURE__*/_react.default.createElement(_button.default // eslint-disable-next-line react/no-array-index-key
      , {
        key: i,
        icon: item.icon,
        onClick: this.handleClick,
        selected: value === items[i],
        "data-index": i
      }, item.title);
    }));
  }

}

exports.default = ToggleButtons;