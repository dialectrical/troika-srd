"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createButtonLike;

var _classnames = _interopRequireDefault(require("classnames"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/buttons/default-style"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _react = _interopRequireDefault(require("react"));

var _excluded = ["kind", "inverted", "color", "icon", "iconStatus", "loading", "className", "children", "disabled", "padding", "bleed", "selected", "size", "tone"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createButtonLike(as, _ref) {
  var _class, _temp;

  var displayName = _ref.displayName,
      _ref$defaultProps = _ref.defaultProps,
      defaultProps = _ref$defaultProps === void 0 ? {} : _ref$defaultProps;
  var Component = as; // @todo: refactor to functional component

  return _temp = _class = class ButtonLike extends _react.default.Component {
    constructor() {
      super(...arguments);

      _defineProperty(this, "_element", null);

      _defineProperty(this, "state", {
        focusSetFromOutside: false
      });

      _defineProperty(this, "setRootElement", el => {
        this._element = el;
      });

      _defineProperty(this, "handleBlur", event => {
        if (this.props.onBlur) {
          this.props.onBlur(event);
        }
      });

      _defineProperty(this, "handleInnerBlur", () => {
        this.setState({
          focusSetFromOutside: false
        });
      });
    }

    focus() {
      if (this._element) {
        this.setState({
          focusSetFromOutside: true
        });

        this._element.focus();
      }
    }

    // eslint-disable-next-line complexity
    render() {
      var _this$props = this.props,
          kind = _this$props.kind,
          inverted = _this$props.inverted,
          color = _this$props.color,
          Icon = _this$props.icon,
          iconStatus = _this$props.iconStatus,
          loading = _this$props.loading,
          classNameProp = _this$props.className,
          children = _this$props.children,
          disabled = _this$props.disabled,
          _this$props$padding = _this$props.padding,
          padding = _this$props$padding === void 0 ? 'medium' : _this$props$padding,
          bleed = _this$props.bleed,
          selected = _this$props.selected,
          size = _this$props.size,
          tone = _this$props.tone,
          restProps = _objectWithoutProperties(_this$props, _excluded);

      var className = (0, _classnames.default)(classNameProp, _defaultStyle.default.root, kind && _defaultStyle.default[kind], _defaultStyle.default["padding_".concat(padding)], inverted && _defaultStyle.default.inverted, color && _defaultStyle.default["color__".concat(color)], size && _defaultStyle.default["size__".concat(size)], bleed && _defaultStyle.default.bleed, disabled && _defaultStyle.default.disabled, selected && _defaultStyle.default.selected, loading && _defaultStyle.default.loading);
      return /*#__PURE__*/_react.default.createElement(Component, _extends({}, restProps, {
        className: className,
        "data-icon-status": iconStatus,
        "data-tone": tone,
        disabled: disabled || loading,
        ref: this.setRootElement,
        tabIndex: 0,
        onBlur: this.handleBlur
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.inner,
        tabIndex: this.state.focusSetFromOutside ? undefined : -1,
        onBlur: this.handleInnerBlur
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.content
      }, loading && /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.spinner
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        inline: true
      })), Icon && /*#__PURE__*/_react.default.createElement("div", {
        className: _defaultStyle.default.icon
      }, /*#__PURE__*/_react.default.createElement(Icon, null), iconStatus && /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.iconStatus
      })), children && /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.text
      }, children))));
    }

  }, _defineProperty(_class, "displayName", displayName || "ButtonLike(".concat(typeof Component === 'string' ? Component : Component.displayName || Component.name, ")")), _defineProperty(_class, "defaultProps", defaultProps), _temp;
}