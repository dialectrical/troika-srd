"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _truncate2 = _interopRequireDefault(require("lodash/truncate"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _format = _interopRequireDefault(require("date-fns/format"));

var _elementResizeDetector = _interopRequireDefault(require("element-resize-detector"));

var _cardStyle = _interopRequireDefault(require("part:@sanity/components/previews/card-style"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_MEDIA_DIMENSIONS = {
  width: 300,
  height: 225,
  aspect: 4 / 3,
  fit: 'crop'
};
var index = 0;
var svgStyles = {
  position: 'relative',
  width: '100%',
  height: '100%'
};

class CardPreview extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "index", index++);

    _defineProperty(this, "_elementResizeDetector", (0, _elementResizeDetector.default)({
      strategy: 'scroll'
    }));

    _defineProperty(this, "state", {
      emWidth: 10
    });

    _defineProperty(this, "dateElement", null);

    _defineProperty(this, "setDateElement", element => {
      this.dateElement = element;

      if (element) {
        this._elementResizeDetector.listenTo(element, this.onResize);
      }
    });

    _defineProperty(this, "onResize", (0, _debounce2.default)(() => {
      var el = this.dateElement;

      if (el) {
        var fontSize = Number(window.getComputedStyle(el, null).getPropertyValue('font-size').split('px')[0]);
        var emWidth = el.offsetWidth / fontSize;
        this.setState({
          emWidth: Math.round(emWidth)
        });
      }
    }, 1000 / 60));
  }

  // eslint-disable-next-line camelcase
  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.isPlaceholder && this.dateElement) {
      this._elementResizeDetector.uninstall(this.dateElement);
    }

    if (!nextProps.isPlaceholder && this.dateElement) {
      this._elementResizeDetector.listenTo(this.dateElement, this.onResize);
    }
  }

  componentWillUnmount() {
    if (this.dateElement) this._elementResizeDetector.uninstall(this.dateElement);
  }

  render() {
    var _this$props = this.props,
        title = _this$props.title,
        subtitle = _this$props.subtitle,
        description = _this$props.description,
        date = _this$props.date,
        media = _this$props.media,
        _this$props$mediaDime = _this$props.mediaDimensions,
        mediaDimensions = _this$props$mediaDime === void 0 ? DEFAULT_MEDIA_DIMENSIONS : _this$props$mediaDime,
        children = _this$props.children,
        isPlaceholder = _this$props.isPlaceholder,
        status = _this$props.status;
    var emWidth = this.state.emWidth;
    var aspect = mediaDimensions.aspect || DEFAULT_MEDIA_DIMENSIONS.aspect;

    if (isPlaceholder) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.placeholder
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.svg,
        style: svgStyles
      }, media && /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.media
      }, aspect && /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.mediaPadding,
        style: {
          paddingTop: "".concat(100 / aspect, "%")
        }
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.mediaContent
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.meta
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.heading
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.title
      }, "\xA0"), /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.date
      }, "\xA0")), /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.subtitle
      }, "\xA0"), /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.description_1
      }, "\xA0"), /*#__PURE__*/_react.default.createElement("div", {
        className: _cardStyle.default.description_2
      }, "\xA0"))));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.inner
    }, media && /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.media
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.mediaPadding,
      style: {
        paddingTop: "".concat(100 / aspect, "%")
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: aspect ? _cardStyle.default.mediaContent : _cardStyle.default.mediaContentRelative
    }, typeof media === 'function' && media({
      dimensions: mediaDimensions,
      layout: 'default'
    }), typeof media === 'string' && /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.mediaString
    }, media), /*#__PURE__*/_react.default.isValidElement(media) && media)), /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.meta
    }, date && /*#__PURE__*/_react.default.createElement("div", {
      ref: this.setDateElement,
      className: _cardStyle.default.date,
      title: (0, _format.default)(date, 'ddd, MMM do, yyyy hh:mm a')
    }, emWidth <= 10 && (0, _format.default)(date, 'DD.MM.YY'), emWidth > 10 && emWidth <= 15 && (0, _format.default)(date, 'dd.MM.yy hh:mm a'), emWidth > 15 && (0, _format.default)(date, 'ddd, MMM do, yyyy hh:mm a')), /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.heading
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: _cardStyle.default.title
    }, title), status && /*#__PURE__*/_react.default.createElement("div", {
      className: _cardStyle.default.status
    }, typeof status === 'function' && status({
      layout: 'default'
    }) || status)), subtitle && /*#__PURE__*/_react.default.createElement("h3", {
      className: _cardStyle.default.subtitle
    }, typeof subtitle === 'function' && subtitle({
      layout: 'card'
    }), typeof subtitle === 'object' && subtitle, typeof subtitle === 'string' && (0, _truncate2.default)(subtitle, {
      length: 30,
      separator: /,? +/
    })), description && /*#__PURE__*/_react.default.createElement("p", {
      className: _cardStyle.default.description
    }, typeof description === 'function' && description({
      layout: 'card'
    }), typeof description === 'object' && description, typeof description === 'string' && (0, _truncate2.default)(description, {
      length: 100,
      separator: /,? +/
    })), children)));
  }

}

exports.default = CardPreview;

_defineProperty(CardPreview, "defaultProps", {
  title: 'Untitled',
  subtitle: undefined,
  description: undefined,
  date: undefined,
  status: undefined,
  media: undefined,
  isPlaceholder: false,
  children: undefined
});