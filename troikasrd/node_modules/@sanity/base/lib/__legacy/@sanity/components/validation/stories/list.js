"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListStory = ListStory;

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _chance = _interopRequireDefault(require("chance"));

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

var _actions = require("part:@sanity/storybook/addons/actions");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _components = require("part:@sanity/storybook/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
var chance = new _chance.default();

var mockMarkers = function mockMarkers() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
  return (0, _range2.default)(length).map((marker, i) => ({
    type: 'validation',
    level: 'error',
    path: ["test_".concat(i)],
    item: {
      paths: [],
      path: ['title'],
      message: chance.sentence(),
      name: 'ValidationError',

      cloneWithMessage() {
        throw new Error('nope');
      }

    }
  }));
};

function ListStory() {
  var markers = mockMarkers();
  var kind = (0, _knobs.select)('Kind', {
    '': '(none)',
    simple: 'Simple'
  }, '', 'Props') || undefined;
  var truncate = (0, _knobs.boolean)('Truncate', false, 'Props');
  return /*#__PURE__*/_react.default.createElement(_components.CenteredContainer, {
    background: false
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/validation/status",
    propTables: [_status.default]
  }, /*#__PURE__*/_react.default.createElement(_list.default, {
    kind: kind,
    markers: markers,
    onFocus: (0, _actions.action)('onFocus'),
    onClose: (0, _actions.action)('onClose'),
    truncate: truncate
  })));
}