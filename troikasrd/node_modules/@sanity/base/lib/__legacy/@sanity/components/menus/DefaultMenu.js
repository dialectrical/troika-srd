"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _react = _interopRequireDefault(require("react"));

var _router = require("part:@sanity/base/router");

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/menus/default-style"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DefaultMenuItem = _interopRequireDefault(require("./DefaultMenuItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ungrouped = Symbol('__ungrouped__');

class DefaultMenu extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      items: []
    });

    _defineProperty(this, "handleKeyDown", event => {
      var router = this.props.router;
      var focusedItem = this.state.focusedItem;
      var items = this.state.items ? this.state.items.filter(item => !item.isDisabled) : [];
      var currentIndex = focusedItem ? items.indexOf(focusedItem) || 0 : 0;

      if (event.key === 'Escape') {
        this.setState({
          focusedItem: undefined
        });
        if (this.props.onClose) this.props.onClose(event);
      }

      if (event.key === 'ArrowDown') {
        this.setState({
          focusedItem: items[currentIndex < items.length - 1 ? currentIndex + 1 : 0]
        });
      }

      if (event.key === 'ArrowUp') {
        this.setState({
          focusedItem: items[currentIndex > 0 ? currentIndex - 1 : items.length - 1]
        });
      }

      if (event.key === 'Enter' && focusedItem) {
        if (focusedItem.intent) {
          if (router) {
            // @todo: typings
            router.navigateIntent(focusedItem.intent.type, focusedItem.intent.params);
          }
        } else {
          this.props.onAction(focusedItem);
        }
      }
    });

    _defineProperty(this, "handleAction", (event, item) => {
      event.stopPropagation();

      if (item.intent) {
        if (this.props.onClose) this.props.onClose();
      } else {
        this.props.onAction(item);
      }
    });

    _defineProperty(this, "handleFocus", (_, item) => {
      this.setState({
        focusedItem: item
      });
    });
  }

  static getDerivedStateFromProps(props) {
    var groups = props.items.reduce((acc, item) => {
      if (!item.group) {
        return acc;
      }

      return acc.includes(item.group) ? acc : acc.concat(item.group);
    }, (props.groups || []).map(group => group.id));
    var byGroup = (0, _groupBy2.default)(props.items, item => item.group || ungrouped); // @todo: symbol cannot be used as index type

    var hasUngrouped = typeof byGroup[ungrouped] !== 'undefined';
    var targets = [];

    if (hasUngrouped) {
      targets.push(ungrouped, ...groups);
    } else {
      targets = groups;
    } // @todo: symbol cannot be used as index type


    var items = (0, _flatten2.default)(targets.map(group => byGroup[group] || []));
    return {
      items
    };
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown, false);
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown, false);
  } // eslint-disable-next-line complexity


  renderGroupedItems() {
    var _this$state = this.state,
        focusedItem = _this$state.focusedItem,
        items = _this$state.items;
    return items.map((item, index) => {
      var prev = items[index - 1];
      return /*#__PURE__*/_react.default.createElement(_DefaultMenuItem.default, {
        key: String(index),
        item: item,
        danger: item.danger,
        isDisabled: item.isDisabled,
        isFocused: item === focusedItem,
        onFocus: this.handleFocus,
        onAction: this.handleAction,
        className: prev && prev.group !== item.group ? _defaultStyle.default.divider : ''
      });
    });
  }

  render() {
    var className = this.props.className;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(_defaultStyle.default.root, className)
    }, /*#__PURE__*/_react.default.createElement("ul", {
      className: _defaultStyle.default.list
    }, this.renderGroupedItems()));
  }

}

var _default = (0, _router.withRouterHOC)((0, _reactClickOutside.default)(DefaultMenu));

exports.default = _default;