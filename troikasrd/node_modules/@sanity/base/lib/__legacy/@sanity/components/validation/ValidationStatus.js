"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _types = require("@sanity/types");

var _errorOutlineIcon = _interopRequireDefault(require("part:@sanity/base/error-outline-icon"));

var _warningOutlineIcon = _interopRequireDefault(require("part:@sanity/base/warning-outline-icon"));

var _tooltip = require("part:@sanity/components/tooltip");

var _ValidationList = _interopRequireDefault(require("./ValidationList"));

var _ValidationStatus = _interopRequireDefault(require("./ValidationStatus.css"));

var _excluded = ["className", "markers", "placement", "showSummary", "hideTooltip"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ValidationStatus(props) {
  var className = props.className,
      _props$markers = props.markers,
      markers = _props$markers === void 0 ? [] : _props$markers,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'auto' : _props$placement,
      _props$showSummary = props.showSummary,
      showSummary = _props$showSummary === void 0 ? false : _props$showSummary,
      _props$hideTooltip = props.hideTooltip,
      hideTooltip = _props$hideTooltip === void 0 ? false : _props$hideTooltip,
      restProps = _objectWithoutProperties(props, _excluded);

  var validationMarkers = markers.filter(_types.isValidationMarker);

  if (validationMarkers.length === 0) {
    return null;
  }

  var errorMarkers = validationMarkers.filter(_types.isValidationErrorMarker);
  var warningMarkers = validationMarkers.filter(_types.isValidationWarningMarker);
  var errorsStr = "error".concat(errorMarkers.length === 1 ? '' : 's');
  var warningsStr = "warning".concat(warningMarkers.length === 1 ? '' : 's');
  var errorText = errorMarkers.length > 0 ? "".concat(errorMarkers.length, " validation ").concat(errorsStr) : '';
  var warningText = warningMarkers.length > 0 ? "".concat(warningMarkers.length, " ").concat(warningsStr) : '';
  var hasErrors = errorMarkers.length > 0;
  var hasWarnings = warningMarkers.length > 0;
  var hasBoth = hasErrors && hasWarnings;

  var children = /*#__PURE__*/_react.default.createElement("div", _extends({}, restProps, {
    className: (0, _classnames.default)(_ValidationStatus.default.root, className, hasErrors && _ValidationStatus.default.error, !hasErrors && hasWarnings && _ValidationStatus.default.warning),
    tabIndex: 0
  }), hasErrors && /*#__PURE__*/_react.default.createElement(_errorOutlineIcon.default, null), !hasErrors && hasWarnings && /*#__PURE__*/_react.default.createElement(_warningOutlineIcon.default, null));

  if (hideTooltip) {
    return children;
  }

  var tooltipText = "".concat(errorText, " ").concat(warningText === '' ? '' : "".concat(hasBoth ? 'and ' : '').concat(warningText));

  var tooltipContent = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showSummary && /*#__PURE__*/_react.default.createElement(ValidationSummaryTooltipContent, {
    hasErrors: hasErrors,
    hasWarnings: hasWarnings,
    text: tooltipText
  }), !showSummary && /*#__PURE__*/_react.default.createElement(_ValidationList.default, {
    markers: validationMarkers,
    kind: "simple"
  }));

  return /*#__PURE__*/_react.default.createElement(_tooltip.Tooltip, {
    content: tooltipContent,
    placement: placement,
    portal: true
  }, children);
}

var _default = ValidationStatus;
exports.default = _default;

function ValidationSummaryTooltipContent(_ref) {
  var hasErrors = _ref.hasErrors,
      hasWarnings = _ref.hasWarnings,
      text = _ref.text;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _ValidationStatus.default.tooltip
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: !hasErrors && hasWarnings ? _ValidationStatus.default.tooltipWarningIcon : _ValidationStatus.default.tooltipErrorIcon
  }, hasErrors && /*#__PURE__*/_react.default.createElement(_errorOutlineIcon.default, null), !hasErrors && hasWarnings && /*#__PURE__*/_react.default.createElement(_warningOutlineIcon.default, null)), /*#__PURE__*/_react.default.createElement("div", {
    className: _ValidationStatus.default.tooltipText
  }, text));
}