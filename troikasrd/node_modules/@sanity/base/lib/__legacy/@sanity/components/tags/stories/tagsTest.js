"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagsTestStory = TagsTestStory;

var _textfield = _interopRequireDefault(require("part:@sanity/components/tags/textfield"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var centerStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100%',
  width: '100%',
  position: 'absolute',
  top: 0,
  left: 0
};

function TagsTestStory() {
  var tags = ['Test', 'Sanity', 'React', 'Computer', 'Macbook', 'Awesome', 'Windows', 'CPU', 'Moore', 'Intel', 'Ada', 'Enigma'];
  return /*#__PURE__*/_react.default.createElement("div", {
    style: centerStyle
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/tags/textfield",
    propTables: [_textfield.default]
  }, /*#__PURE__*/_react.default.createElement(DefaultTextFieldTagsImplementation, {
    tags: (0, _knobs.array)('tags', tags, 'props')
  })));
}

// @todo: refactor to functional component
class DefaultTextFieldTagsImplementation extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {
      tags: []
    });

    _defineProperty(this, "handleChange", tags => {
      this.setState({
        tags: tags
      });
    });

    this.state = {
      tags: props.tags || []
    };
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_textfield.default, {
      label: "Tags",
      placeholder: "This is the placeholder",
      value: this.state.tags,
      onChange: this.handleChange
    });
  }

}