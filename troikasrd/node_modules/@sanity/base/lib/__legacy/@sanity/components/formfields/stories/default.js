"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultFormFieldStory = DefaultFormFieldStory;

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _chance = _interopRequireDefault(require("chance"));

var _default = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _components = require("part:@sanity/storybook/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
var chance = new _chance.default();

var mockValidationMarkers = function mockValidationMarkers() {
  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'error';
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  return (0, _range2.default)(length).map((_, markerIndex) => ({
    type: 'validation',
    level,
    path: ["field_".concat(markerIndex)],
    item: {
      paths: [],
      path: ['title'],
      message: chance.sentence(),
      name: 'ValidationError',

      cloneWithMessage() {
        throw new Error('nope');
      }

    }
  }));
};

function DefaultFormFieldStory() {
  var description = (0, _knobs.text)('Description', 'Description', 'props');
  var id = 'storyFormField_Default1';
  var inline = (0, _knobs.boolean)('Inline', false, 'props');
  var label = (0, _knobs.text)('Label', 'Label', 'props');
  var level = (0, _knobs.number)('Level', 1, {
    range: true,
    min: 1,
    max: 4,
    step: 1
  }, 'props');
  var value = (0, _knobs.text)('Input value', 'foo', 'props');
  var wrapped = (0, _knobs.boolean)('Wrapped', false, 'props');
  var errors = (0, _knobs.boolean)('Errors', false, 'props');
  var warnings = (0, _knobs.boolean)('Warnings', false, 'props');
  var markers = (errors ? mockValidationMarkers('error', 5) : []).concat(warnings ? mockValidationMarkers('warning', 5) : []);
  return /*#__PURE__*/_react.default.createElement(_components.CenteredContainer, null, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/formfields/default",
    propTables: [_default.default]
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: '100%',
      maxWidth: 640
    }
  }, /*#__PURE__*/_react.default.createElement(_default.default, {
    description: description,
    inline: inline,
    label: label,
    labelFor: id,
    level: level,
    markers: markers,
    wrapped: wrapped
  }, /*#__PURE__*/_react.default.createElement(_default2.default, {
    id: id,
    value: value
  })))));
}