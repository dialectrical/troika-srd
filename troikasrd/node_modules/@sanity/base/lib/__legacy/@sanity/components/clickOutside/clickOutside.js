"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClickOutside = ClickOutside;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ClickOutside(_ref) {
  var children = _ref.children,
      onClickOutside = _ref.onClickOutside;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      referenceElement = _useState2[0],
      setReferenceElement = _useState2[1];

  var hadMouseDownRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(() => {
    if (!referenceElement || !onClickOutside) return undefined;

    var handleWindowMouseUp = evt => {
      var target = evt.target;

      if (!referenceElement.contains(target) && !hadMouseDownRef.current) {
        onClickOutside();
      }

      hadMouseDownRef.current = false;
    };

    var handleRefMouseDown = () => {
      hadMouseDownRef.current = true;
    };

    window.addEventListener('mouseup', handleWindowMouseUp);
    referenceElement.addEventListener('mousedown', handleRefMouseDown);
    return () => {
      window.removeEventListener('mouseup', handleWindowMouseUp);
      referenceElement.removeEventListener('mousedown', handleRefMouseDown);
    };
  }, [onClickOutside, referenceElement]);
  return children(setReferenceElement);
}