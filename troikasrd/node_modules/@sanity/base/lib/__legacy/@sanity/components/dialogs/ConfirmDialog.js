"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _ConfirmDialog = _interopRequireDefault(require("./ConfirmDialog.css"));

var _excluded = ["cancelButtonText", "cancelColor", "confirmColor", "confirmButtonText", "onCancel", "onConfirm"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @todo: refactor to functional component
class ConfirmDialog extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleAction", action => {
      if (action.key === 'confirm') {
        this.props.onConfirm();
      } else if (this.props.onCancel) {
        this.props.onCancel();
      }
    });
  }

  render() {
    var _this$props = this.props,
        _this$props$cancelBut = _this$props.cancelButtonText,
        cancelButtonText = _this$props$cancelBut === void 0 ? 'Cancel' : _this$props$cancelBut,
        cancelColor = _this$props.cancelColor,
        confirmColor = _this$props.confirmColor,
        _this$props$confirmBu = _this$props.confirmButtonText,
        confirmButtonText = _this$props$confirmBu === void 0 ? 'OK' : _this$props$confirmBu,
        onCancel = _this$props.onCancel,
        onConfirm = _this$props.onConfirm,
        restProps = _objectWithoutProperties(_this$props, _excluded);

    var cancelAction = cancelButtonText ? {
      key: 'cancel',
      index: 2,
      title: cancelButtonText,
      color: cancelColor,
      action: onCancel,
      kind: 'simple',
      secondary: true
    } : null;
    var confirmAction = confirmButtonText ? {
      key: 'confirm',
      index: 1,
      title: confirmButtonText,
      color: confirmColor,
      action: onConfirm
    } : null;
    var actions = [confirmAction, cancelAction].filter(Boolean);
    return /*#__PURE__*/_react.default.createElement(_default.default, _extends({}, restProps, {
      actions: actions,
      showCloseButton: false,
      onEscape: this.props.onCancel,
      onAction: this.handleAction
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _ConfirmDialog.default.content
    }, this.props.children));
  }

}

exports.default = ConfirmDialog;