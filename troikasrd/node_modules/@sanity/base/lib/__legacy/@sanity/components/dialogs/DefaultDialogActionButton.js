"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultDialogActionButton = DefaultDialogActionButton;

var _react = _interopRequireWildcard(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
function DefaultDialogActionButton(props) {
  var action = props.action,
      index = props.index,
      onAction = props.onAction;
  var handleAction = (0, _react.useCallback)(() => {
    if (onAction) onAction(action);
  }, [action, onAction]);
  return /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: handleAction,
    "data-action-index": index,
    color: action.color,
    disabled: action.disabled,
    kind: action.kind,
    inverted: action.inverted,
    autoFocus: action.autoFocus,
    icon: action.icon
  }, action.title);
}