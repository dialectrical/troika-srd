"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _buttonGridStyle = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid-style"));

var _react = _interopRequireDefault(require("react"));

var _helpers = require("../helpers");

var _excluded = ["align", "children", "className", "secondary"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// @todo: refactor to functional component
class ButtonGrid extends _react.default.PureComponent {
  render() {
    var _this$props = this.props,
        _this$props$align = _this$props.align,
        align = _this$props$align === void 0 ? 'start' : _this$props$align,
        childrenProp = _this$props.children,
        classNameProp = _this$props.className,
        secondary = _this$props.secondary,
        restProps = _objectWithoutProperties(_this$props, _excluded);

    var children = (0, _helpers.childrenToElementArray)(childrenProp);
    var secondaryChildren = (0, _helpers.childrenToElementArray)(secondary);
    var len = children.length + secondaryChildren.length;
    if (len === 0) return null;
    var className = (0, _classnames.default)(classNameProp, align === 'start' ? _buttonGridStyle.default.alignStart : _buttonGridStyle.default.alignEnd);
    return /*#__PURE__*/_react.default.createElement("div", _extends({}, restProps, {
      className: className,
      "data-buttons": len
    }), children, secondaryChildren.map((child, childIndex) => /*#__PURE__*/_react.default.createElement("div", {
      className: _buttonGridStyle.default.secondary,
      key: String(childIndex)
    }, child)));
  }

}

exports.default = ButtonGrid;