"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _errorOutlineIcon = _interopRequireDefault(require("part:@sanity/base/error-outline-icon"));

var _warningOutlineIcon = _interopRequireDefault(require("part:@sanity/base/warning-outline-icon"));

var _ValidationListItem = _interopRequireDefault(require("./ValidationListItem.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
function ValidationListItem(props) {
  var hasFocus = props.hasFocus,
      kind = props.kind,
      marker = props.marker,
      onClick = props.onClick,
      path = props.path,
      truncate = props.truncate;
  var hasOnClick = Boolean(props.onClick);
  var rootRef = (0, _react.useRef)(null);
  var hasFocusRef = (0, _react.useRef)(hasFocus || false);
  var handleKeyPress = (0, _react.useCallback)(event => {
    if (event.key === 'Enter' && onClick) {
      onClick(marker.path);
    }
  }, [marker.path, onClick]);
  var handleClick = (0, _react.useCallback)(() => {
    if (onClick) {
      onClick(marker.path);
    }
  }, [marker.path, onClick]);
  (0, _react.useEffect)(() => {
    if (hasFocusRef.current !== hasFocus) {
      if (hasFocus && rootRef.current) rootRef.current.focus();
      hasFocusRef.current = hasFocus || false;
    }
  }, [hasFocus]);

  var children = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
    className: _ValidationListItem.default.icon
  }, marker.level === 'error' && /*#__PURE__*/_react.default.createElement(_errorOutlineIcon.default, null), marker.level === 'warning' && /*#__PURE__*/_react.default.createElement(_warningOutlineIcon.default, null)), /*#__PURE__*/_react.default.createElement("div", {
    className: _ValidationListItem.default.content
  }, path && /*#__PURE__*/_react.default.createElement("div", {
    className: _ValidationListItem.default.path
  }, path), marker.item.message && /*#__PURE__*/_react.default.createElement("div", {
    className: _ValidationListItem.default.message
  }, marker.item.message)));

  var className = (0, _classnames.default)(hasOnClick ? _ValidationListItem.default.interactive : _ValidationListItem.default.root, marker.level && _ValidationListItem.default[marker.level], truncate && _ValidationListItem.default.truncate, _ValidationListItem.default["kind_".concat(kind)]);

  if (!hasOnClick) {
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-item-type": kind,
      ref: rootRef,
      className: className
    }, children);
  }

  return (
    /*#__PURE__*/
    // @todo: use a <button> element
    _react.default.createElement("div", {
      // data-item-type={kind}
      ref: rootRef,
      tabIndex: 0,
      onClick: handleClick,
      onKeyPress: handleKeyPress,
      className: className
    }, children)
  );
}

var _default = ValidationListItem;
exports.default = _default;