"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HookStateContainer = void 0;

var _react = _interopRequireDefault(require("react"));

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useShallowCompareMemoize(value) {
  var ref = _react.default.useRef();

  if (!(0, _shallowEquals.default)(value, ref.current)) {
    ref.current = value;
  }

  return [ref.current];
}

function useShallowCompareEffect(callback, dependencies) {
  _react.default.useEffect(callback, useShallowCompareMemoize(dependencies));
}

var HookStateContainer = /*#__PURE__*/_react.default.memo(function HookStateContainer(props) {
  var hook = props.hook,
      args = props.args,
      id = props.id,
      onNext = props.onNext,
      onReset = props.onReset,
      onRequestUpdate = props.onRequestUpdate;
  var hookState = hook(_objectSpread(_objectSpread({}, args), {}, {
    onComplete: () => {
      onReset(id);
    }
  }));
  useShallowCompareEffect(() => {
    onNext(id, hookState);
    onRequestUpdate();
    return () => {
      onNext(id, null);
      onRequestUpdate();
    };
  }, hookState);
  return null;
}, (prev, next) => prev.args === next.args);

exports.HookStateContainer = HookStateContainer;