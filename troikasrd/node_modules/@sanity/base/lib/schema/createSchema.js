"use strict";

var _schema = _interopRequireDefault(require("@sanity/schema"));

var _schema2 = _interopRequireDefault(require("part:@sanity/form-builder/input/legacy-date/schema?"));

var _internal = require("@sanity/schema/_internal");

var _validation = require("@sanity/validation");

var _slug = _interopRequireDefault(require("./types/slug"));

var _geopoint = _interopRequireDefault(require("./types/geopoint"));

var _imageCrop = _interopRequireDefault(require("./types/imageCrop"));

var _imageHotspot = _interopRequireDefault(require("./types/imageHotspot"));

var _assetSourceData = _interopRequireDefault(require("./types/assetSourceData"));

var _imageAsset = _interopRequireDefault(require("./types/imageAsset"));

var _imagePalette = _interopRequireDefault(require("./types/imagePalette"));

var _imagePaletteSwatch = _interopRequireDefault(require("./types/imagePaletteSwatch"));

var _imageDimensions = _interopRequireDefault(require("./types/imageDimensions"));

var _imageMetadata = _interopRequireDefault(require("./types/imageMetadata"));

var _fileAsset = _interopRequireDefault(require("./types/fileAsset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
// eslint-disable-next-line import/no-unresolved
var isError = problem => problem.severity === 'error';

module.exports = schemaDef => {
  var validated = (0, _internal.validateSchema)(schemaDef.types).getTypes();
  var validation = (0, _internal.groupProblems)(validated);
  var hasErrors = validation.some(group => group.problems.some(isError));
  var types = [];

  if (!hasErrors) {
    types = [...schemaDef.types, _assetSourceData.default, _slug.default, _geopoint.default, _schema2.default, _imageAsset.default, _fileAsset.default, _imageCrop.default, _imageHotspot.default, _imageMetadata.default, _imageDimensions.default, _imagePalette.default, _imagePaletteSwatch.default].filter(Boolean);
  }

  var compiled = _schema.default.compile({
    name: schemaDef.name,
    types
  });

  compiled._source = schemaDef;
  compiled._validation = validation;
  return (0, _validation.inferFromSchema)(compiled);
};