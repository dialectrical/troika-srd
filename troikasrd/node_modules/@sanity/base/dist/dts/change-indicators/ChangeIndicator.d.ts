import React, { ReactNode } from 'react';
import { Path } from '@sanity/types';
export declare function ChangeIndicatorScope(props: {
    path: Path;
    children?: React.ReactNode;
}): JSX.Element;
export declare function ChangeIndicatorProvider(props: {
    path: Path;
    focusPath: Path;
    value: any;
    compareValue: any;
    children: React.ReactNode;
}): JSX.Element;
interface CoreProps {
    className?: string;
    disabled?: boolean;
    fullPath: Path;
    compareDeep: boolean;
    value: unknown;
    hasFocus: boolean;
    compareValue: unknown;
    children?: React.ReactNode;
}
export declare const CoreChangeIndicator: ({ className, disabled, fullPath, value, compareValue, hasFocus, compareDeep, children, }: CoreProps) => JSX.Element;
export declare const ChangeIndicatorForFieldPath: ({ className, disabled, path, hasFocus, isChanged, children, }: {
    path: Path;
    isChanged: boolean;
    children: ReactNode;
    className?: string;
    disabled?: boolean;
    hasFocus?: boolean;
}) => JSX.Element;
export declare const ChangeIndicatorWithProvidedFullPath: ({ className, disabled, path, value, hasFocus, compareDeep, children, }: any) => JSX.Element;
export interface ChangeIndicatorContextProvidedProps {
    className?: string;
    compareDeep?: boolean;
    children?: React.ReactNode;
    disabled?: boolean;
}
export declare const ChangeIndicatorCompareValueProvider: (props: {
    value: any;
    compareValue: any;
    children: React.ReactNode;
}) => JSX.Element;
export declare const ContextProvidedChangeIndicator: (props: ChangeIndicatorContextProvidedProps) => React.ReactElement;
export declare const ChangeIndicator: (props: ChangeIndicatorContextProvidedProps) => React.ReactElement;
export {};
//# sourceMappingURL=ChangeIndicator.d.ts.map