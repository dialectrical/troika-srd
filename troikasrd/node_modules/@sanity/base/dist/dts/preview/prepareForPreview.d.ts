/// <reference types="react" />
import { SchemaType } from '@sanity/types';
import { PrepareViewOptions, Type } from './types';
declare type SelectedValue = Record<string, unknown>;
export declare type PreparedValue = {
    title?: React.ReactNode;
    subtitle?: React.ReactNode;
    description?: React.ReactNode;
    media?: React.ReactNode;
    /**
     * optional object used to attach meta data to the prepared result.
     * currently used to add a flag for the invalid preview error fallback and
     * insufficient permissions fallback
     */
    _internalMeta?: {
        type?: string;
    };
};
export declare type PrepareInvocationResult = {
    selectedValue?: SelectedValue;
    returnValue: null | PreparedValue | SelectedValue;
    errors: Error[];
};
export declare function invokePrepare(type: Type, value: SelectedValue, viewOptions?: PrepareViewOptions): PrepareInvocationResult;
export default function prepareForPreview(rawValue: unknown, type: SchemaType, viewOptions?: PrepareViewOptions): PreparedValue;
export {};
//# sourceMappingURL=prepareForPreview.d.ts.map