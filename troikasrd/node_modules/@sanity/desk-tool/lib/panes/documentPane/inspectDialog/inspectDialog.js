"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InspectDialog = void 0;

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _tab = _interopRequireDefault(require("part:@sanity/components/tabs/tab"));

var _tabList = _interopRequireDefault(require("part:@sanity/components/tabs/tab-list"));

var _tabPanel = _interopRequireDefault(require("part:@sanity/components/tabs/tab-panel"));

var _react = _interopRequireWildcard(require("react"));

var _reactJsonInspector = _interopRequireDefault(require("react-json-inspector"));

var _reactPropsStream = require("react-props-stream");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _DocTitle = require("../../../components/DocTitle");

var _settings = _interopRequireDefault(require("../../../settings"));

var _constants = require("./constants");

var _helpers = require("./helpers");

var _inspectDialog = _interopRequireDefault(require("./inspectDialog.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var viewModeSettings = _settings.default.forKey('inspect-view-preferred-view-mode');

function mapReceivedPropsToChildProps(props$) {
  var onViewModeChange = nextViewMode => viewModeSettings.set(nextViewMode.id);

  var viewModeSetting$ = viewModeSettings.listen('parsed').pipe((0, _operators.map)(id => _constants.VIEW_MODES.find(mode => mode.id === id)));
  return (0, _rxjs.combineLatest)(props$, viewModeSetting$).pipe((0, _operators.map)(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        props = _ref2[0],
        viewMode = _ref2[1];

    return _objectSpread(_objectSpread({}, props), {}, {
      viewMode,
      onViewModeChange
    });
  }));
}

function InspectDialogComponent(props) {
  var idPrefix = props.idPrefix,
      onClose = props.onClose,
      onViewModeChange = props.onViewModeChange,
      value = props.value,
      viewMode = props.viewMode;
  var tabIdPrefix = "".concat(idPrefix, "_inspect_");
  var setParsedViewMode = (0, _react.useCallback)(() => {
    onViewModeChange(_constants.VIEW_MODE_PARSED);
  }, [onViewModeChange]);
  var setRawViewMode = (0, _react.useCallback)(() => {
    onViewModeChange(_constants.VIEW_MODE_RAW);
  }, [onViewModeChange]);
  return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
    title: value ? /*#__PURE__*/_react.default.createElement("span", null, "Inspecting", ' ', /*#__PURE__*/_react.default.createElement("em", null, /*#__PURE__*/_react.default.createElement(_DocTitle.DocTitle, {
      document: value
    }))) : /*#__PURE__*/_react.default.createElement("em", null, "No value"),
    onClose: onClose
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
    className: _inspectDialog.default.toolbar
  }, /*#__PURE__*/_react.default.createElement(_tabList.default, null, /*#__PURE__*/_react.default.createElement(_tab.default, {
    "aria-controls": "".concat(tabIdPrefix, "tabpanel"),
    id: "".concat(tabIdPrefix, "tab-").concat(_constants.VIEW_MODE_PARSED.id),
    isActive: viewMode === _constants.VIEW_MODE_PARSED,
    label: _constants.VIEW_MODE_PARSED.title,
    onClick: setParsedViewMode
  }), /*#__PURE__*/_react.default.createElement(_tab.default, {
    "aria-controls": "".concat(tabIdPrefix, "tabpanel"),
    id: "".concat(tabIdPrefix, "tab-").concat(_constants.VIEW_MODE_RAW.id),
    isActive: viewMode === _constants.VIEW_MODE_RAW,
    label: _constants.VIEW_MODE_RAW.title,
    onClick: setRawViewMode
  }))), /*#__PURE__*/_react.default.createElement(_tabPanel.default, {
    "aria-labelledby": "".concat(tabIdPrefix, "tab-").concat(viewMode.id),
    className: _inspectDialog.default.content,
    id: "".concat(tabIdPrefix, "tabpanel")
  }, viewMode === _constants.VIEW_MODE_PARSED && /*#__PURE__*/_react.default.createElement("div", {
    className: _inspectDialog.default.jsonInspectorContainer
  }, /*#__PURE__*/_react.default.createElement(_reactJsonInspector.default, {
    isExpanded: _helpers.isExpanded,
    onClick: _helpers.toggleExpanded,
    data: value
  })), viewMode === _constants.VIEW_MODE_RAW && /*#__PURE__*/_react.default.createElement("pre", {
    className: _inspectDialog.default.raw,
    tabIndex: 0,
    onKeyDown: _helpers.maybeSelectAll,
    onDoubleClick: _helpers.select,
    onFocus: _helpers.select
  }, JSON.stringify(value, null, 2)))));
}

var InspectDialog = (0, _reactPropsStream.withPropsStream)(mapReceivedPropsToChildProps, InspectDialogComponent);
exports.InspectDialog = InspectDialog;