"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPaneProvider = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactHooks = require("@sanity/react-hooks");

var _ui = require("@sanity/ui");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _withInitialValue = _interopRequireDefault(require("../../utils/withInitialValue"));

var _ErrorPane = _interopRequireDefault(require("../errorPane/ErrorPane"));

var _loadingPane = require("../loadingPane");

var _documentHistory = require("./documentHistory");

var _documentPane = require("./documentPane");

var _value2 = require("./utils/value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// eslint-disable-next-line complexity
var DocumentPaneProvider = (0, _withInitialValue.default)(function DocumentPaneProvider(props) {
  var documentIdRaw = props.options.id;
  var documentId = (0, _draftUtils.getPublishedId)(documentIdRaw);
  var documentTypeName = props.options.type;

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(documentId, documentTypeName),
      patch = _useDocumentOperation.patch;

  var editState = (0, _reactHooks.useEditState)(documentId, documentTypeName);

  var _useValidationStatus = (0, _reactHooks.useValidationStatus)(documentId, documentTypeName),
      markers = _useValidationStatus.markers;

  var connectionState = (0, _reactHooks.useConnectionState)(documentId, documentTypeName);

  var schemaType = _schema.default.get(documentTypeName);

  var onChange = _react.default.useCallback(patches => {
    patch.execute(patches, props.initialValue);
  }, [patch, props.initialValue]);

  if (!schemaType) {
    var _value = editState && (editState.draft || editState.published);

    return /*#__PURE__*/_react.default.createElement(_ErrorPane.default, _extends({}, props, {
      color: "warning",
      title: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Unknown document type: ", /*#__PURE__*/_react.default.createElement("code", null, documentTypeName))
    }), documentTypeName && /*#__PURE__*/_react.default.createElement("p", null, "This document has the schema type ", /*#__PURE__*/_react.default.createElement("code", null, documentTypeName), ", which is not defined as a type in the local content studio schema."), !documentTypeName && /*#__PURE__*/_react.default.createElement("p", null, "This document does not exist, and no schema type was specified for it."), __DEV__ && _value && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h4", null, "Here is the JSON representation of the document:"), /*#__PURE__*/_react.default.createElement(_ui.Code, {
      language: "json"
    }, JSON.stringify(_value, null, 2))));
  }

  if (connectionState === 'connecting' || !editState) {
    return /*#__PURE__*/_react.default.createElement(_loadingPane.LoadingPane, _extends({}, props, {
      delay: 600,
      title: "Loading ".concat(schemaType.title, "\u2026")
    }));
  }

  var initialValue = (0, _value2.getInitialValue)({
    initialValue: props.initialValue,
    options: props.options
  });
  var value = editState.draft || editState.published || initialValue;
  return /*#__PURE__*/_react.default.createElement(_documentHistory.DocumentHistoryProvider, {
    documentId: documentId,
    value: value
  }, /*#__PURE__*/_react.default.createElement(_documentPane.DocumentPane, {
    title: props.title,
    connectionState: connectionState,
    documentId: documentId,
    documentIdRaw: documentIdRaw,
    documentType: documentTypeName,
    draft: editState.draft,
    initialValue: initialValue,
    isClosable: props.isClosable,
    isCollapsed: props.isCollapsed,
    isSelected: props.isSelected,
    markers: markers,
    menuItemGroups: props.menuItemGroups,
    onChange: onChange,
    paneKey: props.paneKey,
    published: editState.published,
    schemaType: schemaType,
    value: value,
    compareValue: editState.published,
    views: props.views
  }));
});
exports.DocumentPaneProvider = DocumentPaneProvider;