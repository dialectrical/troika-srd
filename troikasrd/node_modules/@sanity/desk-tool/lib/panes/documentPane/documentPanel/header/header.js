"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanelHeader = DocumentPanelHeader;

var _upperFirst2 = _interopRequireDefault(require("lodash/upperFirst"));

var _negate2 = _interopRequireDefault(require("lodash/negate"));

var _hooks = require("@sanity/base/hooks");

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _classnames = _interopRequireDefault(require("classnames"));

var _languageSelectComponent = _interopRequireDefault(require("part:@sanity/desk-tool/language-select-component?"));

var _react = _interopRequireWildcard(require("react"));

var _features = require("../../../../features");

var _timeline = require("../../timeline");

var _contextMenu = require("./contextMenu");

var _tabs = require("./tabs");

var _validationMenu = require("./validationMenu");

var _header = _interopRequireDefault(require("./header.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isActionButton = item => item.showAsAction;

var isMenuButton = (0, _negate2.default)(isActionButton); // eslint-disable-next-line complexity

function DocumentPanelHeader(props) {
  var activeViewId = props.activeViewId,
      idPrefix = props.idPrefix,
      isClosable = props.isClosable,
      isCollapsed = props.isCollapsed,
      isTimelineOpen = props.isTimelineOpen,
      markers = props.markers,
      menuItems = props.menuItems,
      menuItemGroups = props.menuItemGroups,
      onCloseView = props.onCloseView,
      onContextMenuAction = props.onContextMenuAction,
      onCollapse = props.onCollapse,
      onExpand = props.onExpand,
      onSetActiveView = props.onSetActiveView,
      onSplitPane = props.onSplitPane,
      onTimelineOpen = props.onTimelineOpen,
      rev = props.rev,
      rootElement = props.rootElement,
      schemaType = props.schemaType,
      onSetFormInputFocus = props.onSetFormInputFocus,
      timelineMode = props.timelineMode,
      title = props.title,
      versionSelectRef = props.versionSelectRef,
      views = props.views;
  var features = (0, _features.useDeskToolFeatures)();
  var contextMenuItems = (0, _react.useMemo)(() => menuItems.filter(isMenuButton), [menuItems]);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isContextMenuOpen = _useState2[0],
      setContextMenuOpen = _useState2[1];

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isValidationOpen = _React$useState2[0],
      setValidationOpen = _React$useState2[1];

  var handleTitleClick = (0, _react.useCallback)(() => {
    if (isCollapsed && onExpand) onExpand();
    if (!isCollapsed && onCollapse) onCollapse();
  }, [isCollapsed, onExpand, onCollapse]); // This is needed to stop the ClickOutside-handler (in the Popover) to treat the click
  // as an outside-click.

  var ignoreClickOutside = (0, _react.useCallback)(evt => {
    evt.stopPropagation();
  }, []);
  var showTabs = views.length > 1;
  var showVersionMenu = features.reviewChanges || views.length === 1;
  var menuOpen = isTimelineOpen && timelineMode === 'rev';
  var validationMenu = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_validationMenu.ValidationMenu, {
    boundaryElement: rootElement,
    isOpen: isValidationOpen,
    markers: markers,
    schemaType: schemaType,
    setFocusPath: onSetFormInputFocus,
    setOpen: setValidationOpen
  })), [isValidationOpen, markers, onSetFormInputFocus, rootElement, schemaType]);
  var contextMenu = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_contextMenu.DocumentPanelContextMenu, {
    boundaryElement: rootElement,
    isCollapsed: isCollapsed,
    itemGroups: menuItemGroups,
    items: contextMenuItems,
    onAction: onContextMenuAction,
    open: isContextMenuOpen,
    setOpen: setContextMenuOpen
  })), [contextMenuItems, isCollapsed, isContextMenuOpen, menuItemGroups, onContextMenuAction, rootElement]);
  var splitViewActions = (0, _react.useMemo)(() => features.splitViews && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, onSplitPane && views.length > 1 && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.SplitVerticalIcon,
    mode: "bleed",
    onClick: onSplitPane,
    padding: 2,
    title: "Split pane right"
  })), onSplitPane && isClosable && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.CloseIcon,
    mode: "bleed",
    onClick: onCloseView,
    padding: 2,
    title: "Close pane"
  }))), [features.splitViews, isClosable, onCloseView, onSplitPane, views.length]);
  var tabs = (0, _react.useMemo)(() => showTabs && /*#__PURE__*/_react.default.createElement("div", {
    className: _header.default.tabsContainer
  }, /*#__PURE__*/_react.default.createElement(_tabs.DocumentHeaderTabs, {
    activeViewId: activeViewId,
    idPrefix: idPrefix,
    onSetActiveView: onSetActiveView,
    views: views
  })), [activeViewId, idPrefix, onSetActiveView, showTabs, views]);
  var versionMenu = (0, _react.useMemo)(() => showVersionMenu && /*#__PURE__*/_react.default.createElement("div", {
    className: _header.default.versionSelectContainer,
    ref: versionSelectRef
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    fontSize: 1,
    iconRight: _icons.SelectIcon,
    mode: "bleed",
    onMouseUp: ignoreClickOutside,
    onClick: onTimelineOpen,
    padding: 2,
    selected: isTimelineOpen && timelineMode === 'rev',
    text: // eslint-disable-next-line no-nested-ternary
    menuOpen ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Select version") : rev ? /*#__PURE__*/_react.default.createElement(TimelineButtonLabel, {
      rev: rev
    }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Current version")
  })), [ignoreClickOutside, isTimelineOpen, menuOpen, onTimelineOpen, rev, showVersionMenu, timelineMode, versionSelectRef]);
  return /*#__PURE__*/_react.default.createElement(_ui.Layer, {
    className: (0, _classnames.default)(_header.default.root, isCollapsed && _header.default.isCollapsed)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _header.default.mainNav
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _header.default.title,
    onClick: handleTitleClick
  }, /*#__PURE__*/_react.default.createElement("strong", null, title)), /*#__PURE__*/_react.default.createElement("div", {
    className: _header.default.paneActions
  }, _languageSelectComponent.default && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_languageSelectComponent.default, {
    schemaType: schemaType
  })), validationMenu, contextMenu, splitViewActions)), (showTabs || showVersionMenu) && /*#__PURE__*/_react.default.createElement("div", {
    className: _header.default.viewNav
  }, tabs, versionMenu));
}

function TimelineButtonLabel(_ref) {
  var rev = _ref.rev;
  var timeAgo = (0, _hooks.useTimeAgo)(rev.endTimestamp, {
    agoSuffix: true
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _upperFirst2.default)((0, _timeline.formatTimelineEventLabel)(rev.type)), " ", timeAgo);
}