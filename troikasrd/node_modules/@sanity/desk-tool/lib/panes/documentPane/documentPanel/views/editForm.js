"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditForm = void 0;

var _hooks = require("@sanity/base/hooks");

var _formBuilder = require("part:@sanity/form-builder");

var _document = _interopRequireDefault(require("part:@sanity/base/datastore/document"));

var _react = _interopRequireWildcard(require("react"));

var _operators = require("rxjs/operators");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
var preventDefault = ev => ev.preventDefault();

var EditForm = /*#__PURE__*/(0, _react.memo)(props => {
  var presence = (0, _hooks.useDocumentPresence)(props.id);
  var subscriptionRef = (0, _react.useRef)(null);
  var patchChannel = (0, _react.useMemo)(() => _formBuilder.FormBuilder.createPatchChannel(), []);
  var filterField = props.filterField,
      focusPath = props.focusPath,
      markers = props.markers,
      value = props.value,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      onChange = props.onChange,
      compareValue = props.compareValue,
      readOnly = props.readOnly,
      schema = props.schema,
      type = props.type;
  (0, _react.useEffect)(() => {
    subscriptionRef.current = _document.default.pair.documentEvents(props.id, props.type.name).pipe((0, _operators.tap)(event => {
      patchChannel.receiveEvent(event);
    })).subscribe();
    return () => {
      if (subscriptionRef.current) {
        subscriptionRef.current.unsubscribe();
        subscriptionRef.current = null;
      }
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: preventDefault
  }, /*#__PURE__*/_react.default.createElement(_formBuilder.FormBuilder, {
    schema: schema,
    patchChannel: patchChannel,
    value: value || {
      _type: type
    },
    compareValue: compareValue,
    type: type,
    presence: presence,
    filterField: filterField,
    readOnly: readOnly,
    onBlur: onBlur,
    onFocus: onFocus,
    focusPath: focusPath,
    onChange: onChange,
    markers: markers
  }));
});
exports.EditForm = EditForm;
EditForm.displayName = 'EditForm';