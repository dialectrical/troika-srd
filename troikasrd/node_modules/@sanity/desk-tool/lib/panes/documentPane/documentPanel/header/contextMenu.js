"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanelContextMenu = DocumentPanelContextMenu;

var _moreVertIcon = _interopRequireDefault(require("part:@sanity/base/more-vert-icon"));

var _menuButton = require("part:@sanity/components/menu-button");

var _default = _interopRequireDefault(require("part:@sanity/components/menus/default"));

var _react = _interopRequireWildcard(require("react"));

var _contextMenu = _interopRequireDefault(require("./contextMenu.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
function DocumentPanelContextMenu(props) {
  var boundaryElement = props.boundaryElement,
      isCollapsed = props.isCollapsed,
      open = props.open,
      items = props.items,
      itemGroups = props.itemGroups,
      onAction = props.onAction,
      setOpen = props.setOpen;
  var id = (0, _react.useMemo)(() => Math.random().toString(36).substr(2, 6), []);
  var handleAction = (0, _react.useCallback)(action => {
    onAction(action);
    setOpen(false);
  }, [onAction, setOpen]);
  var handleCloseMenu = (0, _react.useCallback)(() => {
    setOpen(false);
  }, [setOpen]);
  return /*#__PURE__*/_react.default.createElement(_menuButton.MenuButton, {
    boundaryElement: boundaryElement || undefined,
    buttonProps: {
      'aria-label': 'Menu',
      'aria-haspopup': 'menu',
      'aria-expanded': open,
      'aria-controls': id,
      className: _contextMenu.default.menuOverflowButton,
      icon: _moreVertIcon.default,
      kind: 'simple',
      padding: 'small',
      selected: open,
      title: 'Show menu'
    },
    menu: /*#__PURE__*/_react.default.createElement(_default.default, {
      id: id,
      items: items,
      groups: itemGroups,
      onAction: handleAction,
      onClose: handleCloseMenu
    }),
    open: open,
    placement: "bottom",
    portal: true,
    setOpen: setOpen
  });
}