"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeChunk = mergeChunk;
exports.chunkFromTransaction = chunkFromTransaction;
exports.isDeletePatch = isDeletePatch;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-nested-ternary */
function canMergeEdit(type) {
  return type === 'create' || type === 'editDraft';
}

var CHUNK_WINDOW = 5 * 60 * 1000; // 5 minutes

function isWithinMergeWindow(a, b) {
  return Date.parse(b) - Date.parse(a) < CHUNK_WINDOW;
}

function mergeChunk(left, right) {
  if (left.end !== right.start) throw new Error('chunks are not next to each other'); // TODO: How to detect first squash/create

  var draftState = combineState(left.draftState, right.draftState);
  var publishedState = combineState(left.publishedState, right.publishedState);

  if (left.type === 'delete' && right.type === 'editDraft') {
    return [left, _objectSpread(_objectSpread({}, right), {}, {
      type: 'create',
      draftState,
      publishedState
    })];
  } // Convert deletes into either discardDraft or unpublish depending on what's been deleted.


  if (right.type === 'delete') {
    if (draftState === 'missing' && publishedState === 'present') {
      return [left, _objectSpread(_objectSpread({}, right), {}, {
        type: 'discardDraft',
        draftState,
        publishedState
      })];
    }

    if (draftState === 'present' && publishedState === 'missing') {
      return [left, _objectSpread(_objectSpread({}, right), {}, {
        type: 'unpublish',
        draftState,
        publishedState
      })];
    }
  }

  if (canMergeEdit(left.type) && right.type === 'editDraft' && isWithinMergeWindow(left.endTimestamp, right.startTimestamp)) {
    var authors = new Set();

    var _iterator = _createForOfIteratorHelper(left.authors),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var author = _step.value;
        authors.add(author);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var _iterator2 = _createForOfIteratorHelper(right.authors),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _author = _step2.value;
        authors.add(_author);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return {
      index: 0,
      id: right.id,
      type: left.type,
      start: left.start,
      end: right.end,
      startTimestamp: left.startTimestamp,
      endTimestamp: right.endTimestamp,
      authors,
      draftState,
      publishedState
    };
  }

  return [left, _objectSpread(_objectSpread({}, right), {}, {
    draftState,
    publishedState
  })];
}

function getChunkState(effect) {
  var modified = Boolean(effect);
  var deleted = effect && isDeletePatch(effect === null || effect === void 0 ? void 0 : effect.apply);

  if (deleted) {
    return 'deleted';
  }

  if (modified) {
    return 'upsert';
  }

  return 'unedited';
}
/*
 * getChunkType tries to determine what effect the given transaction had on the document
 * More information about the logic can be found here https://github.com/sanity-io/sanity/pull/2633#issuecomment-886461812
 *
 * |                    | draft unedited | draft deleted | draft upsert |
 * |--------------------|----------------|---------------|--------------|
 * | published unedited | X              | delete        | editDraft    |
 * | published deleted  | delete         | delete        | delete       |
 * | published upsert   | liveEdit       | publish       | liveEdit     |
 */


function getChunkType(transaction) {
  var draftState = getChunkState(transaction.draftEffect);
  var publishedState = getChunkState(transaction.publishedEffect);

  if (publishedState === 'unedited') {
    if (draftState === 'deleted') {
      return 'delete';
    }

    if (draftState === 'upsert') {
      return 'editDraft';
    }
  }

  if (publishedState === 'deleted') {
    return 'delete';
  }

  if (publishedState === 'upsert') {
    if (draftState === 'unedited') {
      return 'editLive';
    }

    if (draftState === 'deleted') {
      return 'publish';
    }

    if (draftState === 'upsert') {
      return 'editLive';
    }
  }

  return 'editLive';
}

function chunkFromTransaction(transaction) {
  var modifiedDraft = Boolean(transaction.draftEffect);
  var modifiedPublished = Boolean(transaction.publishedEffect);
  var draftDeleted = transaction.draftEffect && isDeletePatch(transaction.draftEffect.apply);
  var publishedDeleted = transaction.publishedEffect && isDeletePatch(transaction.publishedEffect.apply);
  var type = getChunkType(transaction);
  return {
    index: 0,
    id: transaction.id,
    type,
    start: transaction.index,
    end: transaction.index + 1,
    startTimestamp: transaction.timestamp,
    endTimestamp: transaction.timestamp,
    authors: new Set([transaction.author]),
    draftState: modifiedDraft ? draftDeleted ? 'missing' : 'present' : 'unknown',
    publishedState: modifiedPublished ? publishedDeleted ? 'missing' : 'present' : 'unknown'
  };
}

function combineState(left, right) {
  return right === 'unknown' ? left : right;
}

function isDeletePatch(patch) {
  return patch[0] === 0 && patch[1] === null;
}