"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelinePopover = TimelinePopover;

var _clickOutside = require("part:@sanity/components/click-outside");

var _popover = require("part:@sanity/components/popover");

var _react = _interopRequireWildcard(require("react"));

var _documentHistory = require("../documentHistory");

var _helpers = require("./helpers");

var _timeline = require("./timeline");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function TimelinePopover(props) {
  var onClose = props.onClose,
      open = props.open,
      targetElement = props.targetElement; // const openRef = useRef(open)
  // const [mounted, setMounted] = useState(false)

  var _useDocumentHistory = (0, _documentHistory.useDocumentHistory)(),
      historyController = _useDocumentHistory.historyController,
      setRange = _useDocumentHistory.setRange,
      setTimelineMode = _useDocumentHistory.setTimelineMode,
      timeline = _useDocumentHistory.timeline,
      timelineMode = _useDocumentHistory.timelineMode;

  var selectRev = (0, _react.useCallback)(revChunk => {
    var _historyController$fi = historyController.findRangeForNewRev(revChunk),
        _historyController$fi2 = _slicedToArray(_historyController$fi, 2),
        sinceId = _historyController$fi2[0],
        revId = _historyController$fi2[1];

    setTimelineMode('closed');
    setRange(sinceId, revId);
  }, [historyController, setRange, setTimelineMode]);
  var selectSince = (0, _react.useCallback)(sinceChunk => {
    var _historyController$fi3 = historyController.findRangeForNewSince(sinceChunk),
        _historyController$fi4 = _slicedToArray(_historyController$fi3, 2),
        sinceId = _historyController$fi4[0],
        revId = _historyController$fi4[1];

    setTimelineMode('closed');
    setRange(sinceId, revId);
  }, [historyController, setRange, setTimelineMode]);
  var loadMoreHistory = (0, _react.useCallback)(state => {
    historyController.setLoadMore(state);
  }, [historyController]);

  var content = /*#__PURE__*/_react.default.createElement(_clickOutside.ClickOutside, {
    onClickOutside: onClose
  }, ref => timelineMode === 'rev' ? /*#__PURE__*/_react.default.createElement(_timeline.Timeline, _extends({
    ref: ref,
    timeline: timeline,
    onSelect: selectRev,
    onLoadMore: loadMoreHistory
  }, (0, _helpers.revTimelineProps)(historyController.realRevChunk))) : /*#__PURE__*/_react.default.createElement(_timeline.Timeline, _extends({
    ref: ref,
    timeline: timeline,
    onSelect: selectSince,
    onLoadMore: loadMoreHistory
  }, (0, _helpers.sinceTimelineProps)(historyController.sinceTime, historyController.realRevChunk)))); // @todo
  // // Set `transition` after visible mount
  // useEffect(() => {
  //   if (!openRef.current) {
  //     setMounted(false)
  //     requestAnimationFrame(() => {
  //       requestAnimationFrame(() => {
  //         setMounted(true)
  //       })
  //     })
  //   }
  //   openRef.current = open
  // }, [open])


  return /*#__PURE__*/_react.default.createElement(_popover.Popover // className={classNames(styles.root, mounted && styles.mounted)}
  , {
    content: content,
    open: open,
    targetElement: targetElement
  });
}