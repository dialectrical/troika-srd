"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangesPanel = ChangesPanel;

var _hooks = require("@sanity/base/hooks");

var _changeIndicators = require("@sanity/base/change-indicators");

var _diff = require("@sanity/field/diff");

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _components = require("@sanity/base/components");

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _documentHistory = require("../documentHistory");

var _timeline = require("../timeline");

var _loading = require("./content/loading");

var _helpers = require("./helpers");

var _changesPanel = _interopRequireDefault(require("./changesPanel.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
function ChangesPanel(_ref) {
  var changesSinceSelectRef = _ref.changesSinceSelectRef,
      documentId = _ref.documentId,
      isTimelineOpen = _ref.isTimelineOpen,
      loading = _ref.loading,
      onTimelineOpen = _ref.onTimelineOpen,
      since = _ref.since,
      schemaType = _ref.schemaType,
      timelineMode = _ref.timelineMode;
  var scrollRef = (0, _react.useRef)(null);

  var _useDocumentHistory = (0, _documentHistory.useDocumentHistory)(),
      closeHistory = _useDocumentHistory.close,
      historyController = _useDocumentHistory.historyController;

  var diff = historyController.currentObjectDiff();
  var isComparingCurrent = !historyController.onOlderRevision();

  var documentContext = _react.default.useMemo(() => ({
    documentId,
    schemaType,
    FieldWrapper: _changeIndicators.ChangeFieldWrapper,
    rootDiff: diff,
    isComparingCurrent
  }), [documentId, schemaType, diff, isComparingCurrent]);

  var changeAnnotations = _react.default.useMemo(() => diff ? (0, _helpers.collectLatestAuthorAnnotations)(diff) : [], [diff]); // This is needed to stop the ClickOutside-handler (in the Popover) to treat the click
  // as an outside-click.


  var ignoreClickOutside = (0, _react.useCallback)(evt => {
    evt.stopPropagation();
  }, []);
  var menuOpen = isTimelineOpen && timelineMode === 'since';
  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    className: _changesPanel.default.root
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement("header", {
    className: _changesPanel.default.header
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _changesPanel.default.mainNav
  }, /*#__PURE__*/_react.default.createElement("h2", {
    className: _changesPanel.default.title
  }, "Changes"), /*#__PURE__*/_react.default.createElement("div", {
    className: _changesPanel.default.closeButtonContainer
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _closeIcon.default,
    mode: "bleed",
    onClick: closeHistory,
    padding: 2,
    title: "Hide changes panel"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: _changesPanel.default.versionSelectContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _changesPanel.default.changesSinceSelectContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: changesSinceSelectRef
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    fontSize: 1,
    iconRight: _icons.SelectIcon,
    mode: "bleed",
    onClick: onTimelineOpen,
    onMouseUp: ignoreClickOutside,
    padding: 2,
    selected: isTimelineOpen && timelineMode === 'since',
    text: // eslint-disable-next-line no-nested-ternary
    menuOpen ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Review changes since") : since ? /*#__PURE__*/_react.default.createElement(SinceText, {
      since: since
    }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Since unknown version")
  }))), changeAnnotations.length > 0 && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    annotations: changeAnnotations,
    description: "Changes by",
    placement: "bottom-end",
    fallbackPlacements: ['top-end', 'bottom-end']
  }, /*#__PURE__*/_react.default.createElement(_ui.AvatarStack, {
    maxLength: 4
  }, changeAnnotations.map(_ref2 => {
    var author = _ref2.author;
    return /*#__PURE__*/_react.default.createElement(_components.UserAvatar, {
      key: author,
      userId: author
    });
  }))))), /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: scrollRef.current
  }, /*#__PURE__*/_react.default.createElement(_components.ScrollContainer, {
    className: _changesPanel.default.body,
    ref: scrollRef
  }, /*#__PURE__*/_react.default.createElement(Content, {
    diff: diff,
    documentContext: documentContext,
    loading: loading,
    schemaType: schemaType
  })))));
}

function Content(_ref3) {
  var diff = _ref3.diff,
      documentContext = _ref3.documentContext,
      loading = _ref3.loading,
      schemaType = _ref3.schemaType;

  if (loading) {
    return /*#__PURE__*/_react.default.createElement(_loading.LoadingContent, null);
  }

  if (!diff) {
    return /*#__PURE__*/_react.default.createElement(_diff.NoChanges, null);
  }

  return /*#__PURE__*/_react.default.createElement(_diff.DocumentChangeContext.Provider, {
    value: documentContext
  }, /*#__PURE__*/_react.default.createElement(_diff.ChangeList, {
    diff: diff,
    schemaType: schemaType
  }));
}

function SinceText(_ref4) {
  var since = _ref4.since;
  var timeAgo = (0, _hooks.useTimeAgo)(since.endTimestamp, {
    agoSuffix: true
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Since ", (0, _timeline.formatTimelineEventLabel)(since.type), " ", timeAgo);
}