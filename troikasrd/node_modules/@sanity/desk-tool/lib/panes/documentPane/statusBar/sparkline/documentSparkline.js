"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentSparkline = DocumentSparkline;

var _hooks = require("@sanity/base/hooks");

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _documentHistory = require("../../documentHistory");

var _documentBadges = require("./documentBadges");

var _useElementRect = require("./lib/useElementRect");

var _reviewChangesButton = require("./reviewChangesButton");

var _iconBadge = require("./iconBadge");

var _documentSparkline = require("./documentSparkline.styled");

var _publishStatus = require("./publishStatus");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DocumentSparkline(props) {
  var _editState$published;

  var badges = props.badges,
      lastUpdated = props.lastUpdated,
      editState = props.editState;
  var lastPublished = editState === null || editState === void 0 ? void 0 : (_editState$published = editState.published) === null || _editState$published === void 0 ? void 0 : _editState$published._updatedAt;

  var _useDocumentHistory = (0, _documentHistory.useDocumentHistory)(),
      historyController = _useDocumentHistory.historyController;

  var showingRevision = historyController.onOlderRevision();
  var liveEdit = Boolean(editState === null || editState === void 0 ? void 0 : editState.liveEdit);
  var published = Boolean(editState === null || editState === void 0 ? void 0 : editState.published);
  var changed = Boolean(editState === null || editState === void 0 ? void 0 : editState.draft);
  var loaded = published || changed;
  var lastPublishedTimeAgo = (0, _hooks.useTimeAgo)(lastPublished || '', {
    minimal: true,
    agoSuffix: true
  });
  var lastUpdatedTimeAgo = (0, _hooks.useTimeAgo)(lastUpdated || '', {
    minimal: true,
    agoSuffix: true
  }); // Keep track of the size of the review changes button

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      reviewChangesButtonElement = _useState2[0],
      setReviewChangesButtonElement = _useState2[1];

  var reviewChangesButtonElementRect = (0, _useElementRect.useElementRect)(reviewChangesButtonElement);
  var reviewChangesButtonWidth = reviewChangesButtonElementRect === null || reviewChangesButtonElementRect === void 0 ? void 0 : reviewChangesButtonElementRect.width;
  var reviewChangesButtonWidthRef = (0, _react.useRef)(reviewChangesButtonWidth || 0); // Use the size of the review changes button as a element query breakpoint

  var metadataBoxBreakpoints = (0, _react.useMemo)(() => [reviewChangesButtonWidth || reviewChangesButtonWidthRef.current, 225], [reviewChangesButtonWidth]); // Only transition between subsequent state, not the initial

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      transition = _useState4[0],
      setTransition = _useState4[1];

  (0, _react.useEffect)(() => {
    if (!transition && loaded) {
      // NOTE: the reason for double RAF here is a common "bug" in browsers.
      // See: https://stackoverflow.com/questions/44145740/how-does-double-requestanimationframe-work
      // There is no need to cancel this animation,
      // since calling it again will cause the same result (transition=true).
      requestAnimationFrame(() => requestAnimationFrame(() => setTransition(true)));
    }
  }, [loaded, transition]);
  var metadataBoxStyle = (0, _react.useMemo)(() => ({
    '--session-layout-width': reviewChangesButtonWidth ? "".concat(reviewChangesButtonWidth, "px") : undefined
  }), [reviewChangesButtonWidth]); // Maintain the last known width of the review changes button

  (0, _react.useEffect)(() => {
    if (reviewChangesButtonWidth) {
      reviewChangesButtonWidthRef.current = reviewChangesButtonWidth;
    }
  }, [reviewChangesButtonWidth]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    "data-ui": "DocumentSparkline"
  }, (liveEdit || published) && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_publishStatus.PublishStatus, {
    disabled: showingRevision,
    lastPublishedTimeAgo: lastPublishedTimeAgo,
    lastUpdated: lastUpdated,
    lastUpdatedTimeAgo: lastUpdatedTimeAgo,
    liveEdit: liveEdit
  })), /*#__PURE__*/_react.default.createElement(_documentSparkline.MetadataBox, {
    "data-changed": changed || liveEdit ? '' : undefined,
    "data-transition": transition ? '' : undefined,
    media: metadataBoxBreakpoints,
    style: metadataBoxStyle
  }, !liveEdit && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_documentSparkline.ReviewChangesBadgeBox, null, /*#__PURE__*/_react.default.createElement(_iconBadge.IconBadge, {
    icon: _icons.EditIcon,
    muted: true,
    tone: "caution"
  })), /*#__PURE__*/_react.default.createElement(_documentSparkline.ReviewChangesButtonBox, null, /*#__PURE__*/_react.default.createElement(_reviewChangesButton.ReviewChangesButton, {
    disabled: showingRevision,
    lastUpdatedTimeAgo: lastUpdatedTimeAgo,
    ref: setReviewChangesButtonElement
  }))), /*#__PURE__*/_react.default.createElement(_documentSparkline.BadgesBox, {
    flex: 1,
    marginLeft: 3
  }, /*#__PURE__*/_react.default.createElement(_documentBadges.DocumentBadges, {
    editState: editState,
    badges: badges
  }))));
}