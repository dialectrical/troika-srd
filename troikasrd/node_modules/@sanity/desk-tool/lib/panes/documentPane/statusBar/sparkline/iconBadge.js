"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconBadge = IconBadge;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = _styledComponents.default.div(_ref => {
  var $disabled = _ref.$disabled,
      $muted = _ref.$muted,
      $tone = _ref.$tone,
      theme = _ref.theme;
  var color = theme.sanity.color;
  var tone = $muted ? color.muted[$tone] : color.solid[$tone];
  var state = $disabled ? tone.disabled : tone.enabled;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      --icon-badge-size: 27px;\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      --card-border-color: ", ";\n\n      width: var(--icon-badge-size);\n      height: var(--icon-badge-size);\n      border-radius: calc(var(--icon-badge-size) / 2);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: var(--card-bg-color);\n      color: var(--card-fg-color);\n      box-shadow: inset 0 0 0 1px var(--card-border-color);\n      margin: -3px;\n\n      & > span {\n        color: inherit;\n      }\n    "])), state.bg, state.fg, state.border);
});

function IconBadge(props) {
  var _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      icon = props.icon,
      _props$muted = props.muted,
      muted = _props$muted === void 0 ? false : _props$muted,
      tone = props.tone;
  return /*#__PURE__*/_react.default.createElement(Root, {
    $disabled: disabled,
    $muted: muted,
    $tone: tone,
    "aria-hidden": true
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    as: "span"
  }, /*#__PURE__*/(0, _react.createElement)(icon)));
}