"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentStatusBarActions = DocumentStatusBarActions;
exports.HistoryStatusBarActions = HistoryStatusBarActions;

var _react = _interopRequireWildcard(require("react"));

var _reactHooks = require("@sanity/react-hooks");

var _ui = require("@sanity/ui");

var _utils = require("part:@sanity/base/actions/utils");

var _resolver = _interopRequireDefault(require("part:@sanity/base/document-actions/resolver"));

var _HistoryRestoreAction = require("../../../actions/HistoryRestoreAction");

var _actionMenu = require("./actionMenu");

var _actionStateDialog = require("./actionStateDialog");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DocumentStatusBarActionsInner(props) {
  var disabled = props.disabled,
      showMenu = props.showMenu,
      states = props.states;

  var _states = _toArray(states),
      firstActionState = _states[0],
      menuActionStates = _states.slice(1);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      buttonElement = _useState2[0],
      setButtonElement = _useState2[1];

  var tooltipContent = (0, _react.useMemo)(() => {
    if (!firstActionState || !firstActionState.title && !firstActionState.shortcut) return null;
    return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      padding: 2,
      style: {
        maxWidth: 300
      },
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      muted: true
    }, firstActionState.title), firstActionState.shortcut && /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginLeft: firstActionState.title ? 2 : 0
    }, /*#__PURE__*/_react.default.createElement(_ui.Hotkeys, {
      keys: String(firstActionState.shortcut).split('+').map(s => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())
    })));
  }, [firstActionState]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, firstActionState && /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, {
    zOffset: 200
  }, /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    disabled: !tooltipContent,
    content: tooltipContent,
    portal: true,
    placement: "top"
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    disabled: disabled || Boolean(firstActionState.disabled),
    icon: firstActionState.icon,
    onClick: firstActionState.onHandle,
    ref: setButtonElement,
    text: firstActionState.label,
    tone: firstActionState.color ? _constants.LEGACY_BUTTON_COLOR_TO_TONE[firstActionState.color] : 'primary'
  })))), showMenu && menuActionStates.length > 0 && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_actionMenu.ActionMenuButton, {
    actionStates: menuActionStates,
    disabled: disabled
  })), firstActionState && firstActionState.dialog && /*#__PURE__*/_react.default.createElement(_actionStateDialog.ActionStateDialog, {
    dialog: firstActionState.dialog,
    referenceElement: buttonElement
  }));
}

function DocumentStatusBarActions(props) {
  var id = props.id,
      type = props.type;
  var editState = (0, _reactHooks.useEditState)(id, type);
  var connectionState = (0, _reactHooks.useConnectionState)(id, type);

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isMenuOpen = _useState4[0],
      setMenuOpen = _useState4[1];

  var actions = editState ? (0, _resolver.default)(editState) : null;
  var handleMenuOpen = (0, _react.useCallback)(() => setMenuOpen(true), []);
  var handleMenuClose = (0, _react.useCallback)(() => setMenuOpen(false), []);
  var handleActionComplete = (0, _react.useCallback)(() => setMenuOpen(false), []);

  if (!actions) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_utils.RenderActionCollectionState, {
    component: DocumentStatusBarActionsInner,
    isMenuOpen: isMenuOpen,
    showMenu: actions.length > 1,
    onMenuOpen: handleMenuOpen,
    onMenuClose: handleMenuClose,
    onActionComplete: handleActionComplete,
    actions: actions,
    actionProps: editState,
    disabled: connectionState !== 'connected'
  });
}

var historyActions = [_HistoryRestoreAction.HistoryRestoreAction];

function HistoryStatusBarActions(props) {
  var id = props.id,
      revision = props.revision,
      type = props.type;
  var editState = (0, _reactHooks.useEditState)(id, type);
  var connectionState = (0, _reactHooks.useConnectionState)(id, type);
  var disabled = ((editState === null || editState === void 0 ? void 0 : editState.draft) || (editState === null || editState === void 0 ? void 0 : editState.published) || {})._rev === revision;
  var actionProps = (0, _react.useMemo)(() => _objectSpread(_objectSpread({}, editState || {}), {}, {
    revision
  }), [editState, revision]);

  if (!editState) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_utils.RenderActionCollectionState, {
    component: DocumentStatusBarActionsInner,
    actions: historyActions,
    actionProps: actionProps,
    disabled: connectionState !== 'connected' || Boolean(disabled)
  });
}