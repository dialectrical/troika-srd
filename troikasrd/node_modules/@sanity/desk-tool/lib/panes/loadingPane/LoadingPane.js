"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _default = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _LoadingPane = _interopRequireDefault(require("./LoadingPane.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LoadingPane extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    var isGetter = typeof props.message === 'function';
    var currentMessage = isGetter ? props.message(props.path) : props.message;
    var isObservable = currentMessage && typeof currentMessage.subscribe === 'function';
    var state = {
      currentMessage: isObservable ? LoadingPane.defaultProps.message : currentMessage
    };

    if (isObservable) {
      var isSync = true;
      this.subscription = currentMessage.subscribe(message => {
        if (isSync) {
          state.currentMessage = message;
        } else {
          this.setState({
            currentMessage: message
          });
        }
      });
      isSync = false;
    }

    this.state = state;
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  render() {
    var _this$props = this.props,
        isSelected = _this$props.isSelected,
        isCollapsed = _this$props.isCollapsed,
        onCollapse = _this$props.onCollapse,
        onExpand = _this$props.onExpand,
        title = _this$props.title;
    var currentMessage = this.state.currentMessage;
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      title: title,
      isLoading: true,
      isScrollable: false,
      isSelected: isSelected,
      isCollapsed: isCollapsed,
      onCollapse: onCollapse,
      onExpand: onExpand,
      index: this.props.index
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _LoadingPane.default.root
    }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true,
      message: currentMessage
    })));
  }

}

exports.default = LoadingPane;

_defineProperty(LoadingPane, "propTypes", {
  title: _propTypes.default.string,
  isSelected: _propTypes.default.bool.isRequired,
  isCollapsed: _propTypes.default.bool.isRequired,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  path: _propTypes.default.arrayOf(_propTypes.default.string),
  index: _propTypes.default.number,
  message: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func])
});

_defineProperty(LoadingPane, "defaultProps", {
  // message: 'Loadingâ€¦',
  path: [],
  title: '\u00a0',
  index: undefined,
  onExpand: undefined,
  onCollapse: undefined
});