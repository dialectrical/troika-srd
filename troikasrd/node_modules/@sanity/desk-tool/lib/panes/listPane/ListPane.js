"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _default = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/lists/default-style"));

var _PaneRouterContext = require("../../contexts/PaneRouterContext");

var _paneItem = require("../../components/paneItem");

var _listView = require("../../components/listView");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EMPTY_ARRAY = [];
var EMPTY_RECORD = {};

class ListPane extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "shouldShowIconForItem", item => {
      var paneShowIcons = this.props.displayOptions.showIcons;
      var itemShowIcon = item.displayOptions && item.displayOptions.showIcon; // Specific true/false on item should have presedence over list setting

      if (typeof itemShowIcon !== 'undefined') {
        return itemShowIcon === false ? false : item.icon;
      } // If no item setting is defined, defer to the pane settings


      return paneShowIcons === false ? false : item.icon;
    });
  }

  itemIsSelected(item) {
    return this.props.childItemId === item.id;
  }

  render() {
    var _this$props = this.props,
        title = _this$props.title,
        styles = _this$props.styles,
        className = _this$props.className,
        defaultLayout = _this$props.defaultLayout,
        items = _this$props.items,
        index = _this$props.index,
        menuItems = _this$props.menuItems,
        menuItemGroups = _this$props.menuItemGroups,
        isSelected = _this$props.isSelected,
        isCollapsed = _this$props.isCollapsed,
        onCollapse = _this$props.onCollapse,
        onExpand = _this$props.onExpand,
        isActive = _this$props.isActive;
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      "data-testid": "desk-tool-list-pane",
      index: index,
      title: title,
      styles: styles,
      className: className,
      isSelected: isSelected,
      isCollapsed: isCollapsed,
      onCollapse: onCollapse,
      onExpand: onExpand,
      menuItems: menuItems,
      menuItemGroups: menuItemGroups
    }, /*#__PURE__*/_react.default.createElement(_listView.ListView, {
      layout: defaultLayout
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      overflow: "auto",
      paddingY: 2,
      space: 1
    }, items.map(item => item.type === 'divider' ? /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingY: 1,
      key: item.id
    }, /*#__PURE__*/_react.default.createElement("hr", {
      className: _defaultStyle.default.divider
    })) : /*#__PURE__*/_react.default.createElement(_ui.Box, {
      key: item.id,
      paddingX: 2
    }, /*#__PURE__*/_react.default.createElement(_paneItem.PaneItem, {
      id: item.id,
      index: index,
      value: item,
      icon: this.shouldShowIconForItem(item),
      layout: defaultLayout,
      isSelected: this.itemIsSelected(item),
      isActive: isActive,
      schemaType: item.schemaType
    }))))));
  }

}

exports.default = ListPane;

_defineProperty(ListPane, "contextType", _PaneRouterContext.PaneRouterContext);

_defineProperty(ListPane, "propTypes", {
  index: _propTypes.default.number.isRequired,
  title: _propTypes.default.string.isRequired,
  childItemId: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  styles: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  defaultLayout: _propTypes.default.string,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    schemaType: _propTypes.default.shape({
      name: _propTypes.default.string
    })
  })),
  menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired
  })),
  menuItemGroups: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  })),
  displayOptions: _propTypes.default.shape({
    showIcons: _propTypes.default.bool
  }),
  isSelected: _propTypes.default.bool.isRequired,
  isActive: _propTypes.default.bool.isRequired,
  isCollapsed: _propTypes.default.bool.isRequired,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func
});

_defineProperty(ListPane, "defaultProps", {
  className: '',
  items: EMPTY_ARRAY,
  menuItems: EMPTY_ARRAY,
  menuItemGroups: EMPTY_ARRAY,
  displayOptions: EMPTY_RECORD,
  styles: undefined,
  onExpand: undefined,
  onCollapse: undefined,
  defaultLayout: undefined
});