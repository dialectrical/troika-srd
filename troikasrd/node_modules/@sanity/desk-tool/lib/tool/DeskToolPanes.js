"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sumBy2 = _interopRequireDefault(require("lodash/sumBy"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _splitController = _interopRequireDefault(require("part:@sanity/components/panes/split-controller"));

var _splitPaneWrapper = _interopRequireDefault(require("part:@sanity/components/panes/split-pane-wrapper"));

var _internal = require("@sanity/base/_internal");

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _panes = require("../panes");

var _windowWidth = _interopRequireDefault(require("../utils/windowWidth"));

var _isNarrowScreen = _interopRequireDefault(require("../utils/isNarrowScreen"));

var _constants = require("../constants");

var _PaneRouterContext = require("../contexts/PaneRouterContext");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  height: 100%;\n\n  @media (min-width: ", ") {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n"])), _ref => {
  var theme = _ref.theme;
  return (0, _ui.rem)(theme.sanity.media[2]);
});

var COLLAPSED_WIDTH = 49;

function getPaneMinSize(pane) {
  return pane.type === 'document' ? 668 : 320;
}

function getPaneDefaultSize(pane) {
  return pane.type === 'document' ? 668 : 350;
}

function getWaitMessages(path) {
  var thresholds = [{
    ms: 300,
    message: 'Loading…'
  }, {
    ms: 5000,
    message: 'Still loading…'
  }];

  if (__DEV__) {
    var message = ['Check console for errors?', 'Is your observable/promise resolving?', path.length > 0 ? "Structure path: ".concat(path.join(' ➝ ')) : ''];
    thresholds.push({
      ms: 10000,
      message: message.join('\n')
    });
  }

  var src = (0, _rxjs.of)(null);
  return (0, _rxjs.merge)(...thresholds.map(_ref2 => {
    var ms = _ref2.ms,
        message = _ref2.message;
    return src.pipe((0, _operators.mapTo)(message), (0, _operators.delay)(ms));
  }));
} // eslint-disable-next-line react/require-optimization


class DeskToolPanes extends _react.default.Component {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    _defineProperty(this, "_rootElement", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "state", {
      collapsedPanes: [],
      hasNarrowScreen: (0, _isNarrowScreen.default)(),
      width: undefined
    });

    _defineProperty(this, "userCollapsedPanes", []);

    _defineProperty(this, "getPaneRouterContext", (0, _PaneRouterContext.getPaneRouterContextFactory)(this));

    _defineProperty(this, "handleResize", event => {
      var width = event.contentRect.width;
      this.setState({
        width
      });
      this.handleAutoCollapse(width, undefined, this.userCollapsedPanes);
    });

    _defineProperty(this, "handlePaneCollapse", index => {
      if (this.state.hasNarrowScreen || this.props.panes.length === 1) {
        return;
      }

      this.userCollapsedPanes[index] = true;
      this.handleAutoCollapse(this.state.width, undefined, this.userCollapsedPanes);
    });

    _defineProperty(this, "handlePaneExpand", index => {
      if (this.state.hasNarrowScreen || this.props.panes.length === 1) {
        return;
      }

      this.userCollapsedPanes[index] = false;
      this.handleAutoCollapse(this.state.width, index, this.userCollapsedPanes);
    });

    _defineProperty(this, "handleAutoCollapse", function (width, paneWantExpand) {
      var userCollapsedPanes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var _this$props = _this.props,
          autoCollapse = _this$props.autoCollapse,
          panes = _this$props.panes;
      var hasNarrowScreen = _this.state.hasNarrowScreen;
      var paneToForceExpand = typeof paneWantExpand === 'number' ? paneWantExpand : panes.length - 1;

      if (hasNarrowScreen || !autoCollapse || !panes || panes.length === 0) {
        return;
      }

      var autoCollapsedPanes = [];
      var totalMinSize = (0, _sumBy2.default)(panes, pane => getPaneMinSize(pane));
      var remainingMinSize = totalMinSize;
      remainingMinSize -= getPaneMinSize(panes[paneToForceExpand]);
      autoCollapsedPanes[paneToForceExpand] = false;
      userCollapsedPanes[paneToForceExpand] = false;

      if (totalMinSize > width) {
        panes.forEach((pane, i) => {
          if (paneToForceExpand != i) {
            if (remainingMinSize > width - getPaneMinSize(panes[paneToForceExpand])) {
              autoCollapsedPanes[i] = true;
              remainingMinSize -= getPaneMinSize(pane) - COLLAPSED_WIDTH;
            }
          }
        });
      } // Respect userCollapsed before autoCollapsed


      var collapsedPanes = panes.map((pane, i) => userCollapsedPanes[i] || autoCollapsedPanes[i]);

      _this.setState({
        collapsedPanes
      });
    });

    _defineProperty(this, "setPortalElement", portalElement => {
      this.portalElement = portalElement;
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.panes.length !== prevProps.panes.length) {
      this.userCollapsedPanes = [];
      this.handleAutoCollapse(this.state.width, undefined, this.userCollapsedPanes);
    } // Expand new panes


    var paneToForceExpand = this.props.panes.reduce((acc, pane, i) => {
      return prevProps.panes[i] === pane ? acc : i;
    }, undefined);

    if (typeof paneToForceExpand !== 'undefined') {
      this.handleAutoCollapse(this.state.width, paneToForceExpand, this.userCollapsedPanes);
    }
  }

  componentDidMount() {
    var _this$props2 = this.props,
        autoCollapse = _this$props2.autoCollapse,
        panes = _this$props2.panes;

    if (autoCollapse) {
      this.windowResizeSubscriber = _windowWidth.default.pipe((0, _operators.distinctUntilChanged)()).subscribe(() => {
        this.setState({
          hasNarrowScreen: (0, _isNarrowScreen.default)()
        });
      });

      if (this._rootElement && this._rootElement.current) {
        this.unobserveRootElementResize = _internal.resizeObserver.observe(this._rootElement.current, this.handleResize);
      }

      if (this.state.width) {
        this.handleAutoCollapse(this.state.width, panes.length - 1, this.userCollapsedPanes);
      }
    }
  }

  componentWillUnmount() {
    if (this.unobserveRootElementResize) {
      this.unobserveRootElementResize();
    }

    if (this.resizeObserver && this._rootElement && this._rootElement.current) {
      this.resizeObserver.unobserve(this._rootElement.current);
    }
  }

  renderPanes() {
    var _this$props3 = this.props,
        panes = _this$props3.panes,
        groupIndexes = _this$props3.groupIndexes,
        keys = _this$props3.keys,
        router = _this$props3.router;
    var routerPanes = router.state.panes;
    var hasNarrowScreen = this.state.hasNarrowScreen;
    var path = [];
    var paneKeys = ['root'].concat(keys);
    var paneGroups = [[{
      id: 'root'
    }]].concat(routerPanes || []);
    var i = -1;
    return paneGroups.reduce((components, group, index) => {
      return components.concat( // eslint-disable-next-line complexity
      group.map((sibling, siblingIndex) => {
        var groupRoot = group[0];
        var isDuplicate = siblingIndex > 0 && sibling.id === groupRoot.id;
        var pane = panes[++i];

        if (!pane) {
          return null;
        }

        var isCollapsed = Boolean(!hasNarrowScreen && this.state.collapsedPanes[i]);
        var paneKey = "".concat(i, "-").concat(paneKeys[i] || 'root', "-").concat(groupIndexes[i - 1]);
        var itemId = paneKeys[i];
        var childItemId = paneKeys[i + 1] || ''; // Same pane might appear multiple times, so use index as tiebreaker

        var wrapperKey = pane === _constants.LOADING_PANE ? "loading-".concat(i) : "".concat(i, "-").concat(pane.id);
        path.push(pane.id || "[".concat(i, "]"));
        var rootParams = (0, _omit2.default)(groupRoot.params || {}, _PaneRouterContext.exclusiveParams);
        var params = isDuplicate ? _objectSpread(_objectSpread({}, rootParams), sibling.params) : sibling.params;
        var payload = isDuplicate ? sibling.payload || groupRoot.payload : sibling.payload;
        var paneRouterContext = this.getPaneRouterContext({
          groupIndex: index - 1,
          siblingIndex,
          flatIndex: i,
          params,
          payload
        });
        return /*#__PURE__*/_react.default.createElement(_splitPaneWrapper.default, {
          key: wrapperKey,
          isCollapsed: isCollapsed,
          minSize: getPaneMinSize(pane),
          defaultSize: getPaneDefaultSize(pane)
        }, /*#__PURE__*/_react.default.createElement(_PaneRouterContext.PaneRouterContext.Provider, {
          value: paneRouterContext
        }, pane === _constants.LOADING_PANE ? /*#__PURE__*/_react.default.createElement(_panes.LoadingPane, {
          key: paneKey // Use key to force rerendering pane on ID change
          ,
          path: path,
          index: i,
          message: getWaitMessages,
          onExpand: this.handlePaneExpand,
          onCollapse: this.handlePaneCollapse,
          isCollapsed: isCollapsed,
          isSelected: i === panes.length - 1
        }) : /*#__PURE__*/_react.default.createElement(_panes.DeskToolPane, _extends({
          key: paneKey // Use key to force rerendering pane on ID change
          ,
          paneKey: paneKey,
          index: i,
          itemId: itemId,
          urlParams: params,
          childItemId: childItemId,
          onExpand: this.handlePaneExpand,
          onCollapse: this.handlePaneCollapse,
          isCollapsed: isCollapsed,
          isSelected: i === panes.length - 1,
          isClosable: siblingIndex > 0,
          isActive: i === panes.length - 2
        }, pane))));
      }));
    }, []);
  }

  render() {
    var hasNarrowScreen = this.state.hasNarrowScreen;
    return /*#__PURE__*/_react.default.createElement(Root, {
      ref: this._rootElement
    }, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
      element: this.portalElement || null
    }, /*#__PURE__*/_react.default.createElement(_splitController.default, {
      isMobile: hasNarrowScreen,
      autoCollapse: this.props.autoCollapse,
      collapsedWidth: COLLAPSED_WIDTH,
      onCheckCollapse: this.handleCheckCollapse
    }, this.renderPanes()), /*#__PURE__*/_react.default.createElement("div", {
      "data-portal": "",
      ref: this.setPortalElement
    })));
  }

}

exports.default = DeskToolPanes;

_defineProperty(DeskToolPanes, "defaultProps", {
  autoCollapse: false
});