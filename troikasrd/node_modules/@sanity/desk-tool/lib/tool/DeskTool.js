"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _router = require("part:@sanity/base/router");

var _initialValueTemplates = require("@sanity/base/initial-value-templates");

var _resolvePanes = require("../utils/resolvePanes");

var _StructureError = require("../components/StructureError");

var _calculatePanesEquality = require("../utils/calculatePanesEquality");

var _isNarrowScreen = _interopRequireDefault(require("../utils/isNarrowScreen"));

var _windowWidth = _interopRequireDefault(require("../utils/windowWidth"));

var _constants = require("../constants");

var _DeskToolPanes = _interopRequireDefault(require("./DeskToolPanes"));

var _excluded = ["router"],
    _excluded2 = ["router"],
    _excluded3 = ["panes"],
    _excluded4 = ["panes"],
    _excluded5 = ["template"];

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EMPTY_PANE_KEYS = [];

var hasLoading = panes => panes.some(item => item === _constants.LOADING_PANE);

var isSaveHotkey = (0, _isHotkey.default)('mod+s');

var _default = (0, _router.withRouterHOC)(( // eslint-disable-next-line react/prefer-stateless-function
_temp = _class = class DeskTool extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {
      // eslint-disable-next-line react/no-unused-state
      isResolving: true,
      hasNarrowScreen: (0, _isNarrowScreen.default)(),
      panes: null
    });

    _defineProperty(this, "setResolvedPanes", panes => {
      var router = this.props.router;
      var paneSegments = router.state.panes || [];
      this.setState({
        panes,
        // eslint-disable-next-line react/no-unused-state
        isResolving: false
      });

      if (panes.length < paneSegments.length) {
        router.navigate(_objectSpread(_objectSpread({}, router.state), {}, {
          panes: paneSegments.slice(0, panes.length)
        }), {
          replace: true
        });
      }
    });

    _defineProperty(this, "setResolveError", error => {
      (0, _resolvePanes.setStructureResolveError)(error); // Log error for proper stacktraces

      console.error(error); // eslint-disable-line no-console

      this.setState({
        error,
        // eslint-disable-next-line react/no-unused-state
        isResolving: false
      });
    });

    _defineProperty(this, "panesAreEqual", (prev, next) => (0, _calculatePanesEquality.calculatePanesEquality)(prev, next).ids);

    _defineProperty(this, "shouldDerivePanes", (nextProps, prevProps) => {
      var nextRouterState = nextProps.router.state;
      var prevRouterState = prevProps.router.state;
      return !this.panesAreEqual(prevRouterState.panes, nextRouterState.panes) || nextRouterState.legacyEditDocumentId !== prevRouterState.legacyEditDocumentId || nextRouterState.type !== prevRouterState.type || nextRouterState.action !== prevRouterState.action;
    });

    _defineProperty(this, "handleGlobalKeyDown", event => {
      // Prevent `Cmd+S`
      if (isSaveHotkey(event)) {
        event.preventDefault();
        this.context.addToSnackQueue({
          id: 'auto-save-message',
          isOpen: true,
          setFocus: false,
          kind: 'info',
          title: 'Sanity auto-saves your work!',
          autoDismissTimeout: 4000,
          isCloseable: true
        });
      }
    });

    props.onPaneChange([]);
  }

  derivePanes(props) {
    var fromIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];

    if (this.paneDeriver) {
      this.paneDeriver.unsubscribe();
    }

    this.setState({
      // eslint-disable-next-line react/no-unused-state
      isResolving: true
    });
    this.paneDeriver = (0, _resolvePanes.loadStructure)().pipe((0, _operators.distinctUntilChanged)(), (0, _operators.map)(_resolvePanes.maybeSerialize), (0, _operators.switchMap)(structure => (0, _resolvePanes.resolvePanes)(structure, props.router.state.panes || [], this.state.panes, fromIndex)), (0, _operators.switchMap)(panes => hasLoading(panes) ? (0, _rxjs.of)(panes).pipe((0, _operators.debounce)(() => (0, _rxjs.interval)(50))) : (0, _rxjs.of)(panes))).subscribe(this.setResolvedPanes, this.setResolveError);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.onPaneChange !== this.props.onPaneChange || prevState.panes !== this.state.panes) {
      this.props.onPaneChange(this.state.panes || []);
    }

    var prevPanes = prevProps.router.state.panes || [];
    var nextPanes = this.props.router.state.panes || [];
    var panesEqual = (0, _calculatePanesEquality.calculatePanesEquality)(prevPanes, nextPanes);

    if (!panesEqual.ids && this.shouldDerivePanes(this.props, prevProps)) {
      var diffAt = getPaneDiffIndex(nextPanes, prevPanes);

      if (diffAt) {
        this.derivePanes(this.props, diffAt);
      }
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    var _this$props = this.props,
        oldRouter = _this$props.router,
        oldProps = _objectWithoutProperties(_this$props, _excluded);

    var newRouter = nextProps.router,
        newProps = _objectWithoutProperties(nextProps, _excluded2);

    var _this$state = this.state,
        oldPanes = _this$state.panes,
        oldState = _objectWithoutProperties(_this$state, _excluded3);

    var newPanes = nextState.panes,
        newState = _objectWithoutProperties(nextState, _excluded4);

    var prevPanes = oldRouter.state.panes || [];
    var nextPanes = newRouter.state.panes || [];
    var panesEqual = (0, _calculatePanesEquality.calculatePanesEquality)(prevPanes, nextPanes);
    var shouldUpdate = !panesEqual.params || !panesEqual.ids || !(0, _shallowEquals.default)(oldProps, newProps) || !(0, _isEqual2.default)(oldPanes, newPanes) || !(0, _shallowEquals.default)(oldState, newState);
    return shouldUpdate;
  }

  maybeHandleOldUrl() {
    var navigate = this.props.router.navigate;
    var _this$props$router$st = this.props.router.state,
        action = _this$props$router$st.action,
        legacyEditDocumentId = _this$props$router$st.legacyEditDocumentId,
        schemaType = _this$props$router$st.type,
        editDocumentId = _this$props$router$st.editDocumentId,
        _this$props$router$st2 = _this$props$router$st.params,
        params = _this$props$router$st2 === void 0 ? {} : _this$props$router$st2;

    var templateName = params.template,
        payloadParams = _objectWithoutProperties(params, _excluded5);

    var template = (0, _initialValueTemplates.getTemplateById)(templateName);
    var type = template && template.schemaType || schemaType;
    var shouldRewrite = action === 'edit' && legacyEditDocumentId || type && editDocumentId;

    if (!shouldRewrite) {
      return;
    }

    navigate(getIntentRouteParams({
      id: editDocumentId || legacyEditDocumentId,
      type,
      payloadParams,
      templateName
    }), {
      replace: true
    });
  }

  maybeCutSiblingPanes() {
    var hasNarrowScreen = this.state.hasNarrowScreen;

    if (!hasNarrowScreen) {
      return;
    }

    var navigate = this.props.router.navigate;
    var panes = this.props.router.state.panes || [];
    var hasSiblings = panes.some(group => group.length > 1);

    if (!hasSiblings) {
      return;
    }

    var withoutSiblings = panes.map(group => [group[0]]);
    navigate({
      panes: withoutSiblings
    }, {
      replace: true
    });
  }

  componentDidMount() {
    this.resizeSubscriber = _windowWidth.default.subscribe(() => {
      var hasNarrowScreen = (0, _isNarrowScreen.default)();

      if (this.state.hasNarrowScreen !== hasNarrowScreen) {
        this.setState({
          hasNarrowScreen: (0, _isNarrowScreen.default)()
        }, this.maybeCutSiblingPanes);
      }
    });
    this.maybeCutSiblingPanes();
    this.maybeHandleOldUrl();
    this.derivePanes(this.props);
    this.props.onPaneChange(this.state.panes || []);
    window.addEventListener('keydown', this.handleGlobalKeyDown);
  }

  componentWillUnmount() {
    if (this.paneDeriver) {
      this.paneDeriver.unsubscribe();
    }

    if (this.resizeSubscriber) {
      this.resizeSubscriber.unsubscribe();
    }

    window.removeEventListener('keydown', this.handleGlobalKeyDown);
  }

  render() {
    var router = this.props.router;
    var _this$state2 = this.state,
        panes = _this$state2.panes,
        error = _this$state2.error;

    if (error) {
      return /*#__PURE__*/_react.default.createElement(_StructureError.StructureError, {
        error: error
      });
    }

    var keys = (router.state.panes || []).reduce((ids, group) => ids.concat(group.map(sibling => sibling.id)), []) || EMPTY_PANE_KEYS;
    var groupIndexes = (router.state.panes || []).reduce((ids, group) => ids.concat(group.map((sibling, groupIndex) => groupIndex)), []);

    if (!panes) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_DeskToolPanes.default, {
      router: router,
      panes: this.state.panes,
      keys: keys,
      groupIndexes: groupIndexes,
      autoCollapse: true
    });
  }

}, _defineProperty(_class, "contextTypes", {
  addToSnackQueue: _propTypes.default.func
}), _defineProperty(_class, "propTypes", {
  router: _propTypes.default.shape({
    navigate: _propTypes.default.func.isRequired,
    state: _propTypes.default.shape({
      panes: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.shape({
        id: _propTypes.default.string.isRequired,
        params: _propTypes.default.object
      }))),
      params: _propTypes.default.shape({
        template: _propTypes.default.string
      }),
      editDocumentId: _propTypes.default.string,
      legacyEditDocumentId: _propTypes.default.string,
      type: _propTypes.default.string,
      action: _propTypes.default.string
    })
  }).isRequired,
  onPaneChange: _propTypes.default.func.isRequired
}), _temp));

exports.default = _default;

function getPaneDiffIndex(nextPanes, prevPanes) {
  if (!nextPanes.length) {
    return [0, 0];
  }

  var maxPanes = Math.max(nextPanes.length, prevPanes.length);

  for (var index = 0; index < maxPanes; index++) {
    var nextGroup = nextPanes[index];
    var prevGroup = prevPanes[index]; // Whole group is now invalid

    if (!prevGroup || !nextGroup) {
      return [index, 0];
    } // Less panes than previously? Resolve whole group


    if (prevGroup.length > nextGroup.length) {
      return [index, 0];
    }
    /* eslint-disable max-depth */
    // Iterate over siblings


    for (var splitIndex = 0; splitIndex < nextGroup.length; splitIndex++) {
      var nextSibling = nextGroup[splitIndex];
      var prevSibling = prevGroup[splitIndex]; // Didn't have a sibling here previously, diff from here!

      if (!prevSibling) {
        return [index, splitIndex];
      } // Does the ID differ from the previous?


      if (nextSibling.id !== prevSibling.id) {
        return [index, splitIndex];
      }
    }
    /* eslint-enable max-depth */

  } // "No diff"


  return undefined;
}

function getIntentRouteParams(_ref) {
  var id = _ref.id,
      type = _ref.type,
      payloadParams = _ref.payloadParams,
      templateName = _ref.templateName;
  return {
    intent: 'edit',
    params: _objectSpread(_objectSpread({
      id
    }, type ? {
      type
    } : {}), templateName ? {
      template: templateName
    } : {}),
    payload: Object.keys(payloadParams).length > 0 ? payloadParams : undefined
  };
}