"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPaneRouterContextFactory = getPaneRouterContextFactory;
exports.usePaneRouter = usePaneRouter;
exports.PaneRouterContext = exports.exclusiveParams = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _router = require("part:@sanity/base/router");

var _excluded = ["childId", "childPayload"],
    _excluded2 = ["params", "payload"],
    _excluded3 = ["view"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var contextCache = new WeakMap();
var DEFAULT_SET_PARAMS_OPTIONS = {
  recurseIfInherited: false
};

function missingContext() {
  throw new Error('Pane is missing router context');
}

var exclusiveParams = ['view', 'since', 'rev'];
exports.exclusiveParams = exclusiveParams;

var PaneRouterContext = /*#__PURE__*/_react.default.createContext({
  index: 0,
  groupIndex: 0,
  siblingIndex: 0,
  payload: undefined,
  params: {},
  hasGroupSiblings: false,
  groupLength: 0,
  routerPanesState: [],
  ChildLink: () => missingContext(),
  ParameterizedLink: () => missingContext(),
  replaceCurrent: () => missingContext(),
  closeCurrent: () => missingContext(),
  duplicateCurrent: () => missingContext(),
  setView: () => missingContext(),
  setParams: () => missingContext(),
  setPayload: () => missingContext(),
  navigateIntent: () => missingContext()
});

exports.PaneRouterContext = PaneRouterContext;

var ChildLink = /*#__PURE__*/_react.default.forwardRef(function ChildLink(props, ref) {
  var childId = props.childId,
      childPayload = props.childPayload,
      rest = _objectWithoutProperties(props, _excluded);

  var _useContext = (0, _react.useContext)(PaneRouterContext),
      routerPanesState = _useContext.routerPanesState,
      groupIndex = _useContext.groupIndex;

  var panes = (0, _react.useMemo)(() => routerPanesState.slice(0, groupIndex + 1).concat([[{
    id: childId,
    payload: childPayload
  }]]), [childId, childPayload, groupIndex, routerPanesState]);
  return /*#__PURE__*/_react.default.createElement(_router.StateLink, _extends({
    ref: ref
  }, rest, {
    state: {
      panes
    }
  }));
});

var ParameterizedLink = /*#__PURE__*/_react.default.forwardRef(function ParameterizedLink(props, ref) {
  var newParams = props.params,
      newPayload = props.payload,
      rest = _objectWithoutProperties(props, _excluded2);

  var _useContext2 = (0, _react.useContext)(PaneRouterContext),
      routerPanesState = _useContext2.routerPanesState;

  var panes = routerPanesState.map((group, i) => {
    if (i !== routerPanesState.length - 1) {
      return group;
    }

    var pane = group[0];
    return [_objectSpread(_objectSpread({}, pane), {}, {
      params: newParams || pane.params,
      payload: newPayload || pane.payload
    }), ...group.slice(1)];
  });
  return /*#__PURE__*/_react.default.createElement(_router.StateLink, _extends({
    ref: ref
  }, rest, {
    state: {
      panes
    }
  }));
});

function getPaneRouterContextFactory(instance) {
  var exists = contextCache.has(instance);
  var contexts = contextCache.get(instance) || new Map();

  if (!exists) {
    contextCache.set(instance, contexts);
  }

  return _ref => {
    var groupIndex = _ref.groupIndex,
        siblingIndex = _ref.siblingIndex,
        flatIndex = _ref.flatIndex,
        paneParams = _ref.params,
        panePayload = _ref.payload;
    var cacheKey = "".concat(flatIndex, "-").concat(groupIndex, "[").concat(siblingIndex, "]");
    var existing = contexts.get(cacheKey);

    if (existing) {
      var payloadEqual = (0, _isEqual2.default)(existing.payload, panePayload);
      var paramsEqual = (0, _isEqual2.default)(existing.params, paneParams);
      var panesEqual = (0, _isEqual2.default)(existing.routerPanesState, instance.props.router.state.panes);

      if (paramsEqual && payloadEqual && panesEqual) {
        return existing;
      }
    }

    var getCurrentGroup = () => {
      var router = instance.props.router;
      var panes = router.state.panes || [];
      return (panes[groupIndex] || []).slice();
    };

    var modifyCurrentGroup = modifier => {
      var router = instance.props.router;
      var newPanes = (router.state.panes || []).slice();
      var group = getCurrentGroup();
      newPanes.splice(groupIndex, 1, modifier(group, group[siblingIndex]));

      var newRouterState = _objectSpread(_objectSpread({}, router.state), {}, {
        panes: newPanes
      });

      router.navigate(newRouterState);
      return newRouterState;
    };

    var setPayload = payload => {
      modifyCurrentGroup((siblings, item) => {
        var newGroup = siblings.slice();
        newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
          payload
        });
        return newGroup;
      });
    };

    var setParams = function setParams(params) {
      var setOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _DEFAULT_SET_PARAMS_O = _objectSpread(_objectSpread({}, DEFAULT_SET_PARAMS_OPTIONS), setOptions),
          recurseIfInherited = _DEFAULT_SET_PARAMS_O.recurseIfInherited;

      modifyCurrentGroup((siblings, item) => {
        var isGroupRoot = siblingIndex === 0;
        var isDuplicate = !isGroupRoot && item.id === siblings[0].id;
        var newGroup = siblings.slice();

        if (!isDuplicate) {
          newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
            params
          });
          return newGroup;
        }

        var rootParams = siblings[0].params;

        if (recurseIfInherited) {
          var newParamKeys = Object.keys(params);
          var inheritedKeys = Object.keys(paneParams).filter(key => rootParams[key] === paneParams[key]);
          var removedInheritedKeys = inheritedKeys.filter(key => !params[key]);
          var remainingInheritedKeys = newParamKeys.filter(key => inheritedKeys.includes(key));
          var exclusiveKeys = newParamKeys.filter(key => !inheritedKeys.includes(key));
          var exclusive = (0, _pick2.default)(params, exclusiveKeys);

          var inherited = _objectSpread(_objectSpread({}, (0, _omit2.default)(rootParams, removedInheritedKeys)), (0, _pick2.default)(params, remainingInheritedKeys));

          newGroup[0] = _objectSpread(_objectSpread({}, item), {}, {
            params: inherited
          });
          newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
            params: exclusive
          });
        } else {
          // If it's a duplicate of the group root, we should only set the parameters
          // that differ from the group root.
          var newParams = Object.keys(params).reduce((siblingParams, key) => {
            if (exclusiveParams.includes(key) || params[key] !== rootParams[key]) {
              siblingParams[key] = params[key];
            }

            return siblingParams;
          }, {});
          newGroup[siblingIndex] = _objectSpread(_objectSpread({}, item), {}, {
            params: newParams
          });
        }

        return newGroup;
      });
    };

    var ctx = {
      // Zero-based index (position) of pane, visually
      index: flatIndex,
      // Zero-based index of pane group (within URL structure)
      groupIndex,
      // Zero-based index of pane within sibling group
      siblingIndex,
      // Payload of the current pane
      payload: panePayload,
      // Params of the current pane
      params: paneParams,
      // Whether or not the pane has any siblings (within the same group)
      hasGroupSiblings: getCurrentGroup().length > 1,
      // The length of the current group
      groupLength: getCurrentGroup().length,
      // Current router state for the "panes" property
      routerPanesState: instance.props.router.state.panes || [],
      // Curried StateLink that passes the correct state automatically
      ChildLink,
      // Curried StateLink that passed the correct state, but merges params/payload
      ParameterizedLink,
      // Replaces the current pane with a new one
      replaceCurrent: function replaceCurrent() {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref2.id,
            payload = _ref2.payload,
            params = _ref2.params;

        modifyCurrentGroup(() => [{
          id,
          payload,
          params
        }]);
      },
      // Removes the current pane from the group
      closeCurrent: () => {
        modifyCurrentGroup((siblings, item) => siblings.length > 1 ? siblings.filter(sibling => sibling !== item) : siblings);
      },
      // Duplicate the current pane, with optional overrides for payload, parameters
      duplicateCurrent: options => {
        var _ref3 = options || {},
            payload = _ref3.payload,
            params = _ref3.params;

        modifyCurrentGroup((siblings, item) => {
          var newGroup = siblings.slice();
          newGroup.splice(siblingIndex + 1, 0, _objectSpread(_objectSpread({}, item), {}, {
            payload: payload || item.payload,
            params: params || item.params
          }));
          return newGroup;
        });
      },
      // Set the view for the current pane
      setView: viewId => {
        var view = paneParams.view,
            rest = _objectWithoutProperties(paneParams, _excluded3);

        return setParams(viewId ? _objectSpread(_objectSpread({}, rest), {}, {
          view: viewId
        }) : rest);
      },
      // Set the parameters for the current pane
      setParams,
      // Set the payload for the current pane
      setPayload,
      // Proxied navigation to a given intent. Consider just exposing `router` instead?
      navigateIntent: instance.props.router.navigateIntent
    };
    contexts.set(cacheKey, ctx);
    return ctx;
  };
}

function usePaneRouter() {
  return _react.default.useContext(PaneRouterContext);
}