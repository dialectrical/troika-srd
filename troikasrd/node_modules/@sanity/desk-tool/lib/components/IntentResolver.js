"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntentResolver = void 0;

var _uuid = require("@sanity/uuid");

var _initialValueTemplates = require("@sanity/base/initial-value-templates");

var _react = _interopRequireWildcard(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _router = require("part:@sanity/base/router");

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _versionedClient = require("../versionedClient");

var _resolvePanes = require("../utils/resolvePanes");

var _constants = require("../constants");

var _StructureError = require("./StructureError");

var _excluded = ["type", "id"],
    _excluded2 = ["template"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FALLBACK_ID = '__fallback__';

function removeDraftPrefix(documentId) {
  var publishedId = (0, _draftUtils.getPublishedId)(documentId);

  if (publishedId !== documentId) {
    // eslint-disable-next-line no-console
    console.warn('Removed unexpected draft id in document link: All links to documents should have the `draft.`-prefix removed and something appears to have made an intent link to `%s`', documentId);
  }

  return publishedId;
}
/**
 *
 * This is a *very naive* implementation of an intent resolver:
 * - If type is missing from params, it'll try to resolve from document
 * - It manually builds a pane segment path: "<typeName>;<documentId>"
 * - Tries to resolve that to a structure
 * - Checks if the last pane segment is an editor, and if so; is it the right type/id?
 *   - Yes: Resolves to "<typeName>;<documentId>"
 *   - No : Resolves to fallback edit pane (context-less)
 */
// eslint-disable-next-line complexity


var IntentResolver = /*#__PURE__*/_react.default.memo(function IntentResolver(_ref) {
  var params = _ref.params,
      payload = _ref.payload;

  var _ref2 = params || {},
      specifiedSchemaType = _ref2.type,
      id = _ref2.id,
      otherParams = _objectWithoutProperties(_ref2, _excluded);

  var documentId = id || FALLBACK_ID;

  var _useDocumentType = useDocumentType(documentId, specifiedSchemaType),
      documentType = _useDocumentType.documentType,
      isLoaded = _useDocumentType.isLoaded;

  var paneSegments = documentType ? [[{
    id: documentType,
    params: otherParams
  }], [{
    id: documentId,
    params: otherParams,
    payload
  }]] : undefined;

  var _useStructure = (0, _resolvePanes.useStructure)(paneSegments, {
    silent: true
  }),
      structure = _useStructure.structure,
      error = _useStructure.error;

  if (error) {
    return /*#__PURE__*/_react.default.createElement(_StructureError.StructureError, {
      error: error
    });
  }

  if (!documentType) {
    return isLoaded ? /*#__PURE__*/_react.default.createElement(Redirect, {
      panes: [[{
        id: "__edit__".concat(id || (0, _uuid.uuid)()),
        params: otherParams
      }]]
    }) : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true,
      message: "Resolving document type\u2026",
      delay: 600
    });
  }

  var isLoading = !structure || structure.some(item => item === _constants.LOADING_PANE);

  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true,
      message: "Resolving structure\u2026",
      delay: 600
    });
  }

  var panes = getNewRouterState({
    structure,
    documentType,
    params: otherParams,
    payload,
    paneSegments,
    documentId
  });
  return /*#__PURE__*/_react.default.createElement(Redirect, {
    panes: panes
  });
});

exports.IntentResolver = IntentResolver;

function getNewRouterState(_ref3) {
  var structure = _ref3.structure,
      documentType = _ref3.documentType,
      params = _ref3.params,
      payload = _ref3.payload,
      documentId = _ref3.documentId,
      paneSegments = _ref3.paneSegments;
  var lastChild = structure[structure.length - 1] || {};
  var lastGroup = paneSegments[paneSegments.length - 1];
  var lastSibling = lastGroup[lastGroup.length - 1];
  var terminatesInDocument = lastChild.type === 'document' && lastChild.options.id === documentId;

  var isTemplateCreate = params.template,
      otherParams = _objectWithoutProperties(params, _excluded2);

  var template = isTemplateCreate && (0, _initialValueTemplates.getTemplateById)(params.template);
  var type = template && template.schemaType || documentType;

  var fallbackParameters = _objectSpread(_objectSpread({}, otherParams), {}, {
    type,
    template: params.template
  });

  var newDocumentId = documentId === FALLBACK_ID ? (0, _uuid.uuid)() : removeDraftPrefix(documentId);
  return terminatesInDocument ? paneSegments.slice(0, -1).concat([lastGroup.slice(0, -1).concat(_objectSpread(_objectSpread({}, lastSibling), {}, {
    id: newDocumentId
  }))]) : [[{
    id: "__edit__".concat(newDocumentId),
    params: fallbackParameters,
    payload
  }]];
} // Navigates to passed router panes state on mount


function Redirect(_ref4) {
  var panes = _ref4.panes;
  var router = (0, _router.useRouter)();
  (0, _react.useEffect)(() => {
    router.navigate({
      panes
    }, {
      replace: true
    });
  });
  return /*#__PURE__*/_react.default.createElement(_spinner.default, {
    center: true,
    message: "Redirecting\u2026",
    delay: 600
  });
}

function useDocumentType(documentId, specifiedType) {
  var _useState = (0, _react.useState)({
    isLoaded: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      _useState2$ = _useState2[0],
      documentType = _useState2$.documentType,
      isLoaded = _useState2$.isLoaded,
      setDocumentType = _useState2[1];

  (0, _react.useEffect)(() => {
    var sub = resolveTypeForDocument(documentId, specifiedType).subscribe(typeName => setDocumentType({
      documentType: typeName,
      isLoaded: true
    }));
    return () => sub.unsubscribe();
  });
  return {
    documentType,
    isLoaded
  };
}

function resolveTypeForDocument(id, specifiedType) {
  if (specifiedType) {
    return (0, _rxjs.of)(specifiedType);
  }

  var query = '*[_id in [$documentId, $draftId]]._type';
  var documentId = id.replace(/^drafts\./, '');
  var draftId = "drafts.".concat(documentId);
  return _versionedClient.versionedClient.observable.fetch(query, {
    documentId,
    draftId
  }).pipe((0, _operators.map)(types => types[0]));
}