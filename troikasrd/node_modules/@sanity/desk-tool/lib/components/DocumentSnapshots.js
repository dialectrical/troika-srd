"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentSnapshots = void 0;

var _reactPropsStream = require("react-props-stream");

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _preview = require("part:@sanity/base/preview");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DocumentSnapshots = (0, _reactPropsStream.streamingComponent)(props$ => {
  return props$.pipe((0, _operators.switchMap)(props => (0, _rxjs.merge)((0, _preview.observePaths)((0, _draftUtils.getDraftId)(props.id), props.paths).pipe((0, _operators.map)(draft => ({
    draft
  }))), (0, _preview.observePaths)((0, _draftUtils.getPublishedId)(props.id), props.paths).pipe((0, _operators.map)(published => ({
    published
  })))).pipe((0, _operators.scan)((prev, res) => _objectSpread(_objectSpread({}, prev), res), {}), (0, _operators.filter)(res => 'draft' in res && 'published' in res), (0, _operators.map)(res => props.children(res)))));
});
exports.DocumentSnapshots = DocumentSnapshots;