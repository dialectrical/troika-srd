"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhanceWithReferringDocuments = enhanceWithReferringDocuments;

var _react = _interopRequireDefault(require("react"));

var _withReferringDocuments = require("part:@sanity/base/with-referring-documents");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function enhanceWithReferringDocuments(WrappedComponent) {
  function EnhancedWithReferringDocuments(props) {
    var renderChild = renderProps => {
      var isLoading = renderProps.isLoading,
          referringDocuments = renderProps.referringDocuments;

      var componentProps = _objectSpread(_objectSpread({}, props), {}, {
        referringDocuments,
        isCheckingReferringDocuments: isLoading
      });

      return /*#__PURE__*/_react.default.createElement(WrappedComponent, componentProps);
    };

    return props.published ? /*#__PURE__*/_react.default.createElement(_withReferringDocuments.WithReferringDocuments, {
      id: props.published._id
    }, renderChild) : renderChild({
      referringDocuments: [],
      isLoading: false
    });
  }

  EnhancedWithReferringDocuments.displayName = "enhanceWithReferringDocuments(".concat(WrappedComponent.displayName || WrappedComponent.name || 'WrappedComponent', ")");
  return EnhancedWithReferringDocuments;
}