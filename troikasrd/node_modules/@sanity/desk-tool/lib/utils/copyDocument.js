"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = copyDocument;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function copyReference(reference) {
  return Object.assign({}, reference);
}

function copyObject(object) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.keys(object).reduce((copy, key) => {
    copy[key] = copyAny(object[key], options);
    return copy;
  }, {});
}

function copyArray(array) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return array.map(item => copyAny(item, options)).filter(Boolean);
}

var COPY_AS_IS = ['number', 'string', 'boolean'];

function isReference(value) {
  return value._type === 'reference' || !('_type' in value) && '_ref' in value;
}

function copyAny(value, options) {
  if (Array.isArray(value)) {
    return copyArray(value, options);
  }

  var type = typeof value;

  if (COPY_AS_IS.includes(type)) {
    return value;
  }

  if (!value) {
    return value;
  }

  if ((0, _isObject2.default)(value)) {
    if (isReference(value)) {
      return options.excludeReferences ? undefined : copyReference(value);
    }

    return copyObject(value, options);
  }

  return value;
}

function copyDocument(doc) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var omitProps = ['_id'].concat(options.omit);
  return copyAny((0, _omit2.default)(doc, omitProps), options);
}