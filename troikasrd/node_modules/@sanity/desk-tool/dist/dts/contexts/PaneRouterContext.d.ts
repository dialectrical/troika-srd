import React from 'react';
import { HOCRouter } from 'part:@sanity/base/router';
interface SetParamsOptions {
    recurseIfInherited?: boolean;
}
export declare const exclusiveParams: string[];
declare type PaneSegment = {
    id: string;
    payload?: unknown;
    params?: Record<string, any>;
};
declare type RouterPanesState = Array<PaneSegment[]>;
export interface PaneRouterContextShape {
    index: number;
    groupIndex: number;
    siblingIndex: number;
    payload?: unknown;
    params: Record<string, string>;
    hasGroupSiblings: boolean;
    groupLength: number;
    routerPanesState: RouterPanesState;
    ChildLink: (props: {
        childId: string;
        childParameters: Record<string, any>;
    }) => React.ReactNode;
    ParameterizedLink: (props: {
        params?: Record<string, any>;
        payload?: unknown;
    }) => React.ReactNode;
    replaceCurrent: (pane: {
        id?: string;
        payload?: unknown;
        params?: Record<string, any>;
    }) => void;
    closeCurrent: () => void;
    duplicateCurrent: (pane?: {
        payload?: unknown;
        params?: Record<string, any>;
    }) => void;
    setView: (viewId: string) => void;
    setParams: (params: Record<string, any>, options?: SetParamsOptions) => void;
    setPayload: (payload: unknown) => void;
    navigateIntent: (intentName: string, params: Record<string, any>, options?: {
        replace?: boolean;
    }) => void;
}
export declare const PaneRouterContext: React.Context<PaneRouterContextShape>;
declare type PaneRouterContextFactory = (options: {
    groupIndex: number;
    siblingIndex: number;
    flatIndex: number;
    params: Record<string, any>;
    payload: unknown;
}) => PaneRouterContextShape;
interface DeskToolPanesProps {
    router: typeof HOCRouter;
}
export declare function getPaneRouterContextFactory(instance: React.Component<DeskToolPanesProps>): PaneRouterContextFactory;
export declare function usePaneRouter(): PaneRouterContextShape;
export {};
//# sourceMappingURL=PaneRouterContext.d.ts.map