"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPortableTextFeatures = getPortableTextFeatures;

function getPortableTextFeatures(portabletextType) {
  var _portabletextType$of, _portabletextType$of2;

  if (!portabletextType) {
    throw new Error("Parameter 'portabletextType' missing (required)");
  }

  var blockType = (_portabletextType$of = portabletextType.of) === null || _portabletextType$of === void 0 ? void 0 : _portabletextType$of.find(findBlockType);

  if (!blockType) {
    throw new Error('Block type is not defined in this schema (required)');
  }

  var childrenField = blockType && blockType.fields && blockType.fields.find(field => field.name === 'children');

  if (!childrenField) {
    throw new Error('Children field for block type found in schema (required)');
  }

  var ofType = childrenField.type && childrenField.type.of;

  if (!ofType) {
    throw new Error('Valid types for block children not found in schema (required)');
  }

  var spanType = ofType.find(memberType => memberType.name === 'span');

  if (!spanType) {
    throw new Error('Span type not found in schema (required)');
  }

  var inlineObjectTypes = ofType.filter(memberType => memberType.name !== 'span') || [];
  var blockObjectTypes = ((_portabletextType$of2 = portabletextType.of) === null || _portabletextType$of2 === void 0 ? void 0 : _portabletextType$of2.filter(field => field.name !== blockType.name)) || [];
  var annotations = resolveEnabledAnnotationTypes(spanType);
  return {
    styles: resolveEnabledStyles(blockType),
    decorators: resolveEnabledDecorators(spanType),
    lists: resolveEnabledListItems(blockType),
    annotations: annotations,
    types: {
      block: blockType,
      span: spanType,
      portableText: portabletextType,
      inlineObjects: inlineObjectTypes,
      blockObjects: blockObjectTypes,
      annotations: annotations.map(an => an.type)
    }
  };
}

function resolveEnabledStyles(blockType) {
  var _blockType$fields, _styleField$type$opti, _styleField$type$opti2;

  var styleField = (_blockType$fields = blockType.fields) === null || _blockType$fields === void 0 ? void 0 : _blockType$fields.find(btField => btField.name === 'style');

  if (!styleField) {
    throw new Error("A field with name 'style' is not defined in the block type (required).");
  }

  var textStyles = ((_styleField$type$opti = styleField.type.options) === null || _styleField$type$opti === void 0 ? void 0 : _styleField$type$opti.list) && ((_styleField$type$opti2 = styleField.type.options.list) === null || _styleField$type$opti2 === void 0 ? void 0 : _styleField$type$opti2.filter(style => style.value));

  if (!textStyles || textStyles.length === 0) {
    throw new Error('The style fields need at least one style ' + "defined. I.e: {title: 'Normal', value: 'normal'}.");
  }

  return textStyles;
}

function resolveEnabledAnnotationTypes(spanType) {
  return spanType.annotations.map(annotation => {
    return {
      blockEditor: annotation.blockEditor,
      portableText: annotation.portableText,
      title: annotation.title,
      type: annotation,
      value: annotation.name,
      icon: annotation.icon
    };
  });
}

function resolveEnabledDecorators(spanType) {
  return spanType.decorators;
}

function resolveEnabledListItems(blockType) {
  var _blockType$fields2, _listField$type$optio;

  var listField = (_blockType$fields2 = blockType.fields) === null || _blockType$fields2 === void 0 ? void 0 : _blockType$fields2.find(btField => btField.name === 'list');

  if (!listField) {
    throw new Error("A field with name 'list' is not defined in the block type (required).");
  }

  var listItems = ((_listField$type$optio = listField.type.options) === null || _listField$type$optio === void 0 ? void 0 : _listField$type$optio.list) && listField.type.options.list.filter(list => list.value);

  if (!listItems) {
    throw new Error('The list field need at least to be an empty array');
  }

  return listItems;
}

function findBlockType(type) {
  if (type.type) {
    return findBlockType(type.type);
  }

  if (type.name === 'block') {
    return type;
  }

  return null;
}