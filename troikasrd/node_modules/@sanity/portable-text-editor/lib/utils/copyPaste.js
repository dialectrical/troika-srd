"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setFragmentData = exports.hasEditableTarget = void 0;

var _slate = require("slate");

var _slateReact = require("@sanity/slate-react");

var _values = require("../utils/values");

var _weakMaps = require("./weakMaps");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isDOMText = value => {
  return isDOMNode(value) && value.nodeType === 3;
};

var isDOMNode = value => {
  return value instanceof Node;
};
/**
 * Check if the target is editable and in the editor.
 */


var hasEditableTarget = (editor, target) => {
  return isDOMNode(target) && _slateReact.ReactEditor.hasDOMNode(editor, target, {
    editable: true
  });
};
/**
 * Set the currently selected Portable Text fragment to the clipboard.
 */


exports.hasEditableTarget = hasEditableTarget;

var setFragmentData = (dataTransfer, editor, portableTextFeatures) => {
  var selection = editor.selection;

  if (!selection) {
    return;
  }

  var _Range$edges = _slate.Range.edges(selection),
      _Range$edges2 = _slicedToArray(_Range$edges, 2),
      start = _Range$edges2[0],
      end = _Range$edges2[1];

  var startVoid = _slate.Editor.void(editor, {
    at: start.path
  });

  var endVoid = _slate.Editor.void(editor, {
    at: end.path
  });

  if (_slate.Range.isCollapsed(selection) && !startVoid) {
    return;
  } // Create a fake selection so that we can add a Base64-encoded copy of the
  // fragment to the HTML, to decode on future pastes.


  var domRange = _slateReact.ReactEditor.toDOMRange(editor, selection);

  var contents = domRange.cloneContents();
  var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.

  contents.childNodes.forEach(node => {
    if (node.textContent && node.textContent.trim() !== '') {
      attach = node;
    }
  }); // COMPAT: If the end node is a void node, we need to move the end of the
  // range from the void node's spacer span, to the end of the void node's
  // content, since the spacer is before void's content in the DOM.

  if (endVoid) {
    var _endVoid = _slicedToArray(endVoid, 1),
        voidNode = _endVoid[0];

    var r = domRange.cloneRange();

    var domNode = _slateReact.ReactEditor.toDOMNode(editor, voidNode);

    r.setEndAfter(domNode);
    contents = r.cloneContents();
  } // COMPAT: If the start node is a void node, we need to attach the encoded
  // fragment to the void node's content node instead of the spacer, because
  // attaching it to empty `<div>/<span>` nodes will end up having it erased by
  // most browsers. (2018/04/27)


  if (startVoid) {
    attach = contents.querySelector('[data-slate-spacer]');
  } // Remove any zero-width space spans from the cloned DOM so that they don't
  // show up elsewhere when pasted.


  Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {
    var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';
    zw.textContent = isNewline ? '\n' : '';
  }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up
  // in the HTML, and can be used for intra-Slate pasting. If it's a text
  // node, wrap it in a `<span>` so we have something to set an attribute on.

  if (isDOMText(attach)) {
    var span = document.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style
    // then leading and trailing spaces will be ignored. (2017/09/21)

    span.style.whiteSpace = 'pre';
    span.appendChild(attach);
    contents.appendChild(span);
    attach = span;
  }

  var fragment = (0, _values.fromSlateValue)(_slate.Node.fragment(editor, selection), portableTextFeatures.types.block.name, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor));
  dataTransfer.setData('application/x-portable-text', JSON.stringify(fragment));
};

exports.setFragmentData = setFragmentData;