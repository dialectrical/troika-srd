"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOperationToPatches = createOperationToPatches;

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _omitBy2 = _interopRequireDefault(require("lodash/omitBy"));

var _slate = require("slate");

var _PatchEvent = require("../patch/PatchEvent");

var _values = require("./values");

var _debug = require("./debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('operationToPatches'); // TODO: optimize how nodes are found and make sure everything here uses those finders.

function findBlock(path, value) {
  var _key = typeof path[0] === 'object' && '_key' in path[0] && path[0]._key;

  if (_key) {
    return value === null || value === void 0 ? void 0 : value.find(blk => blk._key === _key);
  }

  if (Number.isInteger(path[0])) {
    var index = path[0];
    return value && value[index];
  }

  throw new Error('Invalid first path segment');
}

function createOperationToPatches(portableTextFeatures) {
  function insertTextPatch(editor, operation, beforeValue) {
    var block = editor && editor.children[operation.path[0]];

    if (!block) {
      throw new Error('Could not find block');
    }

    if (typeof block._key !== 'string') {
      throw new Error('Expected block to have a _key');
    }

    var child = block && Array.isArray(block.children) && block.children[operation.path[1]];

    if (!child) {
      throw new Error('Could not find child');
    }

    var path = [{
      _key: block._key
    }, 'children', {
      _key: child._key
    }, 'text'];
    var prevBlock = findBlock(operation.path, beforeValue);
    var prevText = prevBlock && prevBlock.children && prevBlock.children[operation.path[1]] && prevBlock.children[operation.path[1]].text;
    return [(0, _PatchEvent.diffMatchPatch)(prevText || '', child.text, path)];
  }

  function removeTextPatch(editor, operation, beforeValue) {
    var block = editor && editor.children[operation.path[0]];

    if (!block) {
      throw new Error('Could not find block');
    }

    if (typeof block._key !== 'string') {
      throw new Error('Expected block to have a _key');
    }

    var child = block && Array.isArray(block.children) && block.children[operation.path[1]];

    if (!child) {
      throw new Error('Could not find child');
    }

    var path = [{
      _key: block._key
    }, 'children', {
      _key: child._key
    }, 'text'];
    var prevText = beforeValue[operation.path[0]] && beforeValue[operation.path[0]].children && beforeValue[operation.path[0]].children[operation.path[1]] && beforeValue[operation.path[0]].children[operation.path[1]].text;
    return [(0, _PatchEvent.diffMatchPatch)(prevText || '', child.text, path)];
  }

  function setNodePatch(editor, operation) {
    if (operation.path.length === 1) {
      var block = editor.children[operation.path[0]];

      if (typeof block._key !== 'string') {
        throw new Error('Expected block to have a _key');
      }

      var setNode = (0, _omitBy2.default)(_objectSpread(_objectSpread({}, editor.children[operation.path[0]]), operation.newProperties), _isUndefined2.default);
      return [(0, _PatchEvent.set)((0, _values.fromSlateValue)([setNode], portableTextFeatures.types.block.name)[0], [{
        _key: block._key
      }])];
    } else if (operation.path.length === 2) {
      var _block = editor.children[operation.path[0]];

      if (_slate.Editor.isBlock(editor, _block) && typeof _block._key === 'string') {
        var child = _block.children[operation.path[1]];

        if (child && typeof child._key === 'string') {
          var blockKey = _block._key;
          var childKey = child._key;
          var patches = [];
          Object.keys(operation.newProperties).forEach(key => {
            patches.push((0, _PatchEvent.set)(operation.newProperties[key], [{
              _key: blockKey
            }, 'children', {
              _key: childKey
            }, key]));
          });
          return patches;
        }

        throw new Error('Could not find a valid child');
      }

      throw new Error('Could not find a valid block');
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path)));
    }
  }

  function insertNodePatch(editor, operation, beforeValue) {
    var block = beforeValue[operation.path[0]];

    if (operation.path.length === 1) {
      var position = operation.path[0] === 0 ? 'before' : 'after';
      var targetKey = operation.path[0] === 0 ? block && block._key : beforeValue[operation.path[0] - 1] && beforeValue[operation.path[0] - 1]._key;

      if (targetKey) {
        return [(0, _PatchEvent.insert)([(0, _values.fromSlateValue)([operation.node], portableTextFeatures.types.block.name)[0]], position, [{
          _key: targetKey
        }])];
      }

      if (beforeValue.length === 0) {
        return [(0, _PatchEvent.setIfMissing)(beforeValue, []), (0, _PatchEvent.insert)([(0, _values.fromSlateValue)([operation.node], portableTextFeatures.types.block.name)[0]], 'before', [operation.path[0]])];
      }

      throw new Error('Target key not found!');
    } else if (operation.path.length === 2 && editor.children[operation.path[0]]) {
      var _position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after';

      var child = (0, _values.fromSlateValue)([{
        _key: 'bogus',
        _type: portableTextFeatures.types.block.name,
        children: [_objectSpread(_objectSpread({}, operation.node), {}, {
          _type: operation.node._type || portableTextFeatures.types.span.name
        })]
      }], portableTextFeatures.types.block.name)[0].children[0];
      return [(0, _PatchEvent.insert)([child], _position, [{
        _key: block._key
      }, 'children', block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {
        _key: block.children[operation.path[1] - 1]._key
      }])];
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path), " - ").concat(JSON.stringify(beforeValue)));
    }
  }

  function splitNodePatch(editor, operation, beforeValue) {
    var patches = [];
    var splitBlock = editor.children[operation.path[0]];

    if (!_slate.Editor.isBlock(editor, splitBlock) || typeof splitBlock._key !== 'string') {
      throw new Error("Block with path ".concat(JSON.stringify(operation.path[0]), " could not be found"));
    }

    if (operation.path.length === 1) {
      var oldBlock = beforeValue[operation.path[0]];

      if (oldBlock && oldBlock._key) {
        var targetValue = editor.children[operation.path[0] + 1];

        if (targetValue) {
          patches.push((0, _PatchEvent.insert)([targetValue], 'after', [{
            _key: splitBlock._key
          }]));
          var spansToUnset = beforeValue[operation.path[0]].children.slice(operation.position);
          spansToUnset.forEach(span => {
            var path = [{
              _key: oldBlock._key
            }, 'children', {
              _key: span._key
            }];
            patches.push((0, _PatchEvent.unset)(path));
          });
        }
      }

      return patches;
    }

    if (operation.path.length === 2) {
      var splitSpan = splitBlock.children[operation.path[1]];

      if (typeof splitSpan._key !== 'string') {
        throw new Error('Span is missing _key');
      }

      var targetSpans = splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2);
      patches.push((0, _PatchEvent.insert)(targetSpans, 'after', [{
        _key: splitBlock._key
      }, 'children', {
        _key: splitSpan._key
      }]));
      patches.push((0, _PatchEvent.set)(splitSpan.text, [{
        _key: splitBlock._key
      }, 'children', {
        _key: splitSpan._key
      }, 'text']));
      return patches;
    }

    return patches;
  }

  function removeNodePatch(_, operation, beforeValue) {
    var block = beforeValue[operation.path[0]];

    if (operation.path.length === 1) {
      // Remove a single block
      if (block && block._key) {
        return [(0, _PatchEvent.unset)([{
          _key: block._key
        }])];
      }

      throw new Error('Block not found');
    } else if (operation.path.length === 2) {
      var spanToRemove = block && block.children && block.children[operation.path[1]];

      if (spanToRemove) {
        return [(0, _PatchEvent.unset)([{
          _key: block._key
        }, 'children', {
          _key: spanToRemove._key
        }])];
      } // If it was not there before, do nothing


      debug('Span not found in editor trying to remove node');
      return [];
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path)));
    }
  }

  function mergeNodePatch(editor, operation, beforeValue) {
    var patches = [];

    if (operation.path.length === 1) {
      var block = beforeValue[operation.path[0]];
      var targetKey = block && block._key;

      if (targetKey) {
        var newBlock = (0, _values.fromSlateValue)([editor.children[operation.path[0] - 1]], portableTextFeatures.types.block.name)[0];
        patches.push((0, _PatchEvent.set)(newBlock, [{
          _key: newBlock._key
        }]));
        patches.push((0, _PatchEvent.unset)([{
          _key: targetKey
        }]));
      } else {
        throw new Error('Targetkey not found!');
      }
    } else if (operation.path.length === 2) {
      var _block2 = beforeValue[operation.path[0]];
      var mergedSpan = _block2.children[operation.path[1]];
      var targetBlock = editor.children[operation.path[0]];

      if (!_slate.Editor.isBlock(editor, targetBlock)) {
        throw new Error('Block expected');
      }

      if (typeof targetBlock._key !== 'string') {
        throw new Error('Expected block to have a _key');
      }

      var targetSpan = targetBlock.children[operation.path[1] - 1];

      if (typeof targetSpan._key !== 'string') {
        throw new Error('Expected span to have a _key');
      } // Set the merged span with it's new value


      patches.push((0, _PatchEvent.set)(targetSpan.text, [{
        _key: _block2._key
      }, 'children', {
        _key: targetSpan._key
      }, 'text']));
      patches.push((0, _PatchEvent.unset)([{
        _key: _block2._key
      }, 'children', {
        _key: mergedSpan._key
      }]));
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path)));
    }

    return patches;
  }

  function moveNodePatch(editor, operation, beforeValue) {
    var patches = [];
    var block = beforeValue[operation.path[0]];
    var targetBlock = beforeValue[operation.newPath[0]];

    if (operation.path.length === 1) {
      var position = operation.path[0] > operation.newPath[0] ? 'before' : 'after';
      patches.push((0, _PatchEvent.unset)([{
        _key: block._key
      }]));
      patches.push((0, _PatchEvent.insert)([(0, _values.fromSlateValue)([block], portableTextFeatures.types.block.name)[0]], position, [{
        _key: targetBlock._key
      }]));
    } else if (operation.path.length === 2) {
      var child = block.children[operation.path[1]];
      var targetChild = targetBlock.children[operation.newPath[1]];

      var _position2 = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before';

      var childToInsert = (0, _values.fromSlateValue)([block], portableTextFeatures.types.block.name)[0].children[operation.path[1]];
      patches.push((0, _PatchEvent.unset)([{
        _key: block._key
      }, 'children', {
        _key: child._key
      }]));
      patches.push((0, _PatchEvent.insert)([childToInsert], _position2, [{
        _key: targetBlock._key
      }, 'children', {
        _key: targetChild._key
      }]));
    }

    return patches;
  }

  return {
    insertNodePatch,
    insertTextPatch,
    mergeNodePatch,
    moveNodePatch,
    removeNodePatch,
    removeTextPatch,
    setNodePatch,
    splitNodePatch
  };
}