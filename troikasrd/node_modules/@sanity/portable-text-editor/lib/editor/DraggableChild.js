"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DraggableChild = void 0;

var _react = _interopRequireWildcard(require("react"));

var _slate = require("slate");

var _slateReact = require("@sanity/slate-react");

var _debug = require("../utils/debug");

var _weakMaps = require("../utils/weakMaps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('components:DraggableChild');
var debugRenders = false;

var DraggableChild = _ref => {
  var children = _ref.children,
      element = _ref.element,
      readOnly = _ref.readOnly,
      spanType = _ref.spanType,
      keyGenerator = _ref.keyGenerator;
  var editor = (0, _slateReact.useEditor)();
  var dragGhostRef = (0, _react.useRef)();
  var isInline = (0, _react.useMemo)(() => _slate.Editor.isInline(editor, element), []);
  var isVoid = (0, _react.useMemo)(() => _slate.Editor.isVoid(editor, element), []);
  var isSpan = element._type === spanType;

  if (debugRenders) {
    debug('render');
  }

  if (readOnly && !(isSpan || isInline)) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  } // Note: this is called not for the dragging block, but for the targets when the block is dragged over them


  var handleDragOver = event => {
    var isMyDragOver = _weakMaps.IS_DRAGGING_CHILD_ELEMENT.get(editor);

    if (!isMyDragOver) {
      return;
    }

    debug('handle drag over');
    event.preventDefault(); // Needed to get the dropEffect showing

    event.dataTransfer.dropEffect = 'move';
    var domRange;
    var _window = window,
        document = _window.document;
    var x = event.clientX,
        y = event.clientY; // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2020-05-14)

    if (document.caretRangeFromPoint) {
      domRange = document.caretRangeFromPoint(x, y);
    } else if (document.caretPositionFromPoint) {
      var position = document.caretPositionFromPoint(x, y);

      if (position) {
        domRange = document.createRange();
        domRange.setStart(position.offsetNode, position.offset);
        domRange.setEnd(position.offsetNode, position.offset);
      }
    }

    if (!domRange) {
      throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
    } // Resolve a Slate range from the DOM range.


    var range = _slateReact.ReactEditor.toSlateRange(editor, domRange);

    if (range) {
      _weakMaps.IS_DRAGGING_ELEMENT_RANGE.set(editor, range);

      _slate.Transforms.select(editor, range);
    }
  }; // Note: this is called for the dragging child


  var handleDragEnd = event => {
    _weakMaps.IS_DRAGGING.set(editor, false);

    event.preventDefault();
    event.stopPropagation();

    if (dragGhostRef.current) {
      debug('Removing drag ghost');
      document.body.removeChild(dragGhostRef.current);
    }

    var range = _weakMaps.IS_DRAGGING_ELEMENT_RANGE.get(editor);

    if (range && editor.selection) {
      debug('Removing and inserting');

      var dupedElement = _objectSpread(_objectSpread({}, element), {}, {
        _key: keyGenerator()
      });

      _slate.Transforms.insertNodes(editor, dupedElement, {
        at: range,
        select: true
      });

      _slate.Transforms.removeNodes(editor, {
        at: [],
        match: n => n._key === element._key,
        mode: 'lowest'
      });

      editor.onChange();
    }

    _weakMaps.IS_DRAGGING_ELEMENT_RANGE.delete(editor);

    _weakMaps.IS_DRAGGING_CHILD_ELEMENT.delete(editor);
  }; // Note: this is called for the dragging child


  var handleDragStart = event => {
    debug('Drag start');

    if (!isVoid) {
      debug('Not dragging child');

      _weakMaps.IS_DRAGGING.set(editor, false);

      return;
    }

    event.dataTransfer.effectAllowed = 'move';

    _weakMaps.IS_DRAGGING.set(editor, true);

    _weakMaps.IS_DRAGGING_CHILD_ELEMENT.set(editor, element); // Specify dragImage so that single elements in the preview will not be the drag image,
    // but always the whole block preview itself.
    // Also clone it so that it will not be visually clipped by scroll-containers etc.


    var elm = event.currentTarget;

    if (elm && elm instanceof HTMLElement) {
      var dragGhost = elm.cloneNode(true);
      dragGhostRef.current = dragGhost;
      dragGhost.style.width = "".concat(elm.clientWidth, "px");
      dragGhost.style.height = "".concat(elm.clientHeight, "px");
      dragGhost.style.position = 'absolute';
      dragGhost.style.top = '-99999px';
      dragGhost.style.left = '-99999px';

      if (document.body) {
        document.body.appendChild(dragGhost);
        var rect = elm.getBoundingClientRect();

        var _x = event.clientX - rect.left;

        var _y = event.clientY - rect.top;

        dragGhost.style.width = "".concat(rect.width, "px");
        dragGhost.style.height = "".concat(rect.height, "px");
        event.dataTransfer.setDragImage(dragGhost, _x, _y);
      }
    }
  };

  if (isSpan) {
    return /*#__PURE__*/_react.default.createElement("span", {
      onDragOver: handleDragOver
    }, children);
  }

  var stopEventIfVoid = event => {
    if (isVoid) {
      event.stopPropagation();
      event.preventDefault();
    }
  };

  return /*#__PURE__*/_react.default.createElement("span", {
    draggable: isVoid,
    onDragStart: handleDragStart,
    onDragOver: handleDragOver,
    onDragEnd: handleDragEnd,
    onDrop: stopEventIfVoid
  }, children);
};

exports.DraggableChild = DraggableChild;