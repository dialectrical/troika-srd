"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithPortableTextBlockStyle = createWithPortableTextBlockStyle;

var _slate = require("slate");

var _debug = require("../../utils/debug");

var _selection = require("../../utils/selection");

var _excluded = ["style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('plugin:withPortableTextBlockStyle');

function createWithPortableTextBlockStyle(portableTextFeatures, change$) {
  return function withPortableTextBlockStyle(editor) {
    var normalStyle = portableTextFeatures.styles[0].value; // Extend Slate's default normalization to reset split node to normal style
    // if there is no text at the right end of the split.

    var normalizeNode = editor.normalizeNode;

    editor.normalizeNode = nodeEntry => {
      normalizeNode(nodeEntry);

      var _nodeEntry = _slicedToArray(nodeEntry, 2),
          path = _nodeEntry[1];

      var _iterator = _createForOfIteratorHelper(editor.operations),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var op = _step.value;

          if (op.type === 'split_node' && op.path.length === 1 && op.properties.style !== normalStyle && op.path[0] === path[0] && !_slate.Path.equals(path, op.path)) {
            var _Editor$node = _slate.Editor.node(editor, [op.path[0] + 1, 0]),
                _Editor$node2 = _slicedToArray(_Editor$node, 1),
                child = _Editor$node2[0];

            if (child.text === '') {
              debug("Normalizing split node to ".concat(normalStyle, " style"), op);

              _slate.Transforms.setNodes(editor, {
                style: normalStyle
              }, {
                at: [op.path[0] + 1],
                voids: false
              });

              break;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };

    editor.pteHasBlockStyle = style => {
      if (!editor.selection) {
        return false;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => _slate.Element.isElement(node) && node.style === style
      })];

      if (selectedBlocks.length > 0) {
        return true;
      }

      return false;
    };

    editor.pteToggleBlockStyle = blockStyle => {
      if (!editor.selection) {
        return;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => _slate.Element.isElement(node) && node._type === portableTextFeatures.types.block.name
      })];
      selectedBlocks.forEach(_ref => {
        var _ref2 = _slicedToArray(_ref, 2),
            node = _ref2[0],
            path = _ref2[1];

        var style = node.style,
            rest = _objectWithoutProperties(node, _excluded);

        if (node.style === blockStyle) {
          debug("Unsetting block style '".concat(blockStyle, "'"));

          _slate.Transforms.setNodes(editor, _objectSpread(_objectSpread({}, rest), {}, {
            style: undefined
          }), {
            at: path
          });
        } else {
          var defaultStyle = portableTextFeatures.styles[0] && portableTextFeatures.styles[0].value;

          if (blockStyle) {
            debug("Setting style '".concat(blockStyle, "'"));
          } else {
            debug('Setting default style', defaultStyle);
          }

          _slate.Transforms.setNodes(editor, _objectSpread(_objectSpread({}, rest), {}, {
            style: blockStyle || defaultStyle
          }), {
            at: path
          });
        }
      }); // Emit a new selection here (though it might be the same).
      // Toolbars and similar on the outside may rely on selection changes to update themselves.

      change$.next({
        type: 'selection',
        selection: (0, _selection.toPortableTextRange)(editor)
      });
      editor.onChange();
    };

    return editor;
  };
}