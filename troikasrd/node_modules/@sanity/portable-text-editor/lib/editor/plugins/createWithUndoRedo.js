"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithUndoRedo = createWithUndoRedo;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _slate = require("slate");

var DMP = _interopRequireWildcard(require("diff-match-patch"));

var _debug = require("../../utils/debug");

var _withoutPatching = require("../../utils/withoutPatching");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('plugin:withUndoRedo'); // eslint-disable-next-line new-cap

var dmp = new DMP.diff_match_patch();
var SAVING = new WeakMap();
var MERGING = new WeakMap();
var UNDO_STEP_LIMIT = 300;

var isMerging = editor => {
  return MERGING.get(editor);
};

var isSaving = editor => {
  if (!(0, _withoutPatching.isPatching)(editor)) {
    return false;
  }

  return SAVING.get(editor);
};

function createWithUndoRedo(incomingPatche$) {
  // Subscribe to incoming patches
  var incomingPatches = [];

  if (incomingPatche$) {
    incomingPatche$.subscribe(patch => {
      incomingPatches.push({
        patch: patch,
        time: new Date()
      });
    });
  }

  return editor => {
    editor.history = {
      undos: [],
      redos: []
    };
    var apply = editor.apply; // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor

    editor.apply = op => {
      var operations = editor.operations,
          history = editor.history;
      var undos = history.undos;
      var step = undos[undos.length - 1];
      var lastOp = step && step.operations && step.operations[step.operations.length - 1];
      var overwrite = shouldOverwrite(op, lastOp);
      var save = isSaving(editor);
      var merge = isMerging(editor);

      if (save == null) {
        save = shouldSave(op, lastOp);
      }

      if (save) {
        if (merge == null) {
          if (step == null) {
            merge = false; // eslint-disable-next-line no-negated-condition
          } else if (operations.length !== 0) {
            merge = true;
          } else {
            merge = shouldMerge(op, lastOp) || overwrite;
          }
        }

        if (step && merge) {
          if (overwrite) {
            step.operations.pop();
          }

          step.operations.push(op);
        } else {
          var stp = {
            operations: [...(editor.selection === null ? [] : [createSelectOperation(editor)]), op],
            timestamp: new Date()
          };
          undos.push(stp);
          debug('Created new undo step', step);
        }

        while (undos.length > UNDO_STEP_LIMIT) {
          undos.shift();
        }

        if (shouldClear(op)) {
          history.redos = [];
        }
      }

      apply(op);
    };

    editor.undo = () => {
      var undos = editor.history.undos;

      if (undos.length > 0) {
        var step = undos[undos.length - 1];
        debug('Undoing', step);

        if (step.operations.length > 0) {
          var otherPatches = [...incomingPatches.filter(item => item.time > step.timestamp)];
          var transformedOperations = step.operations;
          otherPatches.forEach(item => {
            transformedOperations = (0, _flatten2.default)(transformedOperations.map(op => transformOperation(editor, item.patch, op)));
          });
          withoutSaving(editor, () => {
            _slate.Editor.withoutNormalizing(editor, () => {
              transformedOperations.map(_slate.Operation.inverse).reverse().forEach(op => {
                // TODO: stop trying this, and have a perfect transformation!
                try {
                  editor.apply(op);
                } catch (err) {
                  debug('Could not perform undo step', err);
                  editor.history.redos.push(step);
                  editor.history.undos.pop();
                }
              });
            });
          });
        }

        editor.history.redos.push(step);
        editor.history.undos.pop();
        editor.onChange();
      }
    };

    editor.redo = () => {
      var redos = editor.history.redos;

      if (redos.length > 0) {
        var step = redos[redos.length - 1];
        debug('Redoing', step);

        if (step.operations.length > 0) {
          var otherPatches = incomingPatches.filter(item => item.time > step.timestamp);
          var transformedOperations = step.operations;
          otherPatches.forEach(item => {
            transformedOperations = (0, _flatten2.default)(transformedOperations.map(op => transformOperation(editor, item.patch, op)));
          });
          withoutSaving(editor, () => {
            _slate.Editor.withoutNormalizing(editor, () => {
              transformedOperations.forEach(op => {
                try {
                  editor.apply(op);
                } catch (err) {
                  debug('Could not perform redo step', err);
                  editor.history.undos.push(step);
                  editor.history.redos.pop();
                }
              });
            });
          });
        }

        editor.history.undos.push(step);
        editor.history.redos.pop();
        editor.onChange();
      }
    }; // Plugin return


    return editor;
  };
} // This will adjust the user selection according to patcehes done by others.
// TODO: complete all necessary steps of the algorithm and write tests.
// eslint-disable-next-line max-statements


function transformOperation(editor, patch, operation) {
  // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)
  var transformedOperation = _objectSpread({}, operation);

  if (patch.type === 'insert' && patch.path.length === 1) {
    return [adjustBlockPath(editor, patch, operation, patch.items.length)];
  }

  if (patch.type === 'unset' && patch.path.length === 1) {
    return [adjustBlockPath(editor, patch, operation, -1)];
  } // Someone reset the whole value


  if (patch.type === 'unset' && patch.path.length === 0) {
    debug("Adjusting selection for unset everything patch and ".concat(operation.type, " operation"));
    return [];
  }

  if (patch.type === 'diffMatchPatch') {
    var blockIndex = editor.children.findIndex(blk => (0, _isEqual2.default)({
      _key: blk._key
    }, patch.path[0]));
    var block = editor.children[blockIndex];

    if (block && Array.isArray(block.children)) {
      var childIndex = block.children.findIndex(child => (0, _isEqual2.default)({
        _key: child._key
      }, patch.path[2]));
      var parsed = dmp.patch_fromText(patch.value)[0];

      if (!parsed) {
        debug('Could not parse diffMatchPatch', patch);
        return [operation];
      }

      var distance = parsed.length2 - parsed.length1;
      var patchIsRemovingText = parsed.diffs.some(diff => diff[0] === -1);

      if (operation.type === 'split_node' && operation.path.length > 1) {
        var splitOperation = transformedOperation;

        if (patchIsRemovingText) {
          splitOperation.position -= distance;
        } else {
          splitOperation.position += distance;
        }

        return [splitOperation];
      }

      if (_slate.Path.isPath(operation.path) && operation.path[0] !== undefined && operation.path[0] === blockIndex && operation.path[1] === childIndex) {
        if (operation.type === 'insert_text') {
          var insertOffset = 0;

          var _iterator = _createForOfIteratorHelper(parsed.diffs),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var diff = _step.value;

              if (diff[0] === 0) {
                insertOffset = diff[1].length;
              }

              if (diff[0] === 1) {
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {
            var insertTextOperation = transformedOperation;
            insertTextOperation.offset += distance;
            transformedOperation = insertTextOperation;
          } // TODO: deal with overlapping ranges


          return [transformedOperation];
        }

        if (operation.type === 'remove_text') {
          var _insertOffset = 0;

          var _iterator2 = _createForOfIteratorHelper(parsed.diffs),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _diff = _step2.value;

              if (_diff[0] === 0) {
                _insertOffset = _diff[1].length;
              }

              if (_diff[0] === -1) {
                break;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          if (parsed.start1 !== null && _insertOffset + parsed.start1 <= operation.offset) {
            var removeTextOperation = transformedOperation;
            removeTextOperation.offset -= distance;
            transformedOperation = removeTextOperation;
          }

          return [transformedOperation];
        }
      } // // Selection operations with diffPatchMatch
      // if (operation.type === 'set_selection') {
      //   const newProperties = transformedOperation.newProperties
      //   if (newProperties && patchIsRemovingText) {
      //     newProperties.offset = newProperties.offset - distance
      //   } else if (newProperties) {
      //     newProperties.offset = newProperties.offset + distance
      //   }
      //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]
      // }

    } // TODO: transform this?
    // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {
    //   console.log('set_selection other', JSON.stringify(patch))
    // }

  }

  return [operation];
}

function adjustBlockPath(editor, patch, operation, level) {
  var transformedOperation = _objectSpread({}, operation);

  var myIndex = editor.children.findIndex(blk => (0, _isEqual2.default)({
    _key: blk._key
  }, patch.path[0]));

  if (myIndex >= 0 && Array.isArray(operation.path) && operation.path[0] !== undefined && operation.path[0] >= myIndex + level) {
    var newPath = [operation.path[0] + level, ...operation.path.slice(1)];
    debug("Adjusting ".concat(operation.type, " for block ").concat(patch.type), operation.path, newPath);
    transformedOperation.path = newPath;
  }

  return transformedOperation;
} // Helper functions for editor.apply above


var shouldMerge = (op, prev) => {
  if (op.type === 'set_selection') {
    return true;
  } // Text input


  if (prev && op.type === 'insert_text' && prev.type === 'insert_text' && op.offset === prev.offset + prev.text.length && _slate.Path.equals(op.path, prev.path) && op.text !== ' ' // Tokenize between words
  ) {
    return true;
  } // Text deletion


  if (prev && op.type === 'remove_text' && prev.type === 'remove_text' && op.offset + op.text.length === prev.offset && _slate.Path.equals(op.path, prev.path)) {
    return true;
  } // Don't merge


  return false;
};

var shouldSave = (op, prev) => {
  if (op.type === 'set_selection' && op.newProperties === null) {
    return false;
  }

  return true;
};

var shouldOverwrite = (op, prev) => {
  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {
    return true;
  }

  return false;
};

var shouldClear = op => {
  if (op.type === 'set_selection') {
    return false;
  }

  return true;
};

function withoutSaving(editor, fn) {
  var prev = isSaving(editor);
  SAVING.set(editor, false);
  fn();
  SAVING.set(editor, prev);
}

function createSelectOperation(editor) {
  return {
    type: 'set_selection',
    properties: _objectSpread({}, editor.selection),
    newProperties: _objectSpread({}, editor.selection)
  };
}