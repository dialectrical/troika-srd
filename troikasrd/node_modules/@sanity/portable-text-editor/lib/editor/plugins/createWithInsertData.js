"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithInsertData = createWithInsertData;

var _slate = require("slate");

var _blockTools = require("@sanity/block-tools");

var _values = require("../../utils/values");

var _validateValue = require("../../utils/validateValue");

var _debug = require("../../utils/debug");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('plugin:withInsertData');
/**
 * This plugin handles pasting and drag/drop to the editor
 *
 */

function createWithInsertData(change$, portableTextFeatures, keyGenerator) {
  return function withInsertData(editor) {
    var setFragmentData = editor.setFragmentData;

    editor.setFragmentData = data => {
      debug('Set fragment data');
      setFragmentData(data);
    };

    editor.getFragment = () => {
      debug('Get fragment data');

      if (editor.selection) {
        var fragment = _slate.Node.fragment(editor, editor.selection).map(node => {
          var newNode = _objectSpread({}, node); // Ensure the copy has new keys


          if (newNode.markDefs && Array.isArray(newNode.markDefs)) {
            newNode.markDefs = newNode.markDefs.map(def => {
              var oldKey = def._key;
              var newKey = keyGenerator();

              if (Array.isArray(newNode.children)) {
                newNode.children = newNode.children.map(child => child._type === portableTextFeatures.types.span.name ? _objectSpread(_objectSpread({}, child), {}, {
                  marks: child.marks.includes(oldKey) ? // eslint-disable-next-line max-nested-callbacks
                  [...child.marks].filter(mark => mark !== oldKey).concat(newKey) : child.marks
                }) : child);
              }

              return _objectSpread(_objectSpread({}, def), {}, {
                _key: newKey
              });
            });
          }

          var nodeWithNewKeys = _objectSpread(_objectSpread({}, newNode), {}, {
            _key: keyGenerator()
          });

          if (Array.isArray(nodeWithNewKeys.children)) {
            nodeWithNewKeys.children = nodeWithNewKeys.children.map(child => _objectSpread(_objectSpread({}, child), {}, {
              _key: keyGenerator()
            }));
          }

          return nodeWithNewKeys;
        });

        return fragment;
      }

      return [];
    };

    editor.insertData = data => {
      if (!editor.selection) {
        debug('No selection, not inserting');
        return;
      }

      change$.next({
        type: 'loading',
        isLoading: true
      }); // This could potenitally take some time

      var html = data.getData('text/html');
      var slateFragment = data.getData('application/x-slate-fragment');
      var text = data.getData('text/plain'); // TODO: support application/x-portable-text ?
      // const portableText = data.getData('application/x-portable-text')
      // if (portableText) {
      //   const parsed = JSON.parse(portableText)
      //   if (Array.isArray(parsed) && parsed.length > 0) {
      //     debug('inserting portable text', parsed)
      //     return true
      //   }
      // }

      var originalSelection = _objectSpread({}, editor.selection);

      var isBackward = _slate.Range.isBackward(editor.selection);

      if (slateFragment || html || text) {
        var portableText;
        var fragment;
        var insertedType;

        if (slateFragment) {
          // Slate fragments
          var decoded = decodeURIComponent(window.atob(slateFragment));
          fragment = JSON.parse(decoded);
          portableText = (0, _values.fromSlateValue)(fragment, portableTextFeatures.types.block.name);
          insertedType = 'Slate Fragment';
        } else if (html) {
          // HTML (TODO: get rid of @sanity/block-tools)
          portableText = (0, _blockTools.htmlToBlocks)(html, portableTextFeatures.types.portableText) // Ensure it has keys
          .map(block => (0, _blockTools.normalizeBlock)(block, {
            blockTypeName: portableTextFeatures.types.block.name
          }));
          fragment = (0, _values.toSlateValue)(portableText, portableTextFeatures.types.block.name);
          insertedType = 'HTML';
        } else {
          // plain text
          var blocks = escapeHtml(text).split(/\n{2,}/).map(line => line ? "<p>".concat(line.replace(/(?:\r\n|\r|\n)/g, '<br/>'), "</p>") : '<p></p>').join('');
          var textToHtml = "<html><body>".concat(blocks, "</body></html>");
          portableText = (0, _blockTools.htmlToBlocks)(textToHtml, portableTextFeatures.types.portableText);
          fragment = (0, _values.toSlateValue)(portableText, portableTextFeatures.types.block.name);
          insertedType = 'text';
        } // Validate the result


        var validation = (0, _validateValue.validateValue)(portableText, portableTextFeatures, keyGenerator); // Bail out if it's not valid

        if (!validation.valid) {
          var _validation$resolutio;

          var errorDescription = "Could not validate the resulting portable text to insert.\n".concat((_validation$resolutio = validation.resolution) === null || _validation$resolutio === void 0 ? void 0 : _validation$resolutio.description, "\nTry to insert as plain text (shift-paste) instead.");
          change$.next({
            type: 'error',
            level: 'warning',
            name: 'pasteError',
            description: errorDescription,
            data: validation
          });
          debug('Invalid insert result', validation);
          return;
        }

        var insertAtPath = editor.selection[isBackward ? 'focus' : 'anchor'].path.slice(0, 1);
        debug("Inserting ".concat(insertedType, " fragment at ").concat(JSON.stringify(insertAtPath)), fragment);

        var _Editor$node = _slate.Editor.node(editor, editor.selection, {
          depth: 1
        }),
            _Editor$node2 = _slicedToArray(_Editor$node, 1),
            focusBlock = _Editor$node2[0];

        var focusIsVoid = _slate.Editor.isVoid(editor, focusBlock);

        if (focusIsVoid) {
          // Insert at path below the void block as we can't insert *into* it.
          insertAtPath = [insertAtPath[0] + 1];
        }

        fragment.forEach((blk, blkIndex) => {
          var markDefs = blk.markDefs;

          if (fragment[0] === blk && !focusIsVoid) {
            var isVoid = _slate.Editor.isVoid(editor, fragment[0]);

            var isEmptyText = (0, _values.isEqualToEmptyEditor)([focusBlock], portableTextFeatures);

            if (isEmptyText && isVoid) {
              _slate.Transforms.insertFragment(editor, [blk], {
                at: insertAtPath
              });

              _slate.Transforms.removeNodes(editor, {
                at: insertAtPath
              });

              if (fragment.length === 1) {
                _slate.Transforms.setSelection(editor, {
                  focus: {
                    path: insertAtPath,
                    offset: 0
                  },
                  anchor: {
                    path: insertAtPath,
                    offset: 0
                  }
                });
              }
            } else {
              _slate.Transforms.insertFragment(editor, [blk]);
            }

            if (!focusIsVoid && !isVoid) {
              // As the first block will be inserted into another block (potentially), mix those markDefs
              _slate.Transforms.setNodes(editor, {
                markDefs: [...(Array.isArray(focusBlock.markDefs) ? focusBlock.markDefs : []), ...(Array.isArray(markDefs) ? markDefs : [])]
              }, {
                at: insertAtPath
              }); // If the focus block is not empty, use the style from the block.


              if (isEmptyText || originalSelection.anchor.path[0] === 0 && originalSelection.anchor.path[1] === 0 && originalSelection.anchor.offset === 0) {
                _slate.Transforms.setNodes(editor, {
                  style: blk.style
                }, {
                  at: insertAtPath
                });
              } else {
                _slate.Transforms.setNodes(editor, {
                  style: focusBlock.style
                }, {
                  at: insertAtPath
                });
              }
            }
          } else {
            if (blkIndex === 1) {
              _slate.Transforms.splitNodes(editor);
            }

            _slate.Transforms.insertNodes(editor, [blk], {
              at: insertAtPath,
              select: true
            });
          }

          insertAtPath = [insertAtPath[0] + 1];
        });
        change$.next({
          type: 'loading',
          isLoading: false
        });
        editor.onChange();
        return;
      }

      change$.next({
        type: 'loading',
        isLoading: false
      });
    };

    return editor;
  };
}

var entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

function escapeHtml(str) {
  return String(str).replace(/[&<>"'`=/]/g, s => entityMap[s]);
}