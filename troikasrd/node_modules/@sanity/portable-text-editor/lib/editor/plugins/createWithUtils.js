"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithUtils = createWithUtils;

var _slate = require("slate");

var _debug = require("../../utils/debug");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('plugin:withUtils');
/**
 * This plugin makes various util commands available in the editor
 *
 */

function createWithUtils(portableTextFeatures) {
  return function withUtils(editor) {
    // Expands the the selection to wrap around the word the focus is at
    editor.pteExpandToWord = () => {
      var selection = editor.selection;

      if (selection && !_slate.Range.isExpanded(selection)) {
        var _Editor$node = _slate.Editor.node(editor, selection.focus, {
          depth: 2
        }),
            _Editor$node2 = _slicedToArray(_Editor$node, 1),
            textNode = _Editor$node2[0];

        if (!textNode || !_slate.Text.isText(textNode) || textNode.text.length === 0) {
          debug("pteExpandToWord: Can't expand to word here");
          return;
        }

        var focus = selection.focus;
        var focusOffset = focus.offset;
        var charsBefore = textNode.text.slice(0, focusOffset);
        var charsAfter = textNode.text.slice(focusOffset, -1);

        var isEmpty = str => str.match(/\s/g);

        var whiteSpaceBeforeIndex = charsBefore.split('').reverse().findIndex(str => isEmpty(str));
        var newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0;
        var whiteSpaceAfterIndex = charsAfter.split('').findIndex(obj => isEmpty(obj));
        var newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);

        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {
          debug('pteExpandToWord: Expanding to focused word');

          _slate.Transforms.setSelection(editor, {
            anchor: _objectSpread(_objectSpread({}, selection.anchor), {}, {
              offset: newStartOffset
            }),
            focus: _objectSpread(_objectSpread({}, selection.focus), {}, {
              offset: newEndOffset
            })
          });

          return;
        }

        debug("pteExpandToWord: Can't expand to word here");
      }
    };

    return editor;
  };
}