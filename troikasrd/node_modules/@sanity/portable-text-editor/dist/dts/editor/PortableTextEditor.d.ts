import React from 'react';
import { Path } from '@sanity/types';
import { PortableTextBlock, PortableTextFeatures, PortableTextChild } from '../types/portableText';
import { Type, RawType as RawSchemaType, PortableTextType } from '../types/schema';
import { EditorSelection, EditorChange, EditorChanges, EditableAPI, InvalidValueResolution, PatchObservable } from '../types/editor';
export declare const defaultKeyGenerator: () => string;
declare type Props = {
    keyGenerator?: () => string;
    maxBlocks?: number | string;
    onChange: (change: EditorChange) => void;
    incomingPatche$?: PatchObservable;
    readOnly?: boolean;
    selection?: EditorSelection;
    type: Type | RawSchemaType;
    value: PortableTextBlock[] | undefined;
};
declare type State = {
    invalidValueResolution: InvalidValueResolution;
    selection: EditorSelection;
};
export declare class PortableTextEditor extends React.Component<Props, State> {
    static activeAnnotations: (editor: PortableTextEditor) => PortableTextBlock[];
    static addAnnotation: (editor: PortableTextEditor, type: Type, value?: {
        [prop: string]: any;
    } | undefined) => {
        spanPath: Path;
        markDefPath: Path;
    } | undefined;
    static blur: (editor: PortableTextEditor) => void;
    static delete: (editor: PortableTextEditor, selection: EditorSelection, options?: {
        mode?: "children" | "block" | undefined;
    } | undefined) => void | undefined;
    static findDOMNode: (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => Node | undefined;
    static findByPath: (editor: PortableTextEditor, path: Path) => [PortableTextBlock | PortableTextChild | undefined, Path | undefined] | undefined;
    static focus: (editor: PortableTextEditor) => void;
    static focusBlock: (editor: PortableTextEditor) => PortableTextBlock | undefined;
    static focusChild: (editor: PortableTextEditor) => PortableTextChild | undefined;
    static getPortableTextFeatures: (editor: PortableTextEditor) => PortableTextFeatures;
    static getSelection: (editor: PortableTextEditor) => EditorSelection | undefined;
    static getValue: (editor: PortableTextEditor) => PortableTextBlock[] | undefined;
    static hasBlockStyle: (editor: PortableTextEditor, blockStyle: string) => boolean | undefined;
    static hasListStyle: (editor: PortableTextEditor, listStyle: string) => boolean | undefined;
    static isCollapsedSelection: (editor: PortableTextEditor) => boolean | undefined;
    static isExpandedSelection: (editor: PortableTextEditor) => boolean | undefined;
    static isMarkActive: (editor: PortableTextEditor, mark: string) => boolean | undefined;
    static insertChild: (editor: PortableTextEditor, type: Type, value?: {
        [prop: string]: any;
    } | undefined) => Path | undefined;
    static insertBlock: (editor: PortableTextEditor, type: Type, value?: {
        [prop: string]: any;
    } | undefined) => Path | undefined;
    static isVoid: (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => boolean | undefined;
    static marks: (editor: PortableTextEditor) => string[] | undefined;
    static select: (editor: PortableTextEditor, selection: EditorSelection | null) => void;
    static removeAnnotation: (editor: PortableTextEditor, type: Type) => void | undefined;
    static toggleBlockStyle: (editor: PortableTextEditor, blockStyle: string) => void | undefined;
    static toggleList: (editor: PortableTextEditor, listStyle: string) => void;
    static toggleMark: (editor: PortableTextEditor, mark: string) => void;
    private changeSubscription;
    private pendingPatches;
    type: PortableTextType;
    portableTextFeatures: PortableTextFeatures;
    change$: EditorChanges;
    isThrottling: boolean;
    editable?: EditableAPI;
    keyGenerator: () => string;
    maxBlocks: number | undefined;
    readOnly: boolean;
    incomingPatche$?: PatchObservable;
    constructor(props: Props);
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Props): void;
    setEditable: (editable: EditableAPI) => void;
    private flush;
    private onEditorChange;
    render(): string | JSX.Element;
}
export {};
//# sourceMappingURL=PortableTextEditor.d.ts.map