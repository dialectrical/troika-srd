"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.documentFromEditor = documentFromEditor;
exports.documentFromEditorWithInitialValue = documentFromEditorWithInitialValue;
exports.getDefaultDocumentNode = getDefaultDocumentNode;
exports.DocumentBuilder = void 0;

var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _SerializeError = require("./SerializeError");

var _validateId = require("./util/validateId");

var _View = require("./views/View");

var _views = require("./views");

var _userDefinedStructure = require("./userDefinedStructure");

var _initialValueTemplates = require("@sanity/initial-value-templates");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DocumentBuilder {
  constructor(spec) {
    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || (0, _camelCase2.default)(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  child(child) {
    return this.clone({
      child
    });
  }

  getChild() {
    return this.spec.child;
  }

  documentId(documentId) {
    // Let's try to be a bit helpful and assign an ID from document ID if none is specified
    var paneId = this.spec.id || documentId;
    return this.clone({
      id: paneId,
      options: _objectSpread(_objectSpread({}, this.spec.options || {}), {}, {
        id: documentId
      })
    });
  }

  getDocumentId() {
    return this.spec.options && this.spec.options.id;
  }

  schemaType(documentType) {
    return this.clone({
      options: _objectSpread(_objectSpread({}, this.spec.options || {}), {}, {
        type: typeof documentType === 'string' ? documentType : documentType.name
      })
    });
  }

  getSchemaType() {
    return this.spec.options && this.spec.options.type;
  }

  initialValueTemplate(templateId, parameters) {
    return this.clone({
      options: _objectSpread(_objectSpread({}, this.spec.options || {}), {}, {
        template: templateId,
        templateParameters: parameters
      })
    });
  }

  getInitalValueTemplate() {
    return this.spec.options && this.spec.options.template;
  }

  getInitialValueTemplateParameters() {
    return this.spec.options && this.spec.options.templateParameters;
  }

  views(views) {
    return this.clone({
      views
    });
  }

  getViews() {
    return this.spec.views || [];
  }

  serialize() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    },
        _ref$path = _ref.path,
        path = _ref$path === void 0 ? [] : _ref$path,
        index = _ref.index,
        hint = _ref.hint;

    var urlId = path[index || path.length - 1]; // Try to grab document ID / editor ID from URL if not defined

    var id = this.spec.id || urlId && "".concat(urlId) || '';

    var options = _objectSpread({
      id,
      type: undefined,
      template: undefined,
      templateParameters: undefined
    }, this.spec.options);

    if (typeof id !== 'string' || !id) {
      throw new _SerializeError.SerializeError('`id` is required for document nodes', path, index, hint).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!options || !options.id) {
      throw new _SerializeError.SerializeError('document id (`id`) is required for document nodes', path, id, hint).withHelpUrl(_SerializeError.HELP_URL.DOCUMENT_ID_REQUIRED);
    }

    var views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [(0, _views.form)()]).map((item, i) => (0, _View.maybeSerializeView)(item, i, path));
    var viewIds = views.map(view => view.id);
    var dupes = (0, _uniq2.default)(viewIds.filter((id, i) => viewIds.includes(id, i + 1)));

    if (dupes.length > 0) {
      throw new _SerializeError.SerializeError("document node has views with duplicate IDs: ".concat(dupes.join(',  ')), path, id, hint);
    }

    return _objectSpread(_objectSpread({}, this.spec), {}, {
      child: this.spec.child,
      id: (0, _validateId.validateId)(id, path, index),
      type: 'document',
      options: getDocumentOptions(options),
      views
    });
  }

  clone() {
    var withSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var builder = new DocumentBuilder();

    var options = _objectSpread(_objectSpread({}, this.spec.options || {}), withSpec.options || {});

    builder.spec = _objectSpread(_objectSpread(_objectSpread({}, this.spec), withSpec), {}, {
      options
    });
    return builder;
  }

}

exports.DocumentBuilder = DocumentBuilder;

function getDocumentOptions(spec) {
  var opts = {
    id: spec.id || '',
    type: spec.type || '*'
  };

  if (spec.template) {
    opts.template = spec.template;
  }

  if (spec.templateParameters) {
    opts.templateParameters = spec.templateParameters;
  }

  return opts;
}

function documentFromEditor(spec) {
  var doc = spec && spec.type ? // Use user-defined document fragment as base if possible
  getDefaultDocumentNode({
    schemaType: spec.type
  }) : // Fall back to plain old document builder
  new DocumentBuilder();

  if (spec) {
    var _spec$options = spec.options,
        id = _spec$options.id,
        type = _spec$options.type,
        template = _spec$options.template,
        templateParameters = _spec$options.templateParameters;
    doc = doc.id(spec.id).documentId(id);

    if (type) {
      doc = doc.schemaType(type);
    }

    if (template) {
      doc = doc.initialValueTemplate(template, templateParameters);
    }

    if (spec.child) {
      doc = doc.child(spec.child);
    }
  }

  return doc;
}

function documentFromEditorWithInitialValue(templateId, parameters) {
  var template = (0, _initialValueTemplates.getTemplateById)(templateId);

  if (!template) {
    throw new Error("Template with ID \"".concat(templateId, "\" not defined"));
  }

  return getDefaultDocumentNode({
    schemaType: template.schemaType
  }).initialValueTemplate(templateId, parameters);
}

function getDefaultDocumentNode(options) {
  var documentId = options.documentId,
      schemaType = options.schemaType;
  var userDefined = (0, _userDefinedStructure.getUserDefinedDefaultDocumentBuilder)(options);
  var builder = userDefined || new DocumentBuilder();

  if (!builder.getId()) {
    builder = builder.id('documentEditor');
  }

  if (documentId) {
    builder = builder.documentId(documentId.replace(/^drafts\./, ''));
  }

  return builder.schemaType(schemaType);
}