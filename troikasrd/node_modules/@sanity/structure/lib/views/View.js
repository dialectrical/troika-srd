"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maybeSerializeView = maybeSerializeView;
exports.GenericViewBuilder = void 0;

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _ = require("..");

var _SerializeError = require("../SerializeError");

var _validateId = require("../util/validateId");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GenericViewBuilder {
  constructor() {
    _defineProperty(this, "spec", {});
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || (0, _kebabCase2.default)(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  icon(icon) {
    return this.clone({
      icon
    });
  }

  getIcon() {
    return this.spec.icon;
  }

  serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    var _this$spec = this.spec,
        id = _this$spec.id,
        title = _this$spec.title,
        icon = _this$spec.icon;

    if (!id) {
      throw new _.SerializeError('`id` is required for view item', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!title) {
      throw new _.SerializeError('`title` is required for view item', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.TITLE_REQUIRED);
    }

    return {
      id: (0, _validateId.validateId)(id, options.path, options.index),
      title,
      icon,
      type: 'view'
    };
  }

  clone(withSpec) {
    var builder = new this.constructor();
    return builder;
  }

}

exports.GenericViewBuilder = GenericViewBuilder;

function isSerializable(view) {
  return typeof view.serialize === 'function';
}

function maybeSerializeView(item, index, path) {
  return isSerializable(item) ? item.serialize({
    path,
    index
  }) : item;
}