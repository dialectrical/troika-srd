"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDocumentTypeListItems = getDocumentTypeListItems;
exports.getDocumentTypeListItem = getDocumentTypeListItem;
exports.getDocumentTypeList = getDocumentTypeList;

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _Schema = require("./parts/Schema");

var _DataAspects = require("./parts/DataAspects");

var _Icon = require("./parts/Icon");

var _MenuItem = require("./MenuItem");

var _Sort = require("./Sort");

var _ListItem = require("./ListItem");

var _DocumentTypeList = require("./DocumentTypeList");

var _Intent = require("./Intent");

var _Document = require("./Document");

var _List = require("./List");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListIcon = (0, _Icon.getListIcon)();
var DetailsIcon = (0, _Icon.getDetailsIcon)();
var getDataAspectsForSchema = (0, _memoizeOne.default)(_DataAspects.dataAspects);

function shouldShowIcon(schemaType) {
  var preview = schemaType.preview;
  return Boolean(preview && (preview.prepare || preview.select && preview.select.media));
}

function getDocumentTypeListItems(schema) {
  var resolver = getDataAspectsForSchema(schema || (0, _Schema.getDefaultSchema)());
  var types = resolver.getDocumentTypes();
  return types.map(typeName => getDocumentTypeListItem(typeName, schema));
}

function getDocumentTypeListItem(typeName, sanitySchema) {
  var schema = sanitySchema || (0, _Schema.getDefaultSchema)();
  var type = schema.get(typeName);

  if (!type) {
    throw new Error("Schema type with name \"".concat(typeName, "\" not found"));
  }

  var resolver = getDataAspectsForSchema(schema);
  var title = resolver.getDisplayName(typeName);
  return new _ListItem.ListItemBuilder().id(typeName).title(title).schemaType(type).child((id, _ref) => {
    var parent = _ref.parent;
    var parentItem = (0, _List.isList)(parent) ? parent.items.find(item => item.id === id) : null;
    var list = getDocumentTypeList(typeName, schema);

    if (parentItem && parentItem.title) {
      list = list.title(parentItem.title);
    }

    return list;
  });
}

function getDocumentTypeList(typeNameOrSpec, sanitySchema) {
  var schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType;
  var typeName = typeof schemaType === 'string' ? schemaType : schemaType.name;
  var spec = typeof typeNameOrSpec === 'string' ? {
    schemaType
  } : typeNameOrSpec;
  var schema = sanitySchema || (0, _Schema.getDefaultSchema)();
  var type = schema.get(typeName);

  if (!type) {
    throw new Error("Schema type with name \"".concat(typeName, "\" not found"));
  }

  var resolver = getDataAspectsForSchema(schema);
  var title = resolver.getDisplayName(typeName);
  var showIcons = shouldShowIcon(type);
  return new _DocumentTypeList.DocumentTypeListBuilder().id(spec.id || typeName).title(spec.title || title).filter('_type == $type').params({
    type: typeName
  }).schemaType(type).showIcons(showIcons).defaultOrdering(_Sort.DEFAULT_SELECTED_ORDERING_OPTION.by).menuItemGroups(spec.menuItemGroups || [{
    id: 'sorting',
    title: 'Sort'
  }, {
    id: 'layout',
    title: 'Layout'
  }, {
    id: 'actions',
    title: 'Actions'
  }]).child(spec.child || (documentId => (0, _Document.getDefaultDocumentNode)({
    schemaType: typeName,
    documentId
  }))).canHandleIntent(spec.canHandleIntent || _Intent.defaultIntentChecker).menuItems(spec.menuItems || [// Create new (from action button) will be added in serialization step of GenericList
  // Sort by <Y>
  ...(0, _MenuItem.getOrderingMenuItemsForSchemaType)(type), // Display as <Z>
  new _MenuItem.MenuItemBuilder().group('layout').title('Compact view').icon(ListIcon).action('setLayout').params({
    layout: 'default'
  }), new _MenuItem.MenuItemBuilder().group('layout').title('Detailed view').icon(DetailsIcon).action('setLayout').params({
    layout: 'detail'
  }) // Create new (from menu) will be added in serialization step of GenericList
  ]);
}