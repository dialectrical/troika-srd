"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtendedProjection = getExtendedProjection;

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var IMPLICIT_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']; // Takes a path array and a schema type and builds a GROQ join every time it enters a reference field

function joinReferences(schemaType, path) {
  var _path = _toArray(path),
      head = _path[0],
      tail = _path.slice(1);

  if (!schemaType.fields) {
    return '';
  }

  var schemaField = schemaType.fields.find(field => field.name === head);

  if (!schemaField) {
    if (!IMPLICIT_FIELDS.includes(head)) {
      // eslint-disable-next-line no-console
      console.warn('The current ordering config targeted the nonexistent field "%s" on schema type "%s". It should be one of %o', head, schemaType.name, schemaType.fields.map(field => field.name));
    }

    return '';
  }

  if (schemaField.type.name === 'reference' && schemaField.type.to) {
    var refTypes = schemaField.type.to;
    return "".concat(head, "->{").concat(refTypes.map(refType => joinReferences(refType, tail)).join(','), "}");
  }

  var tailFields = tail.length > 0 && joinReferences(schemaField.type, tail);
  var tailWrapper = tailFields ? "{".concat(tailFields, "}") : '';
  return tail.length > 0 ? "".concat(head).concat(tailWrapper) : head;
}

function getExtendedProjection(schemaType, orderBy) {
  return orderBy.map(ordering => joinReferences(schemaType, ordering.field.split('.'))).join(', ');
}