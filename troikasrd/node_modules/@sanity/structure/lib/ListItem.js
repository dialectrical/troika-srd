"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListItemBuilder = void 0;

var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));

var _Schema = require("./parts/Schema");

var _DocumentList = require("./DocumentList");

var _SerializeError = require("./SerializeError");

var _List = require("./List");

var _Document = require("./Document");

var _Component = require("./Component");

var _validateId = require("./util/validateId");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ListItemBuilder {
  constructor(spec) {
    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || (0, _camelCase2.default)(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  icon(icon) {
    return this.clone({
      icon
    });
  }

  showIcon(enabled) {
    return this.clone({
      displayOptions: _objectSpread(_objectSpread({}, this.spec.displayOptions || {}), {}, {
        showIcon: enabled
      })
    });
  }

  getShowIcon() {
    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined;
  }

  getIcon() {
    return this.spec.icon;
  }

  child(child) {
    return this.clone({
      child
    });
  }

  getChild() {
    return this.spec.child;
  }

  schemaType(schemaType) {
    return this.clone({
      schemaType
    });
  }

  getSchemaType() {
    return this.spec.schemaType;
  }

  serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    var _this$spec = this.spec,
        id = _this$spec.id,
        title = _this$spec.title,
        child = _this$spec.child;

    if (typeof id !== 'string' || !id) {
      throw new _SerializeError.SerializeError('`id` is required for list items', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {
      throw new _SerializeError.SerializeError('`title` is required for list items', options.path, id).withHelpUrl(_SerializeError.HELP_URL.TITLE_REQUIRED);
    }

    var schemaType = this.spec.schemaType;

    if (typeof schemaType === 'string') {
      var type = (0, _Schema.getDefaultSchema)().get(schemaType);

      if (!type) {
        throw new _SerializeError.SerializeError("Could not find type \"".concat(schemaType, "\" in schema"), options.path, id).withHelpUrl(_SerializeError.HELP_URL.SCHEMA_TYPE_NOT_FOUND);
      }

      schemaType = type;
    }

    var serializeOptions = {
      path: options.path.concat(id),
      hint: 'child'
    };
    var listChild = child instanceof _Component.ComponentBuilder || child instanceof _DocumentList.DocumentListBuilder || child instanceof _Document.DocumentBuilder || child instanceof _List.ListBuilder ? child.serialize(serializeOptions) : child; // In the case of a function, create a bound version that will pass the correct serialize
    // context, so we may lazily resolve it at some point in the future without losing context

    if (typeof listChild === 'function') {
      var originalChild = listChild;

      listChild = (itemId, options) => {
        return originalChild(itemId, _objectSpread(_objectSpread({}, options), {}, {
          serializeOptions
        }));
      };
    }

    return _objectSpread(_objectSpread({}, this.spec), {}, {
      id: (0, _validateId.validateId)(id, options.path, options.index),
      schemaType,
      child: listChild,
      title,
      type: 'listItem'
    });
  }

  clone(withSpec) {
    var builder = new ListItemBuilder();
    builder.spec = _objectSpread(_objectSpread({}, this.spec), withSpec || {});
    return builder;
  }

}

exports.ListItemBuilder = ListItemBuilder;