"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentBuilder = void 0;

var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));

var _SerializeError = require("./SerializeError");

var _MenuItem = require("./MenuItem");

var _MenuItemGroup = require("./MenuItemGroup");

var _validateId = require("./util/validateId");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ComponentBuilder {
  constructor(spec) {
    _defineProperty(this, "spec", void 0);

    this.spec = _objectSpread({
      options: {}
    }, spec ? spec : {});
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || (0, _camelCase2.default)(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  child(child) {
    return this.clone({
      child
    });
  }

  getChild() {
    return this.spec.child;
  }

  component(component) {
    return this.clone({
      component
    });
  }

  getComponent() {
    return this.spec.component;
  }

  options(options) {
    return this.clone({
      options
    });
  }

  getOptions() {
    return this.spec.options || {};
  }

  menuItems(menuItems) {
    return this.clone({
      menuItems
    });
  }

  getMenuItems() {
    return this.spec.menuItems;
  }

  menuItemGroups(menuItemGroups) {
    return this.clone({
      menuItemGroups
    });
  }

  getMenuItemGroups() {
    return this.spec.menuItemGroups;
  }

  serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    var _this$spec = this.spec,
        id = _this$spec.id,
        title = _this$spec.title,
        child = _this$spec.child,
        componentOptions = _this$spec.options,
        component = _this$spec.component;

    if (!id) {
      throw new _SerializeError.SerializeError('`id` is required for `component` structure item', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!component) {
      throw new _SerializeError.SerializeError('`component` is required for `component` structure item', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    return {
      id: (0, _validateId.validateId)(id, options.path, options.index),
      title,
      type: 'component',
      child,
      component,
      options: componentOptions || {},
      menuItems: (this.spec.menuItems || []).map((item, i) => (0, _MenuItem.maybeSerializeMenuItem)(item, i, options.path)),
      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => (0, _MenuItemGroup.maybeSerializeMenuItemGroup)(item, i, options.path))
    };
  }

  clone(withSpec) {
    var builder = new ComponentBuilder();
    builder.spec = _objectSpread(_objectSpread({}, this.spec), withSpec || {});
    return builder;
  }

}

exports.ComponentBuilder = ComponentBuilder;