"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultInitialValueTemplateItems = defaultInitialValueTemplateItems;
exports.maybeSerializeInitialValueTemplateItem = maybeSerializeInitialValueTemplateItem;
exports.menuItemsFromInitialValueTemplateItems = menuItemsFromInitialValueTemplateItems;
exports.InitialValueTemplateItemBuilder = void 0;

var _pickBy2 = _interopRequireDefault(require("lodash/pickBy"));

var _initialValueTemplates = require("@sanity/initial-value-templates");

var _documentActionUtils = require("./parts/documentActionUtils");

var _Schema = require("./parts/Schema");

var _SerializeError = require("./SerializeError");

var _ = require(".");

var _MenuItem = require("./MenuItem");

var _Icon = require("./parts/Icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InitialValueTemplateItemBuilder {
  constructor(spec) {
    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title
    });
  }

  getTitle() {
    return this.spec.title;
  }

  description(description) {
    return this.clone({
      description
    });
  }

  getDescription() {
    return this.spec.description;
  }

  templateId(templateId) {
    // Let's try to be a bit helpful and assign an ID from template ID if none is specified
    var paneId = this.spec.id || templateId;
    return this.clone({
      id: paneId,
      templateId
    });
  }

  getTemplateId() {
    return this.spec.templateId;
  }

  parameters(parameters) {
    return this.clone({
      parameters
    });
  }

  getParameters() {
    return this.spec.parameters;
  }

  serialize() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    },
        _ref$path = _ref.path,
        path = _ref$path === void 0 ? [] : _ref$path,
        index = _ref.index,
        hint = _ref.hint;

    var _this$spec = this.spec,
        id = _this$spec.id,
        templateId = _this$spec.templateId;

    if (typeof id !== 'string' || !id) {
      throw new _.SerializeError('`id` is required for initial value template item nodes', path, index, hint).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!templateId) {
      throw new _.SerializeError('template id (`templateId`) is required for initial value template item nodes', path, id, hint).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    return _objectSpread(_objectSpread({}, this.spec), {}, {
      id,
      templateId,
      type: 'initialValueTemplateItem'
    });
  }

  clone() {
    var withSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var builder = new InitialValueTemplateItemBuilder();
    builder.spec = _objectSpread(_objectSpread({}, this.spec), withSpec);
    return builder;
  }

}

exports.InitialValueTemplateItemBuilder = InitialValueTemplateItemBuilder;

function defaultInitialValueTemplateItems() {
  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _Schema.getDefaultSchema)();
  var templates = (0, _initialValueTemplates.getTemplates)() // Don't list templates that require parameters
  .filter(tpl => !tpl.parameters || tpl.parameters.length === 0) // Don't list templates that we can't create
  .filter(tpl => (0, _documentActionUtils.isActionEnabled)(schema.get(tpl.schemaType), 'create')); // Sort templates by their schema type, in order or definition

  var typeNames = schema.getTypeNames();
  var ordered = templates.sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType)); // Create actual template items out of the templates

  return ordered.map(tpl => _.StructureBuilder.initialValueTemplateItem(tpl.id));
}

function maybeSerializeInitialValueTemplateItem(item, index, path) {
  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({
    path,
    index
  }) : item;
}

function menuItemsFromInitialValueTemplateItems(templateItems) {
  return templateItems.map(item => {
    var tpl = (0, _initialValueTemplates.getTemplateById)(item.templateId);
    var title = item.title || tpl && tpl.title || 'Create new';
    var params = (0, _pickBy2.default)({
      type: tpl && tpl.schemaType,
      template: item.templateId
    }, Boolean);
    var intentParams = item.parameters ? [params, item.parameters] : params;
    var schema = tpl && (0, _Schema.getDefaultSchema)().get(tpl.schemaType);
    return new _MenuItem.MenuItemBuilder().title(title).icon(tpl && tpl.icon || schema && schema.icon || (0, _Icon.getPlusIcon)()).intent({
      type: 'create',
      params: intentParams
    }).serialize();
  });
}