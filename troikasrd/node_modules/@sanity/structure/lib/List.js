"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isList = isList;
exports.ListBuilder = void 0;

var _find2 = _interopRequireDefault(require("lodash/find"));

var _SerializeError = require("./SerializeError");

var _ListItem = require("./ListItem");

var _DocumentListItem = require("./DocumentListItem");

var _GenericList = require("./GenericList");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getArgType = thing => {
  if (thing instanceof ListBuilder) {
    return 'ListBuilder';
  }

  if (isPromise(thing)) {
    return 'Promise';
  }

  return Array.isArray(thing) ? 'array' : typeof thing;
};

var isListItem = item => {
  return item.type === 'listItem';
};

var defaultCanHandleIntent = (intentName, params, context) => {
  var pane = context.pane;
  var items = pane.items || [];
  return items.filter(_DocumentListItem.isDocumentListItem).some(item => item.schemaType.name === params.type && item._id === params.id) || (0, _GenericList.shallowIntentChecker)(intentName, params, context);
};

var resolveChildForItem = (itemId, options) => {
  var parentItem = options.parent;
  var items = parentItem.items.filter(isListItem);
  var target = (items.find(item => item.id === itemId) || {
    child: undefined
  }).child;

  if (!target || typeof target !== 'function') {
    return target;
  }

  return typeof target === 'function' ? target(itemId, options) : target;
};

function maybeSerializeListItem(item, index, path) {
  if (item instanceof _ListItem.ListItemBuilder) {
    return item.serialize({
      path,
      index
    });
  }

  var listItem = item;

  if (listItem && listItem.type === 'divider') {
    return item;
  }

  if (!listItem || listItem.type !== 'listItem') {
    var gotWhat = listItem && listItem.type || getArgType(listItem);
    var helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : '';
    throw new _SerializeError.SerializeError("List items must be of type \"listItem\", got \"".concat(gotWhat, "\"").concat(helpText), path, index).withHelpUrl(_SerializeError.HELP_URL.INVALID_LIST_ITEM);
  }

  return item;
}

function isPromise(thing) {
  return thing && typeof thing.then === 'function';
}

function isList(list) {
  return list.type === 'list';
}

class ListBuilder extends _GenericList.GenericListBuilder {
  constructor(spec) {
    super();

    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates);
  }

  items(items) {
    return this.clone({
      items
    });
  }

  getItems() {
    return this.spec.items;
  }

  serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    var id = this.spec.id;

    if (typeof id !== 'string' || !id) {
      throw new _SerializeError.SerializeError('`id` is required for lists', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    var items = typeof this.spec.items === 'undefined' ? [] : this.spec.items;

    if (!Array.isArray(items)) {
      throw new _SerializeError.SerializeError('`items` must be an array of items', options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.LIST_ITEMS_MUST_BE_ARRAY);
    }

    var path = (options.path || []).concat(id);
    var serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path));
    var dupes = serializedItems.filter((val, i) => (0, _find2.default)(serializedItems, {
      id: val.id
    }, i + 1));

    if (dupes.length > 0) {
      var dupeIds = dupes.map(item => item.id).slice(0, 5);
      var dupeDesc = dupes.length > 5 ? "".concat(dupeIds.join(', '), "...") : dupeIds.join(', ');
      throw new _SerializeError.SerializeError("List items with same ID found (".concat(dupeDesc, ")"), options.path, options.index).withHelpUrl(_SerializeError.HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE);
    }

    return _objectSpread(_objectSpread({}, super.serialize(options)), {}, {
      type: 'list',
      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,
      child: this.spec.child || resolveChildForItem,
      items: serializedItems
    });
  }

  clone(withSpec) {
    var builder = new ListBuilder();
    builder.spec = _objectSpread(_objectSpread({}, this.spec), withSpec || {});
    return builder;
  }

}

exports.ListBuilder = ListBuilder;