import { SchemaType } from './parts/Schema';
import { SortItem } from './Sort';
import { SerializeOptions, Child } from './StructureNodes';
import { GenericListBuilder, BuildableGenericList, GenericList, GenericListInput } from './GenericList';
export interface PartialDocumentList extends BuildableGenericList {
    options?: DocumentListOptions;
    schemaTypeName?: string;
}
export interface DocumentListInput extends GenericListInput {
    options: DocumentListOptions;
}
export interface DocumentList extends GenericList {
    options: DocumentListOptions;
    child: Child;
    schemaTypeName?: string;
}
interface DocumentListOptions {
    filter: string;
    params?: {
        [key: string]: any;
    };
    defaultOrdering?: SortItem[];
}
export declare class DocumentListBuilder extends GenericListBuilder<PartialDocumentList, DocumentListBuilder> {
    protected spec: PartialDocumentList;
    constructor(spec?: DocumentListInput);
    filter(filter: string): DocumentListBuilder;
    getFilter(): string | undefined;
    schemaType(type: SchemaType | string): DocumentListBuilder;
    getSchemaType(): string | undefined;
    params(params: {}): DocumentListBuilder;
    getParams(): {
        [key: string]: any;
    } | undefined;
    defaultOrdering(ordering: SortItem[]): DocumentListBuilder;
    getDefaultOrdering(): SortItem[] | undefined;
    serialize(options?: SerializeOptions): DocumentList;
    clone(withSpec?: PartialDocumentList): DocumentListBuilder;
    getSpec(): PartialDocumentList;
}
export declare function getTypeNamesFromFilter(filter: string, params?: {
    [key: string]: any;
}): string[];
export {};
//# sourceMappingURL=DocumentList.d.ts.map