import { SerializeOptions, Serializable, Child, DocumentNode, EditorNode } from './StructureNodes';
import { SchemaType } from './parts/Schema';
import { View, ViewBuilder } from './views/View';
import { DocumentFragmentResolveOptions } from './userDefinedStructure';
interface DocumentOptions {
    id: string;
    type: string;
    template?: string;
    templateParameters?: {
        [key: string]: any;
    };
}
export declare type PartialDocumentNode = {
    id?: string;
    title?: string;
    child?: Child;
    views?: (View | ViewBuilder)[];
    options?: Partial<DocumentOptions>;
};
export declare class DocumentBuilder implements Serializable {
    protected spec: PartialDocumentNode;
    constructor(spec?: PartialDocumentNode);
    id(id: string): DocumentBuilder;
    getId(): string | undefined;
    title(title: string): DocumentBuilder;
    getTitle(): string | undefined;
    child(child: Child): DocumentBuilder;
    getChild(): Child | undefined;
    documentId(documentId: string): DocumentBuilder;
    getDocumentId(): string | undefined;
    schemaType(documentType: SchemaType | string): DocumentBuilder;
    getSchemaType(): string | undefined;
    initialValueTemplate(templateId: string, parameters?: {
        [key: string]: any;
    }): DocumentBuilder;
    getInitalValueTemplate(): string | undefined;
    getInitialValueTemplateParameters(): {
        [key: string]: any;
    } | undefined;
    views(views: (View | ViewBuilder)[]): DocumentBuilder;
    getViews(): (View | ViewBuilder)[];
    serialize({ path, index, hint }?: SerializeOptions): DocumentNode;
    clone(withSpec?: PartialDocumentNode): DocumentBuilder;
}
export declare function documentFromEditor(spec?: EditorNode): DocumentBuilder;
export declare function documentFromEditorWithInitialValue(templateId: string, parameters?: {
    [key: string]: any;
}): DocumentBuilder;
export declare function getDefaultDocumentNode(options: DocumentFragmentResolveOptions): DocumentBuilder;
export {};
//# sourceMappingURL=Document.d.ts.map