"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateSchema;

var _traverseSchema = _interopRequireDefault(require("./traverseSchema"));

var _object = _interopRequireDefault(require("./validation/types/object"));

var _document = _interopRequireDefault(require("./validation/types/document"));

var _reference = _interopRequireDefault(require("./validation/types/reference"));

var _array = _interopRequireDefault(require("./validation/types/array"));

var _slug = _interopRequireDefault(require("./validation/types/slug"));

var _file = _interopRequireDefault(require("./validation/types/file"));

var _image = _interopRequireDefault(require("./validation/types/image"));

var _block = _interopRequireDefault(require("./validation/types/block"));

var _common = _interopRequireDefault(require("./validation/types/common"));

var _rootType = _interopRequireDefault(require("./validation/types/rootType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var typeVisitors = {
  array: _array.default,
  object: _object.default,
  slug: _slug.default,
  file: _file.default,
  image: _image.default,
  block: _block.default,
  document: _document.default,
  reference: _reference.default
};

var getNoopVisitor = visitorContext => schemaDef => _objectSpread(_objectSpread({
  name: "<unnamed_type_@_index_".concat(visitorContext.index, ">")
}, schemaDef), {}, {
  _problems: []
});

function combine() {
  for (var _len = arguments.length, visitors = new Array(_len), _key = 0; _key < _len; _key++) {
    visitors[_key] = arguments[_key];
  }

  return (schemaType, visitorContext) => {
    return visitors.reduce((result, visitor) => {
      var res = visitor(result, visitorContext);
      return _objectSpread(_objectSpread({}, res), {}, {
        _problems: result._problems.concat(res._problems)
      });
    }, _objectSpread({
      _problems: []
    }, schemaType));
  };
} // Future improvements:
// - Provide an easy way to determine if schema has problems of a certain class (e.g. errors)
// Clean up the api


function validateSchema(schemaTypes) {
  return (0, _traverseSchema.default)(schemaTypes, (schemaDef, visitorContext) => {
    var typeVisitor = schemaDef && schemaDef.type && typeVisitors[schemaDef.type] || getNoopVisitor(visitorContext);

    if (visitorContext.isRoot) {
      return combine(_rootType.default, _common.default, typeVisitor)(schemaDef, visitorContext);
    }

    return combine(_common.default, typeVisitor)(schemaDef, visitorContext);
  });
}