"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateTypeName = validateTypeName;

var _leven = _interopRequireDefault(require("leven"));

var _humanizeList = _interopRequireDefault(require("humanize-list"));

var _createValidationResult = require("../createValidationResult");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var quote = str => "\"".concat(str, "\"");

function validateTypeName(typeName, visitorContext) {
  var possibleTypeNames = visitorContext.getTypeNames();

  if (!typeName) {
    return [(0, _createValidationResult.error)("Type is missing a type. Valid types are: ".concat((0, _humanizeList.default)(possibleTypeNames)), _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  if (typeof typeName !== 'string') {
    return [(0, _createValidationResult.error)("Type has an invalid \"type\"-property - should be a string. Valid types are: ".concat((0, _humanizeList.default)(possibleTypeNames)), _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  var isValid = possibleTypeNames.includes(typeName);

  if (!isValid) {
    var suggestions = possibleTypeNames.map(possibleTypeName => {
      if (!possibleTypeName || !typeName) {}

      return [(0, _leven.default)(typeName, possibleTypeName), possibleTypeName];
    }).filter(_ref => {
      var _ref2 = _slicedToArray(_ref, 1),
          distance = _ref2[0];

      return distance < 3;
    }).map(_ref3 => {
      var _ref4 = _slicedToArray(_ref3, 2),
          _ = _ref4[0],
          name = _ref4[1];

      return name;
    });
    var suggestion = suggestions.length > 0 ? " Did you mean ".concat((0, _humanizeList.default)(suggestions.map(quote), {
      conjunction: 'or'
    }), "?") : '';
    return [(0, _createValidationResult.error)("Unknown type: ".concat(typeName, ".").concat(suggestion, " Valid types are: ").concat((0, _humanizeList.default)(possibleTypeNames)))];
  }

  return [];
}