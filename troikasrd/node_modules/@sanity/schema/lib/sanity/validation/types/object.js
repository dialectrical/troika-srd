"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateField = validateField;
exports.validateFields = validateFields;
exports.validatePreview = validatePreview;
exports.default = void 0;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _createValidationResult = require("../createValidationResult");

var _inspect = _interopRequireDefault(require("../../inspect"));

var _validateInputComponent = require("../utils/validateInputComponent");

var _excluded = ["name"],
    _excluded2 = ["_problems"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/;
var CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/;

function validateFieldName(name) {
  if (typeof name !== 'string') {
    return [(0, _createValidationResult.error)("Field names must be strings. Saw \"".concat((0, _inspect.default)(name), "\""), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }

  if (name.startsWith('_')) {
    return [(0, _createValidationResult.error)("Invalid field name \"".concat(name, "\". Field names cannot start with underscores \"_\" as it's reserved for system fields."), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }

  if (!VALID_FIELD_RE.test(name)) {
    return [(0, _createValidationResult.error)("Invalid field name: \"".concat(name, "\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ").concat(String(VALID_FIELD_RE), ")."), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }

  if (!CONVENTIONAL_FIELD_RE.test(name)) {
    return [(0, _createValidationResult.warning)('Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' + ' It may be wise to keep special characters out of field names for easier access later on.'), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID];
  }

  return [];
}

function validateField(field, _visitorContext) {
  if (!(0, _isPlainObject2.default)(field)) {
    return [(0, _createValidationResult.error)("Incorrect type for field definition - should be an object, saw ".concat((0, _inspect.default)(field)), _createValidationResult.HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE)];
  }

  var problems = [];
  problems.push(...('name' in field ? validateFieldName(field.name) : [(0, _createValidationResult.error)('Missing field name', _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)]));
  problems.push(...(0, _validateInputComponent.validateInputComponent)(field));
  return problems;
}

function getDuplicateFields(array) {
  var dupes = {};
  array.forEach(field => {
    if (!dupes[field.name]) {
      dupes[field.name] = [];
    }

    dupes[field.name].push(field);
  });
  return Object.keys(dupes).map(fieldName => dupes[fieldName].length > 1 ? dupes[fieldName] : null).filter(Boolean);
}

function validateFields(fields) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    allowEmpty: false
  };
  var problems = [];
  var fieldsIsArray = Array.isArray(fields);

  if (!fieldsIsArray) {
    return [(0, _createValidationResult.error)("The \"fields\" property must be an array of fields. Instead saw \"".concat(typeof fields, "\""), _createValidationResult.HELP_IDS.OBJECT_FIELDS_INVALID)];
  }

  var fieldsWithNames = fields.filter(field => typeof field.name === 'string');
  getDuplicateFields(fieldsWithNames).forEach(dupes => {
    problems.push((0, _createValidationResult.error)("Found ".concat(dupes.length, " fields with name \"").concat(dupes[0].name, "\" in object"), _createValidationResult.HELP_IDS.OBJECT_FIELD_NOT_UNIQUE));
  });

  if (fields.length === 0 && !options.allowEmpty) {
    problems.push((0, _createValidationResult.error)('Object should have at least one field', _createValidationResult.HELP_IDS.OBJECT_FIELDS_INVALID));
  }

  return problems;
}

function validatePreview(preview) {
  if (!(0, _isPlainObject2.default)(preview)) {
    return [(0, _createValidationResult.error)("The \"preview\" property must be an object, instead saw \"".concat(typeof preview, "\""))];
  }

  if (typeof preview.prepare !== 'undefined' && typeof preview.prepare !== 'function') {
    return [(0, _createValidationResult.error)("The \"preview.prepare\" property must be a function, instead saw \"".concat(typeof preview.prepare, "\""))];
  }

  if (!preview.select) {
    return [];
  }

  if (!(0, _isPlainObject2.default)(preview.select)) {
    return [(0, _createValidationResult.error)("The \"preview.select\" property must be an object, instead saw \"".concat(typeof preview.prepare, "\""))];
  }

  return Object.keys(preview.select).reduce((errs, key) => {
    return typeof preview.select[key] === 'string' ? errs : errs.concat((0, _createValidationResult.error)("The key \"".concat(key, "\" of \"preview.select\" must be a string, instead saw \"").concat(typeof preview.select[key], "\"")));
  }, []);
}

var _default = (typeDef, visitorContext) => {
  var problems = validateFields(typeDef.fields);
  var preview = typeDef.preview;

  if (preview) {
    var previewErrors = validatePreview(typeDef.preview);
    problems = problems.concat(previewErrors);
    preview = previewErrors.some(err => err.severity === 'error') ? {} : preview;
  }

  if (typeDef.type !== 'document' && typeDef.type !== 'object' && typeof typeDef.initialValue !== 'undefined') {
    problems.push((0, _createValidationResult.error)("The \"initialValue\" property is currently only supported for document & object types."));
  }

  return _objectSpread(_objectSpread({}, typeDef), {}, {
    preview,
    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {
      var name = field.name,
          fieldTypeDef = _objectWithoutProperties(field, _excluded);

      var _visitorContext$visit = visitorContext.visit(fieldTypeDef, index),
          _problems = _visitorContext$visit._problems,
          fieldType = _objectWithoutProperties(_visitorContext$visit, _excluded2);

      return _objectSpread(_objectSpread({
        name
      }, fieldType), {}, {
        _problems: validateField(field, visitorContext).concat(_problems || [])
      });
    }),
    _problems: problems
  });
};

exports.default = _default;