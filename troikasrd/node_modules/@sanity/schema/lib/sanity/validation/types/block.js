"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateBlockType;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _humanizeList = _interopRequireDefault(require("humanize-list"));

var _createValidationResult = require("../createValidationResult");

var _isJSONTypeOf = require("../utils/isJSONTypeOf");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getTypeOf = thing => Array.isArray(thing) ? 'array' : typeof thing;

var quote = str => "\"".concat(str, "\"");

var allowedKeys = ['type', 'styles', 'marks', 'lists', 'of', 'title', 'name'];
var allowedMarkKeys = ['decorators', 'annotations'];
var allowedStyleKeys = ['title', 'value', 'blockEditor'];
var allowedDecoratorKeys = ['title', 'value', 'blockEditor', 'icon'];

function validateBlockType(typeDef, visitorContext) {
  var problems = [];
  var styles = typeDef.styles;
  var marks = typeDef.marks;
  var members = typeDef.of;
  var disallowedKeys = Object.keys(typeDef).filter(key => !allowedKeys.includes(key) && !key.startsWith('_'));

  if (disallowedKeys.length > 0) {
    problems.push((0, _createValidationResult.error)("Found unknown properties for block declaration: ".concat((0, _humanizeList.default)(disallowedKeys.map(quote)))));
  }

  if (marks) {
    marks = validateMarks(typeDef.marks, visitorContext, problems);
  }

  if (styles) {
    styles = validateStyles(styles, visitorContext, problems);
  }

  if (members) {
    members = validateMembers(members, visitorContext, problems);
  }

  return _objectSpread(_objectSpread({}, (0, _omit2.default)(typeDef, disallowedKeys)), {}, {
    marks,
    styles,
    of: members,
    _problems: problems
  });
}

function validateMarks(marks, visitorContext, problems) {
  var decorators = marks.decorators;
  var annotations = marks.annotations;

  if (!(0, _isPlainObject2.default)(marks)) {
    problems.push((0, _createValidationResult.error)("\"marks\" declaration should be an object, got ".concat(getTypeOf(marks))));
    return problems;
  }

  var disallowedMarkKeys = Object.keys(marks).filter(key => !allowedMarkKeys.includes(key) && !key.startsWith('_'));

  if (disallowedMarkKeys.length > 0) {
    problems.push((0, _createValidationResult.error)("Found unknown properties for block declaration: ".concat((0, _humanizeList.default)(disallowedMarkKeys.map(quote)))));
  }

  if (decorators && !Array.isArray(decorators)) {
    problems.push((0, _createValidationResult.error)("\"marks.decorators\" declaration should be an array, got ".concat(getTypeOf(decorators))));
  } else if (decorators) {
    decorators = validateDecorators(decorators, visitorContext, problems);
  }

  if (annotations && !Array.isArray(annotations)) {
    problems.push((0, _createValidationResult.error)("\"marks.annotations\" declaration should be an array, got ".concat(getTypeOf(annotations))));
  } else if (annotations) {
    annotations = validateAnnotations(annotations, visitorContext, problems);
  }

  return _objectSpread(_objectSpread({}, marks), {}, {
    decorators,
    annotations
  });
}

function validateStyles(styles, visitorContext, problems) {
  if (!Array.isArray(styles)) {
    problems.push((0, _createValidationResult.error)("\"styles\" declaration should be an array, got ".concat(getTypeOf(styles))));
    return problems;
  }

  styles.forEach((style, index) => {
    if (!(0, _isPlainObject2.default)(style)) {
      problems.push((0, _createValidationResult.error)("Style must be an object, got ".concat(getTypeOf(style))));
      return;
    }

    var name = style.value || "#".concat(index);
    var disallowedKeys = Object.keys(style).filter(key => !allowedStyleKeys.includes(key) && !key.startsWith('_'));

    if (disallowedKeys.length > 0) {
      problems.push((0, _createValidationResult.error)("Found unknown properties for style ".concat(name, ": ").concat((0, _humanizeList.default)(disallowedKeys.map(quote)))));
    }

    if (!style.value) {
      problems.push((0, _createValidationResult.error)("Style #".concat(index, " is missing required \"value\" property")));
    } else if (typeof style.value !== 'string') {
      problems.push((0, _createValidationResult.error)("Style #".concat(index, " has an invalid \"value\" property, expected string, got ").concat(getTypeOf(style.value))));
    } else if (!style.title) {
      problems.push((0, _createValidationResult.warning)("Style ".concat(name, " is missing recommended \"title\" property")));
    }
  });
  return styles;
}

function validateDecorators(decorators, visitorContext, problems) {
  decorators.forEach((decorator, index) => {
    if (!(0, _isPlainObject2.default)(decorator)) {
      problems.push((0, _createValidationResult.error)("Annotation must be an object, got ".concat(getTypeOf(decorator))));
      return;
    }

    var name = decorator.value || "#".concat(index);
    var disallowedKeys = Object.keys(decorator).filter(key => !allowedDecoratorKeys.includes(key) && !key.startsWith('_'));

    if (disallowedKeys.length > 0) {
      problems.push((0, _createValidationResult.error)("Found unknown properties for decorator ".concat(name, ": ").concat((0, _humanizeList.default)(disallowedKeys.map(quote)))));
    }

    if (!decorator.value) {
      problems.push((0, _createValidationResult.error)("Decorator #".concat(index, " is missing required \"value\" property")));
    } else if (typeof decorator.value !== 'string') {
      problems.push((0, _createValidationResult.error)("Decorator #".concat(index, " has an invalid \"value\" property, expected string, got ").concat(getTypeOf(decorator.value))));
    } else if (!decorator.title) {
      problems.push((0, _createValidationResult.warning)("Decorator ".concat(name, " is missing recommended \"title\" property")));
    }
  });
  return decorators;
}

function validateAnnotations(annotations, visitorContext, problems) {
  return annotations.map(annotation => {
    if (!(0, _isPlainObject2.default)(annotation)) {
      return _objectSpread(_objectSpread({}, annotation), {}, {
        _problems: [(0, _createValidationResult.error)("Annotation must be an object, got ".concat(getTypeOf(annotation)))]
      });
    }

    var _visitorContext$visit = visitorContext.visit(annotation, visitorContext),
        _problems = _visitorContext$visit._problems;

    var targetType = annotation.type && visitorContext.getType(annotation.type);

    if (targetType && !(0, _isJSONTypeOf.isJSONTypeOf)(targetType, 'object', visitorContext)) {
      _problems.push((0, _createValidationResult.error)("Annotation cannot have type \"".concat(annotation.type, "\" - annotation types must inherit from object")));
    }

    return _objectSpread(_objectSpread({}, annotation), {}, {
      _problems
    });
  });
}

function validateMembers(members, visitorContext, problems) {
  if (!Array.isArray(members)) {
    problems.push((0, _createValidationResult.error)("\"of\" declaration should be an array, got ".concat(getTypeOf(members))));
    return undefined;
  }

  return members.map(member => {
    var _visitorContext$visit2 = visitorContext.visit(member, visitorContext),
        _problems = _visitorContext$visit2._problems;

    return _objectSpread(_objectSpread({}, member), {}, {
      _problems
    });
  });
}