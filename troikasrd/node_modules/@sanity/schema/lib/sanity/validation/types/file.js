"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _createValidationResult = require("../createValidationResult");

var _object = require("./object");

var _excluded = ["name"],
    _excluded2 = ["_problems"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (typeDef, visitorContext) => {
  var problems = [];
  var fields = typeDef.fields;

  if (fields) {
    problems.push(...(0, _object.validateFields)(fields, {
      allowEmpty: true
    }));
  }

  if (typeDef.options && typeof typeDef.options.metadata !== 'undefined' && !Array.isArray(typeDef.options.metadata)) {
    problems.push((0, _createValidationResult.error)("Invalid type for file `metadata` field - must be an array of strings", _createValidationResult.HELP_IDS.ASSET_METADATA_FIELD_INVALID));
  }

  return _objectSpread(_objectSpread({}, typeDef), {}, {
    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {
      var name = field.name,
          fieldTypeDef = _objectWithoutProperties(field, _excluded);

      var _visitorContext$visit = visitorContext.visit(fieldTypeDef, index),
          _problems = _visitorContext$visit._problems,
          fieldType = _objectWithoutProperties(_visitorContext$visit, _excluded2);

      return _objectSpread(_objectSpread({
        name
      }, fieldType), {}, {
        _problems: (0, _object.validateField)(field, visitorContext).concat(_problems || [])
      });
    }),
    _problems: problems
  });
};

exports.default = _default;