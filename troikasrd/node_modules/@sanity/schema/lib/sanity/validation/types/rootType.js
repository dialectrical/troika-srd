"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _createValidationResult = require("../createValidationResult");

var _validateInputComponent = require("../utils/validateInputComponent");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (typeDef, visitorContext) => {
  var hasName = Boolean(typeDef.name);

  if (!hasName && Object.keys(typeDef).length === 1) {
    // Short-circuit on obviously invalid types (only key is _problems)
    return _objectSpread(_objectSpread({}, typeDef), {}, {
      _problems: [(0, _createValidationResult.error)('Invalid/undefined type declaration, check declaration or the import/export of the schema type.', _createValidationResult.HELP_IDS.TYPE_INVALID)]
    });
  }

  var problems = [];

  if (looksLikeEsmModule(typeDef)) {
    problems.push((0, _createValidationResult.error)('Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property', _createValidationResult.HELP_IDS.TYPE_IS_ESM_MODULE));
  } else if (!hasName) {
    problems.push((0, _createValidationResult.error)('Missing type name', _createValidationResult.HELP_IDS.TYPE_MISSING_NAME));
  } else if (visitorContext.isReserved(typeDef.name)) {
    problems.push((0, _createValidationResult.error)("Invalid type name: \"".concat(typeDef.name, "\" is a reserved name."), _createValidationResult.HELP_IDS.TYPE_NAME_RESERVED));
  }

  if (visitorContext.isDuplicate(typeDef.name)) {
    problems.push((0, _createValidationResult.error)("Invalid type name: A type with name \"".concat(typeDef.name, "\" is already defined in the schema.")));
  }

  problems.push(...(0, _validateInputComponent.validateInputComponent)(typeDef));

  if (!('title' in typeDef)) {
    problems.push((0, _createValidationResult.warning)("Type is missing title. It's recommended to always set a descriptive title.", _createValidationResult.HELP_IDS.TYPE_TITLE_RECOMMENDED));
  } else if (typeof typeDef.title !== 'string') {
    problems.push((0, _createValidationResult.warning)('Type title is not a string.', _createValidationResult.HELP_IDS.TYPE_TITLE_INVALID));
  }

  return _objectSpread(_objectSpread({}, typeDef), {}, {
    _problems: problems
  });
};

exports.default = _default;

function looksLikeEsmModule(typeDef) {
  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title);
}