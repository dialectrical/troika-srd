"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveSearchConfig;

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stringFieldsSymbol = Symbol('__cachedStringFields');

var isReference = type => type.type && type.type.name === 'reference';

var portableTextFields = ['style', 'list'];

var isPortableTextBlock = type => type.name === 'block' || type.type && isPortableTextBlock(type.type);

var isPortableTextArray = type => type.jsonType === 'array' && Array.isArray(type.of) && type.of.some(isPortableTextBlock);

function reduceType(type, reducer, acc) {
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var maxDepth = arguments.length > 4 ? arguments[4] : undefined;

  if (maxDepth < 0) {
    return acc;
  }

  var accumulator = reducer(acc, type, path);

  if (type.jsonType === 'array' && Array.isArray(type.of)) {
    return reduceArray(type, reducer, accumulator, path, maxDepth);
  }

  if (type.jsonType === 'object' && Array.isArray(type.fields) && !isReference(type)) {
    return reduceObject(type, reducer, accumulator, path, maxDepth);
  }

  return accumulator;
}

function reduceArray(arrayType, reducer, accumulator, path, maxDepth) {
  return arrayType.of.reduce((acc, ofType) => reduceType(ofType, reducer, acc, path, maxDepth - 1), accumulator);
}

function reduceObject(objectType, reducer, accumulator, path, maxDepth) {
  var isPtBlock = isPortableTextBlock(objectType);
  return objectType.fields.reduce((acc, field) => {
    // Don't include styles and list types as searchable paths for portable text blocks
    if (isPtBlock && portableTextFields.includes(field.name)) {
      return acc;
    }

    var segment = [field.name].concat(field.type.jsonType === 'array' ? [[]] : []);
    return reduceType(field.type, reducer, acc, path.concat(segment), maxDepth - 1);
  }, accumulator);
}

var BASE_WEIGHTS = [{
  weight: 1,
  path: ['_id']
}, {
  weight: 1,
  path: ['_type']
}];
var PREVIEW_FIELD_WEIGHT_MAP = {
  title: 10,
  subtitle: 5,
  description: 1.5
};

function deriveFromPreview(type) {
  var select = type.preview.select;
  return Object.keys(select).filter(fieldName => fieldName in PREVIEW_FIELD_WEIGHT_MAP).map(fieldName => ({
    weight: PREVIEW_FIELD_WEIGHT_MAP[fieldName],
    path: select[fieldName].split('.')
  }));
}

function getCachedStringFieldPaths(type, maxDepth) {
  if (!type[stringFieldsSymbol]) {
    type[stringFieldsSymbol] = (0, _uniqBy2.default)([...BASE_WEIGHTS, ...deriveFromPreview(type), ...getStringFieldPaths(type, maxDepth).map(path => ({
      weight: 1,
      path
    })), ...getPortableTextFieldPaths(type, maxDepth).map(path => ({
      weight: 1,
      path,
      mapWith: 'pt::text'
    }))], spec => spec.path.join('.'));
  }

  return type[stringFieldsSymbol];
}

function getStringFieldPaths(type, maxDepth) {
  var reducer = (accumulator, childType, path) => childType.jsonType === 'string' ? [...accumulator, path] : accumulator;

  return reduceType(type, reducer, [], [], maxDepth);
}

function getPortableTextFieldPaths(type, maxDepth) {
  var reducer = (accumulator, childType, path) => isPortableTextArray(childType) ? [...accumulator, path] : accumulator;

  return reduceType(type, reducer, [], [], maxDepth);
}

function resolveSearchConfig(type) {
  return getCachedStringFieldPaths(type, 4);
}