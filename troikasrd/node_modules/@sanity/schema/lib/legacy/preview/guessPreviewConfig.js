"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = guessPreviewFields;

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _omitBy2 = _interopRequireDefault(require("lodash/omitBy"));

var _arrify = _interopRequireDefault(require("arrify"));

var _fallbackPrepare = require("./fallbackPrepare");

var _portableText = require("./portableText");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TITLE_CANDIDATES = ['title', 'name', 'label', 'heading', 'header', 'caption'];
var DESCRIPTION_CANDIDATES = ['description', ...TITLE_CANDIDATES];

function fieldHasReferenceTo(fieldDef, refType) {
  return (0, _arrify.default)(fieldDef.to || []).some(memberTypeDef => memberTypeDef.type === refType);
}

function isImageAssetField(fieldDef) {
  return fieldHasReferenceTo(fieldDef, 'sanity.imageAsset');
}

function resolveImageAssetPath(typeDef) {
  var fields = typeDef.fields || [];
  var imageAssetField = fields.find(isImageAssetField);

  if (imageAssetField) {
    return imageAssetField.name;
  }

  var fieldWithImageAsset = fields.find(fieldDef => (fieldDef.fields || []).some(isImageAssetField));
  return fieldWithImageAsset ? "".concat(fieldWithImageAsset.name, ".asset") : undefined;
}

function isFileAssetField(fieldDef) {
  return fieldHasReferenceTo(fieldDef, 'sanity.fileAsset');
}

function resolveFileAssetPath(typeDef) {
  var fields = typeDef.fields || [];
  var assetField = fields.find(isFileAssetField);

  if (assetField) {
    return assetField.name;
  }

  var fieldWithFileAsset = fields.find(fieldDef => (fieldDef.fields || []).some(isFileAssetField));
  return fieldWithFileAsset ? "".concat(fieldWithFileAsset.name, ".asset") : undefined;
}

function guessPreviewFields(rawObjectTypeDef) {
  var objectTypeDef = _objectSpread({
    fields: []
  }, rawObjectTypeDef);

  var stringFieldNames = objectTypeDef.fields.filter(field => field.type === 'string').map(field => field.name);
  var blockFieldNames = objectTypeDef.fields.filter(_portableText.isBlockField).map(field => field.name); // Check if we have fields with names that is listed in candidate fields

  var titleField = TITLE_CANDIDATES.find(candidate => stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate));
  var descField = DESCRIPTION_CANDIDATES.find(candidate => candidate !== titleField && (stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate)));

  if (!titleField) {
    // Pick first defined string field
    titleField = stringFieldNames[0] || blockFieldNames[0]; // Pick next as desc

    descField = stringFieldNames[1] || blockFieldNames[1];
  }

  var mediaField = objectTypeDef.fields.find(field => field.type === 'image');
  var imageAssetPath = resolveImageAssetPath(objectTypeDef);

  if (!titleField) {
    var fileAssetPath = resolveFileAssetPath(objectTypeDef);

    if (fileAssetPath) {
      titleField = "".concat(fileAssetPath, ".originalFilename");
    }

    if (imageAssetPath) {
      titleField = "".concat(imageAssetPath, ".originalFilename");
    }
  }

  if (!titleField && !imageAssetPath) {
    // last resort, pick all fields and concat them
    var fieldNames = objectTypeDef.fields.map(field => field.name);
    var fieldMapping = fieldNames.reduce((acc, fieldName) => {
      acc[fieldName] = fieldName;
      return acc;
    }, {});
    return {
      select: fieldMapping,
      prepare: (0, _fallbackPrepare.createFallbackPrepare)(fieldNames)
    };
  }

  var select = (0, _omitBy2.default)({
    title: titleField,
    description: descField,
    imageUrl: !mediaField && imageAssetPath ? "".concat(imageAssetPath, ".url") : undefined,
    media: mediaField ? mediaField.name : undefined
  }, _isUndefined2.default);
  return {
    select: select
  };
}