"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageType = void 0;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _createPreviewGetter = _interopRequireDefault(require("../preview/createPreviewGetter"));

var _utils = require("./utils");

var _fieldDefs = require("./image/fieldDefs");

var _constants = require("./constants");

var _excluded = ["name"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var OVERRIDABLE_FIELDS = [..._constants.DEFAULT_OVERRIDEABLE_FIELDS];
var IMAGE_CORE = {
  name: 'image',
  type: null,
  jsonType: 'object'
};
var DEFAULT_OPTIONS = {};
var ImageType = {
  get() {
    return IMAGE_CORE;
  },

  extend(subTypeDef, extendMember) {
    var options = _objectSpread({}, subTypeDef.options || DEFAULT_OPTIONS);

    var hotspotFields = [_fieldDefs.HOTSPOT_FIELD, _fieldDefs.CROP_FIELD];

    if (!options.hotspot) {
      hotspotFields = hotspotFields.map(field => _objectSpread(_objectSpread({}, field), {}, {
        hidden: true
      }));
    }

    var fields = [_fieldDefs.ASSET_FIELD, ...hotspotFields, ...(subTypeDef.fields || [])];
    var parsed = Object.assign((0, _pick2.default)(IMAGE_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
      type: IMAGE_CORE,
      title: subTypeDef.title || (0, _startCase2.default)(subTypeDef.name || subTypeDef.type || ''),
      options: options,
      isCustomized: Boolean(subTypeDef.fields)
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        var name = fieldDef.name,
            type = _objectWithoutProperties(fieldDef, _excluded);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(Object.assign({}, subTypeDef, {
      fields
    })));
    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },

        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "image"');
          }

          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, OVERRIDABLE_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }

};
exports.ImageType = ImageType;