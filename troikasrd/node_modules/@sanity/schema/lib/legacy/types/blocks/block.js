"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockType = void 0;

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _utils = require("../utils");

var _createPreviewGetter = _interopRequireDefault(require("../../preview/createPreviewGetter"));

var _defaults = require("./defaults");

var _excluded = ["marks", "styles", "lists", "of"],
    _excluded2 = ["name"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var INHERITED_FIELDS = ['type', 'name', 'title', 'jsonType', 'description', 'options', 'fieldsets', 'icon'];
var BLOCK_CORE = {
  name: 'block',
  type: null,
  jsonType: 'object'
};
var DEFAULT_OPTIONS = {};
var BlockType = {
  get() {
    return BLOCK_CORE;
  },

  extend(subTypeDef, extendMember) {
    var options = _objectSpread({}, subTypeDef.options || DEFAULT_OPTIONS);

    var marks = subTypeDef.marks,
        styles = subTypeDef.styles,
        lists = subTypeDef.lists,
        of = subTypeDef.of,
        rest = _objectWithoutProperties(subTypeDef, _excluded);

    var spansField = createSpansField(marks, of);
    var stylesField = createStylesField(styles);
    var listsField = createListsField(lists);
    var fields = [spansField, stylesField, listsField].concat(subTypeDef.fields || []);
    var parsed = Object.assign((0, _pick2.default)(BLOCK_CORE, INHERITED_FIELDS), rest, {
      type: BLOCK_CORE,
      options: options
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        var name = fieldDef.name,
            type = _objectWithoutProperties(fieldDef, _excluded2);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(subTypeDef));
    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },

        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "block"');
          }

          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, INHERITED_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }

};
exports.BlockType = BlockType;

function ensureNormalStyle(styles) {
  return styles.some(style => style.value === 'normal') ? styles : [_defaults.BLOCK_STYLES.normal, ...styles];
}

function createStylesField(styles) {
  return {
    name: 'style',
    title: 'Style',
    type: 'string',
    options: {
      list: ensureNormalStyle(styles || _defaults.DEFAULT_BLOCK_STYLES)
    }
  };
}

function createListsField(lists) {
  return {
    name: 'list',
    title: 'List type',
    type: 'string',
    options: {
      list: lists || _defaults.DEFAULT_LIST_TYPES
    }
  };
}

var DEFAULT_ANNOTATIONS = [_defaults.DEFAULT_LINK_ANNOTATION];

function createSpansField(marks) {
  var of = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    name: 'children',
    title: 'Content',
    type: 'array',
    of: [{
      type: 'span',
      fields: [_defaults.DEFAULT_TEXT_FIELD, _defaults.DEFAULT_MARKS_FIELD],
      annotations: marks && marks.annotations ? marks.annotations : DEFAULT_ANNOTATIONS,
      decorators: marks && marks.decorators ? marks.decorators : _defaults.DEFAULT_DECORATORS
    }, ...of.filter(memberType => memberType.type !== 'span')]
  };
}