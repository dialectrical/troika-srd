"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanType = void 0;

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _utils = require("../utils");

var _createPreviewGetter = _interopRequireDefault(require("../../preview/createPreviewGetter"));

var _excluded = ["name"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var INHERITED_FIELDS = ['type', 'name', 'title', 'jsonType', 'description', 'options', 'fieldsets', 'icon'];
var SPAN_CORE = {
  name: 'span',
  type: null,
  jsonType: 'object'
};
var MARKS_FIELD = {
  name: 'marks',
  title: 'Marks',
  type: 'array',
  of: [{
    type: 'string'
  }]
};
var TEXT_FIELD = {
  name: 'text',
  title: 'Text',
  type: 'string'
};
var DEFAULT_OPTIONS = {};
var SpanType = {
  get() {
    return SPAN_CORE;
  },

  extend(subTypeDef, extendMember) {
    var options = _objectSpread({}, subTypeDef.options || DEFAULT_OPTIONS);

    var _subTypeDef$annotatio = subTypeDef.annotations,
        annotations = _subTypeDef$annotatio === void 0 ? [] : _subTypeDef$annotatio,
        _subTypeDef$marks = subTypeDef.marks,
        marks = _subTypeDef$marks === void 0 ? [] : _subTypeDef$marks;
    var fields = [MARKS_FIELD, TEXT_FIELD];
    var parsed = Object.assign((0, _pick2.default)(SPAN_CORE, INHERITED_FIELDS), subTypeDef, {
      type: SPAN_CORE,
      options: options
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        var name = fieldDef.name,
            type = _objectWithoutProperties(fieldDef, _excluded);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });
    (0, _utils.lazyGetter)(parsed, 'annotations', () => annotations.map(extendMember));
    (0, _utils.lazyGetter)(parsed, 'marks', () => marks.map(extendMember));
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(subTypeDef));
    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },

        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "span"');
          }

          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, INHERITED_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }

};
exports.SpanType = SpanType;