export interface TypeDef {
    name: string;
    type: string;
    title?: string;
    description?: string;
    options?: Record<string, any>;
}
export declare type SchemaDef = {
    name: string;
    types: Array<TypeDef>;
};
export declare type Severity = 'warning' | 'info' | 'error';
export declare type ValidationResult = {
    severity: Severity;
    message: string;
    helpId?: string;
};
export declare type MemberValidator = (def: TypeDef) => Array<ValidationResult>;
export declare type TypeFactory = {
    get(): TypeFactory;
    extend: (def: TypeDef) => TypeFactory;
};
export declare type Registry = {
    [name: string]: TypeFactory;
};
export declare type IndexedTypes = {
    [name: string]: TypeDef;
};
export declare type Validators = {
    [name: string]: {
        validate: (TypeDef: any, MemberValidator: any) => Array<ValidationResult>;
        validateMember: (def: TypeDef) => Array<ValidationResult>;
    };
};
export interface ProblemType {
    _problems: Problem[];
}
export interface Problem {
}
export interface TypeWithProblems {
    path: any[];
    problems: Problem[];
}
//# sourceMappingURL=typedefs.d.ts.map