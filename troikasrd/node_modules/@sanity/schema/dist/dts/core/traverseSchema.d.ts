declare type SchemaType = Record<string, any>;
declare type SchemaTypeDef = Record<string, any>;
declare type VisitContext = {
    isRoot: boolean;
    isReserved: (typeName: string) => boolean;
    visit: Visitor;
    index: number;
    isDuplicate: (typeName: string) => boolean;
    getType: (typeName: string) => null | SchemaType;
    getTypeNames: () => Array<string>;
};
declare type Visitor = (typeDef: SchemaTypeDef, arg1: VisitContext) => SchemaType;
export declare class UnknownType {
    name: string;
    constructor(name: string);
}
export default function traverseSchema(types?: Array<SchemaTypeDef>, coreTypes?: Array<SchemaTypeDef>, visitor?: Visitor): {
    get(typeName: string): any;
    has(typeName: string): boolean;
    getTypeNames(): string[];
    getTypes(): any;
    toJSON(): any;
};
export {};
//# sourceMappingURL=traverseSchema.d.ts.map