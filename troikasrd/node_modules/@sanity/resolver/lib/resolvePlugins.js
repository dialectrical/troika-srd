"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvePlugins = resolvePlugins;
exports.resolvePlugin = resolvePlugin;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _pathExists = _interopRequireDefault(require("path-exists"));

var _readManifest = _interopRequireDefault(require("./readManifest"));

var _promisePropsRecursive = _interopRequireDefault(require("promise-props-recursive"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dirMatcher = /^\.\.?[/\\]?/;

function resolvePlugins(pluginNames, options) {
  var plugins = pluginNames.map(pluginName => {
    return resolvePlugin(Object.assign({
      name: pluginName
    }, options));
  });
  return options.sync ? plugins : Promise.all(plugins);
}

function resolvePlugin(options) {
  var name = options.name,
      basePath = options.basePath,
      parentPluginPath = options.parentPluginPath,
      sync = options.sync,
      env = options.env;
  var resolver = sync ? dir => dir : dir => Promise.resolve(dir);
  var parentDir = parentPluginPath || basePath;
  var isDirPlugin = dirMatcher.test(name);
  var pluginName = isDirPlugin ? readPluginName(parentDir, name) : name;

  if (sync) {
    var manifestDir = isDirPlugin ? resolver(_path.default.resolve(parentDir, name)) : resolvePluginPath({
      name,
      basePath,
      parentPluginPath
    }, sync);
    var manifest = (0, _readManifest.default)({
      sync,
      basePath,
      manifestDir,
      plugin: pluginName
    });
    return {
      name: pluginName,
      manifest,
      path: manifestDir,
      plugins: resolvePlugins(manifest.plugins || [], {
        env,
        sync,
        basePath,
        parentPluginPath: manifestDir
      })
    };
  }

  var dirResolver = Promise.resolve(isDirPlugin ? resolver(_path.default.resolve(parentDir, name)) : resolvePluginPath({
    name,
    basePath,
    parentPluginPath
  }, sync));
  return dirResolver.then(manifestDir => {
    var plugin = {
      name: pluginName,
      path: manifestDir
    };
    return (0, _readManifest.default)({
      basePath,
      manifestDir: plugin.path,
      plugin: pluginName,
      env
    }).then(manifest => (0, _promisePropsRecursive.default)(Object.assign(plugin, {
      manifest,
      plugins: resolvePlugins(manifest.plugins || [], {
        env,
        basePath,
        parentPluginPath: plugin.path
      })
    })));
  });
}

function resolvePluginPath(plugin, sync) {
  var pluginDir = plugin.name[0] === '@' ? plugin.name : "sanity-plugin-".concat(plugin.name);
  var locations = [_path.default.join(plugin.basePath, 'plugins', pluginDir), _path.default.join(plugin.basePath, 'plugins', plugin.name), _path.default.join(plugin.basePath, 'node_modules', pluginDir)];

  if (plugin.parentPluginPath) {
    locations.splice(2, 0, _path.default.join(plugin.parentPluginPath, 'node_modules', pluginDir));
  }

  var currentDir = plugin.basePath;

  while (_path.default.dirname(currentDir) !== currentDir) {
    currentDir = _path.default.dirname(currentDir);
    locations.push(_path.default.join(currentDir, 'node_modules', pluginDir));
  }

  locations = (0, _uniq2.default)(locations);

  if (sync) {
    var location = locations.find(_pathExists.default.sync);

    if (!location) {
      throw getPluginNotFoundError(plugin.name, locations);
    }

    return location;
  }

  return Promise.all(locations.map(_pathExists.default)).then(matches => matches.findIndex(Boolean)).then(index => {
    if (index === -1) {
      throw getPluginNotFoundError(plugin.name, locations);
    }

    return locations[index];
  });
}

function getPluginNotFoundError(pluginName, locations) {
  var err = new Error(["Plugin \"".concat(pluginName, "\" not found.\n"), 'Locations tried:\n  * ', locations.join('\n  * ')].join(''));
  err.code = 'PluginNotFound';
  err.plugin = pluginName;
  err.locations = locations;
  return err;
}

function readPluginName(parent, dir) {
  var pkgPath = _path.default.join(parent, dir, 'package.json');

  var manifestPath = _path.default.join(parent, dir, 'sanity.json');

  var baseError = "Plugin/project at \"".concat(parent, "\" has the path \"").concat(dir, "\" as a plugin, but Sanity was not able to load");
  var info = {};

  try {
    info.name = readJson(pkgPath).name.replace(/^sanity-plugin-/, '');
  } catch (err) {
    throw new Error("".concat(baseError, " \"").concat(pkgPath, "\" in order to get the plugin name"));
  }

  try {
    info.manifest = readJson(manifestPath);
  } catch (err) {
    throw new Error("".concat(baseError, " \"").concat(manifestPath, "\" in order to get the plugin parts"));
  }

  return info.name;
}

function readJson(file) {
  return JSON.parse(_fs.default.readFileSync(file, {
    encoding: 'utf8'
  }));
}