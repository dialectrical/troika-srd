"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateManifest;

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var matchers = {
  partPrefix: /^part:/,
  partPackage: /^part:[@A-Za-z0-9_-]+\//,
  partComponent: /^part:[@A-Za-z0-9_-]+\/[A-Za-z0-9_/-]+/,
  partMultiPrefixed: /:.*?:/
};

function validateManifest(manifest, plugin) {
  var hasPlugins = isDefined(manifest.plugins);

  if (hasPlugins && !Array.isArray(manifest.plugins)) {
    throw new Error("Plugin \"".concat(plugin, "\" has a non-array \"plugins\" property. Must be an array."));
  }

  if (hasPlugins && manifest.plugins.some(hasDuplicate)) {
    throw new Error("Plugin \"".concat(plugin, "\" has duplicate values in its \"plugins\" property."));
  }

  if (isDefined(manifest.parts) && !Array.isArray(manifest.parts)) {
    throw new Error("Plugin \"".concat(plugin, "\" has a non-array \"parts\" property. Must be an array."));
  }

  ;
  (manifest.parts || []).forEach((part, i) => {
    var baseError = "Part defined at index ".concat(i, " of plugin \"").concat(plugin, "\" is invalid");
    var isImplementation = isDefined(part.path);
    var hasPart = isDefined(part.name) || isDefined(part.implements);

    if (isImplementation && !hasPart) {
      throw new Error([baseError, 'A part that has a defined `path` needs to also define either `name` or `implements`', "See ".concat((0, _generateHelpUrl.default)('plugin-parts-syntax'))].join('\n'));
    }

    if (!isDefined(part.path) && !isDefined(part.description)) {
      throw new Error([baseError, 'A part that has not defined a `path` needs to include a `description`', "See ".concat((0, _generateHelpUrl.default)('plugin-parts-syntax'))].join('\n'));
    }

    if (isDefined(part.name)) {
      validatePartName(part.name, baseError);
    }

    if (isDefined(part.implements)) {
      validatePartName(part.implements, baseError);
    }

    if (isDefined(part.description)) {
      validateDescription(part.description, baseError);
    }
  });
  return manifest;
}

function validateDescription(desc, baseError) {
  if (typeof desc !== 'string' || desc.trim().length === 0) {
    throw new Error("".concat(baseError, "\nDescription must be a non-empty string"));
  }
}

function validatePartName(name, baseError) {
  var examples = ['Examples:', '- part:package-name/part-name', '- part:package-name/part-name-style', '', "See ".concat((0, _generateHelpUrl.default)('part-name-format'))].join('\n');

  if (name.indexOf('all:') !== -1) {
    throw new Error("".concat(baseError, "\nPart \"").concat(name, "\" is invalid - can't contain \"all:\". ").concat(examples));
  }

  if (matchers.partMultiPrefixed.test(name)) {
    throw new Error("".concat(baseError, "\nPart \"").concat(name, "\" is invalid - can't contain multiple \":\". ").concat(examples));
  }

  if (!matchers.partPrefix.test(name)) {
    throw new Error("".concat(baseError, "\nPart \"").concat(name, "\" is invalid - it needs a \"part:\"-prefix. ").concat(examples));
  }

  if (!matchers.partPackage.test(name)) {
    throw new Error("".concat(baseError, "\nPart \"").concat(name, "\" is invalid - it needs to include the plugin name. ").concat(examples));
  }

  if (!matchers.partComponent.test(name)) {
    throw new Error("".concat(baseError, "\nPart \"").concat(name, "\" is invalid - it needs to include a name after the plugin name. ").concat(examples));
  }
}

function isDefined(thing) {
  return typeof thing !== 'undefined';
}

function hasDuplicate(value, index, array) {
  return array.indexOf(value, index + 1) !== -1;
}