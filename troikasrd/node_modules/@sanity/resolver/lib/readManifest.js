"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var _util = require("@sanity/util");

var _validateManifest = _interopRequireDefault(require("./validateManifest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-sync, no-process-env */
function readManifestSync(manifestPath, options) {
  try {
    return parseManifest(_fsExtra.default.readFileSync(manifestPath), options);
  } catch (err) {
    return handleManifestReadError(err, options);
  }
}

function handleManifestReadError(err, options) {
  if (err.code === 'ENOENT' && options.plugin) {
    var base = "No \"sanity.json\" file found in plugin \"".concat(options.plugin, "\"");
    var help = "See ".concat((0, _generateHelpUrl.default)('missing-plugin-sanity-json'));
    throw new Error("".concat(base, "\n").concat(help));
  } else if (err.name === 'ValidationError' && options.plugin) {
    err.message = "Error while reading \"".concat(options.plugin, "\" manifest:\n").concat(err.message);
  } else if (err.name === 'ValidationError') {
    err.message = "Error while reading \"".concat(options.basePath, "/sanity.json\":\n").concat(err.message);
  }

  throw err;
}

function parseManifest(rawData, options) {
  var parsedManifest = JSON.parse(rawData);
  var manifest = (0, _validateManifest.default)(parsedManifest);
  var reduced = (0, _util.reduceConfig)(manifest, options.env, {
    studioRootPath: options.basePath || process.cwd()
  });
  return reduced;
}

function readManifest() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var env = process.env.NODE_ENV || opts.env || 'development';
  var options = Object.assign({
    env
  }, opts);
  var basePath = options.basePath || process.cwd();

  var manifestPath = _path.default.join(options.manifestDir || basePath, 'sanity.json');

  if (options.sync) {
    return readManifestSync(manifestPath, options);
  }

  return _fsExtra.default.readFile(manifestPath, {
    encoding: 'utf8'
  }).then(raw => parseManifest(raw, options)).catch(err => handleManifestReadError(err, options));
}

var _default = readManifest;
exports.default = _default;